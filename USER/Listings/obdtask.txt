; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\obj\obdtask.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=..\obj\obdtask.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\OBD -I..\SYSTEM -I..\USER -I..\LIB\inc -I..\UCOSII\CONFIG -I..\UCOSII\PORT -I..\UCOSII\CORE -I..\HAEDWARE -I..\GPS -I..\CDMA -I..\DEAL -I..\USB\CONFIG -I..\USB\STM32_USB-FS-Device_Driver\inc -I..\CORE -I.\RTE\_Project -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\5.2.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=524 -D_RTE_ -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\obdtask.crf ..\OBD\OBDTask.c]
                          THUMB

                          AREA ||i.CANTestChannel||, CODE, READONLY, ALIGN=2

                  CANTestChannel PROC
;;;164    
;;;165    void CANTestChannel(void )
000000  b57f              PUSH     {r0-r6,lr}
;;;166    {
;;;167    	uint8_t err,i;
;;;168    	CanRxMsg* CAN1_RxMsg;
;;;169    	uint8_t*  ptrOK;
;;;170    	CAN_InitTypeDef   CAN_InitStructure;
;;;171    	
;;;172    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN1, ENABLE);//使能CAN1时钟
000002  2101              MOVS     r1,#1
000004  0648              LSLS     r0,r1,#25
000006  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;173    
;;;174    	varOperation.canTest = 0;
00000a  2000              MOVS     r0,#0
00000c  4992              LDR      r1,|L1.600|
00000e  f8a10090          STRH     r0,[r1,#0x90]
;;;175    	for(i = 0;i<NUMOfCANBaud;i++)       //获得CAN的波特率
000012  2400              MOVS     r4,#0
000014  e02b              B        |L1.110|
                  |L1.22|
;;;176    	{
;;;177    		CAN_DeInit(CAN1);
000016  4891              LDR      r0,|L1.604|
000018  f7fffffe          BL       CAN_DeInit
;;;178    		CAN_StructInit(&CAN_InitStructure);
00001c  4668              MOV      r0,sp
00001e  f7fffffe          BL       CAN_StructInit
;;;179    		CAN1_BaudSet(canBaudEnum[i]); 
000022  498f              LDR      r1,|L1.608|
000024  5d08              LDRB     r0,[r1,r4]
000026  f7fffffe          BL       CAN1_BaudSet
;;;180    		CAN1_ClearFilter();
00002a  f7fffffe          BL       CAN1_ClearFilter
;;;181    		CAN_ITConfig(CAN1,CAN_IT_FMP1,ENABLE);
00002e  2201              MOVS     r2,#1
000030  2110              MOVS     r1,#0x10
000032  488a              LDR      r0,|L1.604|
000034  f7fffffe          BL       CAN_ITConfig
;;;182    		
;;;183    		//只要此波特率下有数据，CAN波特率就确定了
;;;184    		CAN1_RxMsg = OSQPend(canRecieveQ,500,&err);
000038  aa03              ADD      r2,sp,#0xc
00003a  f44f71fa          MOV      r1,#0x1f4
00003e  4889              LDR      r0,|L1.612|
000040  6800              LDR      r0,[r0,#0]  ; canRecieveQ
000042  f7fffffe          BL       OSQPend
000046  4606              MOV      r6,r0
;;;185    		if(err == OS_ERR_NONE)
000048  f89d000c          LDRB     r0,[sp,#0xc]
00004c  b968              CBNZ     r0,|L1.106|
;;;186    		{
;;;187    			varOperation.canBaud = canBaudEnum[i];
00004e  4884              LDR      r0,|L1.608|
000050  5d00              LDRB     r0,[r0,r4]
000052  4981              LDR      r1,|L1.600|
000054  f881008f          STRB     r0,[r1,#0x8f]
;;;188    			Mem_free(CAN1_RxMsg);
000058  4630              MOV      r0,r6
00005a  f7fffffe          BL       Mem_free
;;;189    			LogReport("Baud %d Test Success.",canBaudEnum[i]);
00005e  4880              LDR      r0,|L1.608|
000060  5d01              LDRB     r1,[r0,r4]
000062  a081              ADR      r0,|L1.616|
000064  f7fffffe          BL       LogReport
;;;190    			break;
000068  e003              B        |L1.114|
                  |L1.106|
00006a  1c60              ADDS     r0,r4,#1              ;175
00006c  b2c4              UXTB     r4,r0                 ;175
                  |L1.110|
00006e  2c03              CMP      r4,#3                 ;175
000070  dbd1              BLT      |L1.22|
                  |L1.114|
000072  bf00              NOP      
;;;191    		}
;;;192    	}//如果波特率没有确定就上报日志并退出
;;;193    	if((i >= NUMOfCANBaud) && (err != OS_ERR_NONE))
000074  2c03              CMP      r4,#3
000076  db0a              BLT      |L1.142|
000078  f89d000c          LDRB     r0,[sp,#0xc]
00007c  b138              CBZ      r0,|L1.142|
;;;194    	{
;;;195    		LogReport("Baud Test Fail!!!");
00007e  a080              ADR      r0,|L1.640|
000080  f7fffffe          BL       LogReport
;;;196    		varOperation.canTest = 0;
000084  2000              MOVS     r0,#0
000086  4974              LDR      r1,|L1.600|
000088  f8a10090          STRH     r0,[r1,#0x90]
;;;197    		goto idOK;
00008c  e0de              B        |L1.588|
                  |L1.142|
;;;198    	}
;;;199    	dataToSend.ide = CAN_ID_EXT;
00008e  2004              MOVS     r0,#4
000090  4980              LDR      r1,|L1.660|
000092  6048              STR      r0,[r1,#4]  ; dataToSend
;;;200    	for(i=0;i<NUMOfCANID_EXT;i++)
000094  2400              MOVS     r4,#0
000096  e0cc              B        |L1.562|
                  |L1.152|
;;;201    	{
;;;202    		varOperation.canRxId  =(canIdExt[i]>>24) &0x000000FF;
000098  487f              LDR      r0,|L1.664|
00009a  f8500024          LDR      r0,[r0,r4,LSL #2]
00009e  0e00              LSRS     r0,r0,#24
0000a0  496d              LDR      r1,|L1.600|
0000a2  f8c1008b          STR      r0,[r1,#0x8b]  ; varOperation
;;;203    		varOperation.canRxId  =(varOperation.canRxId  << 8)+((canIdExt[i]>>16) & 0x000000FF);
0000a6  487c              LDR      r0,|L1.664|
0000a8  f8500024          LDR      r0,[r0,r4,LSL #2]
0000ac  f3c04007          UBFX     r0,r0,#16,#8
0000b0  f8d1108b          LDR      r1,[r1,#0x8b]  ; varOperation
0000b4  eb002001          ADD      r0,r0,r1,LSL #8
0000b8  4967              LDR      r1,|L1.600|
0000ba  f8c1008b          STR      r0,[r1,#0x8b]  ; varOperation
;;;204    		varOperation.canRxId  =(varOperation.canRxId  << 8)+(canIdExt[i]&0x000000FF);
0000be  4608              MOV      r0,r1
0000c0  f8d0108b          LDR      r1,[r0,#0x8b]  ; varOperation
0000c4  4874              LDR      r0,|L1.664|
0000c6  f8500024          LDR      r0,[r0,r4,LSL #2]
0000ca  f361201f          BFI      r0,r1,#8,#24
0000ce  4962              LDR      r1,|L1.600|
0000d0  f8c1008b          STR      r0,[r1,#0x8b]  ; varOperation
;;;205    		varOperation.canRxId  =(varOperation.canRxId  << 8)+((canIdExt[i]>>8) &0x000000FF);
0000d4  4870              LDR      r0,|L1.664|
0000d6  f8300024          LDRH     r0,[r0,r4,LSL #2]
0000da  f3c02007          UBFX     r0,r0,#8,#8
0000de  f8d1108b          LDR      r1,[r1,#0x8b]  ; varOperation
0000e2  eb002001          ADD      r0,r0,r1,LSL #8
0000e6  495c              LDR      r1,|L1.600|
0000e8  f8c1008b          STR      r0,[r1,#0x8b]  ; varOperation
;;;206    		
;;;207    		CAN_DeInit(CAN1);
0000ec  485b              LDR      r0,|L1.604|
0000ee  f7fffffe          BL       CAN_DeInit
;;;208    		CAN_StructInit(&CAN_InitStructure);
0000f2  4668              MOV      r0,sp
0000f4  f7fffffe          BL       CAN_StructInit
;;;209    		CAN1_BaudSet(varOperation.canBaud);
0000f8  4957              LDR      r1,|L1.600|
0000fa  f891008f          LDRB     r0,[r1,#0x8f]  ; varOperation
0000fe  f7fffffe          BL       CAN1_BaudSet
;;;210    		CAN1_SetFilter(varOperation.canRxId ,CAN_ID_EXT);
000102  4955              LDR      r1,|L1.600|
000104  f8d1008b          LDR      r0,[r1,#0x8b]  ; varOperation
000108  2104              MOVS     r1,#4
00010a  f7fffffe          BL       CAN1_SetFilter
;;;211    		CAN_ITConfig(CAN1,CAN_IT_FMP1,ENABLE);//重置CAN滤波器
00010e  2201              MOVS     r2,#1
000110  2110              MOVS     r1,#0x10
000112  4852              LDR      r0,|L1.604|
000114  f7fffffe          BL       CAN_ITConfig
;;;212    		
;;;213    		varOperation.canTest = 0;
000118  2000              MOVS     r0,#0
00011a  494f              LDR      r1,|L1.600|
00011c  f8a10090          STRH     r0,[r1,#0x90]
;;;214    		
;;;215    		dataToSend.canId = canIdExt[i];
000120  485d              LDR      r0,|L1.664|
000122  f8500024          LDR      r0,[r0,r4,LSL #2]
000126  495b              LDR      r1,|L1.660|
000128  6008              STR      r0,[r1,#0]  ; dataToSend
;;;216    		dataToSend.ide     = CAN_ID_EXT;
00012a  2004              MOVS     r0,#4
00012c  6048              STR      r0,[r1,#4]  ; dataToSend
;;;217    		
;;;218    		ReadECUVersion(); 
00012e  f7fffffe          BL       ReadECUVersion
;;;219    		
;;;220    	    if(varOperation.ecuVersion[0] != 0)
000132  4849              LDR      r0,|L1.600|
000134  f8900064          LDRB     r0,[r0,#0x64]  ; varOperation
000138  2800              CMP      r0,#0
00013a  d078              BEQ      |L1.558|
;;;221    		{
;;;222    			i=0;
00013c  2400              MOVS     r4,#0
;;;223    			ptrOK = Mem_malloc(60);
00013e  203c              MOVS     r0,#0x3c
000140  f7fffffe          BL       Mem_malloc
000144  4605              MOV      r5,r0
;;;224    			ptrOK[i++] = 32;
000146  2220              MOVS     r2,#0x20
000148  4621              MOV      r1,r4
00014a  1c64              ADDS     r4,r4,#1
00014c  546a              STRB     r2,[r5,r1]
;;;225    			ptrOK[i++] = 0x50;
00014e  2250              MOVS     r2,#0x50
000150  4621              MOV      r1,r4
000152  1c64              ADDS     r4,r4,#1
000154  546a              STRB     r2,[r5,r1]
;;;226    			ptrOK[i++] = 0x13;
000156  2213              MOVS     r2,#0x13
000158  4621              MOV      r1,r4
00015a  1c64              ADDS     r4,r4,#1
00015c  546a              STRB     r2,[r5,r1]
;;;227    			ptrOK[i++] = varOperation.canBaud;
00015e  483e              LDR      r0,|L1.600|
000160  f890208f          LDRB     r2,[r0,#0x8f]  ; varOperation
000164  4621              MOV      r1,r4
000166  1c64              ADDS     r4,r4,#1
000168  546a              STRB     r2,[r5,r1]
;;;228    			ptrOK[i++] = (varOperation.canRxId>>24) & 0x000000FF;ptrOK[i++] = (varOperation.canRxId>>16) & 0x000000FF;
00016a  f8d0008b          LDR      r0,[r0,#0x8b]  ; varOperation
00016e  0e01              LSRS     r1,r0,#24
000170  4622              MOV      r2,r4
000172  1c64              ADDS     r4,r4,#1
000174  54a9              STRB     r1,[r5,r2]
000176  4838              LDR      r0,|L1.600|
000178  f8d0008b          LDR      r0,[r0,#0x8b]  ; varOperation
00017c  f3c04207          UBFX     r2,r0,#16,#8
000180  4621              MOV      r1,r4
000182  1c64              ADDS     r4,r4,#1
000184  546a              STRB     r2,[r5,r1]
;;;229    			ptrOK[i++] = (varOperation.canRxId>>8) & 0x000000FF;ptrOK[i++] = (varOperation.canRxId>>0) & 0x000000FF;
000186  4834              LDR      r0,|L1.600|
000188  f8b0008b          LDRH     r0,[r0,#0x8b]  ; varOperation
00018c  f3c02207          UBFX     r2,r0,#8,#8
000190  4621              MOV      r1,r4
000192  1c64              ADDS     r4,r4,#1
000194  546a              STRB     r2,[r5,r1]
000196  4830              LDR      r0,|L1.600|
000198  f890208b          LDRB     r2,[r0,#0x8b]  ; varOperation
00019c  4620              MOV      r0,r4
00019e  1c61              ADDS     r1,r4,#1
0001a0  b2cc              UXTB     r4,r1
0001a2  542a              STRB     r2,[r5,r0]
;;;230    			ptrOK[i++] = (dataToSend.canId>>24) & 0x000000FF;ptrOK[i++] = (dataToSend.canId>>16) & 0x000000FF;
0001a4  483b              LDR      r0,|L1.660|
0001a6  6800              LDR      r0,[r0,#0]  ; dataToSend
0001a8  0e00              LSRS     r0,r0,#24
0001aa  4621              MOV      r1,r4
0001ac  1c62              ADDS     r2,r4,#1
0001ae  b2d4              UXTB     r4,r2
0001b0  5468              STRB     r0,[r5,r1]
0001b2  4838              LDR      r0,|L1.660|
0001b4  6800              LDR      r0,[r0,#0]  ; dataToSend
0001b6  f3c04207          UBFX     r2,r0,#16,#8
0001ba  4620              MOV      r0,r4
0001bc  1c61              ADDS     r1,r4,#1
0001be  b2cc              UXTB     r4,r1
0001c0  542a              STRB     r2,[r5,r0]
;;;231    			ptrOK[i++] = (dataToSend.canId>>8) & 0x000000FF;ptrOK[i++] = (dataToSend.canId>>0) & 0x000000FF;
0001c2  4834              LDR      r0,|L1.660|
0001c4  8800              LDRH     r0,[r0,#0]  ; dataToSend
0001c6  f3c02207          UBFX     r2,r0,#8,#8
0001ca  4620              MOV      r0,r4
0001cc  1c61              ADDS     r1,r4,#1
0001ce  b2cc              UXTB     r4,r1
0001d0  542a              STRB     r2,[r5,r0]
0001d2  4830              LDR      r0,|L1.660|
0001d4  7802              LDRB     r2,[r0,#0]  ; dataToSend
0001d6  4620              MOV      r0,r4
0001d8  1c61              ADDS     r1,r4,#1
0001da  b2cc              UXTB     r4,r1
0001dc  542a              STRB     r2,[r5,r0]
;;;232    			memcpy(&ptrOK[i],varOperation.ecuVersion,20);
0001de  1928              ADDS     r0,r5,r4
0001e0  2214              MOVS     r2,#0x14
0001e2  491d              LDR      r1,|L1.600|
0001e4  3164              ADDS     r1,r1,#0x64
0001e6  f7fffffe          BL       __aeabi_memcpy
;;;233    			
;;;234    			OSMutexPend(CDMASendMutex,0,&err);
0001ea  aa03              ADD      r2,sp,#0xc
0001ec  2100              MOVS     r1,#0
0001ee  482b              LDR      r0,|L1.668|
0001f0  6800              LDR      r0,[r0,#0]  ; CDMASendMutex
0001f2  f7fffffe          BL       OSMutexPend
;;;235    				
;;;236    			memcpy(&cdmaDataToSend->data[cdmaDataToSend->datLength],ptrOK,ptrOK[0]);
0001f6  492a              LDR      r1,|L1.672|
0001f8  6809              LDR      r1,[r1,#0]  ; cdmaDataToSend
0001fa  6849              LDR      r1,[r1,#4]
0001fc  4b28              LDR      r3,|L1.672|
0001fe  681b              LDR      r3,[r3,#0]  ; cdmaDataToSend
000200  881b              LDRH     r3,[r3,#0]
000202  18c8              ADDS     r0,r1,r3
000204  782a              LDRB     r2,[r5,#0]
000206  4629              MOV      r1,r5
000208  f7fffffe          BL       __aeabi_memcpy
;;;237    			cdmaDataToSend->datLength += ptrOK[0];
00020c  4824              LDR      r0,|L1.672|
00020e  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
000210  8800              LDRH     r0,[r0,#0]
000212  7829              LDRB     r1,[r5,#0]
000214  4408              ADD      r0,r0,r1
000216  4922              LDR      r1,|L1.672|
000218  6809              LDR      r1,[r1,#0]  ; cdmaDataToSend
00021a  8008              STRH     r0,[r1,#0]
;;;238    
;;;239    			OSMutexPost(CDMASendMutex);
00021c  481f              LDR      r0,|L1.668|
00021e  6800              LDR      r0,[r0,#0]  ; CDMASendMutex
000220  f7fffffe          BL       OSMutexPost
;;;240    			
;;;241    			Mem_free(ptrOK);
000224  4628              MOV      r0,r5
000226  f7fffffe          BL       Mem_free
;;;242    			break;
00022a  e005              B        |L1.568|
00022c  e7ff              B        |L1.558|
                  |L1.558|
00022e  1c60              ADDS     r0,r4,#1              ;200
000230  b2c4              UXTB     r4,r0                 ;200
                  |L1.562|
000232  2c04              CMP      r4,#4                 ;200
000234  f6ffaf30          BLT      |L1.152|
                  |L1.568|
000238  bf00              NOP      
;;;243    		}
;;;244    	}
;;;245    	if(varOperation.canTest == 0)
00023a  4807              LDR      r0,|L1.600|
00023c  f8b00090          LDRH     r0,[r0,#0x90]  ; varOperation
000240  b918              CBNZ     r0,|L1.586|
;;;246    	{
;;;247    		LogReport("CANID EXT Test Fail!");
000242  a018              ADR      r0,|L1.676|
000244  f7fffffe          BL       LogReport
                  |L1.584|
;;;248    		return;
;;;249    	}
;;;250    idOK:
;;;251    	varOperation.canTest = 0;
;;;252    	return;
;;;253    }
000248  bd7f              POP      {r0-r6,pc}
                  |L1.586|
00024a  bf00              NOP                            ;250
                  |L1.588|
00024c  2000              MOVS     r0,#0                 ;251
00024e  4902              LDR      r1,|L1.600|
000250  f8a10090          STRH     r0,[r1,#0x90]         ;251
000254  bf00              NOP                            ;252
000256  e7f7              B        |L1.584|
;;;254    extern VARConfig* ptrPIDVars;//指向第二配置区
                          ENDP

                  |L1.600|
                          DCD      varOperation
                  |L1.604|
                          DCD      0x40006400
                  |L1.608|
                          DCD      canBaudEnum
                  |L1.612|
                          DCD      canRecieveQ
                  |L1.616|
000268  42617564          DCB      "Baud %d Test Success.",0
00026c  20256420
000270  54657374
000274  20537563
000278  63657373
00027c  2e00    
00027e  00                DCB      0
00027f  00                DCB      0
                  |L1.640|
000280  42617564          DCB      "Baud Test Fail!!!",0
000284  20546573
000288  74204661
00028c  696c2121
000290  2100    
000292  00                DCB      0
000293  00                DCB      0
                  |L1.660|
                          DCD      dataToSend
                  |L1.664|
                          DCD      canIdExt
                  |L1.668|
                          DCD      CDMASendMutex
                  |L1.672|
                          DCD      cdmaDataToSend
                  |L1.676|
0002a4  43414e49          DCB      "CANID EXT Test Fail!",0
0002a8  44204558
0002ac  54205465
0002b0  73742046
0002b4  61696c21
0002b8  00      
0002b9  00                DCB      0
0002ba  00                DCB      0
0002bb  00                DCB      0

                          AREA ||i.Get_Q_FromECU||, CODE, READONLY, ALIGN=2

                  Get_Q_FromECU PROC
;;;309    const uint16_t qMax = 0x045C;
;;;310    void Get_Q_FromECU(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;311    {
000004  b085              SUB      sp,sp,#0x14
;;;312    	uint8_t* ptrSetCmd;
;;;313    	uint8_t* ptrVer;
;;;314    	CanRxMsg* CAN1_RxMsg;
;;;315    	uint8_t  i,err;
;;;316    	uint16_t dat1,dat2,datSma;
;;;317    	uint8_t qNum = 0;
000006  2700              MOVS     r7,#0
;;;318    	uint8_t offset = 7,bag = 0x21;
000008  2507              MOVS     r5,#7
00000a  f04f0b21          MOV      r11,#0x21
;;;319    	static uint8_t  temp = 0;
;;;320    	static uint16_t readData = 0;
;;;321    	//temp = 0;
;;;322    	uint8_t textEcu[8] = {0x05,0x23,0x05,0x60,0xF8,0x02,0x00,0x00};
00000e  a166              ADR      r1,|L2.424|
000010  c903              LDM      r1,{r0,r1}
000012  e9cd0100          STRD     r0,r1,[sp,#0]
;;;323    	
;;;324    	ptrSetCmd  = Mem_malloc(8);
000016  2008              MOVS     r0,#8
000018  f7fffffe          BL       Mem_malloc
00001c  9004              STR      r0,[sp,#0x10]
;;;325    	ptrVer = Mem_malloc(80);
00001e  2050              MOVS     r0,#0x50
000020  f7fffffe          BL       Mem_malloc
000024  4604              MOV      r4,r0
;;;326    	ptrVer[0] = 0x10;ptrVer[1] = 0x2F;ptrVer[2] = 0x3D;ptrVer[3] = 0x05;
000026  2010              MOVS     r0,#0x10
000028  7020              STRB     r0,[r4,#0]
00002a  202f              MOVS     r0,#0x2f
00002c  7060              STRB     r0,[r4,#1]
00002e  203d              MOVS     r0,#0x3d
000030  70a0              STRB     r0,[r4,#2]
000032  2005              MOVS     r0,#5
000034  70e0              STRB     r0,[r4,#3]
;;;327    	ptrVer[4] = 0x61;ptrVer[5] = 0x24;ptrVer[6] = 0x2A;
000036  2061              MOVS     r0,#0x61
000038  7120              STRB     r0,[r4,#4]
00003a  2024              MOVS     r0,#0x24
00003c  7160              STRB     r0,[r4,#5]
00003e  202a              MOVS     r0,#0x2a
000040  71a0              STRB     r0,[r4,#6]
;;;328    	memcpy(ptrSetCmd,textEcu,8);
000042  9900              LDR      r1,[sp,#0]
000044  9804              LDR      r0,[sp,#0x10]
000046  6001              STR      r1,[r0,#0]
000048  9901              LDR      r1,[sp,#4]
00004a  6041              STR      r1,[r0,#4]
;;;329    	dataToSend.pdat   = textEcu;
00004c  4958              LDR      r1,|L2.432|
00004e  f8c1d008          STR      sp,[r1,#8]  ; dataToSend
;;;330    	OBD_CAN_SendData(dataToSend); 
000052  4608              MOV      r0,r1
000054  c807              LDM      r0,{r0-r2}
000056  f7fffffe          BL       OBD_CAN_SendData
;;;331    	CAN1_RxMsg = OSQPend(canRecieveQ,50,&err);
00005a  aa03              ADD      r2,sp,#0xc
00005c  2132              MOVS     r1,#0x32
00005e  4855              LDR      r0,|L2.436|
000060  6800              LDR      r0,[r0,#0]  ; canRecieveQ
000062  f7fffffe          BL       OSQPend
000066  4680              MOV      r8,r0
;;;332    	if(err == OS_ERR_NONE)
000068  f89d000c          LDRB     r0,[sp,#0xc]
00006c  2800              CMP      r0,#0
00006e  d17d              BNE      |L2.364|
;;;333    	{
;;;334    		qNum = CAN1_RxMsg->Data[2];
000070  f898700d          LDRB     r7,[r8,#0xd]
;;;335    		dat1 = textEcu[3];
000074  f89d6003          LDRB     r6,[sp,#3]
;;;336    		dat2 = textEcu[4]+qNum*2;
000078  f89d0004          LDRB     r0,[sp,#4]
00007c  eb000a47          ADD      r10,r0,r7,LSL #1
;;;337    		if(dat2 >= 256)
000080  f1ba0fff          CMP      r10,#0xff
000084  dd01              BLE      |L2.138|
;;;338    			dat1++;
000086  1c70              ADDS     r0,r6,#1
000088  b286              UXTH     r6,r0
                  |L2.138|
;;;339    		textEcu[3] = dat1;
00008a  b2f0              UXTB     r0,r6
00008c  f88d0003          STRB     r0,[sp,#3]
;;;340    		textEcu[4] += qNum*2;
000090  f89d0004          LDRB     r0,[sp,#4]
000094  eb000047          ADD      r0,r0,r7,LSL #1
000098  b2c0              UXTB     r0,r0
00009a  f88d0004          STRB     r0,[sp,#4]
;;;341    		Mem_free(CAN1_RxMsg);
00009e  4640              MOV      r0,r8
0000a0  f7fffffe          BL       Mem_free
;;;342    		for(i=0;i<qNum;i++)
0000a4  f04f0900          MOV      r9,#0
0000a8  e065              B        |L2.374|
                  |L2.170|
;;;343    		{
;;;344    			textEcu[4] += 2;
0000aa  f89d0004          LDRB     r0,[sp,#4]
0000ae  1c80              ADDS     r0,r0,#2
0000b0  b2c0              UXTB     r0,r0
0000b2  f88d0004          STRB     r0,[sp,#4]
;;;345    			memcpy(ptrSetCmd,textEcu,8);
0000b6  9900              LDR      r1,[sp,#0]
0000b8  9804              LDR      r0,[sp,#0x10]
0000ba  6001              STR      r1,[r0,#0]
0000bc  9901              LDR      r1,[sp,#4]
0000be  6041              STR      r1,[r0,#4]
;;;346    			dataToSend.pdat   = textEcu;
0000c0  493b              LDR      r1,|L2.432|
0000c2  f8c1d008          STR      sp,[r1,#8]  ; dataToSend
;;;347    			OBD_CAN_SendData(dataToSend); 
0000c6  4608              MOV      r0,r1
0000c8  c807              LDM      r0,{r0-r2}
0000ca  f7fffffe          BL       OBD_CAN_SendData
;;;348    			CAN1_RxMsg = OSQPend(canRecieveQ,50,&err);
0000ce  aa03              ADD      r2,sp,#0xc
0000d0  2132              MOVS     r1,#0x32
0000d2  4838              LDR      r0,|L2.436|
0000d4  6800              LDR      r0,[r0,#0]  ; canRecieveQ
0000d6  f7fffffe          BL       OSQPend
0000da  4680              MOV      r8,r0
;;;349    			if(err == OS_ERR_NONE)
0000dc  f89d000c          LDRB     r0,[sp,#0xc]
0000e0  2800              CMP      r0,#0
0000e2  d142              BNE      |L2.362|
;;;350    			{	
;;;351    				dat1 = CAN1_RxMsg->Data[3];
0000e4  f898600e          LDRB     r6,[r8,#0xe]
;;;352    				dat1 = (dat1 << 8) + CAN1_RxMsg->Data[2];
0000e8  f898000d          LDRB     r0,[r8,#0xd]
0000ec  eb002006          ADD      r0,r0,r6,LSL #8
0000f0  b286              UXTH     r6,r0
;;;353    				datSma = dat1/20;
0000f2  2014              MOVS     r0,#0x14
0000f4  fb96f0f0          SDIV     r0,r6,r0
0000f8  b280              UXTH     r0,r0
0000fa  9002              STR      r0,[sp,#8]
;;;354    				
;;;355    				dat2 = dat1 + datSma;
0000fc  9802              LDR      r0,[sp,#8]
0000fe  4430              ADD      r0,r0,r6
000100  fa1ffa80          UXTH     r10,r0
;;;356    				if(i == 0)
000104  f1b90f00          CMP      r9,#0
000108  d101              BNE      |L2.270|
;;;357    				{
;;;358    					readData = dat1;
00010a  482b              LDR      r0,|L2.440|
00010c  8006              STRH     r6,[r0,#0]
                  |L2.270|
;;;359    				}
;;;360    				
;;;361    				if(offset % 8 == 0)
00010e  17e9              ASRS     r1,r5,#31
000110  eb057151          ADD      r1,r5,r1,LSR #29
000114  10c9              ASRS     r1,r1,#3
000116  eba501c1          SUB      r1,r5,r1,LSL #3
00011a  b941              CBNZ     r1,|L2.302|
;;;362    					ptrVer[offset++] = bag++;
00011c  4628              MOV      r0,r5
00011e  1c69              ADDS     r1,r5,#1
000120  b2cd              UXTB     r5,r1
000122  f804b000          STRB     r11,[r4,r0]
000126  f10b0001          ADD      r0,r11,#1
00012a  f0000bff          AND      r11,r0,#0xff
                  |L2.302|
;;;363    				ptrVer[offset++] = dat2 & 0x00FF;
00012e  4628              MOV      r0,r5
000130  1c69              ADDS     r1,r5,#1
000132  b2cd              UXTB     r5,r1
000134  f804a000          STRB     r10,[r4,r0]
;;;364    				if(offset % 8 == 0)
000138  17e9              ASRS     r1,r5,#31
00013a  eb057151          ADD      r1,r5,r1,LSR #29
00013e  10c9              ASRS     r1,r1,#3
000140  eba501c1          SUB      r1,r5,r1,LSL #3
000144  b941              CBNZ     r1,|L2.344|
;;;365    					ptrVer[offset++] = bag++;
000146  4628              MOV      r0,r5
000148  1c69              ADDS     r1,r5,#1
00014a  b2cd              UXTB     r5,r1
00014c  f804b000          STRB     r11,[r4,r0]
000150  f10b0001          ADD      r0,r11,#1
000154  f0000bff          AND      r11,r0,#0xff
                  |L2.344|
;;;366    				ptrVer[offset++] = (dat2>>8) & 0x00FF;
000158  ea4f221a          LSR      r2,r10,#8
00015c  4628              MOV      r0,r5
00015e  1c69              ADDS     r1,r5,#1
000160  b2cd              UXTB     r5,r1
000162  5422              STRB     r2,[r4,r0]
;;;367    				Mem_free(CAN1_RxMsg);
000164  4640              MOV      r0,r8
000166  f7fffffe          BL       Mem_free
                  |L2.362|
00016a  e000              B        |L2.366|
                  |L2.364|
00016c  e005              B        |L2.378|
                  |L2.366|
00016e  f1090001          ADD      r0,r9,#1              ;342
000172  f00009ff          AND      r9,r0,#0xff           ;342
                  |L2.374|
000176  45b9              CMP      r9,r7                 ;342
000178  db97              BLT      |L2.170|
                  |L2.378|
;;;368    //				LogReport("ECU_Q_Data-%d:%d,%d",i+1,dat1,dat2);
;;;369    			}
;;;370    		}
;;;371    	}
;;;372    	//安全算法，加写入数据
;;;373    	if((temp == 0)&&(readData < 1122))//保证不会重复写入
00017a  4810              LDR      r0,|L2.444|
00017c  7800              LDRB     r0,[r0,#0]  ; temp
00017e  b960              CBNZ     r0,|L2.410|
000180  480d              LDR      r0,|L2.440|
000182  8800              LDRH     r0,[r0,#0]  ; readData
000184  f2404162          MOV      r1,#0x462
000188  4288              CMP      r0,r1
00018a  da06              BGE      |L2.410|
;;;374    	{
;;;375    		temp = 1;
00018c  2001              MOVS     r0,#1
00018e  490b              LDR      r1,|L2.444|
000190  7008              STRB     r0,[r1,#0]
;;;376    		SafeALG(ptrVer);//安全算法
000192  4620              MOV      r0,r4
000194  f7fffffe          BL       SafeALG
000198  e002              B        |L2.416|
                  |L2.410|
;;;377    	}
;;;378    	else
;;;379    	{
;;;380    		Mem_free(ptrVer);
00019a  4620              MOV      r0,r4
00019c  f7fffffe          BL       Mem_free
                  |L2.416|
;;;381    	}
;;;382    }
0001a0  b005              ADD      sp,sp,#0x14
0001a2  e8bd8ff0          POP      {r4-r11,pc}
;;;383    
                          ENDP

0001a6  0000              DCW      0x0000
                  |L2.424|
0001a8  05230560          DCB      5,"#",5,"`",248,2,0
0001ac  f80200  
0001af  00                DCB      0
                  |L2.432|
                          DCD      dataToSend
                  |L2.436|
                          DCD      canRecieveQ
                  |L2.440|
                          DCD      readData
                  |L2.444|
                          DCD      temp

                          AREA ||i.OBDTask||, CODE, READONLY, ALIGN=2

                  OBDTask PROC
;;;12     
;;;13     void OBDTask(void *pdata)
000000  b508              PUSH     {r3,lr}
;;;14     {
;;;15     	INT8U     err;
;;;16     	uint8_t   i      = 0;
000002  f04f0800          MOV      r8,#0
;;;17     	uint8_t   cmdLen = 0;        //封包的时候要减去指令的长度
000006  2600              MOVS     r6,#0
;;;18     	uint8_t   cmdNum = 0;        //指令序号
000008  46b1              MOV      r9,r6
;;;19     	uint8_t   cmdManyPackNum = 0;//要接受的多包的数量
00000a  46b2              MOV      r10,r6
;;;20     	CanRxMsg* CAN1_RxMsg;        //指向接收到的OBD信息
;;;21     	uint8_t * can1_Txbuff;       //指向要发送的OBD信息
;;;22     	uint8_t * ptrSaveBuff;
;;;23     	
;;;24     	CAN1Config();                //CAN 配置
00000c  f7fffffe          BL       CAN1Config
;;;25     	OSTimeDlyHMSM(0,0,10,4);
000010  2304              MOVS     r3,#4
000012  220a              MOVS     r2,#0xa
000014  2100              MOVS     r1,#0
000016  4608              MOV      r0,r1
000018  f7fffffe          BL       OSTimeDlyHMSM
;;;26     	TestServer();                //测试服务器
00001c  f7fffffe          BL       TestServer
;;;27     	
;;;28     	while(1)
000020  e11b              B        |L3.602|
                  |L3.34|
;;;29     	{	
;;;30     		if(varOperation.canTest == 0)//配置文件不成功，则停止CAN
000022  488e              LDR      r0,|L3.604|
000024  f8b00090          LDRH     r0,[r0,#0x90]  ; varOperation
000028  b930              CBNZ     r0,|L3.56|
;;;31     		{
;;;32     			OSTimeDlyHMSM(0,0,1,0);
00002a  2300              MOVS     r3,#0
00002c  2201              MOVS     r2,#1
00002e  4619              MOV      r1,r3
000030  4618              MOV      r0,r3
000032  f7fffffe          BL       OSTimeDlyHMSM
;;;33     			continue;
000036  e110              B        |L3.602|
                  |L3.56|
;;;34     		}	  
;;;35     		can1_Txbuff = OSQPend(canSendQ,1000,&err);//收到PID指令，进行发送
000038  466a              MOV      r2,sp
00003a  f44f717a          MOV      r1,#0x3e8
00003e  4888              LDR      r0,|L3.608|
000040  6800              LDR      r0,[r0,#0]  ; canSendQ
000042  f7fffffe          BL       OSQPend
000046  4607              MOV      r7,r0
;;;36     		if(err != OS_ERR_NONE)
000048  f89d0000          LDRB     r0,[sp,#0]
00004c  b100              CBZ      r0,|L3.80|
;;;37     			continue;
00004e  e104              B        |L3.602|
                  |L3.80|
;;;38     		cmdNum = can1_Txbuff[0];               //记录PID指令序号
000050  f8979000          LDRB     r9,[r7,#0]
;;;39     		cmdLen = can1_Txbuff[1];               //记录PID指令长度
000054  787e              LDRB     r6,[r7,#1]
;;;40     		
;;;41     		dataToSend.pdat = &can1_Txbuff[1];     
000056  1c78              ADDS     r0,r7,#1
000058  4982              LDR      r1,|L3.612|
00005a  6088              STR      r0,[r1,#8]  ; dataToSend
;;;42     		OBD_CAN_SendData(dataToSend);          //发送PID指令
00005c  4608              MOV      r0,r1
00005e  c807              LDM      r0,{r0-r2}
000060  f7fffffe          BL       OBD_CAN_SendData
;;;43     		
;;;44     		CAN1_RxMsg = OSQPend(canRecieveQ,25,&err); //接收到OBD回复
000064  466a              MOV      r2,sp
000066  2119              MOVS     r1,#0x19
000068  487f              LDR      r0,|L3.616|
00006a  6800              LDR      r0,[r0,#0]  ; canRecieveQ
00006c  f7fffffe          BL       OSQPend
000070  4604              MOV      r4,r0
;;;45     		if(err == OS_ERR_NONE)
000072  f89d0000          LDRB     r0,[sp,#0]
000076  2800              CMP      r0,#0
000078  d17e              BNE      |L3.376|
;;;46     		{
;;;47     			freOBDLed = 500;                    //OBD 初始化成功
00007a  f44f70fa          MOV      r0,#0x1f4
00007e  497b              LDR      r1,|L3.620|
000080  8008              STRH     r0,[r1,#0]
;;;48     			if(CAN1_RxMsg->Data[0] == 0x10)     //多包处理
000082  7ae0              LDRB     r0,[r4,#0xb]
000084  2810              CMP      r0,#0x10
000086  d178              BNE      |L3.378|
;;;49     			{
;;;50     				ptrSaveBuff = Mem_malloc(CAN1_RxMsg->Data[1]+10);//申请的内存块足够长
000088  7b21              LDRB     r1,[r4,#0xc]
00008a  f101000a          ADD      r0,r1,#0xa
00008e  f7fffffe          BL       Mem_malloc
000092  4605              MOV      r5,r0
;;;51     				if(ptrSaveBuff != NULL)
000094  2d00              CMP      r5,#0
000096  d071              BEQ      |L3.380|
;;;52     				{
;;;53     					ptrSaveBuff[0] = CAN1_RxMsg->Data[1] - cmdLen + 3;
000098  7b20              LDRB     r0,[r4,#0xc]
00009a  1b80              SUBS     r0,r0,r6
00009c  1cc0              ADDS     r0,r0,#3
00009e  7028              STRB     r0,[r5,#0]
;;;54     					ptrSaveBuff[1] = 0x60;
0000a0  2060              MOVS     r0,#0x60
0000a2  7068              STRB     r0,[r5,#1]
;;;55     					ptrSaveBuff[2] = cmdNum;
0000a4  f8859002          STRB     r9,[r5,#2]
;;;56     					memcpy(&ptrSaveBuff[3],&CAN1_RxMsg->Data[cmdLen + 2],(6 - cmdLen));
0000a8  f1c60206          RSB      r2,r6,#6
0000ac  f104000b          ADD      r0,r4,#0xb
0000b0  1cb3              ADDS     r3,r6,#2
0000b2  18c1              ADDS     r1,r0,r3
0000b4  1ce8              ADDS     r0,r5,#3
0000b6  f7fffffe          BL       __aeabi_memcpy
;;;57     					cmdManyPackNum = (CAN1_RxMsg->Data[1] - 6)%7 == 0? (CAN1_RxMsg->Data[1] - 6)/7 : (CAN1_RxMsg->Data[1] - 6)/7 + 1;
0000ba  7b20              LDRB     r0,[r4,#0xc]
0000bc  1f80              SUBS     r0,r0,#6
0000be  2107              MOVS     r1,#7
0000c0  fb90f2f1          SDIV     r2,r0,r1
0000c4  fb010012          MLS      r0,r1,r2,r0
0000c8  b920              CBNZ     r0,|L3.212|
0000ca  7b20              LDRB     r0,[r4,#0xc]
0000cc  1f80              SUBS     r0,r0,#6
0000ce  fb90f0f1          SDIV     r0,r0,r1
0000d2  e005              B        |L3.224|
                  |L3.212|
0000d4  7b20              LDRB     r0,[r4,#0xc]
0000d6  1f80              SUBS     r0,r0,#6
0000d8  2107              MOVS     r1,#7
0000da  fb90f0f1          SDIV     r0,r0,r1
0000de  1c40              ADDS     r0,r0,#1
                  |L3.224|
0000e0  f0000aff          AND      r10,r0,#0xff
;;;58     					Mem_free(CAN1_RxMsg);
0000e4  4620              MOV      r0,r4
0000e6  f7fffffe          BL       Mem_free
;;;59     					
;;;60     					dataToSend.pdat = pidManyBag;//发送0x30 请求接下来的多包
0000ea  4861              LDR      r0,|L3.624|
0000ec  495d              LDR      r1,|L3.612|
0000ee  6088              STR      r0,[r1,#8]  ; dataToSend
;;;61     					OBD_CAN_SendData(dataToSend);
0000f0  4608              MOV      r0,r1
0000f2  c807              LDM      r0,{r0-r2}
0000f4  f7fffffe          BL       OBD_CAN_SendData
;;;62     					
;;;63     					for(i=0;i<cmdManyPackNum;i++)
0000f8  f04f0800          MOV      r8,#0
0000fc  e01d              B        |L3.314|
                  |L3.254|
;;;64     					{
;;;65     						CAN1_RxMsg = OSQPend(canRecieveQ,25,&err);//接收多包
0000fe  466a              MOV      r2,sp
000100  2119              MOVS     r1,#0x19
000102  4859              LDR      r0,|L3.616|
000104  6800              LDR      r0,[r0,#0]  ; canRecieveQ
000106  f7fffffe          BL       OSQPend
00010a  4604              MOV      r4,r0
;;;66     						if(err == OS_ERR_NONE)
00010c  f89d0000          LDRB     r0,[sp,#0]
000110  b970              CBNZ     r0,|L3.304|
;;;67     						{
;;;68     							memcpy(&ptrSaveBuff[7*i + 9 - cmdLen],&CAN1_RxMsg->Data[1],7);
000112  ebc800c8          RSB      r0,r8,r8,LSL #3
000116  3009              ADDS     r0,r0,#9
000118  1b80              SUBS     r0,r0,r6
00011a  1941              ADDS     r1,r0,r5
00011c  68e2              LDR      r2,[r4,#0xc]
00011e  600a              STR      r2,[r1,#0]
000120  8a22              LDRH     r2,[r4,#0x10]
000122  808a              STRH     r2,[r1,#4]
000124  7ca0              LDRB     r0,[r4,#0x12]
000126  7188              STRB     r0,[r1,#6]
;;;69     							Mem_free(CAN1_RxMsg);
000128  4620              MOV      r0,r4
00012a  f7fffffe          BL       Mem_free
00012e  e000              B        |L3.306|
                  |L3.304|
;;;70     						}
;;;71     						else break;
000130  e005              B        |L3.318|
                  |L3.306|
000132  f1080001          ADD      r0,r8,#1              ;63
000136  f00008ff          AND      r8,r0,#0xff           ;63
                  |L3.314|
00013a  45d0              CMP      r8,r10                ;63
00013c  dbdf              BLT      |L3.254|
                  |L3.318|
00013e  bf00              NOP      
;;;72     					}
;;;73     					if(i == cmdManyPackNum)
000140  45d0              CMP      r8,r10
000142  d120              BNE      |L3.390|
;;;74     					{
;;;75     						OSMutexPend(CDMASendMutex,0,&err);
000144  466a              MOV      r2,sp
000146  2100              MOVS     r1,#0
000148  484a              LDR      r0,|L3.628|
00014a  6800              LDR      r0,[r0,#0]  ; CDMASendMutex
00014c  f7fffffe          BL       OSMutexPend
;;;76     						
;;;77     						memcpy(&cdmaDataToSend->data[cdmaDataToSend->datLength],ptrSaveBuff,ptrSaveBuff[0]);
000150  4949              LDR      r1,|L3.632|
000152  6809              LDR      r1,[r1,#0]  ; cdmaDataToSend
000154  6849              LDR      r1,[r1,#4]
000156  4b48              LDR      r3,|L3.632|
000158  681b              LDR      r3,[r3,#0]  ; cdmaDataToSend
00015a  881b              LDRH     r3,[r3,#0]
00015c  18c8              ADDS     r0,r1,r3
00015e  782a              LDRB     r2,[r5,#0]
000160  4629              MOV      r1,r5
000162  f7fffffe          BL       __aeabi_memcpy
;;;78     						cdmaDataToSend->datLength += ptrSaveBuff[0];
000166  4844              LDR      r0,|L3.632|
000168  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
00016a  8800              LDRH     r0,[r0,#0]
00016c  7829              LDRB     r1,[r5,#0]
00016e  4408              ADD      r0,r0,r1
000170  4941              LDR      r1,|L3.632|
000172  6809              LDR      r1,[r1,#0]  ; cdmaDataToSend
000174  8008              STRH     r0,[r1,#0]
;;;79     						
;;;80     						OSMutexPost(CDMASendMutex);
000176  e002              B        |L3.382|
                  |L3.376|
000178  e065              B        |L3.582|
                  |L3.378|
00017a  e008              B        |L3.398|
                  |L3.380|
00017c  e069              B        |L3.594|
                  |L3.382|
00017e  483d              LDR      r0,|L3.628|
000180  6800              LDR      r0,[r0,#0]  ; CDMASendMutex
000182  f7fffffe          BL       OSMutexPost
                  |L3.390|
;;;81     					}
;;;82     					Mem_free(ptrSaveBuff);
000186  4628              MOV      r0,r5
000188  f7fffffe          BL       Mem_free
00018c  e061              B        |L3.594|
                  |L3.398|
;;;83     				}
;;;84     			}
;;;85     			else  //单包处理
;;;86     			{
;;;87     				OSMutexPend(CDMASendMutex,0,&err);
00018e  466a              MOV      r2,sp
000190  2100              MOVS     r1,#0
000192  4838              LDR      r0,|L3.628|
000194  6800              LDR      r0,[r0,#0]  ; CDMASendMutex
000196  f7fffffe          BL       OSMutexPend
;;;88     				
;;;89     				cdmaDataToSend->data[cdmaDataToSend->datLength++] = CAN1_RxMsg->Data[0] - cmdLen + 3;
00019a  7ae0              LDRB     r0,[r4,#0xb]
00019c  1b80              SUBS     r0,r0,r6
00019e  1cc0              ADDS     r0,r0,#3
0001a0  b2c1              UXTB     r1,r0
0001a2  4835              LDR      r0,|L3.632|
0001a4  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
0001a6  8802              LDRH     r2,[r0,#0]
0001a8  4833              LDR      r0,|L3.632|
0001aa  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
0001ac  8800              LDRH     r0,[r0,#0]
0001ae  1c40              ADDS     r0,r0,#1
0001b0  4b31              LDR      r3,|L3.632|
0001b2  681b              LDR      r3,[r3,#0]  ; cdmaDataToSend
0001b4  8018              STRH     r0,[r3,#0]
0001b6  4830              LDR      r0,|L3.632|
0001b8  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
0001ba  6840              LDR      r0,[r0,#4]
0001bc  5481              STRB     r1,[r0,r2]
;;;90     				cdmaDataToSend->data[cdmaDataToSend->datLength++] = 0x60;
0001be  2260              MOVS     r2,#0x60
0001c0  482d              LDR      r0,|L3.632|
0001c2  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
0001c4  8801              LDRH     r1,[r0,#0]
0001c6  482c              LDR      r0,|L3.632|
0001c8  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
0001ca  8800              LDRH     r0,[r0,#0]
0001cc  1c40              ADDS     r0,r0,#1
0001ce  4b2a              LDR      r3,|L3.632|
0001d0  681b              LDR      r3,[r3,#0]  ; cdmaDataToSend
0001d2  8018              STRH     r0,[r3,#0]
0001d4  4828              LDR      r0,|L3.632|
0001d6  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
0001d8  6840              LDR      r0,[r0,#4]
0001da  5442              STRB     r2,[r0,r1]
;;;91     				cdmaDataToSend->data[cdmaDataToSend->datLength++] = cmdNum;
0001dc  4826              LDR      r0,|L3.632|
0001de  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
0001e0  8801              LDRH     r1,[r0,#0]
0001e2  4825              LDR      r0,|L3.632|
0001e4  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
0001e6  8800              LDRH     r0,[r0,#0]
0001e8  1c40              ADDS     r0,r0,#1
0001ea  4a23              LDR      r2,|L3.632|
0001ec  6812              LDR      r2,[r2,#0]  ; cdmaDataToSend
0001ee  8010              STRH     r0,[r2,#0]
0001f0  4821              LDR      r0,|L3.632|
0001f2  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
0001f4  6840              LDR      r0,[r0,#4]
0001f6  f8009001          STRB     r9,[r0,r1]
;;;92     				memcpy(&cdmaDataToSend->data[cdmaDataToSend->datLength],&CAN1_RxMsg->Data[cmdLen+1],(CAN1_RxMsg->Data[0] - cmdLen));
0001fa  4b1f              LDR      r3,|L3.632|
0001fc  681b              LDR      r3,[r3,#0]  ; cdmaDataToSend
0001fe  685b              LDR      r3,[r3,#4]
000200  f8dfc074          LDR      r12,|L3.632|
000204  f8dcc000          LDR      r12,[r12,#0]  ; cdmaDataToSend
000208  f8bcc000          LDRH     r12,[r12,#0]
00020c  eb03000c          ADD      r0,r3,r12
000210  7ae3              LDRB     r3,[r4,#0xb]
000212  1b9a              SUBS     r2,r3,r6
000214  f104030b          ADD      r3,r4,#0xb
000218  f1060c01          ADD      r12,r6,#1
00021c  eb03010c          ADD      r1,r3,r12
000220  f7fffffe          BL       __aeabi_memcpy
;;;93     				cdmaDataToSend->datLength += CAN1_RxMsg->Data[0] - cmdLen;
000224  4814              LDR      r0,|L3.632|
000226  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
000228  8800              LDRH     r0,[r0,#0]
00022a  7ae1              LDRB     r1,[r4,#0xb]
00022c  1b89              SUBS     r1,r1,r6
00022e  4408              ADD      r0,r0,r1
000230  4911              LDR      r1,|L3.632|
000232  6809              LDR      r1,[r1,#0]  ; cdmaDataToSend
000234  8008              STRH     r0,[r1,#0]
;;;94     
;;;95     				OSMutexPost(CDMASendMutex);
000236  480f              LDR      r0,|L3.628|
000238  6800              LDR      r0,[r0,#0]  ; CDMASendMutex
00023a  f7fffffe          BL       OSMutexPost
;;;96     				
;;;97     				Mem_free(CAN1_RxMsg);
00023e  4620              MOV      r0,r4
000240  f7fffffe          BL       Mem_free
000244  e005              B        |L3.594|
                  |L3.582|
;;;98     			}
;;;99     		}
;;;100    		else
;;;101    		{
;;;102    			OSTimeDlyHMSM(0,0,0,4);
000246  2304              MOVS     r3,#4
000248  2200              MOVS     r2,#0
00024a  4611              MOV      r1,r2
00024c  4610              MOV      r0,r2
00024e  f7fffffe          BL       OSTimeDlyHMSM
                  |L3.594|
;;;103    		}
;;;104    		Mem_free(can1_Txbuff);                 //释放内存块
000252  4638              MOV      r0,r7
000254  f7fffffe          BL       Mem_free
000258  bf00              NOP                            ;33
                  |L3.602|
00025a  e6e2              B        |L3.34|
;;;105    	}
;;;106    }
;;;107    
                          ENDP

                  |L3.604|
                          DCD      varOperation
                  |L3.608|
                          DCD      canSendQ
                  |L3.612|
                          DCD      dataToSend
                  |L3.616|
                          DCD      canRecieveQ
                  |L3.620|
                          DCD      freOBDLed
                  |L3.624|
                          DCD      pidManyBag
                  |L3.628|
                          DCD      CDMASendMutex
                  |L3.632|
                          DCD      cdmaDataToSend

                          AREA ||i.PIDVarGet||, CODE, READONLY, ALIGN=1

                  PIDVarGet PROC
;;;256    
;;;257    void PIDVarGet(uint8_t cmdId,uint8_t *ptrData)
000000  4770              BX       lr
;;;258    {
;;;259    //	uint8_t  i; 
;;;260    //	uint32_t saveDate;
;;;261    //	uint8_t  saveLen = 0;
;;;262    //	uint32_t  temp = 0;
;;;263    //	for(i = 0;i < varOperation.pidVarNum;i ++)
;;;264    //	{
;;;265    //		if((ptrPIDVars + i)->pidId != cmdId)
;;;266    //			continue;
;;;267    //		while(saveLen < (ptrPIDVars + i)->bitLen)
;;;268    //		{
;;;269    //			if(saveLen < 8)
;;;270    //				temp = ptrData[ptrPIDVars->startByte];
;;;271    //			else if(saveLen >= 8 && saveLen < 16)
;;;272    //			{
;;;273    //				temp = ptrData[ptrPIDVars->startByte + 1];
;;;274    //				temp <<= 8;
;;;275    //			}else if(saveLen >= 16 && saveLen < 24)
;;;276    //			{
;;;277    //				temp = ptrData[ptrPIDVars->startByte + 2];
;;;278    //				temp <<= 16;
;;;279    //			}else if(saveLen >= 24 && saveLen < 32)
;;;280    //			{
;;;281    //				temp = ptrData[ptrPIDVars->startByte + 3];
;;;282    //				temp <<= 24;
;;;283    //			}
;;;284    //			saveDate += temp & (0x00000001 << saveLen);
;;;285    //			saveLen ++;
;;;286    //		}
;;;287    		
;;;288    		//1 - 车速 2 - 发动机转速 3 - 总喷油量 4 - 主喷油量 5 - 预喷油量 6 - 后喷油量 7 - 当前喷油量
;;;289    //		switch((ptrPIDVars + i)->varId)
;;;290    //		{
;;;291    //			case 1://计算车速
;;;292    //				carAllRecord.carSpeed = saveDate * ((ptrPIDVars + i)->ceo) + (ptrPIDVars + i)->offset;
;;;293    //				break;
;;;294    //			case 2://转速
;;;295    //				if(carAllRecord.engineSpeedTemp != 1)
;;;296    //				carAllRecord.engineSpeed = saveDate * ((ptrPIDVars + i)->ceo) + (ptrPIDVars + i)->offset;
;;;297    //				break;
;;;298    //			case 3:break;
;;;299    //			case 4:break;
;;;300    //			case 5:break;
;;;301    //			case 6:break;
;;;302    //			case 7:break;
;;;303    //			default:break;
;;;304    //		}
;;;305    //	}
;;;306    }
;;;307    extern const uint8_t weiChai[21][6];
                          ENDP


                          AREA ||i.TestServer||, CODE, READONLY, ALIGN=2

                  TestServer PROC
;;;108    extern uint8_t configData[2048];
;;;109    void TestServer(void)
000000  b510              PUSH     {r4,lr}
;;;110    {
000002  b08a              SUB      sp,sp,#0x28
;;;111    	uint8_t err;
;;;112    	CanRxMsg* CAN1_RxMsg;
;;;113    	CanTxMsg CAN1_TxMsg;
;;;114    	CAN_InitTypeDef   CAN_InitStructure;
;;;115    	
;;;116    	OSSemPend(LoginMes,0,&err);
000004  aa09              ADD      r2,sp,#0x24
000006  2100              MOVS     r1,#0
000008  4842              LDR      r0,|L5.276|
00000a  6800              LDR      r0,[r0,#0]  ; LoginMes
00000c  f7fffffe          BL       OSSemPend
;;;117    	
;;;118    	if(varOperation.pidVersion == 0)
000010  4841              LDR      r0,|L5.280|
000012  f8d0007a          LDR      r0,[r0,#0x7a]  ; varOperation
000016  b948              CBNZ     r0,|L5.44|
;;;119    	{
;;;120    		LogReport("01 - ECU Version %d,Need Config.",sysUpdateVar.pidVersion);
000018  4840              LDR      r0,|L5.284|
00001a  f8d01009          LDR      r1,[r0,#9]  ; sysUpdateVar
00001e  a040              ADR      r0,|L5.288|
000020  f7fffffe          BL       LogReport
;;;121    		CANTestChannel();
000024  f7fffffe          BL       CANTestChannel
                  |L5.40|
;;;122    		return	;
;;;123    	}
;;;124    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN1, ENABLE);//使能CAN1时钟
;;;125    	
;;;126    	varOperation.canTest = 2;//Flash中的CAN配置成功
;;;127    	
;;;128    	CAN_DeInit(CAN1);  
;;;129    	CAN_StructInit(&CAN_InitStructure);
;;;130    	CAN1_BaudSet(sysUpdateVar.canBaud);   //先用flash中的CAN配置进行测试
;;;131    	CAN1_ClearFilter();                   //清除滤波器，进入侦听模式，接收一切CAN消息
;;;132    	CAN_ITConfig(CAN1,CAN_IT_FMP1,ENABLE);//重置CAN滤波器
;;;133    	
;;;134    	
;;;135    	CAN1_TxMsg.IDE     = sysUpdateVar.canIdType;
;;;136    	CAN1_TxMsg.StdId   = sysUpdateVar.canTxId ;
;;;137    	CAN1_TxMsg.ExtId   = sysUpdateVar.canTxId ;
;;;138    	CAN1_TxMsg.DLC     = 0x08;
;;;139    	
;;;140    	CAN1_TxMsg.Data[0] = configData[5];CAN1_TxMsg.Data[1] = configData[6];CAN1_TxMsg.Data[2] = configData[7];//todo:测试报文PID是什么？
;;;141    	CAN1_TxMsg.Data[3] = configData[8];CAN1_TxMsg.Data[4] = configData[9];CAN1_TxMsg.Data[5] = configData[10];
;;;142    	CAN1_TxMsg.Data[6] = configData[11];CAN1_TxMsg.Data[7] = configData[12];
;;;143    	CAN_Transmit(CAN1,&CAN1_TxMsg);
;;;144    	CAN1_RxMsg = OSQPend(canRecieveQ,500,&err);
;;;145    	if(err ==OS_ERR_NONE)
;;;146    	{
;;;147    		dataToSend.ide = sysUpdateVar.canIdType;
;;;148    		dataToSend.canId   = sysUpdateVar.canTxId;
;;;149    		Mem_free(CAN1_RxMsg);
;;;150    		LogReport("01 - ECU Version %d test Success.",sysUpdateVar.pidVersion);
;;;151    		ReadECUVersion();        //读取ECU版本号	
;;;152    		Get_Q_FromECU();         //增强动力
;;;153    	}
;;;154    	else
;;;155    	{
;;;156    		LogReport("ECU Version %d test Error!",sysUpdateVar.pidVersion);
;;;157    		CANTestChannel();
;;;158    	}	
;;;159    }
000028  b00a              ADD      sp,sp,#0x28
00002a  bd10              POP      {r4,pc}
                  |L5.44|
00002c  2101              MOVS     r1,#1                 ;124
00002e  0648              LSLS     r0,r1,#25             ;124
000030  f7fffffe          BL       RCC_APB1PeriphClockCmd
000034  2002              MOVS     r0,#2                 ;126
000036  4938              LDR      r1,|L5.280|
000038  f8a10090          STRH     r0,[r1,#0x90]         ;126
00003c  4841              LDR      r0,|L5.324|
00003e  f7fffffe          BL       CAN_DeInit
000042  a801              ADD      r0,sp,#4              ;129
000044  f7fffffe          BL       CAN_StructInit
000048  4934              LDR      r1,|L5.284|
00004a  7ec8              LDRB     r0,[r1,#0x1b]         ;130  ; sysUpdateVar
00004c  f7fffffe          BL       CAN1_BaudSet
000050  f7fffffe          BL       CAN1_ClearFilter
000054  2201              MOVS     r2,#1                 ;132
000056  2110              MOVS     r1,#0x10              ;132
000058  483a              LDR      r0,|L5.324|
00005a  f7fffffe          BL       CAN_ITConfig
00005e  482f              LDR      r0,|L5.284|
000060  7c80              LDRB     r0,[r0,#0x12]         ;135  ; sysUpdateVar
000062  f88d0018          STRB     r0,[sp,#0x18]         ;135
000066  482d              LDR      r0,|L5.284|
000068  f8d00013          LDR      r0,[r0,#0x13]         ;136  ; sysUpdateVar
00006c  9004              STR      r0,[sp,#0x10]         ;136
00006e  482b              LDR      r0,|L5.284|
000070  f8d00013          LDR      r0,[r0,#0x13]         ;137  ; sysUpdateVar
000074  9005              STR      r0,[sp,#0x14]         ;137
000076  2008              MOVS     r0,#8                 ;138
000078  f88d001a          STRB     r0,[sp,#0x1a]         ;138
00007c  4832              LDR      r0,|L5.328|
00007e  7940              LDRB     r0,[r0,#5]            ;140  ; configData
000080  f88d001b          STRB     r0,[sp,#0x1b]         ;140
000084  4830              LDR      r0,|L5.328|
000086  7981              LDRB     r1,[r0,#6]            ;140  ; configData
000088  f88d101c          STRB     r1,[sp,#0x1c]         ;140
00008c  79c1              LDRB     r1,[r0,#7]            ;140  ; configData
00008e  f88d101d          STRB     r1,[sp,#0x1d]         ;140
000092  7a01              LDRB     r1,[r0,#8]            ;141  ; configData
000094  f88d101e          STRB     r1,[sp,#0x1e]         ;141
000098  7a41              LDRB     r1,[r0,#9]            ;141  ; configData
00009a  f88d101f          STRB     r1,[sp,#0x1f]         ;141
00009e  7a81              LDRB     r1,[r0,#0xa]          ;141  ; configData
0000a0  a804              ADD      r0,sp,#0x10           ;141
0000a2  7401              STRB     r1,[r0,#0x10]         ;141
0000a4  4828              LDR      r0,|L5.328|
0000a6  7ac1              LDRB     r1,[r0,#0xb]          ;142  ; configData
0000a8  a804              ADD      r0,sp,#0x10           ;142
0000aa  7441              STRB     r1,[r0,#0x11]         ;142
0000ac  4826              LDR      r0,|L5.328|
0000ae  7b01              LDRB     r1,[r0,#0xc]          ;142  ; configData
0000b0  a804              ADD      r0,sp,#0x10           ;142
0000b2  7481              STRB     r1,[r0,#0x12]         ;142
0000b4  a904              ADD      r1,sp,#0x10           ;143
0000b6  4823              LDR      r0,|L5.324|
0000b8  f7fffffe          BL       CAN_Transmit
0000bc  aa09              ADD      r2,sp,#0x24           ;144
0000be  f44f71fa          MOV      r1,#0x1f4             ;144
0000c2  4822              LDR      r0,|L5.332|
0000c4  6800              LDR      r0,[r0,#0]            ;144  ; canRecieveQ
0000c6  f7fffffe          BL       OSQPend
0000ca  4604              MOV      r4,r0                 ;144
0000cc  f89d0024          LDRB     r0,[sp,#0x24]         ;145
0000d0  b9a8              CBNZ     r0,|L5.254|
0000d2  4812              LDR      r0,|L5.284|
0000d4  7c80              LDRB     r0,[r0,#0x12]         ;147  ; sysUpdateVar
0000d6  491e              LDR      r1,|L5.336|
0000d8  6048              STR      r0,[r1,#4]            ;147  ; dataToSend
0000da  4810              LDR      r0,|L5.284|
0000dc  f8d00013          LDR      r0,[r0,#0x13]         ;148  ; sysUpdateVar
0000e0  6008              STR      r0,[r1,#0]            ;148  ; dataToSend
0000e2  4620              MOV      r0,r4                 ;149
0000e4  f7fffffe          BL       Mem_free
0000e8  480c              LDR      r0,|L5.284|
0000ea  f8d01009          LDR      r1,[r0,#9]            ;150  ; sysUpdateVar
0000ee  a019              ADR      r0,|L5.340|
0000f0  f7fffffe          BL       LogReport
0000f4  f7fffffe          BL       ReadECUVersion
0000f8  f7fffffe          BL       Get_Q_FromECU
0000fc  e007              B        |L5.270|
                  |L5.254|
0000fe  4807              LDR      r0,|L5.284|
000100  f8d01009          LDR      r1,[r0,#9]            ;156  ; sysUpdateVar
000104  a01c              ADR      r0,|L5.376|
000106  f7fffffe          BL       LogReport
00010a  f7fffffe          BL       CANTestChannel
                  |L5.270|
00010e  bf00              NOP      
000110  e78a              B        |L5.40|
;;;160    
                          ENDP

000112  0000              DCW      0x0000
                  |L5.276|
                          DCD      LoginMes
                  |L5.280|
                          DCD      varOperation
                  |L5.284|
                          DCD      sysUpdateVar
                  |L5.288|
000120  3031202d          DCB      "01 - ECU Version %d,Need Config.",0
000124  20454355
000128  20566572
00012c  73696f6e
000130  2025642c
000134  4e656564
000138  20436f6e
00013c  6669672e
000140  00      
000141  00                DCB      0
000142  00                DCB      0
000143  00                DCB      0
                  |L5.324|
                          DCD      0x40006400
                  |L5.328|
                          DCD      configData
                  |L5.332|
                          DCD      canRecieveQ
                  |L5.336|
                          DCD      dataToSend
                  |L5.340|
000154  3031202d          DCB      "01 - ECU Version %d test Success.",0
000158  20454355
00015c  20566572
000160  73696f6e
000164  20256420
000168  74657374
00016c  20537563
000170  63657373
000174  2e00    
000176  00                DCB      0
000177  00                DCB      0
                  |L5.376|
000178  45435520          DCB      "ECU Version %d test Error!",0
00017c  56657273
000180  696f6e20
000184  25642074
000188  65737420
00018c  4572726f
000190  722100  
000193  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  dataToSend
                          %        12

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  qMax
000000  045c              DCW      0x045c

                          AREA ||.data||, DATA, ALIGN=1

                  pidManyBag
000000  30000000          DCB      0x30,0x00,0x00,0x00
000004  00000000          DCB      0x00,0x00,0x00,0x00
                  temp
000008  0000              DCB      0x00,0x00
                  readData
00000a  0000              DCW      0x0000
