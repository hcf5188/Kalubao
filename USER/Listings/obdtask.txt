; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\obj\obdtask.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=..\obj\obdtask.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\OBD -I..\SYSTEM -I..\USER -I..\LIB\inc -I..\UCOSII\CONFIG -I..\UCOSII\PORT -I..\UCOSII\CORE -I..\HAEDWARE -I..\GPS -I..\CDMA -I..\DEAL -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\obdtask.crf ..\OBD\OBDTask.c]
                          THUMB

                          AREA ||i.CANTestChannel||, CODE, READONLY, ALIGN=2

                  CANTestChannel PROC
;;;7      
;;;8      void CANTestChannel(void )
000000  b510              PUSH     {r4,lr}
;;;9      {
;;;10     	int i;
;;;11     
;;;12     	dataToSend.testIsOK = 0;
000002  2000              MOVS     r0,#0
000004  4925              LDR      r1,|L1.156|
000006  7208              STRB     r0,[r1,#8]
;;;13     	
;;;14     	for(i=0;i<NUMOFCAN;i++)
000008  2400              MOVS     r4,#0
00000a  e043              B        |L1.148|
                  |L1.12|
;;;15     	{
;;;16     		CAN1_BaudSet(CANSearchLib[i].canBaud);
00000c  4924              LDR      r1,|L1.160|
00000e  eb0101c4          ADD      r1,r1,r4,LSL #3
000012  7948              LDRB     r0,[r1,#5]
000014  f7fffffe          BL       CAN1_BaudSet
;;;17     		CAN1_ClearFilter();
000018  f7fffffe          BL       CAN1_ClearFilter
;;;18     		
;;;19     		CAN1_TxMsg.IDE     = CANSearchLib[i].canIde;
00001c  4820              LDR      r0,|L1.160|
00001e  eb0000c4          ADD      r0,r0,r4,LSL #3
000022  7900              LDRB     r0,[r0,#4]
000024  491f              LDR      r1,|L1.164|
000026  7208              STRB     r0,[r1,#8]
;;;20     		CAN1_TxMsg.StdId   = CANSearchLib[i].canId.dword;
000028  481d              LDR      r0,|L1.160|
00002a  f8500034          LDR      r0,[r0,r4,LSL #3]
00002e  6008              STR      r0,[r1,#0]  ; CAN1_TxMsg
;;;21     		CAN1_TxMsg.ExtId   = CANSearchLib[i].canId.dword;
000030  481b              LDR      r0,|L1.160|
000032  f8500034          LDR      r0,[r0,r4,LSL #3]
000036  6048              STR      r0,[r1,#4]  ; CAN1_TxMsg
;;;22     		CAN1_TxMsg.DLC     = 0x08;
000038  2008              MOVS     r0,#8
00003a  7288              STRB     r0,[r1,#0xa]
;;;23     		
;;;24     		CAN1_TxMsg.Data[0] = 0x02;
00003c  2002              MOVS     r0,#2
00003e  72c8              STRB     r0,[r1,#0xb]
;;;25     		CAN1_TxMsg.Data[1] = 0x01;
000040  2101              MOVS     r1,#1
000042  4818              LDR      r0,|L1.164|
000044  7301              STRB     r1,[r0,#0xc]
;;;26     		CAN1_TxMsg.Data[2] = 0x0D;
000046  210d              MOVS     r1,#0xd
000048  7341              STRB     r1,[r0,#0xd]
;;;27     		CAN1_TxMsg.Data[3] = 0x00;
00004a  2100              MOVS     r1,#0
00004c  7381              STRB     r1,[r0,#0xe]
;;;28     		CAN1_TxMsg.Data[4] = 0x00;
00004e  73c1              STRB     r1,[r0,#0xf]
;;;29     		CAN1_TxMsg.Data[5] = 0x00;
000050  7401              STRB     r1,[r0,#0x10]
;;;30     		CAN1_TxMsg.Data[6] = 0x00;
000052  7441              STRB     r1,[r0,#0x11]
;;;31     		CAN1_TxMsg.Data[7] = 0x00;
000054  7481              STRB     r1,[r0,#0x12]
;;;32     		CAN_Transmit(CAN1,&CAN1_TxMsg);
000056  4601              MOV      r1,r0
000058  4813              LDR      r0,|L1.168|
00005a  f7fffffe          BL       CAN_Transmit
;;;33     
;;;34     		dataToSend.canId = CANSearchLib[i].canId.dword;
00005e  4810              LDR      r0,|L1.160|
000060  f8500034          LDR      r0,[r0,r4,LSL #3]
000064  490d              LDR      r1,|L1.156|
000066  6008              STR      r0,[r1,#0]  ; dataToSend
;;;35     		dataToSend.ide   = CANSearchLib[i].canIde;
000068  480d              LDR      r0,|L1.160|
00006a  eb0000c4          ADD      r0,r0,r4,LSL #3
00006e  7900              LDRB     r0,[r0,#4]
000070  6048              STR      r0,[r1,#4]  ; dataToSend
;;;36     		OSTimeDlyHMSM(0,0,0,100);   //仿真板的回复时间比较长，有的达到60ms以上，故需要延时时间长一点。
000072  2364              MOVS     r3,#0x64
000074  2200              MOVS     r2,#0
000076  4611              MOV      r1,r2
000078  4610              MOV      r0,r2
00007a  f7fffffe          BL       OSTimeDlyHMSM
;;;37     		if(dataToSend.testIsOK == 1)//CAN数据测试通过
00007e  4807              LDR      r0,|L1.156|
000080  7a00              LDRB     r0,[r0,#8]  ; dataToSend
000082  2801              CMP      r0,#1
000084  d100              BNE      |L1.136|
;;;38     			break;
000086  e007              B        |L1.152|
                  |L1.136|
;;;39     		else if(i == (NUMOFCAN - 1))
000088  2c03              CMP      r4,#3
00008a  d102              BNE      |L1.146|
;;;40     			dataToSend.testIsOK = 2;
00008c  2002              MOVS     r0,#2
00008e  4903              LDR      r1,|L1.156|
000090  7208              STRB     r0,[r1,#8]
                  |L1.146|
000092  1c64              ADDS     r4,r4,#1              ;14
                  |L1.148|
000094  2c04              CMP      r4,#4                 ;14
000096  dbb9              BLT      |L1.12|
                  |L1.152|
000098  bf00              NOP                            ;38
;;;41     	}
;;;42     }
00009a  bd10              POP      {r4,pc}
;;;43     
                          ENDP

                  |L1.156|
                          DCD      dataToSend
                  |L1.160|
                          DCD      CANSearchLib
                  |L1.164|
                          DCD      CAN1_TxMsg
                  |L1.168|
                          DCD      0x40006400

                          AREA ||i.OBDTask||, CODE, READONLY, ALIGN=2

                  OBDTask PROC
;;;58     extern _CDMADataToSend* cdmaDataToSend;//CDMA发送的数据中（OBD、GPS），是通过它来作为载体
;;;59     void OBDTask(void *pdata)
000000  b508              PUSH     {r3,lr}
;;;60     {
;;;61     	INT8U     err;
;;;62     	uint8_t   i      = 0;
000002  f04f0800          MOV      r8,#0
;;;63     	uint8_t   cmdLen = 0;        //封包的时候要减去指令的长度
000006  2600              MOVS     r6,#0
;;;64     	uint8_t   cmdNum = 0;        //指令序号
000008  46b1              MOV      r9,r6
;;;65     	uint8_t   cmdManyPackNum = 0;//要接受的多包的数量
00000a  46b2              MOV      r10,r6
;;;66     	
;;;67     	CanRxMsg* CAN1_RxMsg;        //指向接收到的OBD信息
;;;68     	uint8_t * can1_Txbuff;       //指向要发送的OBD信息
;;;69     	uint8_t * ptrSaveBuff;
;;;70     	
;;;71     	CAN1Config();
00000c  f7fffffe          BL       CAN1Config
;;;72     	canSendQ    = OSQCreate(&canSendBuf[0],CANSENDBUF_SIZE);//卡路宝向ECU发送指令的消息队列
000010  2196              MOVS     r1,#0x96
000012  488a              LDR      r0,|L2.572|
000014  f7fffffe          BL       OSQCreate
000018  4989              LDR      r1,|L2.576|
00001a  6008              STR      r0,[r1,#0]  ; canSendQ
;;;73     	canRecieveQ = OSQCreate(&canRecBuf[0],CANRECBUF_SIZE);  //卡路宝从ECU接收指令的循环队列
00001c  210a              MOVS     r1,#0xa
00001e  4889              LDR      r0,|L2.580|
000020  f7fffffe          BL       OSQCreate
000024  4988              LDR      r1,|L2.584|
000026  6008              STR      r0,[r1,#0]  ; canRecieveQ
;;;74     	
;;;75     //	CANTestChannel();//完成CAN的ID、波特率设定，并且读取出ECU的版本号
;;;76     	
;;;77     //	dataToSend.canId = 0x7E0;
;;;78     //	dataToSend.ide   = CAN_ID_STD;
;;;79     //	dataToSend.testIsOK = 1; 
;;;80     	
;;;81     	dataToSend.canId = 0x18DA10FB;
000028  4888              LDR      r0,|L2.588|
00002a  4989              LDR      r1,|L2.592|
00002c  6008              STR      r0,[r1,#0]  ; dataToSend
;;;82     	dataToSend.ide   = CAN_ID_EXT;
00002e  2004              MOVS     r0,#4
000030  6048              STR      r0,[r1,#4]  ; dataToSend
;;;83     	dataToSend.testIsOK = 1; 
000032  2001              MOVS     r0,#1
000034  7208              STRB     r0,[r1,#8]
                  |L2.54|
;;;84     
;;;85     	
;;;86     	while(1)
000036  e0ff              B        |L2.568|
                  |L2.56|
;;;87     	{	
;;;88     		can1_Txbuff = OSQPend(canSendQ,0,&err);//收到PID指令，进行发送
000038  466a              MOV      r2,sp
00003a  2100              MOVS     r1,#0
00003c  4880              LDR      r0,|L2.576|
00003e  6800              LDR      r0,[r0,#0]  ; canSendQ
000040  f7fffffe          BL       OSQPend
000044  4607              MOV      r7,r0
;;;89     		
;;;90     		cmdNum = can1_Txbuff[0];               //记录PID指令序号
000046  f8979000          LDRB     r9,[r7,#0]
;;;91     		cmdLen = can1_Txbuff[1];               //记录PID指令长度
00004a  787e              LDRB     r6,[r7,#1]
;;;92     		
;;;93     		dataToSend.pdat = &can1_Txbuff[1];     
00004c  1c78              ADDS     r0,r7,#1
00004e  4980              LDR      r1,|L2.592|
000050  60c8              STR      r0,[r1,#0xc]  ; dataToSend
;;;94     		OBD_CAN_SendData(dataToSend);          //发送PID指令
000052  4608              MOV      r0,r1
000054  c80f              LDM      r0,{r0-r3}
000056  f7fffffe          BL       OBD_CAN_SendData
;;;95     		Mem_free(can1_Txbuff);                 //释放内存块
00005a  4638              MOV      r0,r7
00005c  f7fffffe          BL       Mem_free
;;;96     		
;;;97     		
;;;98     		CAN1_RxMsg = OSQPend(canRecieveQ,25,&err); //接收到OBD回复
000060  466a              MOV      r2,sp
000062  2119              MOVS     r1,#0x19
000064  4878              LDR      r0,|L2.584|
000066  6800              LDR      r0,[r0,#0]  ; canRecieveQ
000068  f7fffffe          BL       OSQPend
00006c  4604              MOV      r4,r0
;;;99     		if(err == OS_ERR_NONE)
00006e  f89d0000          LDRB     r0,[sp,#0]
000072  2800              CMP      r0,#0
000074  d1df              BNE      |L2.54|
;;;100    		{
;;;101    			freOBDLed = 300;                    //OBD 初始化成功
000076  f44f7096          MOV      r0,#0x12c
00007a  4976              LDR      r1,|L2.596|
00007c  8008              STRH     r0,[r1,#0]
;;;102    			if(CAN1_RxMsg->Data[0] == 0x10)     //多包处理
00007e  7ae0              LDRB     r0,[r4,#0xb]
000080  2810              CMP      r0,#0x10
000082  d17c              BNE      |L2.382|
;;;103    			{
;;;104    				ptrSaveBuff = Mem_malloc(CAN1_RxMsg->Data[1]+10);//申请的内存块足够长
000084  7b21              LDRB     r1,[r4,#0xc]
000086  f101000a          ADD      r0,r1,#0xa
00008a  f7fffffe          BL       Mem_malloc
00008e  4605              MOV      r5,r0
;;;105    				if(ptrSaveBuff != NULL)
000090  2d00              CMP      r5,#0
000092  d0d0              BEQ      |L2.54|
;;;106    				{
;;;107    					ptrSaveBuff[0] = CAN1_RxMsg->Data[1] - cmdLen + 3;
000094  7b20              LDRB     r0,[r4,#0xc]
000096  1b80              SUBS     r0,r0,r6
000098  1cc0              ADDS     r0,r0,#3
00009a  7028              STRB     r0,[r5,#0]
;;;108    					ptrSaveBuff[1] = 0x60;
00009c  2060              MOVS     r0,#0x60
00009e  7068              STRB     r0,[r5,#1]
;;;109    					ptrSaveBuff[2] = cmdNum;
0000a0  f8859002          STRB     r9,[r5,#2]
;;;110    					memcpy(&ptrSaveBuff[3],&CAN1_RxMsg->Data[cmdLen + 2],(6 - cmdLen));
0000a4  f1c60206          RSB      r2,r6,#6
0000a8  f104000b          ADD      r0,r4,#0xb
0000ac  1cb3              ADDS     r3,r6,#2
0000ae  18c1              ADDS     r1,r0,r3
0000b0  1ce8              ADDS     r0,r5,#3
0000b2  f7fffffe          BL       __aeabi_memcpy
;;;111    					cmdManyPackNum = (CAN1_RxMsg->Data[1] - 6)%7 == 0? (CAN1_RxMsg->Data[1] - 6)/7 : (CAN1_RxMsg->Data[1] - 6)/7 + 1;
0000b6  7b20              LDRB     r0,[r4,#0xc]
0000b8  1f80              SUBS     r0,r0,#6
0000ba  2107              MOVS     r1,#7
0000bc  fb90f2f1          SDIV     r2,r0,r1
0000c0  fb010012          MLS      r0,r1,r2,r0
0000c4  b920              CBNZ     r0,|L2.208|
0000c6  7b20              LDRB     r0,[r4,#0xc]
0000c8  1f80              SUBS     r0,r0,#6
0000ca  fb90f0f1          SDIV     r0,r0,r1
0000ce  e005              B        |L2.220|
                  |L2.208|
0000d0  7b20              LDRB     r0,[r4,#0xc]
0000d2  1f80              SUBS     r0,r0,#6
0000d4  2107              MOVS     r1,#7
0000d6  fb90f0f1          SDIV     r0,r0,r1
0000da  1c40              ADDS     r0,r0,#1
                  |L2.220|
0000dc  f0000aff          AND      r10,r0,#0xff
;;;112    					Mem_free(CAN1_RxMsg);
0000e0  4620              MOV      r0,r4
0000e2  f7fffffe          BL       Mem_free
;;;113    					
;;;114    					dataToSend.pdat = pidManyBag;//发送0x30 请求接下来的多包
0000e6  485c              LDR      r0,|L2.600|
0000e8  4959              LDR      r1,|L2.592|
0000ea  60c8              STR      r0,[r1,#0xc]  ; dataToSend
;;;115    					OBD_CAN_SendData(dataToSend);
0000ec  4608              MOV      r0,r1
0000ee  c80f              LDM      r0,{r0-r3}
0000f0  f7fffffe          BL       OBD_CAN_SendData
;;;116    					
;;;117    					for(i=0;i<cmdManyPackNum;i++)
0000f4  f04f0800          MOV      r8,#0
0000f8  e01d              B        |L2.310|
                  |L2.250|
;;;118    					{
;;;119    						CAN1_RxMsg = OSQPend(canRecieveQ,25,&err);//接收多包
0000fa  466a              MOV      r2,sp
0000fc  2119              MOVS     r1,#0x19
0000fe  4852              LDR      r0,|L2.584|
000100  6800              LDR      r0,[r0,#0]  ; canRecieveQ
000102  f7fffffe          BL       OSQPend
000106  4604              MOV      r4,r0
;;;120    						if(err == OS_ERR_NONE)
000108  f89d0000          LDRB     r0,[sp,#0]
00010c  b970              CBNZ     r0,|L2.300|
;;;121    						{
;;;122    							memcpy(&ptrSaveBuff[7*i + 9 - cmdLen],&CAN1_RxMsg->Data[1],7);
00010e  ebc800c8          RSB      r0,r8,r8,LSL #3
000112  3009              ADDS     r0,r0,#9
000114  1b80              SUBS     r0,r0,r6
000116  1941              ADDS     r1,r0,r5
000118  68e2              LDR      r2,[r4,#0xc]
00011a  600a              STR      r2,[r1,#0]
00011c  8a22              LDRH     r2,[r4,#0x10]
00011e  808a              STRH     r2,[r1,#4]
000120  7ca0              LDRB     r0,[r4,#0x12]
000122  7188              STRB     r0,[r1,#6]
;;;123    							Mem_free(CAN1_RxMsg);
000124  4620              MOV      r0,r4
000126  f7fffffe          BL       Mem_free
00012a  e000              B        |L2.302|
                  |L2.300|
;;;124    						}
;;;125    						else break;
00012c  e005              B        |L2.314|
                  |L2.302|
00012e  f1080001          ADD      r0,r8,#1              ;117
000132  f00008ff          AND      r8,r0,#0xff           ;117
                  |L2.310|
000136  45d0              CMP      r8,r10                ;117
000138  dbdf              BLT      |L2.250|
                  |L2.314|
00013a  bf00              NOP      
;;;126    					}
;;;127    					if(i == cmdManyPackNum)
00013c  45d0              CMP      r8,r10
00013e  d11c              BNE      |L2.378|
;;;128    					{
;;;129    						OSMutexPend(CDMASendMutex,0,&err);
000140  466a              MOV      r2,sp
000142  2100              MOVS     r1,#0
000144  4845              LDR      r0,|L2.604|
000146  6800              LDR      r0,[r0,#0]  ; CDMASendMutex
000148  f7fffffe          BL       OSMutexPend
;;;130    						
;;;131    						memcpy(&cdmaDataToSend->data[cdmaDataToSend->datLength],ptrSaveBuff,ptrSaveBuff[0]);
00014c  782a              LDRB     r2,[r5,#0]
00014e  4944              LDR      r1,|L2.608|
000150  6809              LDR      r1,[r1,#0]  ; cdmaDataToSend
000152  880b              LDRH     r3,[r1,#0]
000154  4942              LDR      r1,|L2.608|
000156  6809              LDR      r1,[r1,#0]  ; cdmaDataToSend
000158  1d09              ADDS     r1,r1,#4
00015a  1858              ADDS     r0,r3,r1
00015c  4629              MOV      r1,r5
00015e  f7fffffe          BL       __aeabi_memcpy
;;;132    						cdmaDataToSend->datLength += ptrSaveBuff[0];
000162  483f              LDR      r0,|L2.608|
000164  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
000166  8800              LDRH     r0,[r0,#0]
000168  7829              LDRB     r1,[r5,#0]
00016a  4408              ADD      r0,r0,r1
00016c  493c              LDR      r1,|L2.608|
00016e  6809              LDR      r1,[r1,#0]  ; cdmaDataToSend
000170  8008              STRH     r0,[r1,#0]
;;;133    						
;;;134    						OSMutexPost(CDMASendMutex);
000172  483a              LDR      r0,|L2.604|
000174  6800              LDR      r0,[r0,#0]  ; CDMASendMutex
000176  f7fffffe          BL       OSMutexPost
                  |L2.378|
;;;135    					}
;;;136    					Mem_free(ptrSaveBuff);
00017a  4628              MOV      r0,r5
00017c  e000              B        |L2.384|
                  |L2.382|
00017e  e002              B        |L2.390|
                  |L2.384|
000180  f7fffffe          BL       Mem_free
000184  e058              B        |L2.568|
                  |L2.390|
;;;137    				}
;;;138    			}
;;;139    			else  //单包处理
;;;140    			{
;;;141    				OSMutexPend(CDMASendMutex,0,&err);
000186  466a              MOV      r2,sp
000188  2100              MOVS     r1,#0
00018a  4834              LDR      r0,|L2.604|
00018c  6800              LDR      r0,[r0,#0]  ; CDMASendMutex
00018e  f7fffffe          BL       OSMutexPend
;;;142    				
;;;143    				cdmaDataToSend->data[cdmaDataToSend->datLength++] = CAN1_RxMsg->Data[0] - cmdLen + 3;
000192  7ae0              LDRB     r0,[r4,#0xb]
000194  1b80              SUBS     r0,r0,r6
000196  1cc0              ADDS     r0,r0,#3
000198  b2c1              UXTB     r1,r0
00019a  4831              LDR      r0,|L2.608|
00019c  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
00019e  8802              LDRH     r2,[r0,#0]
0001a0  482f              LDR      r0,|L2.608|
0001a2  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
0001a4  8800              LDRH     r0,[r0,#0]
0001a6  1c40              ADDS     r0,r0,#1
0001a8  4b2d              LDR      r3,|L2.608|
0001aa  681b              LDR      r3,[r3,#0]  ; cdmaDataToSend
0001ac  8018              STRH     r0,[r3,#0]
0001ae  482c              LDR      r0,|L2.608|
0001b0  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
0001b2  1d00              ADDS     r0,r0,#4
0001b4  5481              STRB     r1,[r0,r2]
;;;144    				cdmaDataToSend->data[cdmaDataToSend->datLength++] = 0x60;
0001b6  2160              MOVS     r1,#0x60
0001b8  4829              LDR      r0,|L2.608|
0001ba  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
0001bc  8802              LDRH     r2,[r0,#0]
0001be  4828              LDR      r0,|L2.608|
0001c0  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
0001c2  8800              LDRH     r0,[r0,#0]
0001c4  1c40              ADDS     r0,r0,#1
0001c6  4b26              LDR      r3,|L2.608|
0001c8  681b              LDR      r3,[r3,#0]  ; cdmaDataToSend
0001ca  8018              STRH     r0,[r3,#0]
0001cc  4824              LDR      r0,|L2.608|
0001ce  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
0001d0  1d00              ADDS     r0,r0,#4
0001d2  5481              STRB     r1,[r0,r2]
;;;145    				cdmaDataToSend->data[cdmaDataToSend->datLength++] = cmdNum;
0001d4  4822              LDR      r0,|L2.608|
0001d6  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
0001d8  8801              LDRH     r1,[r0,#0]
0001da  4821              LDR      r0,|L2.608|
0001dc  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
0001de  8800              LDRH     r0,[r0,#0]
0001e0  1c40              ADDS     r0,r0,#1
0001e2  4a1f              LDR      r2,|L2.608|
0001e4  6812              LDR      r2,[r2,#0]  ; cdmaDataToSend
0001e6  8010              STRH     r0,[r2,#0]
0001e8  481d              LDR      r0,|L2.608|
0001ea  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
0001ec  1d00              ADDS     r0,r0,#4
0001ee  f8009001          STRB     r9,[r0,r1]
;;;146    						
;;;147    				memcpy(&cdmaDataToSend->data[cdmaDataToSend->datLength],&CAN1_RxMsg->Data[cmdLen+1],(CAN1_RxMsg->Data[0] - cmdLen));
0001f2  7ae3              LDRB     r3,[r4,#0xb]
0001f4  1b9a              SUBS     r2,r3,r6
0001f6  f104030b          ADD      r3,r4,#0xb
0001fa  f1060c01          ADD      r12,r6,#1
0001fe  eb03010c          ADD      r1,r3,r12
000202  4b17              LDR      r3,|L2.608|
000204  681b              LDR      r3,[r3,#0]  ; cdmaDataToSend
000206  f8b3c000          LDRH     r12,[r3,#0]
00020a  4b15              LDR      r3,|L2.608|
00020c  681b              LDR      r3,[r3,#0]  ; cdmaDataToSend
00020e  1d1b              ADDS     r3,r3,#4
000210  eb0c0003          ADD      r0,r12,r3
000214  f7fffffe          BL       __aeabi_memcpy
;;;148    				cdmaDataToSend->datLength += CAN1_RxMsg->Data[0] - cmdLen;
000218  4811              LDR      r0,|L2.608|
00021a  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
00021c  8800              LDRH     r0,[r0,#0]
00021e  7ae1              LDRB     r1,[r4,#0xb]
000220  1b89              SUBS     r1,r1,r6
000222  4408              ADD      r0,r0,r1
000224  490e              LDR      r1,|L2.608|
000226  6809              LDR      r1,[r1,#0]  ; cdmaDataToSend
000228  8008              STRH     r0,[r1,#0]
;;;149    						
;;;150    				OSMutexPost(CDMASendMutex);
00022a  480c              LDR      r0,|L2.604|
00022c  6800              LDR      r0,[r0,#0]  ; CDMASendMutex
00022e  f7fffffe          BL       OSMutexPost
;;;151    				
;;;152    				Mem_free(CAN1_RxMsg);
000232  4620              MOV      r0,r4
000234  f7fffffe          BL       Mem_free
                  |L2.568|
000238  e6fe              B        |L2.56|
;;;153    			}
;;;154    		}
;;;155    	}
;;;156    }
;;;157    
                          ENDP

00023a  0000              DCW      0x0000
                  |L2.572|
                          DCD      canSendBuf
                  |L2.576|
                          DCD      canSendQ
                  |L2.580|
                          DCD      canRecBuf
                  |L2.584|
                          DCD      canRecieveQ
                  |L2.588|
                          DCD      0x18da10fb
                  |L2.592|
                          DCD      dataToSend
                  |L2.596|
                          DCD      freOBDLed
                  |L2.600|
                          DCD      pidManyBag
                  |L2.604|
                          DCD      CDMASendMutex
                  |L2.608|
                          DCD      cdmaDataToSend

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  CAN1_TxMsg
                          %        20
                  dataToSend
                          %        16
                  canRecBuf
                          %        40
                  canSendBuf
                          %        600

                          AREA ||.data||, DATA, ALIGN=2

                  pidManyBag
000000  30000000          DCB      0x30,0x00,0x00,0x00
000004  00000000          DCB      0x00,0x00,0x00,0x00
                  canRecieveQ
                          DCD      0x00000000
                  canSendQ
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\OBD\\OBDTask.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_OBDTask_c_bb9fee60____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_OBDTask_c_bb9fee60____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_OBDTask_c_bb9fee60____REVSH|
#line 144
|__asm___9_OBDTask_c_bb9fee60____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
