; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\obj\strengthenpower.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=..\obj\strengthenpower.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\OBD -I..\SYSTEM -I..\USER -I..\LIB\inc -I..\UCOSII\CONFIG -I..\UCOSII\PORT -I..\UCOSII\CORE -I..\HAEDWARE -I..\GPS -I..\CDMA -I..\DEAL -I..\USB\CONFIG -I..\USB\STM32_USB-FS-Device_Driver\inc -I.\RTE\_Project -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\5.2.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=524 -D_RTE_ -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\strengthenpower.crf ..\OBD\strengthenPower.c]
                          THUMB

                          AREA ||i.Get_Q_FromECU||, CODE, READONLY, ALIGN=2

                  Get_Q_FromECU PROC
;;;249    			};
;;;250    void Get_Q_FromECU(uint8_t ver)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;251    {
000004  b087              SUB      sp,sp,#0x1c
000006  4680              MOV      r8,r0
;;;252    	uint8_t* ptrSetCmd;
;;;253    	uint8_t* ptrVer;
;;;254    	CanRxMsg* CAN1_RxMsg;
;;;255    	uint8_t  i,err;
;;;256    	uint16_t dat1,dat2,datSma,datFlash;
;;;257    	uint8_t qNum = 0;
000008  2700              MOVS     r7,#0
;;;258    	uint8_t offset = 0,bag = 0x21;
00000a  2500              MOVS     r5,#0
00000c  2021              MOVS     r0,#0x21
00000e  9002              STR      r0,[sp,#8]
;;;259    	static uint8_t  temp = 0;
;;;260        
;;;261    	uint8_t textEcu[8] = {0x05,0x23,0x00,0x00,0x00,0x02,0x00,0x00};
000010  a1aa              ADR      r1,|L1.700|
000012  c903              LDM      r1,{r0,r1}
000014  e9cd0100          STRD     r0,r1,[sp,#0]
;;;262    	
;;;263    	ptrSetCmd  = Mem_malloc(8);
000018  2008              MOVS     r0,#8
00001a  f7fffffe          BL       Mem_malloc
00001e  9006              STR      r0,[sp,#0x18]
;;;264    	ptrVer = Mem_malloc(100);
000020  2064              MOVS     r0,#0x64
000022  f7fffffe          BL       Mem_malloc
000026  4606              MOV      r6,r0
;;;265    	ptrVer[0] = 0x10;ptrVer[2] = 0x3D;
000028  2010              MOVS     r0,#0x10
00002a  7030              STRB     r0,[r6,#0]
00002c  203d              MOVS     r0,#0x3d
00002e  70b0              STRB     r0,[r6,#2]
;;;266    	for(i=0;i<pAddr[ver][0];i++)//写入ECU喷油量的地址
000030  2400              MOVS     r4,#0
000032  e00a              B        |L1.74|
                  |L1.52|
;;;267    	{
;;;268    		textEcu[i+2] = pAddr[ver][i+1];
000034  eb080088          ADD      r0,r8,r8,LSL #2
000038  49a2              LDR      r1,|L1.708|
00003a  4401              ADD      r1,r1,r0
00003c  1c60              ADDS     r0,r4,#1
00003e  5c09              LDRB     r1,[r1,r0]
000040  1ca0              ADDS     r0,r4,#2
000042  f80d1000          STRB     r1,[sp,r0]
000046  1c60              ADDS     r0,r4,#1              ;266
000048  b2c4              UXTB     r4,r0                 ;266
                  |L1.74|
00004a  eb080088          ADD      r0,r8,r8,LSL #2       ;266
00004e  499d              LDR      r1,|L1.708|
000050  5c08              LDRB     r0,[r1,r0]            ;266
000052  42a0              CMP      r0,r4                 ;266
000054  dcee              BGT      |L1.52|
;;;269    	}
;;;270    
;;;271    	dataToSend.pdat   = textEcu;
000056  499c              LDR      r1,|L1.712|
000058  f8c1d008          STR      sp,[r1,#8]  ; dataToSend
;;;272    	OBD_CAN_SendData(dataToSend.canId,dataToSend.ide,dataToSend.pdat); 
00005c  460b              MOV      r3,r1
00005e  689a              LDR      r2,[r3,#8]  ; dataToSend
000060  6859              LDR      r1,[r3,#4]  ; dataToSend
000062  6818              LDR      r0,[r3,#0]  ; dataToSend
000064  f7fffffe          BL       OBD_CAN_SendData
;;;273    	CAN1_RxMsg = OSQPend(canRecieveQ,50,&err);
000068  aa05              ADD      r2,sp,#0x14
00006a  2132              MOVS     r1,#0x32
00006c  4897              LDR      r0,|L1.716|
00006e  6800              LDR      r0,[r0,#0]  ; canRecieveQ
000070  f7fffffe          BL       OSQPend
000074  4683              MOV      r11,r0
;;;274    	if(err == OS_ERR_NONE)
000076  f89d0014          LDRB     r0,[sp,#0x14]
00007a  2800              CMP      r0,#0
00007c  d17e              BNE      |L1.380|
;;;275    	{
;;;276    		qNum = CAN1_RxMsg->Data[2];
00007e  f89b700d          LDRB     r7,[r11,#0xd]
;;;277    		ptrVer[3 + pAddr[ver][0]] = qNum * 2;
000082  0678              LSLS     r0,r7,#25
000084  0e01              LSRS     r1,r0,#24
000086  eb080088          ADD      r0,r8,r8,LSL #2
00008a  4a8e              LDR      r2,|L1.708|
00008c  5c10              LDRB     r0,[r2,r0]
00008e  1cc0              ADDS     r0,r0,#3
000090  5431              STRB     r1,[r6,r0]
;;;278    		ptrVer[1] = qNum * 2 + pAddr[ver][0] + 2;
000092  eb080088          ADD      r0,r8,r8,LSL #2
000096  4611              MOV      r1,r2
000098  5c08              LDRB     r0,[r1,r0]
00009a  eb000047          ADD      r0,r0,r7,LSL #1
00009e  1c80              ADDS     r0,r0,#2
0000a0  7070              STRB     r0,[r6,#1]
;;;279    		offset = pAddr[ver][0] + 4;
0000a2  eb080088          ADD      r0,r8,r8,LSL #2
0000a6  5c08              LDRB     r0,[r1,r0]
0000a8  1d00              ADDS     r0,r0,#4
0000aa  b2c5              UXTB     r5,r0
;;;280    		
;;;281    		dat1 = textEcu[3];
0000ac  f89d9003          LDRB     r9,[sp,#3]
;;;282    		dat2 = textEcu[4]+qNum*2;
0000b0  f89d0004          LDRB     r0,[sp,#4]
0000b4  eb000a47          ADD      r10,r0,r7,LSL #1
;;;283    		if(dat2 >= 256)
0000b8  f1ba0fff          CMP      r10,#0xff
0000bc  dd03              BLE      |L1.198|
;;;284    			dat1++;
0000be  f1090001          ADD      r0,r9,#1
0000c2  fa1ff980          UXTH     r9,r0
                  |L1.198|
;;;285    		textEcu[3] = dat1;
0000c6  f00900ff          AND      r0,r9,#0xff
0000ca  f88d0003          STRB     r0,[sp,#3]
;;;286    		textEcu[4] += (qNum*2 + 2);
0000ce  f89d0004          LDRB     r0,[sp,#4]
0000d2  2102              MOVS     r1,#2
0000d4  eb010147          ADD      r1,r1,r7,LSL #1
0000d8  4408              ADD      r0,r0,r1
0000da  b2c0              UXTB     r0,r0
0000dc  f88d0004          STRB     r0,[sp,#4]
;;;287    		Mem_free(CAN1_RxMsg);
0000e0  4658              MOV      r0,r11
0000e2  f7fffffe          BL       Mem_free
;;;288    		
;;;289    		for(i=0;i<pAddr[ver][0];i++)//写入ECU喷油量的地址
0000e6  2400              MOVS     r4,#0
0000e8  e006              B        |L1.248|
                  |L1.234|
;;;290    		{
;;;291    			ptrVer[i+3] = textEcu[i+2];
0000ea  1ca0              ADDS     r0,r4,#2
0000ec  f81d1000          LDRB     r1,[sp,r0]
0000f0  1ce0              ADDS     r0,r4,#3
0000f2  5431              STRB     r1,[r6,r0]
0000f4  1c60              ADDS     r0,r4,#1              ;289
0000f6  b2c4              UXTB     r4,r0                 ;289
                  |L1.248|
0000f8  eb080088          ADD      r0,r8,r8,LSL #2       ;289
0000fc  4971              LDR      r1,|L1.708|
0000fe  5c08              LDRB     r0,[r1,r0]            ;289
000100  42a0              CMP      r0,r4                 ;289
000102  dcf2              BGT      |L1.234|
;;;292    		}
;;;293    		
;;;294    		for(i=0;i<qNum;i++)
000104  2400              MOVS     r4,#0
000106  e0c4              B        |L1.658|
                  |L1.264|
;;;295    		{
;;;296    			memcpy(ptrSetCmd,textEcu,8);
000108  9900              LDR      r1,[sp,#0]
00010a  9806              LDR      r0,[sp,#0x18]
00010c  6001              STR      r1,[r0,#0]
00010e  9901              LDR      r1,[sp,#4]
000110  6041              STR      r1,[r0,#4]
;;;297    			dataToSend.pdat   = textEcu;
000112  496d              LDR      r1,|L1.712|
000114  f8c1d008          STR      sp,[r1,#8]  ; dataToSend
;;;298    			OBD_CAN_SendData(dataToSend.canId,dataToSend.ide,dataToSend.pdat); 
000118  460b              MOV      r3,r1
00011a  689a              LDR      r2,[r3,#8]  ; dataToSend
00011c  6859              LDR      r1,[r3,#4]  ; dataToSend
00011e  6818              LDR      r0,[r3,#0]  ; dataToSend
000120  f7fffffe          BL       OBD_CAN_SendData
;;;299    			CAN1_RxMsg = OSQPend(canRecieveQ,50,&err);
000124  aa05              ADD      r2,sp,#0x14
000126  2132              MOVS     r1,#0x32
000128  4868              LDR      r0,|L1.716|
00012a  6800              LDR      r0,[r0,#0]  ; canRecieveQ
00012c  f7fffffe          BL       OSQPend
000130  4683              MOV      r11,r0
;;;300    			if(err == OS_ERR_NONE)
000132  f89d0014          LDRB     r0,[sp,#0x14]
000136  2800              CMP      r0,#0
000138  d17d              BNE      |L1.566|
;;;301    			{	
;;;302    				dat1 = CAN1_RxMsg->Data[3];
00013a  f89b900e          LDRB     r9,[r11,#0xe]
;;;303    				dat1 = (dat1 << 8) + CAN1_RxMsg->Data[2];
00013e  f89b000d          LDRB     r0,[r11,#0xd]
000142  eb002009          ADD      r0,r0,r9,LSL #8
000146  fa1ff980          UXTH     r9,r0
;;;304    				datSma = dat1/20;
00014a  2014              MOVS     r0,#0x14
00014c  fb99f0f0          SDIV     r0,r9,r0
000150  b280              UXTH     r0,r0
000152  9004              STR      r0,[sp,#0x10]
;;;305    				
;;;306    				dat2 = dat1 + datSma;
000154  9804              LDR      r0,[sp,#0x10]
000156  4448              ADD      r0,r0,r9
000158  fa1ffa80          UXTH     r10,r0
;;;307    			
;;;308    //				LogReport("CURR_OIL:%d,COM_OIL:%d",dat1,dat2);
;;;309    				if(offset % 8 == 0)
00015c  17e9              ASRS     r1,r5,#31
00015e  eb057151          ADD      r1,r5,r1,LSR #29
000162  10c9              ASRS     r1,r1,#3
000164  eba501c1          SUB      r1,r5,r1,LSL #3
000168  b951              CBNZ     r1,|L1.384|
;;;310    					ptrVer[offset++] = bag++;
00016a  4629              MOV      r1,r5
00016c  1c6a              ADDS     r2,r5,#1
00016e  b2d5              UXTB     r5,r2
000170  9802              LDR      r0,[sp,#8]
000172  5470              STRB     r0,[r6,r1]
000174  9802              LDR      r0,[sp,#8]
000176  1c40              ADDS     r0,r0,#1
000178  b2c0              UXTB     r0,r0
00017a  e000              B        |L1.382|
                  |L1.380|
00017c  e08d              B        |L1.666|
                  |L1.382|
00017e  9002              STR      r0,[sp,#8]
                  |L1.384|
;;;311    				ptrVer[offset++] = dat2 & 0x00FF;
000180  4628              MOV      r0,r5
000182  1c69              ADDS     r1,r5,#1
000184  b2cd              UXTB     r5,r1
000186  f806a000          STRB     r10,[r6,r0]
;;;312    				if(offset % 8 == 0)
00018a  17e9              ASRS     r1,r5,#31
00018c  eb057151          ADD      r1,r5,r1,LSR #29
000190  10c9              ASRS     r1,r1,#3
000192  eba501c1          SUB      r1,r5,r1,LSL #3
000196  b941              CBNZ     r1,|L1.426|
;;;313    					ptrVer[offset++] = bag++;
000198  4629              MOV      r1,r5
00019a  1c6a              ADDS     r2,r5,#1
00019c  b2d5              UXTB     r5,r2
00019e  9802              LDR      r0,[sp,#8]
0001a0  5470              STRB     r0,[r6,r1]
0001a2  9802              LDR      r0,[sp,#8]
0001a4  1c40              ADDS     r0,r0,#1
0001a6  b2c0              UXTB     r0,r0
0001a8  9002              STR      r0,[sp,#8]
                  |L1.426|
;;;314    				ptrVer[offset++] = (dat2>>8) & 0x00FF;
0001aa  ea4f221a          LSR      r2,r10,#8
0001ae  4628              MOV      r0,r5
0001b0  1c69              ADDS     r1,r5,#1
0001b2  b2cd              UXTB     r5,r1
0001b4  5432              STRB     r2,[r6,r0]
;;;315    				Mem_free(CAN1_RxMsg);
0001b6  4658              MOV      r0,r11
0001b8  f7fffffe          BL       Mem_free
;;;316    				if(strengPower[0] != 0x1A)				
0001bc  4844              LDR      r0,|L1.720|
0001be  7800              LDRB     r0,[r0,#0]  ; strengPower
0001c0  281a              CMP      r0,#0x1a
0001c2  d00c              BEQ      |L1.478|
;;;317    				{
;;;318    					strengPower[i*2 + 1] = dat2 & 0x00FF;
0001c4  2101              MOVS     r1,#1
0001c6  eb010144          ADD      r1,r1,r4,LSL #1
0001ca  4a41              LDR      r2,|L1.720|
0001cc  f802a001          STRB     r10,[r2,r1]
;;;319    					strengPower[i*2 + 2] = (dat2>>8) & 0x00FF;
0001d0  ea4f201a          LSR      r0,r10,#8
0001d4  2102              MOVS     r1,#2
0001d6  eb010144          ADD      r1,r1,r4,LSL #1
0001da  5450              STRB     r0,[r2,r1]
0001dc  e032              B        |L1.580|
                  |L1.478|
;;;320    				}else
;;;321    				{
;;;322    					datFlash = strengPower[i*2 + 2];
0001de  2002              MOVS     r0,#2
0001e0  eb000044          ADD      r0,r0,r4,LSL #1
0001e4  493a              LDR      r1,|L1.720|
0001e6  5c08              LDRB     r0,[r1,r0]
0001e8  9003              STR      r0,[sp,#0xc]
;;;323    					datFlash <<= 8;
0001ea  f64f71ff          MOV      r1,#0xffff
0001ee  9803              LDR      r0,[sp,#0xc]
0001f0  ea012000          AND      r0,r1,r0,LSL #8
0001f4  9003              STR      r0,[sp,#0xc]
;;;324    					datFlash += strengPower[i*2 + 1];
0001f6  2001              MOVS     r0,#1
0001f8  eb000044          ADD      r0,r0,r4,LSL #1
0001fc  4934              LDR      r1,|L1.720|
0001fe  5c09              LDRB     r1,[r1,r0]
000200  9803              LDR      r0,[sp,#0xc]
000202  4408              ADD      r0,r0,r1
000204  b280              UXTH     r0,r0
000206  9003              STR      r0,[sp,#0xc]
;;;325    					if(datFlash != dat2)
000208  9803              LDR      r0,[sp,#0xc]
00020a  4550              CMP      r0,r10
00020c  d01a              BEQ      |L1.580|
;;;326    					{
;;;327    						LogReport("PenYou Read With Flash Don't Equal!!!");
00020e  a031              ADR      r0,|L1.724|
000210  f7fffffe          BL       LogReport
;;;328    						if(datFlash == dat1)
000214  9803              LDR      r0,[sp,#0xc]
000216  4548              CMP      r0,r9
000218  d105              BNE      |L1.550|
;;;329    							varOperation.oilMode = 1;//动力已经增强过了
00021a  2001              MOVS     r0,#1
00021c  4937              LDR      r1,|L1.764|
00021e  f8810094          STRB     r0,[r1,#0x94]
000222  e004              B        |L1.558|
000224  e007              B        |L1.566|
                  |L1.550|
;;;330    						else
;;;331    							varOperation.oilMode = 0;//ECU不匹配
000226  2000              MOVS     r0,#0
000228  4934              LDR      r1,|L1.764|
00022a  f8810094          STRB     r0,[r1,#0x94]
                  |L1.558|
;;;332    						temp = 1;//动力不能增强
00022e  2001              MOVS     r0,#1
000230  4933              LDR      r1,|L1.768|
000232  7008              STRB     r0,[r1,#0]
;;;333    						break;
000234  e030              B        |L1.664|
                  |L1.566|
;;;334    					}
;;;335    				}
;;;336    			}else{
;;;337    				LogReport("PenYou Read Wrong!!!");
000236  a033              ADR      r0,|L1.772|
000238  f7fffffe          BL       LogReport
;;;338    				temp = 1;//读取喷油量出错
00023c  2001              MOVS     r0,#1
00023e  4930              LDR      r1,|L1.768|
000240  7008              STRB     r0,[r1,#0]
;;;339    				break;
000242  e029              B        |L1.664|
                  |L1.580|
;;;340    			}	
;;;341    			if(strengPower[0] != 0x1A && i == (qNum - 1))
000244  4822              LDR      r0,|L1.720|
000246  7800              LDRB     r0,[r0,#0]  ; strengPower
000248  281a              CMP      r0,#0x1a
00024a  d010              BEQ      |L1.622|
00024c  1e78              SUBS     r0,r7,#1
00024e  42a0              CMP      r0,r4
000250  d10d              BNE      |L1.622|
;;;342    			{
;;;343    				strengPower[0] = 0x1A;
000252  201a              MOVS     r0,#0x1a
000254  491e              LDR      r1,|L1.720|
000256  7008              STRB     r0,[r1,#0]
;;;344    				SoftErasePage(STRENGE_Q);
000258  4830              LDR      r0,|L1.796|
00025a  f7fffffe          BL       SoftErasePage
;;;345    				Save2KDataToFlash(strengPower,STRENGE_Q,200);
00025e  22c8              MOVS     r2,#0xc8
000260  492e              LDR      r1,|L1.796|
000262  481b              LDR      r0,|L1.720|
000264  f7fffffe          BL       Save2KDataToFlash
;;;346    				LogReport("PenYou Write to Flash OK!!!");
000268  a02d              ADR      r0,|L1.800|
00026a  f7fffffe          BL       LogReport
                  |L1.622|
;;;347    			}	
;;;348    			textEcu[4] += 2;
00026e  f89d0004          LDRB     r0,[sp,#4]
000272  1c80              ADDS     r0,r0,#2
000274  b2c0              UXTB     r0,r0
000276  f88d0004          STRB     r0,[sp,#4]
;;;349    			if(textEcu[4] == 0x02)
00027a  f89d0004          LDRB     r0,[sp,#4]
00027e  2802              CMP      r0,#2
000280  d105              BNE      |L1.654|
;;;350    				textEcu[3] ++;
000282  f89d0003          LDRB     r0,[sp,#3]
000286  1c40              ADDS     r0,r0,#1
000288  b2c0              UXTB     r0,r0
00028a  f88d0003          STRB     r0,[sp,#3]
                  |L1.654|
00028e  1c60              ADDS     r0,r4,#1              ;294
000290  b2c4              UXTB     r4,r0                 ;294
                  |L1.658|
000292  42bc              CMP      r4,r7                 ;294
000294  f6ffaf38          BLT      |L1.264|
                  |L1.664|
000298  bf00              NOP                            ;333
                  |L1.666|
;;;351    		}
;;;352    	}
;;;353    	//安全算法，加写入数据
;;;354    	if(temp == 0)//保证不会重复写入、不会增大到不可限制
00029a  4819              LDR      r0,|L1.768|
00029c  7800              LDRB     r0,[r0,#0]  ; temp
00029e  b930              CBNZ     r0,|L1.686|
;;;355    	{
;;;356    		temp = 1;
0002a0  2001              MOVS     r0,#1
0002a2  4917              LDR      r1,|L1.768|
0002a4  7008              STRB     r0,[r1,#0]
;;;357    		SafeALG(ptrVer);//安全算法
0002a6  4630              MOV      r0,r6
0002a8  f7fffffe          BL       SafeALG
0002ac  e002              B        |L1.692|
                  |L1.686|
;;;358    	}
;;;359    	else
;;;360    	{
;;;361    		Mem_free(ptrVer);
0002ae  4630              MOV      r0,r6
0002b0  f7fffffe          BL       Mem_free
                  |L1.692|
;;;362    	}
;;;363    }
0002b4  b007              ADD      sp,sp,#0x1c
0002b6  e8bd8ff0          POP      {r4-r11,pc}
;;;364    
                          ENDP

0002ba  0000              DCW      0x0000
                  |L1.700|
0002bc  052300            DCB      5,"#",0
0002bf  00                DCB      0
0002c0  00                DCB      0
0002c1  0200              DCB      2,0
0002c3  00                DCB      0
                  |L1.708|
                          DCD      pAddr
                  |L1.712|
                          DCD      dataToSend
                  |L1.716|
                          DCD      canRecieveQ
                  |L1.720|
                          DCD      strengPower
                  |L1.724|
0002d4  50656e59          DCB      "PenYou Read With Flash Don't Equal!!!",0
0002d8  6f752052
0002dc  65616420
0002e0  57697468
0002e4  20466c61
0002e8  73682044
0002ec  6f6e2774
0002f0  20457175
0002f4  616c2121
0002f8  2100    
0002fa  00                DCB      0
0002fb  00                DCB      0
                  |L1.764|
                          DCD      varOperation
                  |L1.768|
                          DCD      temp
                  |L1.772|
000304  50656e59          DCB      "PenYou Read Wrong!!!",0
000308  6f752052
00030c  65616420
000310  57726f6e
000314  67212121
000318  00      
000319  00                DCB      0
00031a  00                DCB      0
00031b  00                DCB      0
                  |L1.796|
                          DCD      0x08060000
                  |L1.800|
000320  50656e59          DCB      "PenYou Write to Flash OK!!!",0
000324  6f752057
000328  72697465
00032c  20746f20
000330  466c6173
000334  68204f4b
000338  21212100

                          AREA ||i.ReadECUVersion||, CODE, READONLY, ALIGN=2

                  ReadECUVersion PROC
;;;123    
;;;124    uint8_t  ReadECUVersion(uint8_t cmd[])//读取ECU版本号
000000  b5f8              PUSH     {r3-r7,lr}
;;;125    {
000002  4607              MOV      r7,r0
;;;126    	uint8_t err,i=0;
000004  2400              MOVS     r4,#0
;;;127    	uint8_t* ptrVer;
;;;128    	CanRxMsg* CAN1_RxMsg;
;;;129    	
;;;130    	ptrVer = Mem_malloc(60);
000006  203c              MOVS     r0,#0x3c
000008  f7fffffe          BL       Mem_malloc
00000c  4605              MOV      r5,r0
;;;131    
;;;132    	dataToSend.pdat   = cmd;
00000e  4848              LDR      r0,|L2.304|
000010  6087              STR      r7,[r0,#8]  ; dataToSend
;;;133    	OBD_CAN_SendData(dataToSend.canId,dataToSend.ide,dataToSend.pdat); 
000012  4603              MOV      r3,r0
000014  689a              LDR      r2,[r3,#8]  ; dataToSend
000016  6859              LDR      r1,[r3,#4]  ; dataToSend
000018  6818              LDR      r0,[r3,#0]  ; dataToSend
00001a  f7fffffe          BL       OBD_CAN_SendData
;;;134    	CAN1_RxMsg = OSQPend(canRecieveQ,50,&err);
00001e  466a              MOV      r2,sp
000020  2132              MOVS     r1,#0x32
000022  4844              LDR      r0,|L2.308|
000024  6800              LDR      r0,[r0,#0]  ; canRecieveQ
000026  f7fffffe          BL       OSQPend
00002a  4606              MOV      r6,r0
;;;135    	if((err == OS_ERR_NONE)&&(CAN1_RxMsg->Data[0] == 0x10))
00002c  f89d0000          LDRB     r0,[sp,#0]
000030  b948              CBNZ     r0,|L2.70|
000032  7af0              LDRB     r0,[r6,#0xb]
000034  2810              CMP      r0,#0x10
000036  d106              BNE      |L2.70|
;;;136    	{
;;;137    		memcpy(ptrVer,&CAN1_RxMsg->Data[4],4);
000038  f8d6000f          LDR      r0,[r6,#0xf]
00003c  6028              STR      r0,[r5,#0]
;;;138    		Mem_free(CAN1_RxMsg);
00003e  4630              MOV      r0,r6
000040  f7fffffe          BL       Mem_free
000044  e004              B        |L2.80|
                  |L2.70|
;;;139    	}
;;;140    	else 
;;;141    	{
;;;142    		LogReport("\r\n17-ECUVer read fail!");
000046  a03c              ADR      r0,|L2.312|
000048  f7fffffe          BL       LogReport
;;;143    		return 200;
00004c  20c8              MOVS     r0,#0xc8
                  |L2.78|
;;;144    	}
;;;145    		
;;;146    	dataToSend.pdat   = verMany;
;;;147    	OBD_CAN_SendData(dataToSend.canId,dataToSend.ide,dataToSend.pdat);
;;;148    	do{
;;;149    		CAN1_RxMsg = OSQPend(canRecieveQ,50,&err);
;;;150    		if(err == OS_ERR_NONE)
;;;151    		{
;;;152    			memcpy(&ptrVer[7*i + 4],&CAN1_RxMsg->Data[1],7);
;;;153    			Mem_free(CAN1_RxMsg);
;;;154    		}
;;;155    		i++;
;;;156    	}while(err == OS_ERR_NONE);
;;;157    	if(i<2)
;;;158    	{
;;;159    		LogReport("\r\n18-ECUVer read fail!");
;;;160    		return 200;//识别错误
;;;161    	}
;;;162    		
;;;163    	memcpy(varOperation.ecuVersion,ptrVer,19);
;;;164    	Mem_free(ptrVer);
;;;165    	for(i=0;i<20;i++)
;;;166    	{
;;;167    		if(i<5)
;;;168    		{
;;;169    			if((varOperation.ecuVersion[i] < 0x20)||(varOperation.ecuVersion[i] > 0x7E))//读取到非显示字符
;;;170    			{
;;;171    				LogReport("\r\n19-ECUVer read fail!");
;;;172    				return 200;//版本号识别出错
;;;173    			}	
;;;174    		}
;;;175    		if(varOperation.ecuVersion[i]  == 0x20)
;;;176    			varOperation.ecuVersion[i] =  '\0';
;;;177    		
;;;178    	}	
;;;179    	LogReport("\r\n20-ECUVer:%s.",varOperation.ecuVersion);//上报版本号
;;;180    	
;;;181    //根据ECU版本号 确定ECU安全算法的掩码
;;;182    	if(strcmp(varOperation.ecuVersion,"P949V732") == 0)
;;;183    	{
;;;184    		ecuMask = ECUMASKV732;
;;;185    		return 0;
;;;186    	}else if(strcmp(varOperation.ecuVersion,"P949V791") == 0)
;;;187    	{
;;;188    		ecuMask = ECUMASKV791;
;;;189    		return 1;
;;;190    	}
;;;191    //	else if(strcmp(varOperation.ecuVersion,"P949V792") == 0)//公司没有这个ECU，得不到验证，暂时屏蔽
;;;192    //	{
;;;193    //		ecuMask = ECUMASKV792;
;;;194    //		return 2;
;;;195    //	}else if(strcmp(varOperation.ecuVersion,"P532V46") == 0)//todo:以下ECU等节油做好了再弄
;;;196    //	{
;;;197    //		ecuMask = ECUMASKV46;
;;;198    //		return 3;
;;;199    //	}else if(strcmp(varOperation.ecuVersion,"P579V47") == 0)
;;;200    //	{
;;;201    //		ecuMask = ECUMASKV47;
;;;202    //		return 4;
;;;203    //	}else if(strcmp(varOperation.ecuVersion,"P813V72") == 0)
;;;204    //	{
;;;205    //		ecuMask = ECUMASKV72;
;;;206    //		return 5;
;;;207    //	}else if(strcmp(varOperation.ecuVersion,"P1499V301") == 0)
;;;208    //	{
;;;209    //		ecuMask = ECUMASK201;
;;;210    //		return 6;
;;;211    //	}else if(strcmp(varOperation.ecuVersion,"P1072V742") == 0)
;;;212    //	{
;;;213    //		ecuMask = ECUMASK211;
;;;214    //		return 7;
;;;215    //	}else if(strcmp(varOperation.ecuVersion,"P1158V760") == 0)
;;;216    //	{
;;;217    //		ecuMask = ECUMASKV760;
;;;218    //		return 8;
;;;219    //	}else if(strcmp(varOperation.ecuVersion,"P903V762") == 0)
;;;220    //	{
;;;221    //		ecuMask = ECUMASKV762;
;;;222    //		return 9;
;;;223    //	}
;;;224    	else
;;;225    	{
;;;226    		LogReport("\r\n21-ECUVer Mismatching;");
;;;227    		return 100;//版本号读取出来了，但是这个版本号的ECU还不能做强动力
;;;228    	}
;;;229    		
;;;230    }
00004e  bdf8              POP      {r3-r7,pc}
                  |L2.80|
000050  483f              LDR      r0,|L2.336|
000052  4937              LDR      r1,|L2.304|
000054  6088              STR      r0,[r1,#8]            ;146  ; dataToSend
000056  460b              MOV      r3,r1                 ;147
000058  689a              LDR      r2,[r3,#8]            ;147  ; dataToSend
00005a  6859              LDR      r1,[r3,#4]            ;147  ; dataToSend
00005c  6818              LDR      r0,[r3,#0]            ;147  ; dataToSend
00005e  f7fffffe          BL       OBD_CAN_SendData
000062  bf00              NOP                            ;148
                  |L2.100|
000064  466a              MOV      r2,sp                 ;149
000066  2132              MOVS     r1,#0x32              ;149
000068  4832              LDR      r0,|L2.308|
00006a  6800              LDR      r0,[r0,#0]            ;149  ; canRecieveQ
00006c  f7fffffe          BL       OSQPend
000070  4606              MOV      r6,r0                 ;149
000072  f89d0000          LDRB     r0,[sp,#0]            ;150
000076  b960              CBNZ     r0,|L2.146|
000078  ebc400c4          RSB      r0,r4,r4,LSL #3       ;152
00007c  1d00              ADDS     r0,r0,#4              ;152
00007e  1941              ADDS     r1,r0,r5              ;152
000080  68f2              LDR      r2,[r6,#0xc]          ;152
000082  600a              STR      r2,[r1,#0]            ;152
000084  8a32              LDRH     r2,[r6,#0x10]         ;152
000086  808a              STRH     r2,[r1,#4]            ;152
000088  7cb0              LDRB     r0,[r6,#0x12]         ;152
00008a  7188              STRB     r0,[r1,#6]            ;152
00008c  4630              MOV      r0,r6                 ;153
00008e  f7fffffe          BL       Mem_free
                  |L2.146|
000092  1c60              ADDS     r0,r4,#1              ;155
000094  b2c4              UXTB     r4,r0                 ;155
000096  f89d0000          LDRB     r0,[sp,#0]            ;156
00009a  2800              CMP      r0,#0                 ;156
00009c  d0e2              BEQ      |L2.100|
00009e  2c02              CMP      r4,#2                 ;157
0000a0  da04              BGE      |L2.172|
0000a2  a02c              ADR      r0,|L2.340|
0000a4  f7fffffe          BL       LogReport
0000a8  20c8              MOVS     r0,#0xc8              ;160
0000aa  e7d0              B        |L2.78|
                  |L2.172|
0000ac  2213              MOVS     r2,#0x13              ;163
0000ae  4629              MOV      r1,r5                 ;163
0000b0  482e              LDR      r0,|L2.364|
0000b2  f7fffffe          BL       __aeabi_memcpy
0000b6  4628              MOV      r0,r5                 ;164
0000b8  f7fffffe          BL       Mem_free
0000bc  2400              MOVS     r4,#0                 ;165
0000be  e017              B        |L2.240|
                  |L2.192|
0000c0  2c05              CMP      r4,#5                 ;167
0000c2  da0c              BGE      |L2.222|
0000c4  4829              LDR      r0,|L2.364|
0000c6  5d00              LDRB     r0,[r0,r4]            ;169
0000c8  2820              CMP      r0,#0x20              ;169
0000ca  db03              BLT      |L2.212|
0000cc  4827              LDR      r0,|L2.364|
0000ce  5d00              LDRB     r0,[r0,r4]            ;169
0000d0  287e              CMP      r0,#0x7e              ;169
0000d2  dd04              BLE      |L2.222|
                  |L2.212|
0000d4  a026              ADR      r0,|L2.368|
0000d6  f7fffffe          BL       LogReport
0000da  20c8              MOVS     r0,#0xc8              ;172
0000dc  e7b7              B        |L2.78|
                  |L2.222|
0000de  4823              LDR      r0,|L2.364|
0000e0  5d00              LDRB     r0,[r0,r4]            ;175
0000e2  2820              CMP      r0,#0x20              ;175
0000e4  d102              BNE      |L2.236|
0000e6  2100              MOVS     r1,#0                 ;176
0000e8  4820              LDR      r0,|L2.364|
0000ea  5501              STRB     r1,[r0,r4]            ;176
                  |L2.236|
0000ec  1c60              ADDS     r0,r4,#1              ;165
0000ee  b2c4              UXTB     r4,r0                 ;165
                  |L2.240|
0000f0  2c14              CMP      r4,#0x14              ;165
0000f2  dbe5              BLT      |L2.192|
0000f4  491d              LDR      r1,|L2.364|
0000f6  a024              ADR      r0,|L2.392|
0000f8  f7fffffe          BL       LogReport
0000fc  a126              ADR      r1,|L2.408|
0000fe  481b              LDR      r0,|L2.364|
000100  f7fffffe          BL       strcmp
000104  b920              CBNZ     r0,|L2.272|
000106  4827              LDR      r0,|L2.420|
000108  4927              LDR      r1,|L2.424|
00010a  6008              STR      r0,[r1,#0]            ;184  ; ecuMask
00010c  2000              MOVS     r0,#0                 ;185
00010e  e79e              B        |L2.78|
                  |L2.272|
000110  a126              ADR      r1,|L2.428|
000112  4816              LDR      r0,|L2.364|
000114  f7fffffe          BL       strcmp
000118  b920              CBNZ     r0,|L2.292|
00011a  4822              LDR      r0,|L2.420|
00011c  4922              LDR      r1,|L2.424|
00011e  6008              STR      r0,[r1,#0]            ;188  ; ecuMask
000120  2001              MOVS     r0,#1                 ;189
000122  e794              B        |L2.78|
                  |L2.292|
000124  a024              ADR      r0,|L2.440|
000126  f7fffffe          BL       LogReport
00012a  2064              MOVS     r0,#0x64              ;227
00012c  e78f              B        |L2.78|
;;;231    
                          ENDP

00012e  0000              DCW      0x0000
                  |L2.304|
                          DCD      dataToSend
                  |L2.308|
                          DCD      canRecieveQ
                  |L2.312|
000138  0d0a3137          DCB      "\r\n17-ECUVer read fail!",0
00013c  2d454355
000140  56657220
000144  72656164
000148  20666169
00014c  6c2100  
00014f  00                DCB      0
                  |L2.336|
                          DCD      verMany
                  |L2.340|
000154  0d0a3138          DCB      "\r\n18-ECUVer read fail!",0
000158  2d454355
00015c  56657220
000160  72656164
000164  20666169
000168  6c2100  
00016b  00                DCB      0
                  |L2.364|
                          DCD      varOperation+0x64
                  |L2.368|
000170  0d0a3139          DCB      "\r\n19-ECUVer read fail!",0
000174  2d454355
000178  56657220
00017c  72656164
000180  20666169
000184  6c2100  
000187  00                DCB      0
                  |L2.392|
000188  0d0a3230          DCB      "\r\n20-ECUVer:%s.",0
00018c  2d454355
000190  5665723a
000194  25732e00
                  |L2.408|
000198  50393439          DCB      "P949V732",0
00019c  56373332
0001a0  00      
0001a1  00                DCB      0
0001a2  00                DCB      0
0001a3  00                DCB      0
                  |L2.420|
                          DCD      0x383b50d9
                  |L2.424|
                          DCD      ecuMask
                  |L2.428|
0001ac  50393439          DCB      "P949V791",0
0001b0  56373931
0001b4  00      
0001b5  00                DCB      0
0001b6  00                DCB      0
0001b7  00                DCB      0
                  |L2.440|
0001b8  0d0a3231          DCB      "\r\n21-ECUVer Mismatching;",0
0001bc  2d454355
0001c0  56657220
0001c4  4d69736d
0001c8  61746368
0001cc  696e673b
0001d0  00      
0001d1  00                DCB      0
0001d2  00                DCB      0
0001d3  00                DCB      0

                          AREA ||i.SafeALG||, CODE, READONLY, ALIGN=2

                  SafeALG PROC
;;;51     extern CAN1DataToSend  dataToSend; 
;;;52     void SafeALG(uint8_t* ptrVer)
000000  b5fe              PUSH     {r1-r7,lr}
;;;53     {
000002  4605              MOV      r5,r0
;;;54     	uint8_t err,i;
;;;55     	CanRxMsg* CAN1_RxMsg;
;;;56     	uint8_t pNum;
;;;57     
;;;58     	uint8_t seed[4] = {0x00,0x00,0x00,0x00};
000004  2000              MOVS     r0,#0
000006  9001              STR      r0,[sp,#4]
;;;59     	uint8_t key[4]  = {0x00,0x00,0x00,0x00};
000008  9000              STR      r0,[sp,#0]
;;;60     	
;;;61     	dataToSend.pdat   = safe1;
00000a  486d              LDR      r0,|L3.448|
00000c  496d              LDR      r1,|L3.452|
00000e  6088              STR      r0,[r1,#8]  ; dataToSend
;;;62     	OBD_CAN_SendData(dataToSend.canId,dataToSend.ide,dataToSend.pdat);
000010  460b              MOV      r3,r1
000012  689a              LDR      r2,[r3,#8]  ; dataToSend
000014  6859              LDR      r1,[r3,#4]  ; dataToSend
000016  6818              LDR      r0,[r3,#0]  ; dataToSend
000018  f7fffffe          BL       OBD_CAN_SendData
;;;63     	CAN1_RxMsg = OSQPend(canRecieveQ,0,&err);
00001c  aa02              ADD      r2,sp,#8
00001e  2100              MOVS     r1,#0
000020  4869              LDR      r0,|L3.456|
000022  6800              LDR      r0,[r0,#0]  ; canRecieveQ
000024  f7fffffe          BL       OSQPend
000028  4604              MOV      r4,r0
;;;64     	if(err == OS_ERR_NONE)
00002a  f89d0008          LDRB     r0,[sp,#8]
00002e  b9f8              CBNZ     r0,|L3.112|
;;;65     	{
;;;66     		seed[0]=CAN1_RxMsg->Data[3];seed[1]=CAN1_RxMsg->Data[4];
000030  7ba0              LDRB     r0,[r4,#0xe]
000032  f88d0004          STRB     r0,[sp,#4]
000036  7be0              LDRB     r0,[r4,#0xf]
000038  f88d0005          STRB     r0,[sp,#5]
;;;67     		seed[2]=CAN1_RxMsg->Data[5];seed[3]=CAN1_RxMsg->Data[6];
00003c  7c20              LDRB     r0,[r4,#0x10]
00003e  f88d0006          STRB     r0,[sp,#6]
000042  7c60              LDRB     r0,[r4,#0x11]
000044  f88d0007          STRB     r0,[sp,#7]
;;;68     		SeedToKey(seed,key);
000048  4669              MOV      r1,sp
00004a  a801              ADD      r0,sp,#4
00004c  f7fffffe          BL       SeedToKey
;;;69     		safe2[3] = key[0];safe2[4] = key[1];safe2[5] = key[2];safe2[6] = key[3];
000050  f89d0000          LDRB     r0,[sp,#0]
000054  495d              LDR      r1,|L3.460|
000056  70c8              STRB     r0,[r1,#3]
000058  f89d0001          LDRB     r0,[sp,#1]
00005c  7108              STRB     r0,[r1,#4]
00005e  f89d0002          LDRB     r0,[sp,#2]
000062  7148              STRB     r0,[r1,#5]
000064  f89d0003          LDRB     r0,[sp,#3]
000068  7188              STRB     r0,[r1,#6]
;;;70     		Mem_free(CAN1_RxMsg);
00006a  4620              MOV      r0,r4
00006c  f7fffffe          BL       Mem_free
                  |L3.112|
;;;71     	}
;;;72     	dataToSend.pdat   = safe2;
000070  4856              LDR      r0,|L3.460|
000072  4954              LDR      r1,|L3.452|
000074  6088              STR      r0,[r1,#8]  ; dataToSend
;;;73     	OBD_CAN_SendData(dataToSend.canId,dataToSend.ide,dataToSend.pdat);
000076  460b              MOV      r3,r1
000078  689a              LDR      r2,[r3,#8]  ; dataToSend
00007a  6859              LDR      r1,[r3,#4]  ; dataToSend
00007c  6818              LDR      r0,[r3,#0]  ; dataToSend
00007e  f7fffffe          BL       OBD_CAN_SendData
;;;74     	CAN1_RxMsg = OSQPend(canRecieveQ,0,&err);
000082  aa02              ADD      r2,sp,#8
000084  2100              MOVS     r1,#0
000086  4850              LDR      r0,|L3.456|
000088  6800              LDR      r0,[r0,#0]  ; canRecieveQ
00008a  f7fffffe          BL       OSQPend
00008e  4604              MOV      r4,r0
;;;75     	if(err == OS_ERR_NONE)
000090  f89d0008          LDRB     r0,[sp,#8]
000094  b988              CBNZ     r0,|L3.186|
;;;76     	{
;;;77     		if(CAN1_RxMsg->Data[1] != 0x7F)
000096  7b20              LDRB     r0,[r4,#0xc]
000098  287f              CMP      r0,#0x7f
00009a  d003              BEQ      |L3.164|
;;;78     			LogReport("\r\n13-NTRU Success.");//安全算法通过
00009c  a04c              ADR      r0,|L3.464|
00009e  f7fffffe          BL       LogReport
0000a2  e007              B        |L3.180|
                  |L3.164|
;;;79     		else
;;;80     		{
;;;81     			LogReport("\r\n14-NTRU Fail.");//没通过安全算法
0000a4  a04f              ADR      r0,|L3.484|
0000a6  f7fffffe          BL       LogReport
;;;82     			varOperation.oilMode = 0;
0000aa  2000              MOVS     r0,#0
0000ac  4951              LDR      r1,|L3.500|
0000ae  f8810094          STRB     r0,[r1,#0x94]
;;;83     			goto end;
0000b2  e081              B        |L3.440|
                  |L3.180|
;;;84     		}
;;;85     		Mem_free(CAN1_RxMsg);
0000b4  4620              MOV      r0,r4
0000b6  f7fffffe          BL       Mem_free
                  |L3.186|
;;;86     	}
;;;87     	dataToSend.pdat   = safe3;
0000ba  484f              LDR      r0,|L3.504|
0000bc  4941              LDR      r1,|L3.452|
0000be  6088              STR      r0,[r1,#8]  ; dataToSend
;;;88     	OBD_CAN_SendData(dataToSend.canId,dataToSend.ide,dataToSend.pdat);
0000c0  460b              MOV      r3,r1
0000c2  689a              LDR      r2,[r3,#8]  ; dataToSend
0000c4  6859              LDR      r1,[r3,#4]  ; dataToSend
0000c6  6818              LDR      r0,[r3,#0]  ; dataToSend
0000c8  f7fffffe          BL       OBD_CAN_SendData
;;;89     	CAN1_RxMsg = OSQPend(canRecieveQ,0,&err);
0000cc  aa02              ADD      r2,sp,#8
0000ce  2100              MOVS     r1,#0
0000d0  483d              LDR      r0,|L3.456|
0000d2  6800              LDR      r0,[r0,#0]  ; canRecieveQ
0000d4  f7fffffe          BL       OSQPend
0000d8  4604              MOV      r4,r0
;;;90     	Mem_free(CAN1_RxMsg);
0000da  4620              MOV      r0,r4
0000dc  f7fffffe          BL       Mem_free
;;;91     	dataToSend.pdat   = safe4;
0000e0  4846              LDR      r0,|L3.508|
0000e2  4938              LDR      r1,|L3.452|
0000e4  6088              STR      r0,[r1,#8]  ; dataToSend
;;;92     	OBD_CAN_SendData(dataToSend.canId,dataToSend.ide,dataToSend.pdat);
0000e6  460b              MOV      r3,r1
0000e8  689a              LDR      r2,[r3,#8]  ; dataToSend
0000ea  6859              LDR      r1,[r3,#4]  ; dataToSend
0000ec  6818              LDR      r0,[r3,#0]  ; dataToSend
0000ee  f7fffffe          BL       OBD_CAN_SendData
;;;93     	CAN1_RxMsg = OSQPend(canRecieveQ,0,&err);
0000f2  aa02              ADD      r2,sp,#8
0000f4  2100              MOVS     r1,#0
0000f6  4834              LDR      r0,|L3.456|
0000f8  6800              LDR      r0,[r0,#0]  ; canRecieveQ
0000fa  f7fffffe          BL       OSQPend
0000fe  4604              MOV      r4,r0
;;;94     	Mem_free(CAN1_RxMsg);
000100  4620              MOV      r0,r4
000102  f7fffffe          BL       Mem_free
;;;95     	
;;;96     	dataToSend.pdat   = ptrVer;
000106  482f              LDR      r0,|L3.452|
000108  6085              STR      r5,[r0,#8]  ; dataToSend
;;;97     	OBD_CAN_SendData(dataToSend.canId,dataToSend.ide,dataToSend.pdat);
00010a  4603              MOV      r3,r0
00010c  689a              LDR      r2,[r3,#8]  ; dataToSend
00010e  6859              LDR      r1,[r3,#4]  ; dataToSend
000110  6818              LDR      r0,[r3,#0]  ; dataToSend
000112  f7fffffe          BL       OBD_CAN_SendData
;;;98     	CAN1_RxMsg = OSQPend(canRecieveQ,0,&err);
000116  aa02              ADD      r2,sp,#8
000118  2100              MOVS     r1,#0
00011a  482b              LDR      r0,|L3.456|
00011c  6800              LDR      r0,[r0,#0]  ; canRecieveQ
00011e  f7fffffe          BL       OSQPend
000122  4604              MOV      r4,r0
;;;99     	Mem_free(CAN1_RxMsg);
000124  4620              MOV      r0,r4
000126  f7fffffe          BL       Mem_free
;;;100    	pNum = (ptrVer[1]+1)%7==0?((ptrVer[1]+1)/7):((ptrVer[1]+1)/7 + 1);
00012a  7868              LDRB     r0,[r5,#1]
00012c  1c40              ADDS     r0,r0,#1
00012e  2107              MOVS     r1,#7
000130  fb90f2f1          SDIV     r2,r0,r1
000134  fb010012          MLS      r0,r1,r2,r0
000138  b920              CBNZ     r0,|L3.324|
00013a  7868              LDRB     r0,[r5,#1]
00013c  1c40              ADDS     r0,r0,#1
00013e  fb90f0f1          SDIV     r0,r0,r1
000142  e005              B        |L3.336|
                  |L3.324|
000144  7868              LDRB     r0,[r5,#1]
000146  1c40              ADDS     r0,r0,#1
000148  2107              MOVS     r1,#7
00014a  fb90f0f1          SDIV     r0,r0,r1
00014e  1c40              ADDS     r0,r0,#1
                  |L3.336|
000150  b2c7              UXTB     r7,r0
;;;101    	for(i=1;i<pNum;i++)
000152  2601              MOVS     r6,#1
000154  e011              B        |L3.378|
                  |L3.342|
;;;102    	{
;;;103    		OSTimeDlyHMSM(0,0,0,2);
000156  2302              MOVS     r3,#2
000158  2200              MOVS     r2,#0
00015a  4611              MOV      r1,r2
00015c  4610              MOV      r0,r2
00015e  f7fffffe          BL       OSTimeDlyHMSM
;;;104    		dataToSend.pdat = &ptrVer[i*8];
000162  eb0500c6          ADD      r0,r5,r6,LSL #3
000166  4917              LDR      r1,|L3.452|
000168  6088              STR      r0,[r1,#8]  ; dataToSend
;;;105    		OBD_CAN_SendData(dataToSend.canId,dataToSend.ide,dataToSend.pdat);
00016a  460b              MOV      r3,r1
00016c  689a              LDR      r2,[r3,#8]  ; dataToSend
00016e  6859              LDR      r1,[r3,#4]  ; dataToSend
000170  6818              LDR      r0,[r3,#0]  ; dataToSend
000172  f7fffffe          BL       OBD_CAN_SendData
000176  1c70              ADDS     r0,r6,#1              ;101
000178  b2c6              UXTB     r6,r0                 ;101
                  |L3.378|
00017a  42be              CMP      r6,r7                 ;101
00017c  dbeb              BLT      |L3.342|
;;;106    	}
;;;107    	Mem_free(ptrVer);
00017e  4628              MOV      r0,r5
000180  f7fffffe          BL       Mem_free
;;;108    	CAN1_RxMsg = OSQPend(canRecieveQ,0,&err);
000184  aa02              ADD      r2,sp,#8
000186  2100              MOVS     r1,#0
000188  480f              LDR      r0,|L3.456|
00018a  6800              LDR      r0,[r0,#0]  ; canRecieveQ
00018c  f7fffffe          BL       OSQPend
000190  4604              MOV      r4,r0
;;;109    	if(CAN1_RxMsg->Data[1] == 0x7F)
000192  7b20              LDRB     r0,[r4,#0xc]
000194  287f              CMP      r0,#0x7f
000196  d107              BNE      |L3.424|
;;;110    	{
;;;111    		LogReport("\r\n15-Strength Fail!");//增强动力失败
000198  a019              ADR      r0,|L3.512|
00019a  f7fffffe          BL       LogReport
;;;112    		varOperation.oilMode = 0;
00019e  2000              MOVS     r0,#0
0001a0  4914              LDR      r1,|L3.500|
0001a2  f8810094          STRB     r0,[r1,#0x94]
0001a6  e006              B        |L3.438|
                  |L3.424|
;;;113    	}else{
;;;114    		LogReport("\r\n16-Strength Success.");//增强动力成功
0001a8  a01a              ADR      r0,|L3.532|
0001aa  f7fffffe          BL       LogReport
;;;115    		varOperation.oilMode = 1;
0001ae  2001              MOVS     r0,#1
0001b0  4910              LDR      r1,|L3.500|
0001b2  f8810094          STRB     r0,[r1,#0x94]
                  |L3.438|
;;;116    	}
;;;117    end:	
0001b6  bf00              NOP      
                  |L3.440|
;;;118    	Mem_free(CAN1_RxMsg);
0001b8  4620              MOV      r0,r4
0001ba  f7fffffe          BL       Mem_free
;;;119    }
0001be  bdfe              POP      {r1-r7,pc}
;;;120    
                          ENDP

                  |L3.448|
                          DCD      safe1
                  |L3.452|
                          DCD      dataToSend
                  |L3.456|
                          DCD      canRecieveQ
                  |L3.460|
                          DCD      safe2
                  |L3.464|
0001d0  0d0a3133          DCB      "\r\n13-NTRU Success.",0
0001d4  2d4e5452
0001d8  55205375
0001dc  63636573
0001e0  732e00  
0001e3  00                DCB      0
                  |L3.484|
0001e4  0d0a3134          DCB      "\r\n14-NTRU Fail.",0
0001e8  2d4e5452
0001ec  55204661
0001f0  696c2e00
                  |L3.500|
                          DCD      varOperation
                  |L3.504|
                          DCD      safe3
                  |L3.508|
                          DCD      safe4
                  |L3.512|
000200  0d0a3135          DCB      "\r\n15-Strength Fail!",0
000204  2d537472
000208  656e6774
00020c  68204661
000210  696c2100
                  |L3.532|
000214  0d0a3136          DCB      "\r\n16-Strength Success.",0
000218  2d537472
00021c  656e6774
000220  68205375
000224  63636573
000228  732e00  
00022b  00                DCB      0

                          AREA ||i.SeedToKey||, CODE, READONLY, ALIGN=2

                  SeedToKey PROC
;;;14     long ecuMask = 0;//需要知道 ECU 掩码
;;;15     void SeedToKey(uint8_t* seed, uint8_t* key)
000000  b538              PUSH     {r3-r5,lr}
;;;16     {
000002  460a              MOV      r2,r1
;;;17     	uint8_t i;
;;;18     	longToUchar seedlokal;
;;;19     	const long mask = ecuMask;
000004  4c19              LDR      r4,|L4.108|
000006  6823              LDR      r3,[r4,#0]  ; ecuMask
;;;20     	
;;;21     	if(seed[0] == 0 && seed[1] == 0)
000008  7804              LDRB     r4,[r0,#0]
00000a  b914              CBNZ     r4,|L4.18|
00000c  7844              LDRB     r4,[r0,#1]
00000e  b904              CBNZ     r4,|L4.18|
                  |L4.16|
;;;22     		return;
;;;23     	else
;;;24     	{
;;;25     		seedlokal.dword = ((long)seed[0]<<24)+((long)seed[1]<<16)+((long)seed[2]<<8)+(long)seed[3];
;;;26     		for(i=0; i<35; i++)
;;;27     		{
;;;28     			if(seedlokal.dword & 0x80000000)
;;;29     			{
;;;30     				seedlokal.dword = seedlokal.dword<<1;
;;;31     				seedlokal.dword = seedlokal.dword ^ mask;
;;;32     			}else
;;;33     			{
;;;34     				seedlokal.dword=seedlokal.dword<<1;
;;;35     			}
;;;36     		}
;;;37     		for(i=0; i<4; i++)
;;;38     		{
;;;39     			key[3 - i] = seedlokal.byte[i];
;;;40     		}
;;;41     	}
;;;42     	return;   
;;;43     }
000010  bd38              POP      {r3-r5,pc}
                  |L4.18|
000012  7804              LDRB     r4,[r0,#0]            ;25
000014  0624              LSLS     r4,r4,#24             ;25
000016  7845              LDRB     r5,[r0,#1]            ;25
000018  eb044405          ADD      r4,r4,r5,LSL #16      ;25
00001c  7885              LDRB     r5,[r0,#2]            ;25
00001e  eb042405          ADD      r4,r4,r5,LSL #8       ;25
000022  78c5              LDRB     r5,[r0,#3]            ;25
000024  442c              ADD      r4,r4,r5              ;25
000026  9400              STR      r4,[sp,#0]            ;25
000028  2100              MOVS     r1,#0                 ;26
00002a  e00f              B        |L4.76|
                  |L4.44|
00002c  9c00              LDR      r4,[sp,#0]            ;28
00002e  f0044400          AND      r4,r4,#0x80000000     ;28
000032  b134              CBZ      r4,|L4.66|
000034  9c00              LDR      r4,[sp,#0]            ;30
000036  0064              LSLS     r4,r4,#1              ;30
000038  9400              STR      r4,[sp,#0]            ;30
00003a  9c00              LDR      r4,[sp,#0]            ;31
00003c  405c              EORS     r4,r4,r3              ;31
00003e  9400              STR      r4,[sp,#0]            ;31
000040  e002              B        |L4.72|
                  |L4.66|
000042  9c00              LDR      r4,[sp,#0]            ;34
000044  0064              LSLS     r4,r4,#1              ;34
000046  9400              STR      r4,[sp,#0]            ;34
                  |L4.72|
000048  1c4c              ADDS     r4,r1,#1              ;26
00004a  b2e1              UXTB     r1,r4                 ;26
                  |L4.76|
00004c  2923              CMP      r1,#0x23              ;26
00004e  dbed              BLT      |L4.44|
000050  2100              MOVS     r1,#0                 ;37
000052  e006              B        |L4.98|
                  |L4.84|
000054  f81d4001          LDRB     r4,[sp,r1]            ;39
000058  f1c10503          RSB      r5,r1,#3              ;39
00005c  5554              STRB     r4,[r2,r5]            ;39
00005e  1c4c              ADDS     r4,r1,#1              ;37
000060  b2e1              UXTB     r1,r4                 ;37
                  |L4.98|
000062  2904              CMP      r1,#4                 ;37
000064  dbf6              BLT      |L4.84|
000066  bf00              NOP                            ;42
000068  e7d2              B        |L4.16|
;;;44     uint8_t safe1[8] = {0x02,0x27,0x09,0x00,0x00,0x00,0x00,0x00};
                          ENDP

00006a  0000              DCW      0x0000
                  |L4.108|
                          DCD      ecuMask

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  qMax
000000  045c              DCW      0x045c

                          AREA ||.data||, DATA, ALIGN=2

                  ecuMask
                          DCD      0x00000000
                  safe1
000004  02270900          DCB      0x02,0x27,0x09,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
                  safe2
00000c  06270a00          DCB      0x06,0x27,0x0a,0x00
000010  000000aa          DCB      0x00,0x00,0x00,0xaa
                  safe3
000014  031086a7          DCB      0x03,0x10,0x86,0xa7
000018  00000000          DCB      0x00,0x00,0x00,0x00
                  safe4
00001c  03809001          DCB      0x03,0x80,0x90,0x01
000020  00000000          DCB      0x00,0x00,0x00,0x00
                  safe5
000024  102f3d05          DCB      0x10,0x2f,0x3d,0x05
000028  61242a00          DCB      0x61,0x24,0x2a,0x00
                  verMany
00002c  30000000          DCB      0x30,0x00,0x00,0x00
000030  00000000          DCB      0x00,0x00,0x00,0x00
                  pAddr
000034  030560f8          DCB      0x03,0x05,0x60,0xf8
000038  ff03056c          DCB      0xff,0x03,0x05,0x6c
00003c  60ff0305          DCB      0x60,0xff,0x03,0x05
000040  6c60ff03          DCB      0x6c,0x60,0xff,0x03
000044  1c6038ff          DCB      0x1c,0x60,0x38,0xff
000048  031c6038          DCB      0x03,0x1c,0x60,0x38
00004c  ff031c9e          DCB      0xff,0x03,0x1c,0x9e
000050  dcff0305          DCB      0xdc,0xff,0x03,0x05
000054  50e0ff03          DCB      0x50,0xe0,0xff,0x03
000058  04d44cff          DCB      0x04,0xd4,0x4c,0xff
00005c  0304d094          DCB      0x03,0x04,0xd0,0x94
000060  ff0304d0          DCB      0xff,0x03,0x04,0xd0
000064  94ff              DCB      0x94,0xff
                  temp
000066  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\OBD\\strengthenPower.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_strengthenPower_c_ecuMask____REV16|
#line 465 "D:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.2.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___17_strengthenPower_c_ecuMask____REV16| PROC
#line 466

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_strengthenPower_c_ecuMask____REVSH|
#line 480
|__asm___17_strengthenPower_c_ecuMask____REVSH| PROC
#line 481

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___17_strengthenPower_c_ecuMask____RRX|
#line 667
|__asm___17_strengthenPower_c_ecuMask____RRX| PROC
#line 668

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
