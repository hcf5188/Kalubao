; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\obj\cdmatask.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=..\obj\cdmatask.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\OBD -I..\SYSTEM -I..\USER -I..\LIB\inc -I..\UCOSII\CONFIG -I..\UCOSII\PORT -I..\UCOSII\CORE -I..\HAEDWARE -I..\GPS -I..\CDMA -I..\DEAL -I..\USB\CONFIG -I..\USB\STM32_USB-FS-Device_Driver\inc -I..\CORE -I.\RTE\_Project -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\5.2.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=524 -D_RTE_ -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\cdmatask.crf ..\CDMA\CDMATask.c]
                          THUMB

                          AREA ||i.CDMAConfigInit||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  CDMAConfigInit PROC
;;;203    
;;;204    void CDMAConfigInit(void )
000000  b510              PUSH     {r4,lr}
;;;205    {
000002  b08c              SUB      sp,sp,#0x30
;;;206    	char sendCmd[45];
;;;207    	uint8_t sendlen = 0;
000004  2400              MOVS     r4,#0
;;;208    	CDMAPowerOpen_Close(CDMA_OPEN);  //启动MG2639模块
000006  2000              MOVS     r0,#0
000008  f7fffffe          BL       CDMAPowerOpen_Close
;;;209    	
;;;210    	CDMASendCmd(atCmd,"OK",sizeof(atCmd));
00000c  2204              MOVS     r2,#4
00000e  a125              ADR      r1,|L1.164|
000010  4825              LDR      r0,|L1.168|
000012  f7fffffe          BL       CDMASendCmd
;;;211    	CDMASendCmd(ate0Cmd,"OK",sizeof(ate0Cmd));
000016  2206              MOVS     r2,#6
000018  a122              ADR      r1,|L1.164|
00001a  4824              LDR      r0,|L1.172|
00001c  f7fffffe          BL       CDMASendCmd
;;;212    	CDMASendCmd(at_ZDSLEEP,"OK",sizeof(at_ZDSLEEP));
000020  220e              MOVS     r2,#0xe
000022  a120              ADR      r1,|L1.164|
000024  4822              LDR      r0,|L1.176|
000026  f7fffffe          BL       CDMASendCmd
;;;213    	CDMASendCmd(at_CSQ,"+CSQ:",sizeof(at_CSQ));
00002a  2209              MOVS     r2,#9
00002c  a121              ADR      r1,|L1.180|
00002e  4823              LDR      r0,|L1.188|
000030  f7fffffe          BL       CDMASendCmd
;;;214    
;;;215    	CDMASendCmd(at_CNMI,"OK",sizeof(at_CNMI));
000034  2213              MOVS     r2,#0x13
000036  a11b              ADR      r1,|L1.164|
000038  4821              LDR      r0,|L1.192|
00003a  f7fffffe          BL       CDMASendCmd
;;;216    	
;;;217    	CDMAReadIMEI_ICCID(at_GSN,sizeof(at_GSN),varOperation.imei,15);     //读取IMEI号
00003e  230f              MOVS     r3,#0xf
000040  4a20              LDR      r2,|L1.196|
000042  2108              MOVS     r1,#8
000044  4820              LDR      r0,|L1.200|
000046  f7fffffe          BL       CDMAReadIMEI_ICCID
;;;218    	CDMAReadIMEI_ICCID(at_ICCID,sizeof(at_ICCID),varOperation.iccID,20);//读取SIM卡的ICCID号
00004a  2314              MOVS     r3,#0x14
00004c  4a1d              LDR      r2,|L1.196|
00004e  3210              ADDS     r2,r2,#0x10
000050  210e              MOVS     r1,#0xe
000052  481e              LDR      r0,|L1.204|
000054  f7fffffe          BL       CDMAReadIMEI_ICCID
;;;219    	
;;;220    	CDMASendCmd(at_SetZpNum,"OK",sizeof(at_SetZpNum));
000058  2218              MOVS     r2,#0x18
00005a  a112              ADR      r1,|L1.164|
00005c  481c              LDR      r0,|L1.208|
00005e  f7fffffe          BL       CDMASendCmd
;;;221    	CDMASendCmd(at_ZPPPSTATUS,"+ZPPPSTATUS:",sizeof(at_ZPPPSTATUS));
000062  220f              MOVS     r2,#0xf
000064  a11b              ADR      r1,|L1.212|
000066  481f              LDR      r0,|L1.228|
000068  f7fffffe          BL       CDMASendCmd
;;;222    	CDMASendCmd(at_ZPPPOPEN,"+ZPPPOPEN:CONNECTED",sizeof(at_ZPPPOPEN));
00006c  220d              MOVS     r2,#0xd
00006e  a11e              ADR      r1,|L1.232|
000070  4822              LDR      r0,|L1.252|
000072  f7fffffe          BL       CDMASendCmd
;;;223    	
;;;224    	sendlen = sprintf(sendCmd,(const char*)at_ZIPSETUP,varOperation.ipAddr,varOperation.ipPotr);//TCP连接
000076  4813              LDR      r0,|L1.196|
000078  3809              SUBS     r0,r0,#9
00007a  f8b03044          LDRH     r3,[r0,#0x44]  ; varOperation
00007e  f1000232          ADD      r2,r0,#0x32
000082  491f              LDR      r1,|L1.256|
000084  4668              MOV      r0,sp
000086  f7fffffe          BL       __2sprintf
00008a  b2c4              UXTB     r4,r0
;;;225    	CDMASendCmd((uint8_t *)sendCmd,"+ZIPSETUP:CONNECTED",sendlen);
00008c  4622              MOV      r2,r4
00008e  a11d              ADR      r1,|L1.260|
000090  4668              MOV      r0,sp
000092  f7fffffe          BL       CDMASendCmd
;;;226    
;;;227    	freCDMALed = 500;           //网络连接成功
000096  f44f70fa          MOV      r0,#0x1f4
00009a  491f              LDR      r1,|L1.280|
00009c  8008              STRH     r0,[r1,#0]
;;;228    }
00009e  b00c              ADD      sp,sp,#0x30
0000a0  bd10              POP      {r4,pc}
;;;229    
                          ENDP

0000a2  0000              DCW      0x0000
                  |L1.164|
0000a4  4f4b00            DCB      "OK",0
0000a7  00                DCB      0
                  |L1.168|
                          DCD      atCmd
                  |L1.172|
                          DCD      ate0Cmd
                  |L1.176|
                          DCD      at_ZDSLEEP
                  |L1.180|
0000b4  2b435351          DCB      "+CSQ:",0
0000b8  3a00    
0000ba  00                DCB      0
0000bb  00                DCB      0
                  |L1.188|
                          DCD      at_CSQ
                  |L1.192|
                          DCD      at_CNMI
                  |L1.196|
                          DCD      varOperation+0x9
                  |L1.200|
                          DCD      at_GSN
                  |L1.204|
                          DCD      at_ICCID
                  |L1.208|
                          DCD      at_SetZpNum
                  |L1.212|
0000d4  2b5a5050          DCB      "+ZPPPSTATUS:",0
0000d8  50535441
0000dc  5455533a
0000e0  00      
0000e1  00                DCB      0
0000e2  00                DCB      0
0000e3  00                DCB      0
                  |L1.228|
                          DCD      at_ZPPPSTATUS
                  |L1.232|
0000e8  2b5a5050          DCB      "+ZPPPOPEN:CONNECTED",0
0000ec  504f5045
0000f0  4e3a434f
0000f4  4e4e4543
0000f8  54454400
                  |L1.252|
                          DCD      at_ZPPPOPEN
                  |L1.256|
                          DCD      at_ZIPSETUP
                  |L1.260|
000104  2b5a4950          DCB      "+ZIPSETUP:CONNECTED",0
000108  53455455
00010c  503a434f
000110  4e4e4543
000114  54454400
                  |L1.280|
                          DCD      freCDMALed

                          AREA ||i.CDMAPowerOpen_Close||, CODE, READONLY, ALIGN=2

                  CDMAPowerOpen_Close PROC
;;;117    }
;;;118    void CDMAPowerOpen_Close(uint8_t flag)//这段代码是用来启动/关闭CDMA
000000  b538              PUSH     {r3-r5,lr}
;;;119    {
000002  4604              MOV      r4,r0
;;;120    	uint8_t err;
;;;121    	//互斥型信号量，确保开启和关闭
;;;122    	OSMutexPend(CDMAPowerMutex,0,&err);
000004  466a              MOV      r2,sp
000006  2100              MOVS     r1,#0
000008  4826              LDR      r0,|L2.164|
00000a  6800              LDR      r0,[r0,#0]  ; CDMAPowerMutex
00000c  f7fffffe          BL       OSMutexPend
;;;123    	
;;;124    	if(((flag == CDMA_CLOSE)&&(varOperation.isCDMAStart%2 == 0))||((flag == CDMA_OPEN)&&(varOperation.isCDMAStart%2 == 1)))
000010  2c01              CMP      r4,#1
000012  d108              BNE      |L2.38|
000014  4a24              LDR      r2,|L2.168|
000016  f892102f          LDRB     r1,[r2,#0x2f]  ; varOperation
00001a  eb0172d1          ADD      r2,r1,r1,LSR #31
00001e  1052              ASRS     r2,r2,#1
000020  eba10242          SUB      r2,r1,r2,LSL #1
000024  b152              CBZ      r2,|L2.60|
                  |L2.38|
000026  bb8c              CBNZ     r4,|L2.140|
000028  4a1f              LDR      r2,|L2.168|
00002a  f892002f          LDRB     r0,[r2,#0x2f]  ; varOperation
00002e  eb0072d0          ADD      r2,r0,r0,LSR #31
000032  1052              ASRS     r2,r2,#1
000034  eba00242          SUB      r2,r0,r2,LSL #1
000038  2a01              CMP      r2,#1
00003a  d12e              BNE      |L2.154|
                  |L2.60|
;;;125    	{
;;;126    		varOperation.isCDMAStart++;
00003c  481a              LDR      r0,|L2.168|
00003e  f890002f          LDRB     r0,[r0,#0x2f]  ; varOperation
000042  1c40              ADDS     r0,r0,#1
000044  4918              LDR      r1,|L2.168|
000046  f881002f          STRB     r0,[r1,#0x2f]
;;;127    		CDMA_POWER_LOW;
00004a  f44f4100          MOV      r1,#0x8000
00004e  4817              LDR      r0,|L2.172|
000050  f7fffffe          BL       GPIO_ResetBits
;;;128    		OSTimeDlyHMSM(0,0,4,500);
000054  f44f73fa          MOV      r3,#0x1f4
000058  2204              MOVS     r2,#4
00005a  2100              MOVS     r1,#0
00005c  4608              MOV      r0,r1
00005e  f7fffffe          BL       OSTimeDlyHMSM
;;;129    		CDMA_POWER_HIGH;
000062  f44f4100          MOV      r1,#0x8000
000066  4811              LDR      r0,|L2.172|
000068  f7fffffe          BL       GPIO_SetBits
;;;130    		if(varOperation.isCDMAStart%2 == 1)
00006c  490e              LDR      r1,|L2.168|
00006e  f891002f          LDRB     r0,[r1,#0x2f]  ; varOperation
000072  eb0071d0          ADD      r1,r0,r0,LSR #31
000076  1049              ASRS     r1,r1,#1
000078  eba00141          SUB      r1,r0,r1,LSL #1
00007c  2901              CMP      r1,#1
00007e  d106              BNE      |L2.142|
;;;131    			OSTimeDlyHMSM(0,0,6,0);
000080  2300              MOVS     r3,#0
000082  2206              MOVS     r2,#6
000084  4619              MOV      r1,r3
000086  4618              MOV      r0,r3
000088  f7fffffe          BL       OSTimeDlyHMSM
                  |L2.140|
00008c  e005              B        |L2.154|
                  |L2.142|
;;;132    		else
;;;133    			OSTimeDlyHMSM(0,0,12,0);
00008e  2300              MOVS     r3,#0
000090  220c              MOVS     r2,#0xc
000092  4619              MOV      r1,r3
000094  4618              MOV      r0,r3
000096  f7fffffe          BL       OSTimeDlyHMSM
                  |L2.154|
;;;134    	}
;;;135    	OSMutexPost(CDMAPowerMutex);
00009a  4802              LDR      r0,|L2.164|
00009c  6800              LDR      r0,[r0,#0]  ; CDMAPowerMutex
00009e  f7fffffe          BL       OSMutexPost
;;;136    }
0000a2  bd38              POP      {r3-r5,pc}
;;;137    
                          ENDP

                  |L2.164|
                          DCD      CDMAPowerMutex
                  |L2.168|
                          DCD      varOperation
                  |L2.172|
                          DCD      0x40010c00

                          AREA ||i.CDMAReadIMEI_ICCID||, CODE, READONLY, ALIGN=2

                  CDMAReadIMEI_ICCID PROC
;;;176    
;;;177    static void CDMAReadIMEI_ICCID(const uint8_t at_Get[],uint8_t cmdLength,uint8_t datSave[],uint8_t datLength )
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;178    {
000004  4680              MOV      r8,r0
000006  4689              MOV      r9,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;179    	uint8_t err;
;;;180    	uint8_t i = 0;
00000c  2400              MOVS     r4,#0
;;;181    	uint8_t *ptrCDMACfg;
;;;182    	do{
00000e  bf00              NOP      
                  |L3.16|
;;;183    		CDMASendDatas(at_Get,cmdLength);
000010  4649              MOV      r1,r9
000012  4640              MOV      r0,r8
000014  f7fffffe          BL       CDMASendDatas
;;;184    		ptrCDMACfg = OSQPend(CDMARecieveQ,500,&err);//todo:添加 +CPIN  判断
000018  466a              MOV      r2,sp
00001a  f44f71fa          MOV      r1,#0x1f4
00001e  4817              LDR      r0,|L3.124|
000020  6800              LDR      r0,[r0,#0]  ; CDMARecieveQ
000022  f7fffffe          BL       OSQPend
000026  4605              MOV      r5,r0
;;;185    		if(err == OS_ERR_NONE)
000028  f89d0000          LDRB     r0,[sp,#0]
00002c  b9b0              CBNZ     r0,|L3.92|
;;;186    		{
;;;187    			while( (ptrCDMACfg[i]<0x30)|| (ptrCDMACfg[i]>0x39))
00002e  e006              B        |L3.62|
                  |L3.48|
;;;188    			{
;;;189    				i++;
000030  1c60              ADDS     r0,r4,#1
000032  b2c4              UXTB     r4,r0
;;;190    				if(i>15)
000034  2c0f              CMP      r4,#0xf
000036  dd02              BLE      |L3.62|
;;;191    				{
;;;192    					err = 2;
000038  2002              MOVS     r0,#2
00003a  9000              STR      r0,[sp,#0]
;;;193    					break;
00003c  e005              B        |L3.74|
                  |L3.62|
00003e  5d28              LDRB     r0,[r5,r4]            ;187
000040  2830              CMP      r0,#0x30              ;187
000042  dbf5              BLT      |L3.48|
000044  5d28              LDRB     r0,[r5,r4]            ;187
000046  2839              CMP      r0,#0x39              ;187
000048  dcf2              BGT      |L3.48|
                  |L3.74|
00004a  bf00              NOP      
;;;194    				}
;;;195    			}
;;;196    			memcpy(datSave,&ptrCDMACfg[i],datLength);
00004c  1929              ADDS     r1,r5,r4
00004e  463a              MOV      r2,r7
000050  4630              MOV      r0,r6
000052  f7fffffe          BL       __aeabi_memcpy
;;;197    			Mem_free(ptrCDMACfg);
000056  4628              MOV      r0,r5
000058  f7fffffe          BL       Mem_free
                  |L3.92|
;;;198    		}
;;;199    	}while(err != OS_ERR_NONE);
00005c  f89d0000          LDRB     r0,[sp,#0]
000060  2800              CMP      r0,#0
000062  d1d5              BNE      |L3.16|
;;;200    	ptrCDMACfg = OSQPend(CDMARecieveQ,2,&err);//用以消耗模块自动回复的“+CPIN:READY”
000064  466a              MOV      r2,sp
000066  2102              MOVS     r1,#2
000068  4804              LDR      r0,|L3.124|
00006a  6800              LDR      r0,[r0,#0]  ; CDMARecieveQ
00006c  f7fffffe          BL       OSQPend
000070  4605              MOV      r5,r0
;;;201    	Mem_free(ptrCDMACfg);
000072  4628              MOV      r0,r5
000074  f7fffffe          BL       Mem_free
;;;202    }
000078  e8bd83f8          POP      {r3-r9,pc}
;;;203    
                          ENDP

                  |L3.124|
                          DCD      CDMARecieveQ

                          AREA ||i.CDMAReceDeal||, CODE, READONLY, ALIGN=2

                  CDMAReceDeal PROC
;;;138    //配置以及发送数据的过程中，对CDMA返回的状态信息（字符串）进行处理 0 接收正常
;;;139    static uint8_t CDMAReceDeal(uint8_t* ptrRece,char* ptr2)
000000  b570              PUSH     {r4-r6,lr}
;;;140    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;141    	char* p1 = NULL;
000006  2400              MOVS     r4,#0
;;;142    	p1 = strstr((const char*)ptrRece,"+CPIN");
000008  a108              ADR      r1,|L4.44|
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       strstr
000010  4604              MOV      r4,r0
;;;143    	if(p1 != NULL)
000012  b10c              CBZ      r4,|L4.24|
;;;144    		return 1;
000014  2001              MOVS     r0,#1
                  |L4.22|
;;;145    	p1 = strstr((const char*)ptrRece,ptr2);
;;;146    	if(p1 == NULL)
;;;147    		return 1;
;;;148    	return 0;
;;;149    }
000016  bd70              POP      {r4-r6,pc}
                  |L4.24|
000018  4631              MOV      r1,r6                 ;145
00001a  4628              MOV      r0,r5                 ;145
00001c  f7fffffe          BL       strstr
000020  4604              MOV      r4,r0                 ;145
000022  b90c              CBNZ     r4,|L4.40|
000024  2001              MOVS     r0,#1                 ;147
000026  e7f6              B        |L4.22|
                  |L4.40|
000028  2000              MOVS     r0,#0                 ;148
00002a  e7f4              B        |L4.22|
;;;150    //发送初始化配置指令
                          ENDP

                  |L4.44|
00002c  2b435049          DCB      "+CPIN",0
000030  4e00    
000032  00                DCB      0
000033  00                DCB      0

                          AREA ||i.CDMASendCmd||, CODE, READONLY, ALIGN=2

                  CDMASendCmd PROC
;;;150    //发送初始化配置指令
;;;151    void CDMASendCmd(const uint8_t sendDat[],char* compString,uint16_t sendLength)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;152    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
;;;153    	uint8_t err;
;;;154    	uint8_t count = 0;
00000a  2500              MOVS     r5,#0
;;;155    	uint8_t *ptrCDMACfg;
;;;156    	ptrCDMACfg = OSQPend(CDMARecieveQ,2,&err);//用以消耗模块自动回复的“+CPIN:READY”
00000c  466a              MOV      r2,sp
00000e  2102              MOVS     r1,#2
000010  481a              LDR      r0,|L5.124|
000012  6800              LDR      r0,[r0,#0]  ; CDMARecieveQ
000014  f7fffffe          BL       OSQPend
000018  4680              MOV      r8,r0
;;;157    	Mem_free(ptrCDMACfg);
00001a  4640              MOV      r0,r8
00001c  f7fffffe          BL       Mem_free
;;;158    	do{
000020  bf00              NOP      
                  |L5.34|
;;;159    		count ++;
000022  1c68              ADDS     r0,r5,#1
000024  b2c5              UXTB     r5,r0
;;;160    		CDMASendDatas(sendDat,sendLength);
000026  4621              MOV      r1,r4
000028  4630              MOV      r0,r6
00002a  f7fffffe          BL       CDMASendDatas
;;;161    		ptrCDMACfg = OSQPend(CDMARecieveQ,500,&err);
00002e  466a              MOV      r2,sp
000030  f44f71fa          MOV      r1,#0x1f4
000034  4811              LDR      r0,|L5.124|
000036  6800              LDR      r0,[r0,#0]  ; CDMARecieveQ
000038  f7fffffe          BL       OSQPend
00003c  4680              MOV      r8,r0
;;;162    		if(err != OS_ERR_NONE)        //接收超时
00003e  f89d0000          LDRB     r0,[sp,#0]
000042  b160              CBZ      r0,|L5.94|
;;;163    		{
;;;164    			CDMASendDatas(sendDat,sendLength);
000044  4621              MOV      r1,r4
000046  4630              MOV      r0,r6
000048  f7fffffe          BL       CDMASendDatas
;;;165    			ptrCDMACfg = OSQPend(CDMARecieveQ,500,&err);
00004c  466a              MOV      r2,sp
00004e  f44f71fa          MOV      r1,#0x1f4
000052  480a              LDR      r0,|L5.124|
000054  6800              LDR      r0,[r0,#0]  ; CDMARecieveQ
000056  f7fffffe          BL       OSQPend
00005a  4680              MOV      r8,r0
00005c  e007              B        |L5.110|
                  |L5.94|
;;;166    		}
;;;167    		else
;;;168    		{
;;;169    			err = CDMAReceDeal(ptrCDMACfg,compString);
00005e  4639              MOV      r1,r7
000060  4640              MOV      r0,r8
000062  f7fffffe          BL       CDMAReceDeal
000066  9000              STR      r0,[sp,#0]
;;;170    			Mem_free(ptrCDMACfg);
000068  4640              MOV      r0,r8
00006a  f7fffffe          BL       Mem_free
                  |L5.110|
;;;171    		}
;;;172    	}while((err != 0) && (count < 200));
00006e  f89d0000          LDRB     r0,[sp,#0]
000072  b108              CBZ      r0,|L5.120|
000074  2dc8              CMP      r5,#0xc8
000076  dbd4              BLT      |L5.34|
                  |L5.120|
;;;173    //	ptrCDMACfg = OSQPend(CDMARecieveQ,2,&err);//用以消耗模块自动回复的“+CPIN:READY”
;;;174    //	Mem_free(ptrCDMACfg);
;;;175    }
000078  e8bd83f8          POP      {r3-r9,pc}
;;;176    
                          ENDP

                  |L5.124|
                          DCD      CDMARecieveQ

                          AREA ||i.CDMATask||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  CDMATask PROC
;;;33     
;;;34     void CDMATask(void *pdata)
000000  b08a              SUB      sp,sp,#0x28
;;;35     {
;;;36     	uint8_t *pCDMARece = NULL;
000002  2600              MOVS     r6,#0
;;;37     	_CDMADataToSend *pCDMASend = NULL;
000004  2400              MOVS     r4,#0
;;;38     	uint8_t err;
;;;39     	uint8_t err2;
;;;40     	char sendCmd[30];
;;;41     	uint16_t sendlen = 0;
000006  2700              MOVS     r7,#0
;;;42     
;;;43     	CDMAConfigInit();                //初始化配置MG2639
000008  f7fffffe          BL       CDMAConfigInit
;;;44     	LoginDataSend();                 //发送登录报文
00000c  f7fffffe          BL       LoginDataSend
;;;45     	varOperation.isDataFlow = 0;     //开启数据流
000010  2000              MOVS     r0,#0
000012  495d              LDR      r1,|L6.392|
000014  f881002d          STRB     r0,[r1,#0x2d]
;;;46     	
;;;47     	while(1)//todo:断网、断开TCP连接、OTA升级、配置文件下发、登录
000018  e0b5              B        |L6.390|
                  |L6.26|
;;;48     	{
;;;49     		OSSemPost(sendMsg); //没有发送数据
00001a  485c              LDR      r0,|L6.396|
00001c  6800              LDR      r0,[r0,#0]  ; sendMsg
00001e  f7fffffe          BL       OSSemPost
;;;50     		
;;;51     receCDMA:	
000022  bf00              NOP      
                  |L6.36|
;;;52     		pCDMASend = OSQPend(CDMASendQ,0,&err);
000024  aa09              ADD      r2,sp,#0x24
000026  2100              MOVS     r1,#0
000028  4859              LDR      r0,|L6.400|
00002a  6800              LDR      r0,[r0,#0]  ; CDMASendQ
00002c  f7fffffe          BL       OSQPend
000030  4604              MOV      r4,r0
;;;53     		
;;;54     		OSSemAccept(sendMsg); //正在发送数据 消耗掉发送时的信号量
000032  4856              LDR      r0,|L6.396|
000034  6800              LDR      r0,[r0,#0]  ; sendMsg
000036  f7fffffe          BL       OSSemAccept
;;;55     		
;;;56     		sendlen = sprintf(sendCmd,at_TCPSend,pCDMASend->datLength);
00003a  8822              LDRH     r2,[r4,#0]
00003c  4955              LDR      r1,|L6.404|
00003e  a801              ADD      r0,sp,#4
000040  f7fffffe          BL       __2sprintf
000044  b287              UXTH     r7,r0
;;;57     		CDMASendDatas((uint8_t *)sendCmd,sendlen); //通知CDMA要通过哪个通道发送多少个字节的数据
000046  4639              MOV      r1,r7
000048  a801              ADD      r0,sp,#4
00004a  f7fffffe          BL       CDMASendDatas
;;;58     		
;;;59     		pCDMARece = OSQPend(CDMARecieveQ,150,&err);
00004e  aa09              ADD      r2,sp,#0x24
000050  2196              MOVS     r1,#0x96
000052  4851              LDR      r0,|L6.408|
000054  6800              LDR      r0,[r0,#0]  ; CDMARecieveQ
000056  f7fffffe          BL       OSQPend
00005a  4606              MOV      r6,r0
;;;60     		if(err == OS_ERR_NONE)
00005c  f89d0024          LDRB     r0,[sp,#0x24]
000060  2800              CMP      r0,#0
000062  d148              BNE      |L6.246|
;;;61     		{
;;;62     			err = CDMAReceDeal(pCDMARece,"DISCONNECTED");
000064  a14d              ADR      r1,|L6.412|
000066  4630              MOV      r0,r6
000068  f7fffffe          BL       CDMAReceDeal
00006c  9009              STR      r0,[sp,#0x24]
;;;63     			err2 = CDMAReceDeal(pCDMARece,"ERROR");
00006e  a14f              ADR      r1,|L6.428|
000070  4630              MOV      r0,r6
000072  f7fffffe          BL       CDMAReceDeal
000076  4605              MOV      r5,r0
;;;64     			
;;;65     			if((err == 0)||(err2 == 0))         //TCP断开连接，需要重新连接
000078  f89d0024          LDRB     r0,[sp,#0x24]
00007c  b100              CBZ      r0,|L6.128|
00007e  bb05              CBNZ     r5,|L6.194|
                  |L6.128|
;;;66     			{
;;;67     				Mem_free(pCDMARece);            //释放占用的内存块
000080  4630              MOV      r0,r6
000082  f7fffffe          BL       Mem_free
;;;68     				Mem_free(pCDMASend->data);
000086  6860              LDR      r0,[r4,#4]
000088  f7fffffe          BL       Mem_free
;;;69     				Mem_free(pCDMASend);
00008c  4620              MOV      r0,r4
00008e  f7fffffe          BL       Mem_free
;;;70     			
;;;71     				varOperation.isDataFlow = 1;    //数据流未流动
000092  2001              MOVS     r0,#1
000094  493c              LDR      r1,|L6.392|
000096  f881002d          STRB     r0,[r1,#0x2d]
;;;72     				freCDMALed = 100;               //CDMA小灯快闪
00009a  2064              MOVS     r0,#0x64
00009c  4945              LDR      r1,|L6.436|
00009e  8008              STRH     r0,[r1,#0]
;;;73     				CDMAPowerOpen_Close(CDMA_CLOSE);//关闭CDMA电源
0000a0  2001              MOVS     r0,#1
0000a2  f7fffffe          BL       CDMAPowerOpen_Close
;;;74     				
;;;75     				CDMAConfigInit();               //重新启动CDMA
0000a6  f7fffffe          BL       CDMAConfigInit
;;;76     				varOperation.isDataFlow = 0;    //开启数据流
0000aa  2000              MOVS     r0,#0
0000ac  4936              LDR      r1,|L6.392|
0000ae  f881002d          STRB     r0,[r1,#0x2d]
;;;77     				carAllRecord.cdmaReStart++;     //记录CDMA重启次数
0000b2  4841              LDR      r0,|L6.440|
0000b4  f890002a          LDRB     r0,[r0,#0x2a]  ; carAllRecord
0000b8  1c40              ADDS     r0,r0,#1
0000ba  493f              LDR      r1,|L6.440|
0000bc  f881002a          STRB     r0,[r1,#0x2a]
;;;78     				goto receCDMA;
0000c0  e7b0              B        |L6.36|
                  |L6.194|
;;;79     			}
;;;80     			err = CDMAReceDeal(pCDMARece,">");
0000c2  a13e              ADR      r1,|L6.444|
0000c4  4630              MOV      r0,r6
0000c6  f7fffffe          BL       CDMAReceDeal
0000ca  9009              STR      r0,[sp,#0x24]
;;;81     			Mem_free(pCDMARece);
0000cc  4630              MOV      r0,r6
0000ce  f7fffffe          BL       Mem_free
;;;82     			if(err != 0)
0000d2  f89d0024          LDRB     r0,[sp,#0x24]
0000d6  b378              CBZ      r0,|L6.312|
;;;83     			{
;;;84     				CDMASendDatas((uint8_t *)sendCmd,sendlen);  //通知CDMA要通过哪个通道发送多少个字节的数据
0000d8  4639              MOV      r1,r7
0000da  a801              ADD      r0,sp,#4
0000dc  f7fffffe          BL       CDMASendDatas
;;;85     				pCDMARece = OSQPend(CDMARecieveQ,150,&err); 
0000e0  aa09              ADD      r2,sp,#0x24
0000e2  2196              MOVS     r1,#0x96
0000e4  482c              LDR      r0,|L6.408|
0000e6  6800              LDR      r0,[r0,#0]  ; CDMARecieveQ
0000e8  f7fffffe          BL       OSQPend
0000ec  4606              MOV      r6,r0
;;;86     				Mem_free(pCDMARece);
0000ee  4630              MOV      r0,r6
0000f0  f7fffffe          BL       Mem_free
0000f4  e021              B        |L6.314|
                  |L6.246|
;;;87     			}
;;;88     		}
;;;89     		else
;;;90     		{
;;;91     			Mem_free(pCDMARece);            //释放占用的内存块
0000f6  4630              MOV      r0,r6
0000f8  f7fffffe          BL       Mem_free
;;;92     			Mem_free(pCDMASend->data);
0000fc  6860              LDR      r0,[r4,#4]
0000fe  f7fffffe          BL       Mem_free
;;;93     			Mem_free(pCDMASend);
000102  4620              MOV      r0,r4
000104  f7fffffe          BL       Mem_free
;;;94     		
;;;95     			varOperation.isDataFlow = 1;    //数据流未流动
000108  2001              MOVS     r0,#1
00010a  491f              LDR      r1,|L6.392|
00010c  f881002d          STRB     r0,[r1,#0x2d]
;;;96     			freCDMALed = 100;               //CDMA小灯快闪
000110  2064              MOVS     r0,#0x64
000112  4928              LDR      r1,|L6.436|
000114  8008              STRH     r0,[r1,#0]
;;;97     			CDMAPowerOpen_Close(CDMA_CLOSE);//关闭CDMA电源
000116  2001              MOVS     r0,#1
000118  f7fffffe          BL       CDMAPowerOpen_Close
;;;98     			
;;;99     			CDMAConfigInit();               //重新启动CDMA
00011c  f7fffffe          BL       CDMAConfigInit
;;;100    			varOperation.isDataFlow = 0;    //开启数据流
000120  2000              MOVS     r0,#0
000122  4919              LDR      r1,|L6.392|
000124  f881002d          STRB     r0,[r1,#0x2d]
;;;101    			carAllRecord.cdmaReStart++;     //记录CDMA重启次数
000128  4823              LDR      r0,|L6.440|
00012a  f890002a          LDRB     r0,[r0,#0x2a]  ; carAllRecord
00012e  1c40              ADDS     r0,r0,#1
000130  4921              LDR      r1,|L6.440|
000132  f881002a          STRB     r0,[r1,#0x2a]
;;;102    			goto receCDMA;
000136  e775              B        |L6.36|
                  |L6.312|
000138  e7ff              B        |L6.314|
                  |L6.314|
;;;103    		}
;;;104    		//实际要发送的数据
;;;105    		CDMASendDatas((uint8_t *)pCDMASend->data,pCDMASend->datLength);
00013a  8821              LDRH     r1,[r4,#0]
00013c  6860              LDR      r0,[r4,#4]
00013e  f7fffffe          BL       CDMASendDatas
;;;106    		pCDMARece = OSQPend(CDMARecieveQ,150,&err);  //发送成功
000142  aa09              ADD      r2,sp,#0x24
000144  2196              MOVS     r1,#0x96
000146  4814              LDR      r0,|L6.408|
000148  6800              LDR      r0,[r0,#0]  ; CDMARecieveQ
00014a  f7fffffe          BL       OSQPend
00014e  4606              MOV      r6,r0
;;;107    		Mem_free(pCDMARece);                         //SEND OK
000150  4630              MOV      r0,r6
000152  f7fffffe          BL       Mem_free
;;;108    		
;;;109    	    carAllRecord.netFlow += pCDMASend->datLength;//网络流量（字节）
000156  4818              LDR      r0,|L6.440|
000158  f8d0002b          LDR      r0,[r0,#0x2b]  ; carAllRecord
00015c  8821              LDRH     r1,[r4,#0]
00015e  4408              ADD      r0,r0,r1
000160  4915              LDR      r1,|L6.440|
000162  f8c1002b          STR      r0,[r1,#0x2b]  ; carAllRecord
;;;110    		
;;;111    		Mem_free(pCDMASend->data);
000166  6860              LDR      r0,[r4,#4]
000168  f7fffffe          BL       Mem_free
;;;112    		Mem_free(pCDMASend);
00016c  4620              MOV      r0,r4
00016e  f7fffffe          BL       Mem_free
;;;113    		
;;;114    		carAllRecord.messageNum ++;                  //发送的消息条数
000172  4811              LDR      r0,|L6.440|
000174  f8d00026          LDR      r0,[r0,#0x26]  ; carAllRecord
000178  1c40              ADDS     r0,r0,#1
00017a  490f              LDR      r1,|L6.440|
00017c  f8c10026          STR      r0,[r1,#0x26]  ; carAllRecord
;;;115    		carAllRecord.cdmaReStart = 0;                //连上服务器，设备不重启
000180  2000              MOVS     r0,#0
000182  f881002a          STRB     r0,[r1,#0x2a]
                  |L6.390|
000186  e748              B        |L6.26|
;;;116    	}
;;;117    }
;;;118    void CDMAPowerOpen_Close(uint8_t flag)//这段代码是用来启动/关闭CDMA
                          ENDP

                  |L6.392|
                          DCD      varOperation
                  |L6.396|
                          DCD      sendMsg
                  |L6.400|
                          DCD      CDMASendQ
                  |L6.404|
                          DCD      at_TCPSend
                  |L6.408|
                          DCD      CDMARecieveQ
                  |L6.412|
00019c  44495343          DCB      "DISCONNECTED",0
0001a0  4f4e4e45
0001a4  43544544
0001a8  00      
0001a9  00                DCB      0
0001aa  00                DCB      0
0001ab  00                DCB      0
                  |L6.428|
0001ac  4552524f          DCB      "ERROR",0
0001b0  5200    
0001b2  00                DCB      0
0001b3  00                DCB      0
                  |L6.436|
                          DCD      freCDMALed
                  |L6.440|
                          DCD      carAllRecord
                  |L6.444|
0001bc  3e00              DCB      ">",0
0001be  00                DCB      0
0001bf  00                DCB      0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  atCmd
000000  41540d00          DCB      0x41,0x54,0x0d,0x00
                  ate0Cmd
000004  41544530          DCB      0x41,0x54,0x45,0x30
000008  0d00              DCB      0x0d,0x00
                  at_ZDSLEEP
00000a  4154              DCB      0x41,0x54
00000c  2b5a4453          DCB      0x2b,0x5a,0x44,0x53
000010  4c454550          DCB      0x4c,0x45,0x45,0x50
000014  3d300d00          DCB      0x3d,0x30,0x0d,0x00
                  athCmd
000018  4154480d          DCB      0x41,0x54,0x48,0x0d
00001c  00                DCB      0x00
                  at_CMGF
00001d  41542b            DCB      0x41,0x54,0x2b
000020  434d4746          DCB      0x43,0x4d,0x47,0x46
000024  3d310d00          DCB      0x3d,0x31,0x0d,0x00
                  at_CNMI
000028  41542b43          DCB      0x41,0x54,0x2b,0x43
00002c  4e4d493d          DCB      0x4e,0x4d,0x49,0x3d
000030  332c322c          DCB      0x33,0x2c,0x32,0x2c
000034  302c302c          DCB      0x30,0x2c,0x30,0x2c
000038  300d00            DCB      0x30,0x0d,0x00
                  at_GSN
00003b  41                DCB      0x41
00003c  542b4753          DCB      0x54,0x2b,0x47,0x53
000040  4e0d00            DCB      0x4e,0x0d,0x00
                  at_CPIN
000043  41                DCB      0x41
000044  542b4350          DCB      0x54,0x2b,0x43,0x50
000048  494e3f0d          DCB      0x49,0x4e,0x3f,0x0d
00004c  00                DCB      0x00
                  at_SetZpNum
00004d  41542b            DCB      0x41,0x54,0x2b
000050  5a504e55          DCB      0x5a,0x50,0x4e,0x55
000054  4d3d2243          DCB      0x4d,0x3d,0x22,0x43
000058  4d4d544d          DCB      0x4d,0x4d,0x54,0x4d
00005c  222c2222          DCB      0x22,0x2c,0x22,0x22
000060  2c22220d          DCB      0x2c,0x22,0x22,0x0d
000064  00                DCB      0x00
                  at_ZPNUM
000065  41542b            DCB      0x41,0x54,0x2b
000068  5a504e55          DCB      0x5a,0x50,0x4e,0x55
00006c  4d3d2337          DCB      0x4d,0x3d,0x23,0x37
000070  37370d00          DCB      0x37,0x37,0x0d,0x00
                  at_ZPPPSTATUS
000074  41542b5a          DCB      0x41,0x54,0x2b,0x5a
000078  50505053          DCB      0x50,0x50,0x50,0x53
00007c  54415455          DCB      0x54,0x41,0x54,0x55
000080  530d00            DCB      0x53,0x0d,0x00
                  at_CSQ
000083  41                DCB      0x41
000084  542b4353          DCB      0x54,0x2b,0x43,0x53
000088  510a0d00          DCB      0x51,0x0a,0x0d,0x00
                  at_ICCID
00008c  41542b5a          DCB      0x41,0x54,0x2b,0x5a
000090  47455449          DCB      0x47,0x45,0x54,0x49
000094  43434944          DCB      0x43,0x43,0x49,0x44
000098  0d00              DCB      0x0d,0x00
                  at_ZPPPOPEN
00009a  4154              DCB      0x41,0x54
00009c  2b5a5050          DCB      0x2b,0x5a,0x50,0x50
0000a0  504f5045          DCB      0x50,0x4f,0x50,0x45
0000a4  4e0d00            DCB      0x4e,0x0d,0x00
                  at_ZIPSETUP
0000a7  41                DCB      0x41
0000a8  542b5a49          DCB      0x54,0x2b,0x5a,0x49
0000ac  50534554          DCB      0x50,0x53,0x45,0x54
0000b0  55503d30          DCB      0x55,0x50,0x3d,0x30
0000b4  2c25732c          DCB      0x2c,0x25,0x73,0x2c
0000b8  25640d00          DCB      0x25,0x64,0x0d,0x00
                  at_Check
0000bc  41542b5a          DCB      0x41,0x54,0x2b,0x5a
0000c0  49505053          DCB      0x49,0x50,0x50,0x53
0000c4  54415455          DCB      0x54,0x41,0x54,0x55
0000c8  533d300d          DCB      0x53,0x3d,0x30,0x0d
0000cc  00                DCB      0x00
                  at_TCPClose
0000cd  41542b            DCB      0x41,0x54,0x2b
0000d0  5a495043          DCB      0x5a,0x49,0x50,0x43
0000d4  4c4f5345          DCB      0x4c,0x4f,0x53,0x45
0000d8  3d300d00          DCB      0x3d,0x30,0x0d,0x00
                  at_TCPSend
0000dc  41542b5a          DCB      0x41,0x54,0x2b,0x5a
0000e0  49505345          DCB      0x49,0x50,0x53,0x45
0000e4  4e443d30          DCB      0x4e,0x44,0x3d,0x30
0000e8  2c25640d          DCB      0x2c,0x25,0x64,0x0d
0000ec  00                DCB      0x00
                  at_GetIP
0000ed  41542b            DCB      0x41,0x54,0x2b
0000f0  5a495047          DCB      0x5a,0x49,0x50,0x47
0000f4  45544950          DCB      0x45,0x54,0x49,0x50
0000f8  0d00              DCB      0x0d,0x00
