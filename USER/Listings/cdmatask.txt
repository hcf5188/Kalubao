; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\obj\cdmatask.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=..\obj\cdmatask.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\OBD -I..\SYSTEM -I..\USER -I..\LIB\inc -I..\UCOSII\CONFIG -I..\UCOSII\PORT -I..\UCOSII\CORE -I..\HAEDWARE -I..\GPS -I..\CDMA -I..\DEAL -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\cdmatask.crf ..\CDMA\CDMATask.c]
                          THUMB

                          AREA ||i.CDMAConfigInit||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  CDMAConfigInit PROC
;;;181    }
;;;182    static void CDMAConfigInit(void )
000000  b510              PUSH     {r4,lr}
;;;183    {
000002  b08c              SUB      sp,sp,#0x30
;;;184    	char sendCmd[45];
;;;185    	uint8_t sendlen = 0;
000004  2400              MOVS     r4,#0
;;;186    	
;;;187    	CDMASendCmd(atCmd,"OK",sizeof(atCmd));
000006  2204              MOVS     r2,#4
000008  a129              ADR      r1,|L1.176|
00000a  482a              LDR      r0,|L1.180|
00000c  f7fffffe          BL       CDMASendCmd
;;;188    	CDMASendCmd(ate0Cmd,"OK",sizeof(ate0Cmd));
000010  2206              MOVS     r2,#6
000012  a127              ADR      r1,|L1.176|
000014  4828              LDR      r0,|L1.184|
000016  f7fffffe          BL       CDMASendCmd
;;;189    	CDMASendCmd(at_ZDSLEEP,"OK",sizeof(at_ZDSLEEP));
00001a  220e              MOVS     r2,#0xe
00001c  a124              ADR      r1,|L1.176|
00001e  4827              LDR      r0,|L1.188|
000020  f7fffffe          BL       CDMASendCmd
;;;190    	CDMASendCmd(at_CSQ,"+CSQ:",sizeof(at_CSQ));
000024  2209              MOVS     r2,#9
000026  a126              ADR      r1,|L1.192|
000028  4827              LDR      r0,|L1.200|
00002a  f7fffffe          BL       CDMASendCmd
;;;191    
;;;192    	CDMASendCmd(at_CNMI,"OK",sizeof(at_CNMI));
00002e  2213              MOVS     r2,#0x13
000030  a11f              ADR      r1,|L1.176|
000032  4826              LDR      r0,|L1.204|
000034  f7fffffe          BL       CDMASendCmd
;;;193    	
;;;194    	CDMAReadIMEI_ICCID(at_GSN,sizeof(at_GSN),sysAllData->imei,15);     //读取IMEI号
000038  230f              MOVS     r3,#0xf
00003a  4825              LDR      r0,|L1.208|
00003c  6802              LDR      r2,[r0,#0]  ; sysAllData
00003e  3212              ADDS     r2,r2,#0x12
000040  2108              MOVS     r1,#8
000042  4824              LDR      r0,|L1.212|
000044  f7fffffe          BL       CDMAReadIMEI_ICCID
;;;195    	CDMAReadIMEI_ICCID(at_ICCID,sizeof(at_ICCID),sysAllData->iccID,20);//读取SIM卡的ICCID号
000048  2314              MOVS     r3,#0x14
00004a  4821              LDR      r0,|L1.208|
00004c  6802              LDR      r2,[r0,#0]  ; sysAllData
00004e  3222              ADDS     r2,r2,#0x22
000050  210e              MOVS     r1,#0xe
000052  4821              LDR      r0,|L1.216|
000054  f7fffffe          BL       CDMAReadIMEI_ICCID
;;;196    	
;;;197    	CDMASendCmd(at_SetZpNum,"OK",sizeof(at_SetZpNum));
000058  2218              MOVS     r2,#0x18
00005a  a115              ADR      r1,|L1.176|
00005c  481f              LDR      r0,|L1.220|
00005e  f7fffffe          BL       CDMASendCmd
;;;198    	CDMASendCmd(at_ZPPPSTATUS,"+ZPPPSTATUS:",sizeof(at_ZPPPSTATUS));
000062  220f              MOVS     r2,#0xf
000064  a11e              ADR      r1,|L1.224|
000066  4822              LDR      r0,|L1.240|
000068  f7fffffe          BL       CDMASendCmd
;;;199    	CDMASendCmd(at_ZPPPOPEN,"+ZPPPOPEN:CONNECTED",sizeof(at_ZPPPOPEN));
00006c  220d              MOVS     r2,#0xd
00006e  a121              ADR      r1,|L1.244|
000070  4825              LDR      r0,|L1.264|
000072  f7fffffe          BL       CDMASendCmd
;;;200    	
;;;201    	
;;;202    	sendlen = sprintf(sendCmd,(const char*)at_ZIPSETUP,sysAllData->ipAddr,sysAllData->ipPotr);//TCP连接
000076  4816              LDR      r0,|L1.208|
000078  6800              LDR      r0,[r0,#0]  ; sysAllData
00007a  f8b03048          LDRH     r3,[r0,#0x48]
00007e  4814              LDR      r0,|L1.208|
000080  6802              LDR      r2,[r0,#0]  ; sysAllData
000082  3236              ADDS     r2,r2,#0x36
000084  4921              LDR      r1,|L1.268|
000086  4668              MOV      r0,sp
000088  f7fffffe          BL       __2sprintf
00008c  b2c4              UXTB     r4,r0
;;;203    	CDMASendCmd((uint8_t *)sendCmd,"+ZIPSETUP:CONNECTED",sendlen);
00008e  4622              MOV      r2,r4
000090  a11f              ADR      r1,|L1.272|
000092  4668              MOV      r0,sp
000094  f7fffffe          BL       CDMASendCmd
;;;204    
;;;205    	freCDMALed = 300;           //网络连接成功
000098  f44f7096          MOV      r0,#0x12c
00009c  4921              LDR      r1,|L1.292|
00009e  8008              STRH     r0,[r1,#0]
;;;206    	sysAllData->isDataFlow = 0; //开启数据流
0000a0  2000              MOVS     r0,#0
0000a2  490b              LDR      r1,|L1.208|
0000a4  6809              LDR      r1,[r1,#0]  ; sysAllData
0000a6  f8810062          STRB     r0,[r1,#0x62]
;;;207    }
0000aa  b00c              ADD      sp,sp,#0x30
0000ac  bd10              POP      {r4,pc}
;;;208    
                          ENDP

0000ae  0000              DCW      0x0000
                  |L1.176|
0000b0  4f4b00            DCB      "OK",0
0000b3  00                DCB      0
                  |L1.180|
                          DCD      atCmd
                  |L1.184|
                          DCD      ate0Cmd
                  |L1.188|
                          DCD      at_ZDSLEEP
                  |L1.192|
0000c0  2b435351          DCB      "+CSQ:",0
0000c4  3a00    
0000c6  00                DCB      0
0000c7  00                DCB      0
                  |L1.200|
                          DCD      at_CSQ
                  |L1.204|
                          DCD      at_CNMI
                  |L1.208|
                          DCD      sysAllData
                  |L1.212|
                          DCD      at_GSN
                  |L1.216|
                          DCD      at_ICCID
                  |L1.220|
                          DCD      at_SetZpNum
                  |L1.224|
0000e0  2b5a5050          DCB      "+ZPPPSTATUS:",0
0000e4  50535441
0000e8  5455533a
0000ec  00      
0000ed  00                DCB      0
0000ee  00                DCB      0
0000ef  00                DCB      0
                  |L1.240|
                          DCD      at_ZPPPSTATUS
                  |L1.244|
0000f4  2b5a5050          DCB      "+ZPPPOPEN:CONNECTED",0
0000f8  504f5045
0000fc  4e3a434f
000100  4e4e4543
000104  54454400
                  |L1.264|
                          DCD      at_ZPPPOPEN
                  |L1.268|
                          DCD      at_ZIPSETUP
                  |L1.272|
000110  2b5a4950          DCB      "+ZIPSETUP:CONNECTED",0
000114  53455455
000118  503a434f
00011c  4e4e4543
000120  54454400
                  |L1.292|
                          DCD      freCDMALed

                          AREA ||i.CDMAPowerOpen_Close||, CODE, READONLY, ALIGN=2

                  CDMAPowerOpen_Close PROC
;;;111    }
;;;112    static void CDMAPowerOpen_Close(void)//这段代码是用来启动/关闭CDMA
000000  b510              PUSH     {r4,lr}
;;;113    {
;;;114    	CDMA_POWER_LOW;
000002  f44f4100          MOV      r1,#0x8000
000006  480b              LDR      r0,|L2.52|
000008  f7fffffe          BL       GPIO_ResetBits
;;;115    	OSTimeDlyHMSM(0,0,3,500);
00000c  f44f73fa          MOV      r3,#0x1f4
000010  2203              MOVS     r2,#3
000012  2100              MOVS     r1,#0
000014  4608              MOV      r0,r1
000016  f7fffffe          BL       OSTimeDlyHMSM
;;;116    	CDMA_POWER_HIGH;
00001a  f44f4100          MOV      r1,#0x8000
00001e  4805              LDR      r0,|L2.52|
000020  f7fffffe          BL       GPIO_SetBits
;;;117    	OSTimeDlyHMSM(0,0,4,0);
000024  2300              MOVS     r3,#0
000026  2204              MOVS     r2,#4
000028  4619              MOV      r1,r3
00002a  4618              MOV      r0,r3
00002c  f7fffffe          BL       OSTimeDlyHMSM
;;;118    }
000030  bd10              POP      {r4,pc}
;;;119    //配置以及发送数据的过程中，对CDMA返回的状态信息进行处理 0 接收正常
                          ENDP

000032  0000              DCW      0x0000
                  |L2.52|
                          DCD      0x40010c00

                          AREA ||i.CDMAReadIMEI_ICCID||, CODE, READONLY, ALIGN=2

                  CDMAReadIMEI_ICCID PROC
;;;155    
;;;156    static void CDMAReadIMEI_ICCID(const uint8_t at_Get[],uint8_t cmdLength,uint8_t datSave[],uint8_t datLength )
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;157    {
000004  4680              MOV      r8,r0
000006  4689              MOV      r9,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;158    	uint8_t err;
;;;159    	uint8_t i = 0;
00000c  2400              MOVS     r4,#0
;;;160    	uint8_t *ptrCDMACfg;
;;;161    	do{
00000e  bf00              NOP      
                  |L3.16|
;;;162    		CDMASendDatas(at_Get,cmdLength);
000010  4649              MOV      r1,r9
000012  4640              MOV      r0,r8
000014  f7fffffe          BL       CDMASendDatas
;;;163    		ptrCDMACfg = OSQPend(CDMARecieveQ,500,&err);//todo:添加 +CPIN  判断
000018  466a              MOV      r2,sp
00001a  f44f71fa          MOV      r1,#0x1f4
00001e  4817              LDR      r0,|L3.124|
000020  6800              LDR      r0,[r0,#0]  ; CDMARecieveQ
000022  f7fffffe          BL       OSQPend
000026  4605              MOV      r5,r0
;;;164    		if(err == OS_ERR_NONE)
000028  f89d0000          LDRB     r0,[sp,#0]
00002c  b9b0              CBNZ     r0,|L3.92|
;;;165    		{
;;;166    			while( (ptrCDMACfg[i]<0x30)|| (ptrCDMACfg[i]>0x39))
00002e  e006              B        |L3.62|
                  |L3.48|
;;;167    			{
;;;168    				i++;
000030  1c60              ADDS     r0,r4,#1
000032  b2c4              UXTB     r4,r0
;;;169    				if(i>15)
000034  2c0f              CMP      r4,#0xf
000036  dd02              BLE      |L3.62|
;;;170    				{
;;;171    					err = 2;
000038  2002              MOVS     r0,#2
00003a  9000              STR      r0,[sp,#0]
;;;172    					break;
00003c  e005              B        |L3.74|
                  |L3.62|
00003e  5d28              LDRB     r0,[r5,r4]            ;166
000040  2830              CMP      r0,#0x30              ;166
000042  dbf5              BLT      |L3.48|
000044  5d28              LDRB     r0,[r5,r4]            ;166
000046  2839              CMP      r0,#0x39              ;166
000048  dcf2              BGT      |L3.48|
                  |L3.74|
00004a  bf00              NOP      
;;;173    				}
;;;174    			}
;;;175    			memcpy(datSave,&ptrCDMACfg[i],datLength);
00004c  1929              ADDS     r1,r5,r4
00004e  463a              MOV      r2,r7
000050  4630              MOV      r0,r6
000052  f7fffffe          BL       __aeabi_memcpy
;;;176    			Mem_free(ptrCDMACfg);
000056  4628              MOV      r0,r5
000058  f7fffffe          BL       Mem_free
                  |L3.92|
;;;177    		}
;;;178    	}while(err != OS_ERR_NONE);
00005c  f89d0000          LDRB     r0,[sp,#0]
000060  2800              CMP      r0,#0
000062  d1d5              BNE      |L3.16|
;;;179    	ptrCDMACfg = OSQPend(CDMARecieveQ,2,&err);//用以消耗模块自动回复的“+CPIN:READY”
000064  466a              MOV      r2,sp
000066  2102              MOVS     r1,#2
000068  4804              LDR      r0,|L3.124|
00006a  6800              LDR      r0,[r0,#0]  ; CDMARecieveQ
00006c  f7fffffe          BL       OSQPend
000070  4605              MOV      r5,r0
;;;180    	Mem_free(ptrCDMACfg);
000072  4628              MOV      r0,r5
000074  f7fffffe          BL       Mem_free
;;;181    }
000078  e8bd83f8          POP      {r3-r9,pc}
;;;182    static void CDMAConfigInit(void )
                          ENDP

                  |L3.124|
                          DCD      CDMARecieveQ

                          AREA ||i.CDMAReceDeal||, CODE, READONLY, ALIGN=2

                  CDMAReceDeal PROC
;;;119    //配置以及发送数据的过程中，对CDMA返回的状态信息进行处理 0 接收正常
;;;120    static uint8_t CDMAReceDeal(uint8_t* ptrRece,char* ptr2)
000000  b570              PUSH     {r4-r6,lr}
;;;121    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;122    	char* p1 = NULL;
000006  2400              MOVS     r4,#0
;;;123    	p1 = strstr((const char*)ptrRece,"+CPIN");
000008  a108              ADR      r1,|L4.44|
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       strstr
000010  4604              MOV      r4,r0
;;;124    	if(p1 != NULL)
000012  b10c              CBZ      r4,|L4.24|
;;;125    		return 1;
000014  2001              MOVS     r0,#1
                  |L4.22|
;;;126    	p1 = strstr((const char*)ptrRece,ptr2);
;;;127    	if(p1 == NULL)
;;;128    		return 1;
;;;129    	return 0;
;;;130    }
000016  bd70              POP      {r4-r6,pc}
                  |L4.24|
000018  4631              MOV      r1,r6                 ;126
00001a  4628              MOV      r0,r5                 ;126
00001c  f7fffffe          BL       strstr
000020  4604              MOV      r4,r0                 ;126
000022  b90c              CBNZ     r4,|L4.40|
000024  2001              MOVS     r0,#1                 ;128
000026  e7f6              B        |L4.22|
                  |L4.40|
000028  2000              MOVS     r0,#0                 ;129
00002a  e7f4              B        |L4.22|
;;;131    //发送初始化配置指令
                          ENDP

                  |L4.44|
00002c  2b435049          DCB      "+CPIN",0
000030  4e00    
000032  00                DCB      0
000033  00                DCB      0

                          AREA ||i.CDMASendCmd||, CODE, READONLY, ALIGN=2

                  CDMASendCmd PROC
;;;131    //发送初始化配置指令
;;;132    void CDMASendCmd(const uint8_t sendDat[],char* compString,uint16_t sendLength)
000000  b5f8              PUSH     {r3-r7,lr}
;;;133    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;134    	uint8_t err;
;;;135    	uint8_t *ptrCDMACfg;
;;;136    	ptrCDMACfg = OSQPend(CDMARecieveQ,2,&err);//用以消耗模块自动回复的“+CPIN:READY”
000008  466a              MOV      r2,sp
00000a  2102              MOVS     r1,#2
00000c  4818              LDR      r0,|L5.112|
00000e  6800              LDR      r0,[r0,#0]  ; CDMARecieveQ
000010  f7fffffe          BL       OSQPend
000014  4607              MOV      r7,r0
;;;137    	Mem_free(ptrCDMACfg);
000016  4638              MOV      r0,r7
000018  f7fffffe          BL       Mem_free
;;;138    	do{
00001c  bf00              NOP      
                  |L5.30|
;;;139    		CDMASendDatas(sendDat,sendLength);
00001e  4621              MOV      r1,r4
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       CDMASendDatas
;;;140    		ptrCDMACfg = OSQPend(CDMARecieveQ,500,&err);
000026  466a              MOV      r2,sp
000028  f44f71fa          MOV      r1,#0x1f4
00002c  4810              LDR      r0,|L5.112|
00002e  6800              LDR      r0,[r0,#0]  ; CDMARecieveQ
000030  f7fffffe          BL       OSQPend
000034  4607              MOV      r7,r0
;;;141    		if(err != OS_ERR_NONE)        //接收超时
000036  f89d0000          LDRB     r0,[sp,#0]
00003a  b160              CBZ      r0,|L5.86|
;;;142    		{
;;;143    			CDMASendDatas(sendDat,sendLength);
00003c  4621              MOV      r1,r4
00003e  4628              MOV      r0,r5
000040  f7fffffe          BL       CDMASendDatas
;;;144    			ptrCDMACfg = OSQPend(CDMARecieveQ,1500,&err);
000044  466a              MOV      r2,sp
000046  f24051dc          MOV      r1,#0x5dc
00004a  4809              LDR      r0,|L5.112|
00004c  6800              LDR      r0,[r0,#0]  ; CDMARecieveQ
00004e  f7fffffe          BL       OSQPend
000052  4607              MOV      r7,r0
000054  e007              B        |L5.102|
                  |L5.86|
;;;145    		}
;;;146    		else
;;;147    		{
;;;148    			err = CDMAReceDeal(ptrCDMACfg,compString);
000056  4631              MOV      r1,r6
000058  4638              MOV      r0,r7
00005a  f7fffffe          BL       CDMAReceDeal
00005e  9000              STR      r0,[sp,#0]
;;;149    			Mem_free(ptrCDMACfg);
000060  4638              MOV      r0,r7
000062  f7fffffe          BL       Mem_free
                  |L5.102|
;;;150    		}
;;;151    	}while(err != 0);
000066  f89d0000          LDRB     r0,[sp,#0]
00006a  2800              CMP      r0,#0
00006c  d1d7              BNE      |L5.30|
;;;152    //	ptrCDMACfg = OSQPend(CDMARecieveQ,2,&err);//用以消耗模块自动回复的“+CPIN:READY”
;;;153    //	Mem_free(ptrCDMACfg);
;;;154    }
00006e  bdf8              POP      {r3-r7,pc}
;;;155    
                          ENDP

                  |L5.112|
                          DCD      CDMARecieveQ

                          AREA ||i.CDMATask||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  CDMATask PROC
;;;49     
;;;50     void CDMATask(void *pdata)
000000  b08a              SUB      sp,sp,#0x28
;;;51     {
;;;52     	uint8_t *pCDMARece = NULL;
000002  2500              MOVS     r5,#0
;;;53     	_CDMADataToSend *pCDMASend = NULL;
000004  2400              MOVS     r4,#0
;;;54     	uint8_t err;
;;;55     	char sendCmd[30];
;;;56     	uint16_t sendlen = 0;
000006  2600              MOVS     r6,#0
;;;57     	sendMsg      = OSSemCreate(0);//创建消息是否发送的信号量
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       OSSemCreate
00000e  4945              LDR      r1,|L6.292|
000010  6008              STR      r0,[r1,#0]  ; sendMsg
;;;58     	
;;;59     	CDMARecieveQ = OSQCreate(&cdmaRecBuf[0],CDMARECBUF_SIZE);  //建立CDMA接收 消息队列
000012  210a              MOVS     r1,#0xa
000014  4844              LDR      r0,|L6.296|
000016  f7fffffe          BL       OSQCreate
00001a  4944              LDR      r1,|L6.300|
00001c  6008              STR      r0,[r1,#0]  ; CDMARecieveQ
;;;60     	CDMASendQ    = OSQCreate(&cdmaSendBuf[0],CDMASENDBUF_SIZE);//建立CDMA发送 消息队列
00001e  2105              MOVS     r1,#5
000020  4843              LDR      r0,|L6.304|
000022  f7fffffe          BL       OSQCreate
000026  4943              LDR      r1,|L6.308|
000028  6008              STR      r0,[r1,#0]  ; CDMASendQ
;;;61     	
;;;62     resetCDMA:	
00002a  bf00              NOP      
                  |L6.44|
;;;63     	CDMAPowerOpen_Close();           //启动MG2639模块
00002c  f7fffffe          BL       CDMAPowerOpen_Close
;;;64     	
;;;65     	CDMAConfigInit();                //初始化配置MG2639
000030  f7fffffe          BL       CDMAConfigInit
;;;66     	
;;;67     	while(1)//todo:断网、断开TCP连接、OTA升级、配置文件下发、登录
000034  e075              B        |L6.290|
                  |L6.54|
;;;68     	{
;;;69     		OSSemPost(sendMsg); //没有发送数据
000036  483b              LDR      r0,|L6.292|
000038  6800              LDR      r0,[r0,#0]  ; sendMsg
00003a  f7fffffe          BL       OSSemPost
;;;70     		
;;;71     		pCDMASend = OSQPend(CDMASendQ,0,&err);
00003e  aa09              ADD      r2,sp,#0x24
000040  2100              MOVS     r1,#0
000042  483c              LDR      r0,|L6.308|
000044  6800              LDR      r0,[r0,#0]  ; CDMASendQ
000046  f7fffffe          BL       OSQPend
00004a  4604              MOV      r4,r0
;;;72     		
;;;73     		OSSemAccept(sendMsg); //正在发送数据 消耗掉发送时的信号量
00004c  4835              LDR      r0,|L6.292|
00004e  6800              LDR      r0,[r0,#0]  ; sendMsg
000050  f7fffffe          BL       OSSemAccept
;;;74     		
;;;75     		sendlen = sprintf(sendCmd,at_TCPSend,pCDMASend->datLength);
000054  8822              LDRH     r2,[r4,#0]
000056  4938              LDR      r1,|L6.312|
000058  a801              ADD      r0,sp,#4
00005a  f7fffffe          BL       __2sprintf
00005e  b286              UXTH     r6,r0
;;;76     		CDMASendDatas((uint8_t *)sendCmd,sendlen); //通知CDMA要通过哪个通道发送多少个字节的数据
000060  4631              MOV      r1,r6
000062  a801              ADD      r0,sp,#4
000064  f7fffffe          BL       CDMASendDatas
;;;77     		
;;;78     		pCDMARece = OSQPend(CDMARecieveQ,150,&err);
000068  aa09              ADD      r2,sp,#0x24
00006a  2196              MOVS     r1,#0x96
00006c  482f              LDR      r0,|L6.300|
00006e  6800              LDR      r0,[r0,#0]  ; CDMARecieveQ
000070  f7fffffe          BL       OSQPend
000074  4605              MOV      r5,r0
;;;79     		if(err == OS_ERR_NONE)
000076  f89d0024          LDRB     r0,[sp,#0x24]
00007a  2800              CMP      r0,#0
00007c  d13c              BNE      |L6.248|
;;;80     		{
;;;81     			err = CDMAReceDeal(pCDMARece,"DISCONNECTED");
00007e  a12f              ADR      r1,|L6.316|
000080  4628              MOV      r0,r5
000082  f7fffffe          BL       CDMAReceDeal
000086  9009              STR      r0,[sp,#0x24]
;;;82     			if(err == 0)                        //TCP断开连接，重连
000088  f89d0024          LDRB     r0,[sp,#0x24]
00008c  b9d0              CBNZ     r0,|L6.196|
;;;83     			{
;;;84     				Mem_free(pCDMARece);
00008e  4628              MOV      r0,r5
000090  f7fffffe          BL       Mem_free
;;;85     				
;;;86     				Mem_free(pCDMASend->data);
000094  6860              LDR      r0,[r4,#4]
000096  f7fffffe          BL       Mem_free
;;;87     				Mem_free(pCDMASend);
00009a  4620              MOV      r0,r4
00009c  f7fffffe          BL       Mem_free
;;;88     				
;;;89     				sysAllData->isDataFlow = 1;     //数据流未流动
0000a0  2001              MOVS     r0,#1
0000a2  492a              LDR      r1,|L6.332|
0000a4  6809              LDR      r1,[r1,#0]  ; sysAllData
0000a6  f8810062          STRB     r0,[r1,#0x62]
;;;90     				freCDMALed = 100;               //CDMA小灯快闪
0000aa  2064              MOVS     r0,#0x64
0000ac  4928              LDR      r1,|L6.336|
0000ae  8008              STRH     r0,[r1,#0]
;;;91     				CDMAPowerOpen_Close();          //关闭CDMA电源
0000b0  f7fffffe          BL       CDMAPowerOpen_Close
;;;92     				OSTimeDlyHMSM(0,0,8,500);       //关闭需要延时
0000b4  f44f73fa          MOV      r3,#0x1f4
0000b8  2208              MOVS     r2,#8
0000ba  2100              MOVS     r1,#0
0000bc  4608              MOV      r0,r1
0000be  f7fffffe          BL       OSTimeDlyHMSM
;;;93     				goto resetCDMA;
0000c2  e7b3              B        |L6.44|
                  |L6.196|
;;;94     			}
;;;95     			err = CDMAReceDeal(pCDMARece,">");
0000c4  a123              ADR      r1,|L6.340|
0000c6  4628              MOV      r0,r5
0000c8  f7fffffe          BL       CDMAReceDeal
0000cc  9009              STR      r0,[sp,#0x24]
;;;96     			Mem_free(pCDMARece);
0000ce  4628              MOV      r0,r5
0000d0  f7fffffe          BL       Mem_free
;;;97     			if(err != 0)
0000d4  f89d0024          LDRB     r0,[sp,#0x24]
0000d8  b170              CBZ      r0,|L6.248|
;;;98     			{
;;;99     				CDMASendDatas((uint8_t *)sendCmd,sendlen); //通知CDMA要通过哪个通道发送多少个字节的数据
0000da  4631              MOV      r1,r6
0000dc  a801              ADD      r0,sp,#4
0000de  f7fffffe          BL       CDMASendDatas
;;;100    				pCDMARece = OSQPend(CDMARecieveQ,1500,&err);
0000e2  aa09              ADD      r2,sp,#0x24
0000e4  f24051dc          MOV      r1,#0x5dc
0000e8  4810              LDR      r0,|L6.300|
0000ea  6800              LDR      r0,[r0,#0]  ; CDMARecieveQ
0000ec  f7fffffe          BL       OSQPend
0000f0  4605              MOV      r5,r0
;;;101    				Mem_free(pCDMARece);
0000f2  4628              MOV      r0,r5
0000f4  f7fffffe          BL       Mem_free
                  |L6.248|
;;;102    			}
;;;103    		}
;;;104    		CDMASendDatas((uint8_t *)pCDMASend->data,pCDMASend->datLength);//实际要发送的数据
0000f8  8821              LDRH     r1,[r4,#0]
0000fa  6860              LDR      r0,[r4,#4]
0000fc  f7fffffe          BL       CDMASendDatas
;;;105    		pCDMARece = OSQPend(CDMARecieveQ,1500,&err);       //发送成功
000100  aa09              ADD      r2,sp,#0x24
000102  f24051dc          MOV      r1,#0x5dc
000106  4809              LDR      r0,|L6.300|
000108  6800              LDR      r0,[r0,#0]  ; CDMARecieveQ
00010a  f7fffffe          BL       OSQPend
00010e  4605              MOV      r5,r0
;;;106    		Mem_free(pCDMARece);
000110  4628              MOV      r0,r5
000112  f7fffffe          BL       Mem_free
;;;107    	
;;;108    		Mem_free(pCDMASend->data);
000116  6860              LDR      r0,[r4,#4]
000118  f7fffffe          BL       Mem_free
;;;109    		Mem_free(pCDMASend);
00011c  4620              MOV      r0,r4
00011e  f7fffffe          BL       Mem_free
                  |L6.290|
000122  e788              B        |L6.54|
;;;110    	}
;;;111    }
;;;112    static void CDMAPowerOpen_Close(void)//这段代码是用来启动/关闭CDMA
                          ENDP

                  |L6.292|
                          DCD      sendMsg
                  |L6.296|
                          DCD      cdmaRecBuf
                  |L6.300|
                          DCD      CDMARecieveQ
                  |L6.304|
                          DCD      cdmaSendBuf
                  |L6.308|
                          DCD      CDMASendQ
                  |L6.312|
                          DCD      at_TCPSend
                  |L6.316|
00013c  44495343          DCB      "DISCONNECTED",0
000140  4f4e4e45
000144  43544544
000148  00      
000149  00                DCB      0
00014a  00                DCB      0
00014b  00                DCB      0
                  |L6.332|
                          DCD      sysAllData
                  |L6.336|
                          DCD      freCDMALed
                  |L6.340|
000154  3e00              DCB      ">",0
000156  00                DCB      0
000157  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  cdmaRecBuf
                          %        40
                  cdmaSendBuf
                          %        20

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  atCmd
000000  41540d00          DCB      0x41,0x54,0x0d,0x00
                  ate0Cmd
000004  41544530          DCB      0x41,0x54,0x45,0x30
000008  0d00              DCB      0x0d,0x00
                  at_ZDSLEEP
00000a  4154              DCB      0x41,0x54
00000c  2b5a4453          DCB      0x2b,0x5a,0x44,0x53
000010  4c454550          DCB      0x4c,0x45,0x45,0x50
000014  3d300d00          DCB      0x3d,0x30,0x0d,0x00
                  athCmd
000018  4154480d          DCB      0x41,0x54,0x48,0x0d
00001c  00                DCB      0x00
                  at_CMGF
00001d  41542b            DCB      0x41,0x54,0x2b
000020  434d4746          DCB      0x43,0x4d,0x47,0x46
000024  3d310d00          DCB      0x3d,0x31,0x0d,0x00
                  at_CNMI
000028  41542b43          DCB      0x41,0x54,0x2b,0x43
00002c  4e4d493d          DCB      0x4e,0x4d,0x49,0x3d
000030  332c322c          DCB      0x33,0x2c,0x32,0x2c
000034  302c302c          DCB      0x30,0x2c,0x30,0x2c
000038  300d00            DCB      0x30,0x0d,0x00
                  at_GSN
00003b  41                DCB      0x41
00003c  542b4753          DCB      0x54,0x2b,0x47,0x53
000040  4e0d00            DCB      0x4e,0x0d,0x00
                  at_CPIN
000043  41                DCB      0x41
000044  542b4350          DCB      0x54,0x2b,0x43,0x50
000048  494e3f0d          DCB      0x49,0x4e,0x3f,0x0d
00004c  00                DCB      0x00
                  at_SetZpNum
00004d  41542b            DCB      0x41,0x54,0x2b
000050  5a504e55          DCB      0x5a,0x50,0x4e,0x55
000054  4d3d2243          DCB      0x4d,0x3d,0x22,0x43
000058  4d4d544d          DCB      0x4d,0x4d,0x54,0x4d
00005c  222c2222          DCB      0x22,0x2c,0x22,0x22
000060  2c22220d          DCB      0x2c,0x22,0x22,0x0d
000064  00                DCB      0x00
                  at_ZPNUM
000065  41542b            DCB      0x41,0x54,0x2b
000068  5a504e55          DCB      0x5a,0x50,0x4e,0x55
00006c  4d3d2337          DCB      0x4d,0x3d,0x23,0x37
000070  37370d00          DCB      0x37,0x37,0x0d,0x00
                  at_ZPPPSTATUS
000074  41542b5a          DCB      0x41,0x54,0x2b,0x5a
000078  50505053          DCB      0x50,0x50,0x50,0x53
00007c  54415455          DCB      0x54,0x41,0x54,0x55
000080  530d00            DCB      0x53,0x0d,0x00
                  at_CSQ
000083  41                DCB      0x41
000084  542b4353          DCB      0x54,0x2b,0x43,0x53
000088  510a0d00          DCB      0x51,0x0a,0x0d,0x00
                  at_ICCID
00008c  41542b5a          DCB      0x41,0x54,0x2b,0x5a
000090  47455449          DCB      0x47,0x45,0x54,0x49
000094  43434944          DCB      0x43,0x43,0x49,0x44
000098  0d00              DCB      0x0d,0x00
                  at_ZPPPOPEN
00009a  4154              DCB      0x41,0x54
00009c  2b5a5050          DCB      0x2b,0x5a,0x50,0x50
0000a0  504f5045          DCB      0x50,0x4f,0x50,0x45
0000a4  4e0d00            DCB      0x4e,0x0d,0x00
                  at_ZIPSETUP
0000a7  41                DCB      0x41
0000a8  542b5a49          DCB      0x54,0x2b,0x5a,0x49
0000ac  50534554          DCB      0x50,0x53,0x45,0x54
0000b0  55503d30          DCB      0x55,0x50,0x3d,0x30
0000b4  2c25732c          DCB      0x2c,0x25,0x73,0x2c
0000b8  25640d00          DCB      0x25,0x64,0x0d,0x00
                  at_Check
0000bc  41542b5a          DCB      0x41,0x54,0x2b,0x5a
0000c0  49505053          DCB      0x49,0x50,0x50,0x53
0000c4  54415455          DCB      0x54,0x41,0x54,0x55
0000c8  533d300d          DCB      0x53,0x3d,0x30,0x0d
0000cc  00                DCB      0x00
                  at_TCPClose
0000cd  41542b            DCB      0x41,0x54,0x2b
0000d0  5a495043          DCB      0x5a,0x49,0x50,0x43
0000d4  4c4f5345          DCB      0x4c,0x4f,0x53,0x45
0000d8  3d300d00          DCB      0x3d,0x30,0x0d,0x00
                  at_TCPSend
0000dc  41542b5a          DCB      0x41,0x54,0x2b,0x5a
0000e0  49505345          DCB      0x49,0x50,0x53,0x45
0000e4  4e443d30          DCB      0x4e,0x44,0x3d,0x30
0000e8  2c25640d          DCB      0x2c,0x25,0x64,0x0d
0000ec  00                DCB      0x00
                  at_GetIP
0000ed  41542b            DCB      0x41,0x54,0x2b
0000f0  5a495047          DCB      0x5a,0x49,0x50,0x47
0000f4  45544950          DCB      0x45,0x54,0x49,0x50
0000f8  0d00              DCB      0x0d,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  CDMARecieveQ
                          DCD      0x00000000
                  CDMASendQ
                          DCD      0x00000000
                  sendMsg
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\CDMA\\CDMATask.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_CDMATask_c_atCmd____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_CDMATask_c_atCmd____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_CDMATask_c_atCmd____REVSH|
#line 144
|__asm___10_CDMATask_c_atCmd____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
