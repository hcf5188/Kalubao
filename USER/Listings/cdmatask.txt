; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\obj\cdmatask.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=..\obj\cdmatask.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\OBD -I..\SYSTEM -I..\USER -I..\LIB\inc -I..\UCOSII\CONFIG -I..\UCOSII\PORT -I..\UCOSII\CORE -I..\HAEDWARE -I..\GPS -I..\CDMA -I..\DEAL -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\cdmatask.crf ..\CDMA\CDMATask.c]
                          THUMB

                          AREA ||i.CDMAConfigInit||, CODE, READONLY, ALIGN=2

                  CDMAConfigInit PROC
;;;159    }
;;;160    static void CDMAConfigInit(void )
000000  b510              PUSH     {r4,lr}
;;;161    {
;;;162    	CDMASendCmd(atCmd,"OK",sizeof(atCmd));
000002  2204              MOVS     r2,#4
000004  a11e              ADR      r1,|L1.128|
000006  481f              LDR      r0,|L1.132|
000008  f7fffffe          BL       CDMASendCmd
;;;163    	CDMASendCmd(ate0Cmd,"OK",sizeof(ate0Cmd));
00000c  2206              MOVS     r2,#6
00000e  a11c              ADR      r1,|L1.128|
000010  481d              LDR      r0,|L1.136|
000012  f7fffffe          BL       CDMASendCmd
;;;164    	CDMASendCmd(at_ZDSLEEP,"OK",sizeof(at_ZDSLEEP));
000016  220e              MOVS     r2,#0xe
000018  a119              ADR      r1,|L1.128|
00001a  481c              LDR      r0,|L1.140|
00001c  f7fffffe          BL       CDMASendCmd
;;;165    	CDMASendCmd(at_CSQ,"+CSQ:",sizeof(at_CSQ));
000020  2209              MOVS     r2,#9
000022  a11b              ADR      r1,|L1.144|
000024  481c              LDR      r0,|L1.152|
000026  f7fffffe          BL       CDMASendCmd
;;;166    	CDMASendCmd(at_ICCID,"OK",sizeof(at_ICCID));
00002a  220e              MOVS     r2,#0xe
00002c  a114              ADR      r1,|L1.128|
00002e  481b              LDR      r0,|L1.156|
000030  f7fffffe          BL       CDMASendCmd
;;;167    	CDMASendCmd(at_CNMI,"OK",sizeof(at_CNMI));
000034  2213              MOVS     r2,#0x13
000036  a112              ADR      r1,|L1.128|
000038  4819              LDR      r0,|L1.160|
00003a  f7fffffe          BL       CDMASendCmd
;;;168    	
;;;169    	CDMAReadIMEI();//读取IMEI号
00003e  f7fffffe          BL       CDMAReadIMEI
;;;170    	
;;;171    	CDMASendCmd(at_SetZpNum,"OK",sizeof(at_SetZpNum));
000042  2218              MOVS     r2,#0x18
000044  a10e              ADR      r1,|L1.128|
000046  4817              LDR      r0,|L1.164|
000048  f7fffffe          BL       CDMASendCmd
;;;172    	CDMASendCmd(at_ZPPPSTATUS,"+ZPPPSTATUS:",sizeof(at_ZPPPSTATUS));
00004c  220f              MOVS     r2,#0xf
00004e  a116              ADR      r1,|L1.168|
000050  4819              LDR      r0,|L1.184|
000052  f7fffffe          BL       CDMASendCmd
;;;173    	CDMASendCmd(at_ZPPPOPEN,"+ZPPPOPEN:CONNECTED",sizeof(at_ZPPPOPEN));
000056  220d              MOVS     r2,#0xd
000058  a118              ADR      r1,|L1.188|
00005a  481d              LDR      r0,|L1.208|
00005c  f7fffffe          BL       CDMASendCmd
;;;174    	CDMASendCmd(at_ZIPSETUP,"+ZIPSETUP:CONNECTED",sizeof(at_ZIPSETUP));
000060  2224              MOVS     r2,#0x24
000062  a11c              ADR      r1,|L1.212|
000064  4820              LDR      r0,|L1.232|
000066  f7fffffe          BL       CDMASendCmd
;;;175    
;;;176    	freCDMALed = 300;//网络连接成功
00006a  f44f7096          MOV      r0,#0x12c
00006e  491f              LDR      r1,|L1.236|
000070  8008              STRH     r0,[r1,#0]
;;;177    	OSTimeDlyHMSM(0,0,4,0);
000072  2300              MOVS     r3,#0
000074  2204              MOVS     r2,#4
000076  4619              MOV      r1,r3
000078  4618              MOV      r0,r3
00007a  f7fffffe          BL       OSTimeDlyHMSM
;;;178    }
00007e  bd10              POP      {r4,pc}
;;;179    
                          ENDP

                  |L1.128|
000080  4f4b00            DCB      "OK",0
000083  00                DCB      0
                  |L1.132|
                          DCD      atCmd
                  |L1.136|
                          DCD      ate0Cmd
                  |L1.140|
                          DCD      at_ZDSLEEP
                  |L1.144|
000090  2b435351          DCB      "+CSQ:",0
000094  3a00    
000096  00                DCB      0
000097  00                DCB      0
                  |L1.152|
                          DCD      at_CSQ
                  |L1.156|
                          DCD      at_ICCID
                  |L1.160|
                          DCD      at_CNMI
                  |L1.164|
                          DCD      at_SetZpNum
                  |L1.168|
0000a8  2b5a5050          DCB      "+ZPPPSTATUS:",0
0000ac  50535441
0000b0  5455533a
0000b4  00      
0000b5  00                DCB      0
0000b6  00                DCB      0
0000b7  00                DCB      0
                  |L1.184|
                          DCD      at_ZPPPSTATUS
                  |L1.188|
0000bc  2b5a5050          DCB      "+ZPPPOPEN:CONNECTED",0
0000c0  504f5045
0000c4  4e3a434f
0000c8  4e4e4543
0000cc  54454400
                  |L1.208|
                          DCD      at_ZPPPOPEN
                  |L1.212|
0000d4  2b5a4950          DCB      "+ZIPSETUP:CONNECTED",0
0000d8  53455455
0000dc  503a434f
0000e0  4e4e4543
0000e4  54454400
                  |L1.232|
                          DCD      at_ZIPSETUP
                  |L1.236|
                          DCD      freCDMALed

                          AREA ||i.CDMAPowerOpen_Close||, CODE, READONLY, ALIGN=2

                  CDMAPowerOpen_Close PROC
;;;89     }
;;;90     static void CDMAPowerOpen_Close(void)//这段代码是用来启动/关闭CDMA
000000  b510              PUSH     {r4,lr}
;;;91     {
;;;92     	CDMA_POWER_LOW;
000002  f44f4100          MOV      r1,#0x8000
000006  480b              LDR      r0,|L2.52|
000008  f7fffffe          BL       GPIO_ResetBits
;;;93     	OSTimeDlyHMSM(0,0,3,500);
00000c  f44f73fa          MOV      r3,#0x1f4
000010  2203              MOVS     r2,#3
000012  2100              MOVS     r1,#0
000014  4608              MOV      r0,r1
000016  f7fffffe          BL       OSTimeDlyHMSM
;;;94     	CDMA_POWER_HIGH;
00001a  f44f4100          MOV      r1,#0x8000
00001e  4805              LDR      r0,|L2.52|
000020  f7fffffe          BL       GPIO_SetBits
;;;95     	OSTimeDlyHMSM(0,0,2,0);
000024  2300              MOVS     r3,#0
000026  2202              MOVS     r2,#2
000028  4619              MOV      r1,r3
00002a  4618              MOV      r0,r3
00002c  f7fffffe          BL       OSTimeDlyHMSM
;;;96     }
000030  bd10              POP      {r4,pc}
;;;97     //配置以及发送数据的过程中，对CDMA返回的状态信息进行处理 0 接收正常
                          ENDP

000032  0000              DCW      0x0000
                  |L2.52|
                          DCD      0x40010c00

                          AREA ||i.CDMAReadIMEI||, CODE, READONLY, ALIGN=2

                  CDMAReadIMEI PROC
;;;133    extern _SystemInformation sysAllData;//系统全局变量信息
;;;134    static void CDMAReadIMEI(void )
000000  b538              PUSH     {r3-r5,lr}
;;;135    {
;;;136    	uint8_t err;
;;;137    	uint8_t i = 0;
000002  2400              MOVS     r4,#0
;;;138    	uint8_t *ptrCDMACfg;
;;;139    	do{
000004  bf00              NOP      
                  |L3.6|
;;;140    		CDMASendDatas(at_GSN,sizeof(at_GSN));
000006  2108              MOVS     r1,#8
000008  4819              LDR      r0,|L3.112|
00000a  f7fffffe          BL       CDMASendDatas
;;;141    		ptrCDMACfg = OSQPend(CDMARecieveQ,1500,&err);
00000e  466a              MOV      r2,sp
000010  f24051dc          MOV      r1,#0x5dc
000014  4817              LDR      r0,|L3.116|
000016  6800              LDR      r0,[r0,#0]  ; CDMARecieveQ
000018  f7fffffe          BL       OSQPend
00001c  4605              MOV      r5,r0
;;;142    		if(err == OS_ERR_NONE)
00001e  f89d0000          LDRB     r0,[sp,#0]
000022  b9b0              CBNZ     r0,|L3.82|
;;;143    		{
;;;144    			while( (ptrCDMACfg[i]<0x30)|| (ptrCDMACfg[i]>0x39))
000024  e006              B        |L3.52|
                  |L3.38|
;;;145    			{
;;;146    				i++;
000026  1c60              ADDS     r0,r4,#1
000028  b2c4              UXTB     r4,r0
;;;147    				if(i>10)
00002a  2c0a              CMP      r4,#0xa
00002c  dd02              BLE      |L3.52|
;;;148    				{
;;;149    					err = 2;
00002e  2002              MOVS     r0,#2
000030  9000              STR      r0,[sp,#0]
;;;150    					break;
000032  e005              B        |L3.64|
                  |L3.52|
000034  5d28              LDRB     r0,[r5,r4]            ;144
000036  2830              CMP      r0,#0x30              ;144
000038  dbf5              BLT      |L3.38|
00003a  5d28              LDRB     r0,[r5,r4]            ;144
00003c  2839              CMP      r0,#0x39              ;144
00003e  dcf2              BGT      |L3.38|
                  |L3.64|
000040  bf00              NOP      
;;;151    				}
;;;152    			}
;;;153    			memcpy(sysAllData.imei,&ptrCDMACfg[i],15);
000042  1929              ADDS     r1,r5,r4
000044  220f              MOVS     r2,#0xf
000046  480c              LDR      r0,|L3.120|
000048  f7fffffe          BL       __aeabi_memcpy
;;;154    			Mem_free(ptrCDMACfg);
00004c  4628              MOV      r0,r5
00004e  f7fffffe          BL       Mem_free
                  |L3.82|
;;;155    		}
;;;156    	}while(err != OS_ERR_NONE);
000052  f89d0000          LDRB     r0,[sp,#0]
000056  2800              CMP      r0,#0
000058  d1d5              BNE      |L3.6|
;;;157    	ptrCDMACfg = OSQPend(CDMARecieveQ,2,&err);//用以消耗模块自动回复的“+CPIN:READY”
00005a  466a              MOV      r2,sp
00005c  2102              MOVS     r1,#2
00005e  4805              LDR      r0,|L3.116|
000060  6800              LDR      r0,[r0,#0]  ; CDMARecieveQ
000062  f7fffffe          BL       OSQPend
000066  4605              MOV      r5,r0
;;;158    	Mem_free(ptrCDMACfg);
000068  4628              MOV      r0,r5
00006a  f7fffffe          BL       Mem_free
;;;159    }
00006e  bd38              POP      {r3-r5,pc}
;;;160    static void CDMAConfigInit(void )
                          ENDP

                  |L3.112|
                          DCD      at_GSN
                  |L3.116|
                          DCD      CDMARecieveQ
                  |L3.120|
                          DCD      sysAllData+0x18

                          AREA ||i.CDMAReceDeal||, CODE, READONLY, ALIGN=2

                  CDMAReceDeal PROC
;;;97     //配置以及发送数据的过程中，对CDMA返回的状态信息进行处理 0 接收正常
;;;98     static uint8_t CDMAReceDeal(uint8_t* ptrRece,char* ptr2)
000000  b570              PUSH     {r4-r6,lr}
;;;99     {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;100    	char* p1 = NULL;
000006  2400              MOVS     r4,#0
;;;101    	p1 = strstr((const char*)ptrRece,"+CPIN");
000008  a108              ADR      r1,|L4.44|
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       strstr
000010  4604              MOV      r4,r0
;;;102    	if(p1 != NULL)
000012  b10c              CBZ      r4,|L4.24|
;;;103    		return 1;
000014  2001              MOVS     r0,#1
                  |L4.22|
;;;104    	p1 = strstr((const char*)ptrRece,ptr2);
;;;105    	if(p1 == NULL)
;;;106    		return 1;
;;;107    	return 0;
;;;108    }
000016  bd70              POP      {r4-r6,pc}
                  |L4.24|
000018  4631              MOV      r1,r6                 ;104
00001a  4628              MOV      r0,r5                 ;104
00001c  f7fffffe          BL       strstr
000020  4604              MOV      r4,r0                 ;104
000022  b90c              CBNZ     r4,|L4.40|
000024  2001              MOVS     r0,#1                 ;106
000026  e7f6              B        |L4.22|
                  |L4.40|
000028  2000              MOVS     r0,#0                 ;107
00002a  e7f4              B        |L4.22|
;;;109    //发送初始化配置指令
                          ENDP

                  |L4.44|
00002c  2b435049          DCB      "+CPIN",0
000030  4e00    
000032  00                DCB      0
000033  00                DCB      0

                          AREA ||i.CDMASendCmd||, CODE, READONLY, ALIGN=2

                  CDMASendCmd PROC
;;;109    //发送初始化配置指令
;;;110    static void CDMASendCmd(const uint8_t sendDat[],char* compString,uint16_t sendLength)
000000  b5f8              PUSH     {r3-r7,lr}
;;;111    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;112    	uint8_t err;
;;;113    	uint8_t *ptrCDMACfg;
;;;114    	ptrCDMACfg = OSQPend(CDMARecieveQ,2,&err);//用以消耗模块自动回复的“+CPIN:READY”
000008  466a              MOV      r2,sp
00000a  2102              MOVS     r1,#2
00000c  4818              LDR      r0,|L5.112|
00000e  6800              LDR      r0,[r0,#0]  ; CDMARecieveQ
000010  f7fffffe          BL       OSQPend
000014  4607              MOV      r7,r0
;;;115    	Mem_free(ptrCDMACfg);
000016  4638              MOV      r0,r7
000018  f7fffffe          BL       Mem_free
;;;116    	do{
00001c  bf00              NOP      
                  |L5.30|
;;;117    		CDMASendDatas(sendDat,sendLength);
00001e  4621              MOV      r1,r4
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       CDMASendDatas
;;;118    		ptrCDMACfg = OSQPend(CDMARecieveQ,1500,&err);
000026  466a              MOV      r2,sp
000028  f24051dc          MOV      r1,#0x5dc
00002c  4810              LDR      r0,|L5.112|
00002e  6800              LDR      r0,[r0,#0]  ; CDMARecieveQ
000030  f7fffffe          BL       OSQPend
000034  4607              MOV      r7,r0
;;;119    		if(err != OS_ERR_NONE)        //接收超时
000036  f89d0000          LDRB     r0,[sp,#0]
00003a  b160              CBZ      r0,|L5.86|
;;;120    		{
;;;121    			CDMASendDatas(sendDat,sendLength);
00003c  4621              MOV      r1,r4
00003e  4628              MOV      r0,r5
000040  f7fffffe          BL       CDMASendDatas
;;;122    			ptrCDMACfg = OSQPend(CDMARecieveQ,1500,&err);
000044  466a              MOV      r2,sp
000046  f24051dc          MOV      r1,#0x5dc
00004a  4809              LDR      r0,|L5.112|
00004c  6800              LDR      r0,[r0,#0]  ; CDMARecieveQ
00004e  f7fffffe          BL       OSQPend
000052  4607              MOV      r7,r0
000054  e007              B        |L5.102|
                  |L5.86|
;;;123    		}
;;;124    		else
;;;125    		{
;;;126    			err = CDMAReceDeal(ptrCDMACfg,compString);
000056  4631              MOV      r1,r6
000058  4638              MOV      r0,r7
00005a  f7fffffe          BL       CDMAReceDeal
00005e  9000              STR      r0,[sp,#0]
;;;127    			Mem_free(ptrCDMACfg);
000060  4638              MOV      r0,r7
000062  f7fffffe          BL       Mem_free
                  |L5.102|
;;;128    		}
;;;129    	}while(err != 0);
000066  f89d0000          LDRB     r0,[sp,#0]
00006a  2800              CMP      r0,#0
00006c  d1d7              BNE      |L5.30|
;;;130    //	ptrCDMACfg = OSQPend(CDMARecieveQ,2,&err);//用以消耗模块自动回复的“+CPIN:READY”
;;;131    //	Mem_free(ptrCDMACfg);
;;;132    }
00006e  bdf8              POP      {r3-r7,pc}
;;;133    extern _SystemInformation sysAllData;//系统全局变量信息
                          ENDP

                  |L5.112|
                          DCD      CDMARecieveQ

                          AREA ||i.CDMATask||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  CDMATask PROC
;;;46     
;;;47     void CDMATask(void *pdata)
000000  b08a              SUB      sp,sp,#0x28
;;;48     {
;;;49     	uint8_t *pCDMARece = NULL;
000002  2500              MOVS     r5,#0
;;;50     	_CDMADataToSend *pCDMASend = NULL;
000004  2400              MOVS     r4,#0
;;;51     //	char *p1;
;;;52     	uint8_t err;
;;;53     	char sendCmd[30];
;;;54     	uint16_t sendlen = 0;
000006  2600              MOVS     r6,#0
;;;55     	
;;;56     	CDMARecieveQ = OSQCreate(&cdmaRecBuf[0],CDMARECBUF_SIZE);  //建立CDMA接收 消息队列
000008  210a              MOVS     r1,#0xa
00000a  482c              LDR      r0,|L6.188|
00000c  f7fffffe          BL       OSQCreate
000010  492b              LDR      r1,|L6.192|
000012  6008              STR      r0,[r1,#0]  ; CDMARecieveQ
;;;57     	CDMASendQ    = OSQCreate(&cdmaSendBuf[0],CDMASENDBUF_SIZE);//建立CDMA发送 消息队列
000014  2105              MOVS     r1,#5
000016  482b              LDR      r0,|L6.196|
000018  f7fffffe          BL       OSQCreate
00001c  492a              LDR      r1,|L6.200|
00001e  6008              STR      r0,[r1,#0]  ; CDMASendQ
;;;58     	
;;;59     	CDMAPowerOpen_Close();           //启动MG2639模块
000020  f7fffffe          BL       CDMAPowerOpen_Close
;;;60     	
;;;61     	CDMAConfigInit();                //初始化配置MG2639
000024  f7fffffe          BL       CDMAConfigInit
;;;62     	
;;;63     	while(1)//todo:断网、断开TCP连接、OTA升级、配置文件下发、登录
000028  e047              B        |L6.186|
                  |L6.42|
;;;64     	{
;;;65     		pCDMASend = OSQPend(CDMASendQ,0,&err);
00002a  aa09              ADD      r2,sp,#0x24
00002c  2100              MOVS     r1,#0
00002e  4826              LDR      r0,|L6.200|
000030  6800              LDR      r0,[r0,#0]  ; CDMASendQ
000032  f7fffffe          BL       OSQPend
000036  4604              MOV      r4,r0
;;;66     		
;;;67     		sendlen = sprintf(sendCmd,at_TCPSend,pCDMASend->datLength);
000038  8822              LDRH     r2,[r4,#0]
00003a  4924              LDR      r1,|L6.204|
00003c  a801              ADD      r0,sp,#4
00003e  f7fffffe          BL       __2sprintf
000042  b286              UXTH     r6,r0
;;;68     
;;;69     		CDMASendDatas((uint8_t *)sendCmd,sendlen); //通知CDMA要通过哪个通道发送多少个字节的数据
000044  4631              MOV      r1,r6
000046  a801              ADD      r0,sp,#4
000048  f7fffffe          BL       CDMASendDatas
;;;70     		pCDMARece = OSQPend(CDMARecieveQ,1500,&err);
00004c  aa09              ADD      r2,sp,#0x24
00004e  f24051dc          MOV      r1,#0x5dc
000052  481b              LDR      r0,|L6.192|
000054  6800              LDR      r0,[r0,#0]  ; CDMARecieveQ
000056  f7fffffe          BL       OSQPend
00005a  4605              MOV      r5,r0
;;;71     		if(err == OS_ERR_NONE)
00005c  f89d0024          LDRB     r0,[sp,#0x24]
000060  b9c8              CBNZ     r0,|L6.150|
;;;72     		{
;;;73     			err = CDMAReceDeal(pCDMARece,">");
000062  a11b              ADR      r1,|L6.208|
000064  4628              MOV      r0,r5
000066  f7fffffe          BL       CDMAReceDeal
00006a  9009              STR      r0,[sp,#0x24]
;;;74     			Mem_free(pCDMARece);
00006c  4628              MOV      r0,r5
00006e  f7fffffe          BL       Mem_free
;;;75     			if(err != 0)
000072  f89d0024          LDRB     r0,[sp,#0x24]
000076  b170              CBZ      r0,|L6.150|
;;;76     			{
;;;77     				CDMASendDatas((uint8_t *)sendCmd,sendlen); //通知CDMA要通过哪个通道发送多少个字节的数据
000078  4631              MOV      r1,r6
00007a  a801              ADD      r0,sp,#4
00007c  f7fffffe          BL       CDMASendDatas
;;;78     				pCDMARece = OSQPend(CDMARecieveQ,1500,&err);
000080  aa09              ADD      r2,sp,#0x24
000082  f24051dc          MOV      r1,#0x5dc
000086  480e              LDR      r0,|L6.192|
000088  6800              LDR      r0,[r0,#0]  ; CDMARecieveQ
00008a  f7fffffe          BL       OSQPend
00008e  4605              MOV      r5,r0
;;;79     				Mem_free(pCDMARece);
000090  4628              MOV      r0,r5
000092  f7fffffe          BL       Mem_free
                  |L6.150|
;;;80     			}
;;;81     		}
;;;82     
;;;83     		CDMASendDatas((uint8_t *)pCDMASend->data,pCDMASend->datLength);//实际要发送的数据
000096  8821              LDRH     r1,[r4,#0]
000098  1d20              ADDS     r0,r4,#4
00009a  f7fffffe          BL       CDMASendDatas
;;;84     		pCDMARece = OSQPend(CDMARecieveQ,1500,&err);       //发送成功
00009e  aa09              ADD      r2,sp,#0x24
0000a0  f24051dc          MOV      r1,#0x5dc
0000a4  4806              LDR      r0,|L6.192|
0000a6  6800              LDR      r0,[r0,#0]  ; CDMARecieveQ
0000a8  f7fffffe          BL       OSQPend
0000ac  4605              MOV      r5,r0
;;;85     		Mem_free(pCDMARece);
0000ae  4628              MOV      r0,r5
0000b0  f7fffffe          BL       Mem_free
;;;86     	
;;;87     		Mem_free(pCDMASend);
0000b4  4620              MOV      r0,r4
0000b6  f7fffffe          BL       Mem_free
                  |L6.186|
0000ba  e7b6              B        |L6.42|
;;;88     	}
;;;89     }
;;;90     static void CDMAPowerOpen_Close(void)//这段代码是用来启动/关闭CDMA
                          ENDP

                  |L6.188|
                          DCD      cdmaRecBuf
                  |L6.192|
                          DCD      CDMARecieveQ
                  |L6.196|
                          DCD      cdmaSendBuf
                  |L6.200|
                          DCD      CDMASendQ
                  |L6.204|
                          DCD      at_TCPSend
                  |L6.208|
0000d0  3e00              DCB      ">",0
0000d2  00                DCB      0
0000d3  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  cdmaRecBuf
                          %        40
                  cdmaSendBuf
                          %        20

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  atCmd
000000  41540d00          DCB      0x41,0x54,0x0d,0x00
                  ate0Cmd
000004  41544530          DCB      0x41,0x54,0x45,0x30
000008  0d00              DCB      0x0d,0x00
                  at_ZDSLEEP
00000a  4154              DCB      0x41,0x54
00000c  2b5a4453          DCB      0x2b,0x5a,0x44,0x53
000010  4c454550          DCB      0x4c,0x45,0x45,0x50
000014  3d300d00          DCB      0x3d,0x30,0x0d,0x00
                  athCmd
000018  4154480d          DCB      0x41,0x54,0x48,0x0d
00001c  00                DCB      0x00
                  at_CMGF
00001d  41542b            DCB      0x41,0x54,0x2b
000020  434d4746          DCB      0x43,0x4d,0x47,0x46
000024  3d310d00          DCB      0x3d,0x31,0x0d,0x00
                  at_CNMI
000028  41542b43          DCB      0x41,0x54,0x2b,0x43
00002c  4e4d493d          DCB      0x4e,0x4d,0x49,0x3d
000030  332c322c          DCB      0x33,0x2c,0x32,0x2c
000034  302c302c          DCB      0x30,0x2c,0x30,0x2c
000038  300d00            DCB      0x30,0x0d,0x00
                  at_GSN
00003b  41                DCB      0x41
00003c  542b4753          DCB      0x54,0x2b,0x47,0x53
000040  4e0d00            DCB      0x4e,0x0d,0x00
                  at_CPIN
000043  41                DCB      0x41
000044  542b4350          DCB      0x54,0x2b,0x43,0x50
000048  494e3f0d          DCB      0x49,0x4e,0x3f,0x0d
00004c  00                DCB      0x00
                  at_SetZpNum
00004d  41542b            DCB      0x41,0x54,0x2b
000050  5a504e55          DCB      0x5a,0x50,0x4e,0x55
000054  4d3d2243          DCB      0x4d,0x3d,0x22,0x43
000058  4d4d544d          DCB      0x4d,0x4d,0x54,0x4d
00005c  222c2222          DCB      0x22,0x2c,0x22,0x22
000060  2c22220d          DCB      0x2c,0x22,0x22,0x0d
000064  00                DCB      0x00
                  at_ZPNUM
000065  41542b            DCB      0x41,0x54,0x2b
000068  5a504e55          DCB      0x5a,0x50,0x4e,0x55
00006c  4d3d2337          DCB      0x4d,0x3d,0x23,0x37
000070  37370d00          DCB      0x37,0x37,0x0d,0x00
                  at_ZPPPSTATUS
000074  41542b5a          DCB      0x41,0x54,0x2b,0x5a
000078  50505053          DCB      0x50,0x50,0x50,0x53
00007c  54415455          DCB      0x54,0x41,0x54,0x55
000080  530d00            DCB      0x53,0x0d,0x00
                  at_CSQ
000083  41                DCB      0x41
000084  542b4353          DCB      0x54,0x2b,0x43,0x53
000088  510a0d00          DCB      0x51,0x0a,0x0d,0x00
                  at_ICCID
00008c  41542b5a          DCB      0x41,0x54,0x2b,0x5a
000090  47455449          DCB      0x47,0x45,0x54,0x49
000094  43434944          DCB      0x43,0x43,0x49,0x44
000098  0d00              DCB      0x0d,0x00
                  at_ZPPPOPEN
00009a  4154              DCB      0x41,0x54
00009c  2b5a5050          DCB      0x2b,0x5a,0x50,0x50
0000a0  504f5045          DCB      0x50,0x4f,0x50,0x45
0000a4  4e0d00            DCB      0x4e,0x0d,0x00
                  at_ZIPSETUP
0000a7  41                DCB      0x41
0000a8  542b5a49          DCB      0x54,0x2b,0x5a,0x49
0000ac  50534554          DCB      0x50,0x53,0x45,0x54
0000b0  55503d30          DCB      0x55,0x50,0x3d,0x30
0000b4  2c313136          DCB      0x2c,0x31,0x31,0x36
0000b8  2e323238          DCB      0x2e,0x32,0x32,0x38
0000bc  2e38382e          DCB      0x2e,0x38,0x38,0x2e
0000c0  3130312c          DCB      0x31,0x30,0x31,0x2c
0000c4  32393939          DCB      0x32,0x39,0x39,0x39
0000c8  390d00            DCB      0x39,0x0d,0x00
                  at_Check
0000cb  41                DCB      0x41
0000cc  542b5a49          DCB      0x54,0x2b,0x5a,0x49
0000d0  50505354          DCB      0x50,0x50,0x53,0x54
0000d4  41545553          DCB      0x41,0x54,0x55,0x53
0000d8  3d300d00          DCB      0x3d,0x30,0x0d,0x00
                  at_TCPClose
0000dc  41542b5a          DCB      0x41,0x54,0x2b,0x5a
0000e0  4950434c          DCB      0x49,0x50,0x43,0x4c
0000e4  4f53453d          DCB      0x4f,0x53,0x45,0x3d
0000e8  300d00            DCB      0x30,0x0d,0x00
                  at_TCPSend
0000eb  41                DCB      0x41
0000ec  542b5a49          DCB      0x54,0x2b,0x5a,0x49
0000f0  5053454e          DCB      0x50,0x53,0x45,0x4e
0000f4  443d302c          DCB      0x44,0x3d,0x30,0x2c
0000f8  25640d00          DCB      0x25,0x64,0x0d,0x00
                  at_GetIP
0000fc  41542b5a          DCB      0x41,0x54,0x2b,0x5a
000100  49504745          DCB      0x49,0x50,0x47,0x45
000104  5449500d          DCB      0x54,0x49,0x50,0x0d
000108  00                DCB      0x00

                          AREA ||.data||, DATA, ALIGN=2

                  CDMARecieveQ
                          DCD      0x00000000
                  CDMASendQ
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\CDMA\\CDMATask.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_CDMATask_c_atCmd____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_CDMATask_c_atCmd____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_CDMATask_c_atCmd____REVSH|
#line 144
|__asm___10_CDMATask_c_atCmd____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
