; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\obj\cdmarecvtask.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=..\obj\cdmarecvtask.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\OBD -I..\SYSTEM -I..\USER -I..\LIB\inc -I..\UCOSII\CONFIG -I..\UCOSII\PORT -I..\UCOSII\CORE -I..\HAEDWARE -I..\GPS -I..\CDMA -I..\DEAL -I..\USB\CONFIG -I..\USB\STM32_USB-FS-Device_Driver\inc -I..\CORE -I.\RTE\_Project -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=524 -D_RTE_ -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\cdmarecvtask.crf ..\CDMA\CDMARecvTask.c]
                          THUMB

                          AREA ||i.CDMARecvTask||, CODE, READONLY, ALIGN=2

                  CDMARecvTask PROC
;;;15     //本任务用来上发登录报文、处理OTA升级、配置文件升级、模式切换（强动力模式、节油模式等）
;;;16     void CDMARecvTask(void *pdata)
000000  b508              PUSH     {r3,lr}
;;;17     {
;;;18     	uint8_t  err;
;;;19     	uint16_t cmdId;
;;;20     	uint8_t* ptrRECV = NULL;
000002  2600              MOVS     r6,#0
;;;21     	uint8_t* ptrDeal = NULL;
000004  2500              MOVS     r5,#0
;;;22     	
;;;23     	while(1)
000006  e046              B        |L1.150|
                  |L1.8|
;;;24     	{
;;;25     		ptrRECV = OSQPend(ZIPRecv_Q,30000,&err);  //等待60s后服务器无响应，则退出
000008  466a              MOV      r2,sp
00000a  f2475130          MOV      r1,#0x7530
00000e  4822              LDR      r0,|L1.152|
000010  6800              LDR      r0,[r0,#0]  ; ZIPRecv_Q
000012  f7fffffe          BL       OSQPend
000016  4606              MOV      r6,r0
;;;26     		if(err == OS_ERR_NONE)
000018  f89d0000          LDRB     r0,[sp,#0]
00001c  bba8              CBNZ     r0,|L1.138|
;;;27     		{
;;;28     			ptrDeal = RecvDataAnalysis(ptrRECV);  //将接收到的数据进行加工
00001e  4630              MOV      r0,r6
000020  f7fffffe          BL       RecvDataAnalysis
000024  4605              MOV      r5,r0
;;;29     			if(ptrDeal == NULL)                   //接收到错误的数据
000026  b905              CBNZ     r5,|L1.42|
;;;30     				continue; 
000028  e035              B        |L1.150|
                  |L1.42|
;;;31     			
;;;32     			cmdId = ptrDeal[3];
00002a  78ec              LDRB     r4,[r5,#3]
;;;33     			cmdId = (cmdId<<8) + ptrDeal[4];
00002c  7928              LDRB     r0,[r5,#4]
00002e  eb002004          ADD      r0,r0,r4,LSL #8
000032  b284              UXTH     r4,r0
;;;34     			
;;;35     			if(cmdId == 0x5001)                          //接收到登录报文
000034  f2450001          MOV      r0,#0x5001
000038  4284              CMP      r4,r0
00003a  d103              BNE      |L1.68|
;;;36     				RecvLoginDatDeal(ptrDeal);
00003c  4628              MOV      r0,r5
00003e  f7fffffe          BL       RecvLoginDatDeal
000042  e01a              B        |L1.122|
                  |L1.68|
;;;37     			else if(cmdId == 0x5012)                     //第二部分的配置文件
000044  f2450012          MOV      r0,#0x5012
000048  4284              CMP      r4,r0
00004a  d103              BNE      |L1.84|
;;;38     				ConfigUpdata(ptrDeal);
00004c  4628              MOV      r0,r5
00004e  f7fffffe          BL       ConfigUpdata
000052  e012              B        |L1.122|
                  |L1.84|
;;;39     			else if((cmdId >= 0x4000)&&(cmdId < 0x5000)) //第一部分的配置文件
000054  f5b44f80          CMP      r4,#0x4000
000058  db06              BLT      |L1.104|
00005a  f5b44fa0          CMP      r4,#0x5000
00005e  da03              BGE      |L1.104|
;;;40     				ConfigUpdata(ptrDeal);
000060  4628              MOV      r0,r5
000062  f7fffffe          BL       ConfigUpdata
000066  e008              B        |L1.122|
                  |L1.104|
;;;41     			else if((cmdId >= 0x8000)&&(cmdId < 0x9000)) //程序升级报文    
000068  f5b44f00          CMP      r4,#0x8000
00006c  db05              BLT      |L1.122|
00006e  f5b44f10          CMP      r4,#0x9000
000072  da02              BGE      |L1.122|
;;;42     			{
;;;43     				OTA_Updata(ptrDeal);
000074  4628              MOV      r0,r5
000076  f7fffffe          BL       OTA_Updata
                  |L1.122|
;;;44     			}
;;;45     			Mem_free(ptrDeal);             //释放内存块
00007a  4628              MOV      r0,r5
00007c  f7fffffe          BL       Mem_free
;;;46     			varOperation.isLoginDeal = 1;  //登录报文处理完毕
000080  2001              MOVS     r0,#1
000082  4906              LDR      r1,|L1.156|
000084  f8810030          STRB     r0,[r1,#0x30]
000088  e004              B        |L1.148|
                  |L1.138|
00008a  e7ff              B        |L1.140|
                  |L1.140|
;;;47     		}
;;;48     		else   //等待超时
;;;49     		{
;;;50     			varOperation.isLoginDeal = 1; 
00008c  2001              MOVS     r0,#1
00008e  4903              LDR      r1,|L1.156|
000090  f8810030          STRB     r0,[r1,#0x30]
                  |L1.148|
000094  bf00              NOP                            ;30
                  |L1.150|
000096  e7b7              B        |L1.8|
;;;51     		}
;;;52     	}
;;;53     }
;;;54     //登录报文
                          ENDP

                  |L1.152|
                          DCD      ZIPRecv_Q
                  |L1.156|
                          DCD      varOperation

                          AREA ||i.ConfigUpdata||, CODE, READONLY, ALIGN=2

                  ConfigUpdata PROC
;;;314    }
;;;315    static void ConfigUpdata(uint8_t* ptrDeal )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;316    {
000004  4604              MOV      r4,r0
;;;317    	uint8_t  temp;
;;;318    	uint16_t frameLen;
;;;319    	uint16_t cmdId;
;;;320    	
;;;321    	uint16_t i = 0,offset = 0;
000006  f04f0800          MOV      r8,#0
00000a  2500              MOVS     r5,#0
;;;322        static uint16_t currentNum = 0; //发送下一个配置请求包
;;;323    	static uint16_t frameIndex = 0;
;;;324    	static uint8_t  pidPackNum = 0;//PID 总包数
;;;325    		
;;;326    	cmdId     = ptrDeal[3];
00000c  78e6              LDRB     r6,[r4,#3]
;;;327    	cmdId     = (cmdId << 8) + ptrDeal[4];
00000e  7920              LDRB     r0,[r4,#4]
000010  eb002006          ADD      r0,r0,r6,LSL #8
000014  b286              UXTH     r6,r0
;;;328    	if(cmdId == 0x4000)
000016  f5b64f80          CMP      r6,#0x4000
00001a  d177              BNE      |L2.268|
;;;329    	{
;;;330    		offset = 5;
00001c  2505              MOVS     r5,#5
;;;331    		varOperation.busType   = ptrDeal[offset++];//总线类型  CAN总线还是K线
00001e  4629              MOV      r1,r5
000020  1c6d              ADDS     r5,r5,#1
000022  5c60              LDRB     r0,[r4,r1]
000024  4989              LDR      r1,|L2.588|
000026  f8810085          STRB     r0,[r1,#0x85]
;;;332    		varOperation.canIdType = ptrDeal[offset++];//CAN ID类型，扩展帧还是标准帧
00002a  4629              MOV      r1,r5
00002c  1c6d              ADDS     r5,r5,#1
00002e  5c60              LDRB     r0,[r4,r1]
000030  4986              LDR      r1,|L2.588|
000032  f8810086          STRB     r0,[r1,#0x86]
;;;333    		
;;;334    		varOperation.canRxId = ptrDeal[offset++];  //卡路宝CAN 接收ID
000036  4629              MOV      r1,r5
000038  1c6d              ADDS     r5,r5,#1
00003a  5c60              LDRB     r0,[r4,r1]
00003c  4983              LDR      r1,|L2.588|
00003e  f8c1008b          STR      r0,[r1,#0x8b]  ; varOperation
;;;335    		varOperation.canRxId = (varOperation.canRxId << 8) + ptrDeal[offset++];
000042  4629              MOV      r1,r5
000044  1c6d              ADDS     r5,r5,#1
000046  5c60              LDRB     r0,[r4,r1]
000048  4980              LDR      r1,|L2.588|
00004a  f8d1108b          LDR      r1,[r1,#0x8b]  ; varOperation
00004e  eb002001          ADD      r0,r0,r1,LSL #8
000052  497e              LDR      r1,|L2.588|
000054  f8c1008b          STR      r0,[r1,#0x8b]  ; varOperation
;;;336    		varOperation.canRxId = (varOperation.canRxId << 8) + ptrDeal[offset++];
000058  4629              MOV      r1,r5
00005a  1c6d              ADDS     r5,r5,#1
00005c  5c60              LDRB     r0,[r4,r1]
00005e  497b              LDR      r1,|L2.588|
000060  f8d1108b          LDR      r1,[r1,#0x8b]  ; varOperation
000064  eb002001          ADD      r0,r0,r1,LSL #8
000068  4978              LDR      r1,|L2.588|
00006a  f8c1008b          STR      r0,[r1,#0x8b]  ; varOperation
;;;337    		varOperation.canRxId = (varOperation.canRxId << 8) + ptrDeal[offset++];
00006e  4629              MOV      r1,r5
000070  1c6d              ADDS     r5,r5,#1
000072  5c60              LDRB     r0,[r4,r1]
000074  4975              LDR      r1,|L2.588|
000076  f8d1108b          LDR      r1,[r1,#0x8b]  ; varOperation
00007a  eb002001          ADD      r0,r0,r1,LSL #8
00007e  4973              LDR      r1,|L2.588|
000080  f8c1008b          STR      r0,[r1,#0x8b]  ; varOperation
;;;338    		
;;;339    		varOperation.canTxId = ptrDeal[offset++];  //卡路宝CAN 发送ID
000084  4629              MOV      r1,r5
000086  1c6d              ADDS     r5,r5,#1
000088  5c60              LDRB     r0,[r4,r1]
00008a  4970              LDR      r1,|L2.588|
00008c  f8c10087          STR      r0,[r1,#0x87]  ; varOperation
;;;340    		varOperation.canTxId = (varOperation.canTxId << 8) + ptrDeal[offset++];
000090  4629              MOV      r1,r5
000092  1c6d              ADDS     r5,r5,#1
000094  5c60              LDRB     r0,[r4,r1]
000096  496d              LDR      r1,|L2.588|
000098  f8d11087          LDR      r1,[r1,#0x87]  ; varOperation
00009c  eb002001          ADD      r0,r0,r1,LSL #8
0000a0  496a              LDR      r1,|L2.588|
0000a2  f8c10087          STR      r0,[r1,#0x87]  ; varOperation
;;;341    		varOperation.canTxId = (varOperation.canTxId << 8) + ptrDeal[offset++];
0000a6  4629              MOV      r1,r5
0000a8  1c6d              ADDS     r5,r5,#1
0000aa  5c60              LDRB     r0,[r4,r1]
0000ac  4967              LDR      r1,|L2.588|
0000ae  f8d11087          LDR      r1,[r1,#0x87]  ; varOperation
0000b2  eb002001          ADD      r0,r0,r1,LSL #8
0000b6  4965              LDR      r1,|L2.588|
0000b8  f8c10087          STR      r0,[r1,#0x87]  ; varOperation
;;;342    		varOperation.canTxId = (varOperation.canTxId << 8) + ptrDeal[offset++];
0000bc  4629              MOV      r1,r5
0000be  1c6d              ADDS     r5,r5,#1
0000c0  5c60              LDRB     r0,[r4,r1]
0000c2  4962              LDR      r1,|L2.588|
0000c4  f8d11087          LDR      r1,[r1,#0x87]  ; varOperation
0000c8  eb002001          ADD      r0,r0,r1,LSL #8
0000cc  495f              LDR      r1,|L2.588|
0000ce  f8c10087          STR      r0,[r1,#0x87]  ; varOperation
;;;343    		
;;;344    		varOperation.newPidNum = ptrDeal[offset++];//新的PID命令个数
0000d2  4629              MOV      r1,r5
0000d4  1c6d              ADDS     r5,r5,#1
0000d6  5c60              LDRB     r0,[r4,r1]
0000d8  495c              LDR      r1,|L2.588|
0000da  f8810082          STRB     r0,[r1,#0x82]
;;;345    		
;;;346    		pidPackNum = ptrDeal[offset++];            //一共有帧PID包配置项
0000de  4629              MOV      r1,r5
0000e0  1c6d              ADDS     r5,r5,#1
0000e2  5c60              LDRB     r0,[r4,r1]
0000e4  495a              LDR      r1,|L2.592|
0000e6  7008              STRB     r0,[r1,#0]
;;;347    		
;;;348    //		varOperation.canBaud = ptrDeal[offset++];  //CAN波特率，协议中的 protocolType
;;;349    		
;;;350    		currentNum = 0x4001;
0000e8  f2440001          MOV      r0,#0x4001
0000ec  4959              LDR      r1,|L2.596|
0000ee  8008              STRH     r0,[r1,#0]
;;;351    		frameIndex = 0;
0000f0  2000              MOVS     r0,#0
0000f2  4959              LDR      r1,|L2.600|
0000f4  8008              STRH     r0,[r1,#0]
;;;352    		memset(updateBuff,0,2048);
0000f6  f44f6100          MOV      r1,#0x800
0000fa  4858              LDR      r0,|L2.604|
0000fc  f7fffffe          BL       __aeabi_memclr
;;;353    		SendConfigNum(currentNum);//发送第一包程序请求帧0x4001
000100  4854              LDR      r0,|L2.596|
000102  8800              LDRH     r0,[r0,#0]  ; currentNum
000104  f7fffffe          BL       SendConfigNum
000108  e09e              B        |L2.584|
00010a  e7ff              B        |L2.268|
                  |L2.268|
;;;354    		
;;;355    	}else if(cmdId > 0x4000 && cmdId < 0x5000)
00010c  f5b64f80          CMP      r6,#0x4000
000110  dd70              BLE      |L2.500|
000112  f5b64fa0          CMP      r6,#0x5000
000116  da6d              BGE      |L2.500|
;;;356    	{
;;;357    		if(cmdId != currentNum)   //接收到的帧序号，与所申请的帧序号不同，则放弃数据并重新申请
000118  484e              LDR      r0,|L2.596|
00011a  8800              LDRH     r0,[r0,#0]  ; currentNum
00011c  4286              CMP      r6,r0
00011e  d001              BEQ      |L2.292|
                  |L2.288|
;;;358    		{//	SendConfigNum(currentNum);//todo：重新发送？
;;;359    			return;
;;;360    		}
;;;361    		
;;;362    		offset = 2;
;;;363    		frameLen = ptrDeal[offset++] - 3;
;;;364    		cmdId    = ptrDeal[offset++];
;;;365    		cmdId    = (cmdId << 8) + ptrDeal[offset++]; 
;;;366    		memcpy(&updateBuff[frameIndex],&ptrDeal[offset],frameLen);
;;;367    		frameIndex += frameLen;
;;;368    		
;;;369    		if((cmdId - pidPackNum) == 0x4000)
;;;370    		{
;;;371    			//todo:保存参数，包括全局变量参数和配置参数,启动数据流
;;;372    			sysUpdateVar.pidVersion = varOperation.newPIDVersion;
;;;373    			sysUpdateVar.pidNum     = varOperation.newPidNum;
;;;374    			
;;;375    			sysUpdateVar.busType    = varOperation.busType;//todo:CAN线和K线的切换，后期处理
;;;376    			sysUpdateVar.canIdType  = varOperation.canIdType;
;;;377    			sysUpdateVar.canTxId    = varOperation.canTxId;
;;;378    			sysUpdateVar.canRxId    = varOperation.canRxId;
;;;379    			sysUpdateVar.canBaud    = varOperation.canBaud;
;;;380    			
;;;381    			for(i = 0;i < frameIndex;i += 13)      //更改 指令发送周期 的字节序
;;;382    			{
;;;383    				temp             = updateBuff[i];
;;;384    				updateBuff[i]   = updateBuff[i+1];
;;;385    				updateBuff[i+1] = temp;
;;;386    			}
;;;387    			SendConfigNum(0x5012);//请求第二个配置文件
;;;388    		}
;;;389    		else
;;;390    		{
;;;391    			currentNum = cmdId + 1;   
;;;392    			SendConfigNum(currentNum);//请求下一包数据
;;;393    		}
;;;394    	}
;;;395    	else if(cmdId == 0x5012)
;;;396    	{
;;;397    		offset = 2;
;;;398    		frameLen = ptrDeal[offset++] - 3;
;;;399    		
;;;400    		sysUpdateVar.pidVarNum = frameLen / 13;   //得到上报 ECU 变量的个数
;;;401    		
;;;402    		cmdId    = ptrDeal[offset++];
;;;403    		cmdId    = (cmdId << 8) + ptrDeal[offset++]; 
;;;404    		memcpy(&updateBuff[frameIndex],&ptrDeal[offset],frameLen);
;;;405    		frameIndex += frameLen;
;;;406    		
;;;407    		SaveConfigToFlash(updateBuff,2048);      //将数据写入配置文件区，（flash:0x0802E000）
;;;408    		SbootParameterSaveToFlash(&sysUpdateVar);//将运行参数写入升级变量区  （flash：0x08007800）
;;;409    		
;;;410    		__disable_fault_irq();                    //重启
;;;411    		NVIC_SystemReset();
;;;412    	}
;;;413    }
000120  e8bd87f0          POP      {r4-r10,pc}
                  |L2.292|
000124  2502              MOVS     r5,#2                 ;362
000126  4629              MOV      r1,r5                 ;363
000128  1c6d              ADDS     r5,r5,#1              ;363
00012a  5c60              LDRB     r0,[r4,r1]            ;363
00012c  1ec0              SUBS     r0,r0,#3              ;363
00012e  b287              UXTH     r7,r0                 ;363
000130  4629              MOV      r1,r5                 ;364
000132  1c6d              ADDS     r5,r5,#1              ;364
000134  5c66              LDRB     r6,[r4,r1]            ;364
000136  4629              MOV      r1,r5                 ;365
000138  1c6d              ADDS     r5,r5,#1              ;365
00013a  5c60              LDRB     r0,[r4,r1]            ;365
00013c  eb002006          ADD      r0,r0,r6,LSL #8       ;365
000140  b286              UXTH     r6,r0                 ;365
000142  1961              ADDS     r1,r4,r5              ;366
000144  4a45              LDR      r2,|L2.604|
000146  4b44              LDR      r3,|L2.600|
000148  881b              LDRH     r3,[r3,#0]            ;366  ; frameIndex
00014a  18d0              ADDS     r0,r2,r3              ;366
00014c  463a              MOV      r2,r7                 ;366
00014e  f7fffffe          BL       __aeabi_memcpy
000152  4841              LDR      r0,|L2.600|
000154  8800              LDRH     r0,[r0,#0]            ;367  ; frameIndex
000156  4438              ADD      r0,r0,r7              ;367
000158  493f              LDR      r1,|L2.600|
00015a  8008              STRH     r0,[r1,#0]            ;367
00015c  483c              LDR      r0,|L2.592|
00015e  7800              LDRB     r0,[r0,#0]            ;369  ; pidPackNum
000160  1a30              SUBS     r0,r6,r0              ;369
000162  f5b04f80          CMP      r0,#0x4000            ;369
000166  d13c              BNE      |L2.482|
000168  4838              LDR      r0,|L2.588|
00016a  f8d0007e          LDR      r0,[r0,#0x7e]         ;372  ; varOperation
00016e  493c              LDR      r1,|L2.608|
000170  f8c10009          STR      r0,[r1,#9]            ;372  ; sysUpdateVar
000174  4835              LDR      r0,|L2.588|
000176  f8900082          LDRB     r0,[r0,#0x82]         ;373  ; varOperation
00017a  f8a1000d          STRH     r0,[r1,#0xd]          ;373
00017e  4833              LDR      r0,|L2.588|
000180  f8900085          LDRB     r0,[r0,#0x85]         ;375  ; varOperation
000184  7448              STRB     r0,[r1,#0x11]         ;375
000186  4831              LDR      r0,|L2.588|
000188  f8900086          LDRB     r0,[r0,#0x86]         ;376  ; varOperation
00018c  7488              STRB     r0,[r1,#0x12]         ;376
00018e  482f              LDR      r0,|L2.588|
000190  f8d00087          LDR      r0,[r0,#0x87]         ;377  ; varOperation
000194  f8c10013          STR      r0,[r1,#0x13]         ;377  ; sysUpdateVar
000198  482c              LDR      r0,|L2.588|
00019a  f8d0008b          LDR      r0,[r0,#0x8b]         ;378  ; varOperation
00019e  f8c10017          STR      r0,[r1,#0x17]         ;378  ; sysUpdateVar
0001a2  482a              LDR      r0,|L2.588|
0001a4  f890008f          LDRB     r0,[r0,#0x8f]         ;379  ; varOperation
0001a8  76c8              STRB     r0,[r1,#0x1b]         ;379
0001aa  f04f0800          MOV      r8,#0                 ;381
0001ae  e00f              B        |L2.464|
                  |L2.432|
0001b0  482a              LDR      r0,|L2.604|
0001b2  f8109008          LDRB     r9,[r0,r8]            ;383
0001b6  4601              MOV      r1,r0                 ;384
0001b8  f1080001          ADD      r0,r8,#1              ;384
0001bc  5c08              LDRB     r0,[r1,r0]            ;384
0001be  f8010008          STRB     r0,[r1,r8]            ;384
0001c2  f1080001          ADD      r0,r8,#1              ;385
0001c6  f8019000          STRB     r9,[r1,r0]            ;385
0001ca  300c              ADDS     r0,r0,#0xc            ;381
0001cc  fa1ff880          UXTH     r8,r0                 ;381
                  |L2.464|
0001d0  4821              LDR      r0,|L2.600|
0001d2  8800              LDRH     r0,[r0,#0]            ;381  ; frameIndex
0001d4  4580              CMP      r8,r0                 ;381
0001d6  dbeb              BLT      |L2.432|
0001d8  f2450012          MOV      r0,#0x5012            ;387
0001dc  f7fffffe          BL       SendConfigNum
0001e0  e032              B        |L2.584|
                  |L2.482|
0001e2  1c70              ADDS     r0,r6,#1              ;391
0001e4  491b              LDR      r1,|L2.596|
0001e6  8008              STRH     r0,[r1,#0]            ;391
0001e8  4608              MOV      r0,r1                 ;392
0001ea  8800              LDRH     r0,[r0,#0]            ;392  ; currentNum
0001ec  f7fffffe          BL       SendConfigNum
0001f0  e02a              B        |L2.584|
0001f2  e7ff              B        |L2.500|
                  |L2.500|
0001f4  f2450012          MOV      r0,#0x5012            ;395
0001f8  4286              CMP      r6,r0                 ;395
0001fa  d125              BNE      |L2.584|
0001fc  2502              MOVS     r5,#2                 ;397
0001fe  4629              MOV      r1,r5                 ;398
000200  1c6d              ADDS     r5,r5,#1              ;398
000202  5c60              LDRB     r0,[r4,r1]            ;398
000204  1ec0              SUBS     r0,r0,#3              ;398
000206  b287              UXTH     r7,r0                 ;398
000208  200d              MOVS     r0,#0xd               ;400
00020a  fb97f0f0          SDIV     r0,r7,r0              ;400
00020e  4914              LDR      r1,|L2.608|
000210  f8a1000f          STRH     r0,[r1,#0xf]          ;400
000214  1c6d              ADDS     r5,r5,#1              ;402
000216  1c6d              ADDS     r5,r5,#1              ;403
000218  1961              ADDS     r1,r4,r5              ;404
00021a  4a10              LDR      r2,|L2.604|
00021c  4b0e              LDR      r3,|L2.600|
00021e  881b              LDRH     r3,[r3,#0]            ;404  ; frameIndex
000220  18d0              ADDS     r0,r2,r3              ;404
000222  463a              MOV      r2,r7                 ;404
000224  f7fffffe          BL       __aeabi_memcpy
000228  480b              LDR      r0,|L2.600|
00022a  8800              LDRH     r0,[r0,#0]            ;405  ; frameIndex
00022c  4438              ADD      r0,r0,r7              ;405
00022e  490a              LDR      r1,|L2.600|
000230  8008              STRH     r0,[r1,#0]            ;405
000232  f44f6100          MOV      r1,#0x800             ;407
000236  4809              LDR      r0,|L2.604|
000238  f7fffffe          BL       SaveConfigToFlash
00023c  4808              LDR      r0,|L2.608|
00023e  f7fffffe          BL       SbootParameterSaveToFlash
000242  b671              CPSID    f                     ;410
000244  f7fffffe          BL       NVIC_SystemReset
                  |L2.584|
000248  bf00              NOP      
00024a  e769              B        |L2.288|
;;;414    
                          ENDP

                  |L2.588|
                          DCD      varOperation
                  |L2.592|
                          DCD      pidPackNum
                  |L2.596|
                          DCD      |symbol_number.36|
                  |L2.600|
                          DCD      |symbol_number.37|
                  |L2.604|
                          DCD      updateBuff
                  |L2.608|
                          DCD      sysUpdateVar

                          AREA ||i.GetConfigInfo||, CODE, READONLY, ALIGN=2

                  GetConfigInfo PROC
;;;83     }
;;;84     static void GetConfigInfo(void)
000000  b510              PUSH     {r4,lr}
;;;85     {
;;;86     	_CDMADataToSend* otaUpdatSend;
;;;87     	otaUpdatSend = CDMNSendInfoInit(60);//升级请求帧
000002  203c              MOVS     r0,#0x3c
000004  f7fffffe          BL       CDMNSendInfoInit
000008  4604              MOV      r4,r0
;;;88     
;;;89     	otaUpdatSend->data[otaUpdatSend->datLength++] = 11;   //长度
00000a  210b              MOVS     r1,#0xb
00000c  8822              LDRH     r2,[r4,#0]
00000e  1c50              ADDS     r0,r2,#1
000010  8020              STRH     r0,[r4,#0]
000012  6860              LDR      r0,[r4,#4]
000014  5481              STRB     r1,[r0,r2]
;;;90     	otaUpdatSend->data[otaUpdatSend->datLength++] = 0x40;
000016  2140              MOVS     r1,#0x40
000018  8822              LDRH     r2,[r4,#0]
00001a  1c50              ADDS     r0,r2,#1
00001c  8020              STRH     r0,[r4,#0]
00001e  6860              LDR      r0,[r4,#4]
000020  5481              STRB     r1,[r0,r2]
;;;91     	otaUpdatSend->data[otaUpdatSend->datLength++] = 0x00;
000022  2100              MOVS     r1,#0
000024  8822              LDRH     r2,[r4,#0]
000026  1c50              ADDS     r0,r2,#1
000028  8020              STRH     r0,[r4,#0]
00002a  6860              LDR      r0,[r4,#4]
00002c  5481              STRB     r1,[r0,r2]
;;;92     	//当前版本
;;;93     	otaUpdatSend->data[otaUpdatSend->datLength++] = (varOperation.pidVersion >> 24) & 0x00FF; 
00002e  4829              LDR      r0,|L3.212|
000030  f8d0007a          LDR      r0,[r0,#0x7a]  ; varOperation
000034  0e00              LSRS     r0,r0,#24
000036  8822              LDRH     r2,[r4,#0]
000038  1c51              ADDS     r1,r2,#1
00003a  8021              STRH     r1,[r4,#0]
00003c  6861              LDR      r1,[r4,#4]
00003e  5488              STRB     r0,[r1,r2]
;;;94     	otaUpdatSend->data[otaUpdatSend->datLength++] = (varOperation.pidVersion >> 16) & 0x00FF; 
000040  4824              LDR      r0,|L3.212|
000042  f8d0007a          LDR      r0,[r0,#0x7a]  ; varOperation
000046  f3c04107          UBFX     r1,r0,#16,#8
00004a  8822              LDRH     r2,[r4,#0]
00004c  1c50              ADDS     r0,r2,#1
00004e  8020              STRH     r0,[r4,#0]
000050  6860              LDR      r0,[r4,#4]
000052  5481              STRB     r1,[r0,r2]
;;;95     	otaUpdatSend->data[otaUpdatSend->datLength++] = (varOperation.pidVersion >> 8) & 0x00FF;   
000054  481f              LDR      r0,|L3.212|
000056  f8b0007a          LDRH     r0,[r0,#0x7a]  ; varOperation
00005a  f3c02107          UBFX     r1,r0,#8,#8
00005e  8822              LDRH     r2,[r4,#0]
000060  1c50              ADDS     r0,r2,#1
000062  8020              STRH     r0,[r4,#0]
000064  6860              LDR      r0,[r4,#4]
000066  5481              STRB     r1,[r0,r2]
;;;96     	otaUpdatSend->data[otaUpdatSend->datLength++] = varOperation.pidVersion & 0x00FF;
000068  481a              LDR      r0,|L3.212|
00006a  f890107a          LDRB     r1,[r0,#0x7a]  ; varOperation
00006e  8822              LDRH     r2,[r4,#0]
000070  1c50              ADDS     r0,r2,#1
000072  8020              STRH     r0,[r4,#0]
000074  6860              LDR      r0,[r4,#4]
000076  5481              STRB     r1,[r0,r2]
;;;97     	
;;;98     	//请求升级的版本
;;;99     	otaUpdatSend->data[otaUpdatSend->datLength++] = (varOperation.newPIDVersion >> 24) & 0x00FF;
000078  4816              LDR      r0,|L3.212|
00007a  f8d0007e          LDR      r0,[r0,#0x7e]  ; varOperation
00007e  0e00              LSRS     r0,r0,#24
000080  8822              LDRH     r2,[r4,#0]
000082  1c51              ADDS     r1,r2,#1
000084  8021              STRH     r1,[r4,#0]
000086  6861              LDR      r1,[r4,#4]
000088  5488              STRB     r0,[r1,r2]
;;;100    	otaUpdatSend->data[otaUpdatSend->datLength++] = (varOperation.newPIDVersion >> 16) & 0x00FF;
00008a  4812              LDR      r0,|L3.212|
00008c  f8d0007e          LDR      r0,[r0,#0x7e]  ; varOperation
000090  f3c04107          UBFX     r1,r0,#16,#8
000094  8822              LDRH     r2,[r4,#0]
000096  1c50              ADDS     r0,r2,#1
000098  8020              STRH     r0,[r4,#0]
00009a  6860              LDR      r0,[r4,#4]
00009c  5481              STRB     r1,[r0,r2]
;;;101    	otaUpdatSend->data[otaUpdatSend->datLength++] = (varOperation.newPIDVersion >> 8) & 0x00FF;
00009e  480d              LDR      r0,|L3.212|
0000a0  f8b0007e          LDRH     r0,[r0,#0x7e]  ; varOperation
0000a4  f3c02107          UBFX     r1,r0,#8,#8
0000a8  8822              LDRH     r2,[r4,#0]
0000aa  1c50              ADDS     r0,r2,#1
0000ac  8020              STRH     r0,[r4,#0]
0000ae  6860              LDR      r0,[r4,#4]
0000b0  5481              STRB     r1,[r0,r2]
;;;102    	otaUpdatSend->data[otaUpdatSend->datLength++] = varOperation.newPIDVersion & 0x00FF;
0000b2  4808              LDR      r0,|L3.212|
0000b4  f890107e          LDRB     r1,[r0,#0x7e]  ; varOperation
0000b8  8822              LDRH     r2,[r4,#0]
0000ba  1c50              ADDS     r0,r2,#1
0000bc  8020              STRH     r0,[r4,#0]
0000be  6860              LDR      r0,[r4,#4]
0000c0  5481              STRB     r1,[r0,r2]
;;;103    	
;;;104    	CDMASendDataPack(otaUpdatSend);//将请求包进行封包
0000c2  4620              MOV      r0,r4
0000c4  f7fffffe          BL       CDMASendDataPack
;;;105    	
;;;106    	OSQPost(CDMASendQ,otaUpdatSend);
0000c8  4621              MOV      r1,r4
0000ca  4803              LDR      r0,|L3.216|
0000cc  6800              LDR      r0,[r0,#0]  ; CDMASendQ
0000ce  f7fffffe          BL       OSQPost
;;;107    }
0000d2  bd10              POP      {r4,pc}
;;;108    
                          ENDP

                  |L3.212|
                          DCD      varOperation
                  |L3.216|
                          DCD      CDMASendQ

                          AREA ||i.LoginDataSend||, CODE, READONLY, ALIGN=2

                  LoginDataSend PROC
;;;54     //登录报文
;;;55     void LoginDataSend(void)
000000  b570              PUSH     {r4-r6,lr}
;;;56     {
;;;57     	uint8_t err;
;;;58     	uint32_t buff;
;;;59     	_CDMADataToSend* loginData = CDMNSendInfoInit(100);        //发送登录报文
000002  2064              MOVS     r0,#0x64
000004  f7fffffe          BL       CDMNSendInfoInit
000008  4604              MOV      r4,r0
;;;60     	
;;;61     	loginData->data[loginData->datLength++] = 31;
00000a  211f              MOVS     r1,#0x1f
00000c  8822              LDRH     r2,[r4,#0]
00000e  1c50              ADDS     r0,r2,#1
000010  8020              STRH     r0,[r4,#0]
000012  6860              LDR      r0,[r4,#4]
000014  5481              STRB     r1,[r0,r2]
;;;62     	loginData->data[loginData->datLength++] = 0x50;
000016  2150              MOVS     r1,#0x50
000018  8822              LDRH     r2,[r4,#0]
00001a  1c50              ADDS     r0,r2,#1
00001c  8020              STRH     r0,[r4,#0]
00001e  6860              LDR      r0,[r4,#4]
000020  5481              STRB     r1,[r0,r2]
;;;63     	loginData->data[loginData->datLength++] = 0x01;
000022  2101              MOVS     r1,#1
000024  8822              LDRH     r2,[r4,#0]
000026  1c50              ADDS     r0,r2,#1
000028  8020              STRH     r0,[r4,#0]
00002a  6860              LDR      r0,[r4,#4]
00002c  5481              STRB     r1,[r0,r2]
;;;64     	
;;;65     	buff = t_htonl(SOFTVersion);                            //软件固件版本  
00002e  f24030e9          MOV      r0,#0x3e9
000032  f7fffffe          BL       t_htonl
000036  4605              MOV      r5,r0
;;;66     	memcpy(&loginData->data[loginData->datLength],&buff,4);
000038  6860              LDR      r0,[r4,#4]
00003a  8821              LDRH     r1,[r4,#0]
00003c  4408              ADD      r0,r0,r1
00003e  6005              STR      r5,[r0,#0]
;;;67     	loginData->datLength += 4;
000040  8820              LDRH     r0,[r4,#0]
000042  1d00              ADDS     r0,r0,#4
000044  8020              STRH     r0,[r4,#0]
;;;68     	
;;;69     	buff = t_htonl(sysUpdateVar.pidVersion);
000046  4915              LDR      r1,|L4.156|
000048  f8d10009          LDR      r0,[r1,#9]  ; sysUpdateVar
00004c  f7fffffe          BL       t_htonl
000050  4605              MOV      r5,r0
;;;70     	memcpy(&loginData->data[loginData->datLength],&buff,4);
000052  6860              LDR      r0,[r4,#4]
000054  8821              LDRH     r1,[r4,#0]
000056  4408              ADD      r0,r0,r1
000058  6005              STR      r5,[r0,#0]
;;;71     	loginData->datLength += 4;
00005a  8820              LDRH     r0,[r4,#0]
00005c  1d00              ADDS     r0,r0,#4
00005e  8020              STRH     r0,[r4,#0]
;;;72     	
;;;73     	memcpy(&loginData->data[loginData->datLength],varOperation.iccID,20);
000060  6861              LDR      r1,[r4,#4]
000062  8822              LDRH     r2,[r4,#0]
000064  1888              ADDS     r0,r1,r2
000066  2214              MOVS     r2,#0x14
000068  490d              LDR      r1,|L4.160|
00006a  f7fffffe          BL       __aeabi_memcpy
;;;74     	loginData->datLength += 20;
00006e  8820              LDRH     r0,[r4,#0]
000070  3014              ADDS     r0,r0,#0x14
000072  8020              STRH     r0,[r4,#0]
;;;75     	
;;;76     	CDMASendDataPack(loginData);//对登录报文进行打包（添加帧头、校验码、帧尾）
000074  4620              MOV      r0,r4
000076  f7fffffe          BL       CDMASendDataPack
;;;77     	err = OSQPost(CDMASendQ,loginData);
00007a  4621              MOV      r1,r4
00007c  4809              LDR      r0,|L4.164|
00007e  6800              LDR      r0,[r0,#0]  ; CDMASendQ
000080  f7fffffe          BL       OSQPost
000084  4606              MOV      r6,r0
;;;78     	if(err != OS_ERR_NONE)
000086  b116              CBZ      r6,|L4.142|
;;;79     	{
;;;80     		Mem_free(loginData);
000088  4620              MOV      r0,r4
00008a  f7fffffe          BL       Mem_free
                  |L4.142|
;;;81     	}
;;;82     	varOperation.isLoginDeal = 0;//正在处理登录报文
00008e  2000              MOVS     r0,#0
000090  4903              LDR      r1,|L4.160|
000092  3919              SUBS     r1,r1,#0x19
000094  f8810030          STRB     r0,[r1,#0x30]
;;;83     }
000098  bd70              POP      {r4-r6,pc}
;;;84     static void GetConfigInfo(void)
                          ENDP

00009a  0000              DCW      0x0000
                  |L4.156|
                          DCD      sysUpdateVar
                  |L4.160|
                          DCD      varOperation+0x19
                  |L4.164|
                          DCD      CDMASendQ

                          AREA ||i.NVIC_SystemReset||, CODE, READONLY, ALIGN=2

                  NVIC_SystemReset PROC
;;;1718    */
;;;1719   static __INLINE void NVIC_SystemReset(void)
000000  4806              LDR      r0,|L5.28|
;;;1720   {
;;;1721     SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      | 
000002  6800              LDR      r0,[r0,#0]
000004  f40060e0          AND      r0,r0,#0x700
000008  4905              LDR      r1,|L5.32|
00000a  4308              ORRS     r0,r0,r1
00000c  1d00              ADDS     r0,r0,#4
00000e  4903              LDR      r1,|L5.28|
000010  6008              STR      r0,[r1,#0]
;;;1722                    (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) | 
;;;1723                    SCB_AIRCR_SYSRESETREQ_Msk);                   /* Keep priority group unchanged */
;;;1724     __DSB();                                                     /* Ensure completion of memory access */              
000012  f3bf8f4f          DSB      
;;;1725     while(1);                                                    /* wait until reset */
000016  bf00              NOP      
                  |L5.24|
000018  e7fe              B        |L5.24|
;;;1726   }
;;;1727   
                          ENDP

00001a  0000              DCW      0x0000
                  |L5.28|
                          DCD      0xe000ed0c
                  |L5.32|
                          DCD      0x05fa0000

                          AREA ||i.OTA_Updata||, CODE, READONLY, ALIGN=2

                  OTA_Updata PROC
;;;196    uint8_t updateBuff[2048];       //升级用
;;;197    static void OTA_Updata(uint8_t* ptrDeal)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;198    {
000004  4604              MOV      r4,r0
;;;199    	uint16_t cmdId;
;;;200    	uint16_t datLength = 0;
000006  2700              MOVS     r7,#0
;;;201    	uint16_t i = 0;
000008  46b9              MOV      r9,r7
;;;202    	uint8_t  frameNum;           //此次一共接收到128字节的包数
;;;203    	uint8_t  frameLen;           //每一帧的每一小包到底有多少个字节
;;;204    	uint16_t offset;
;;;205    	
;;;206    	static uint16_t currentNum = 0;      //发送下一个请求包
;;;207    	static uint16_t fileCRC    = 0;      //文件CRC校验
;;;208    	static uint32_t flashAddr  = 0;      //地址信息，写2K便自增0x800,向Flash一次写2K字节
;;;209    	static uint8_t  frameIndex = 0;      //要保存的帧索引
;;;210    	
;;;211    	
;;;212    	datLength = ptrDeal[0];
00000a  7827              LDRB     r7,[r4,#0]
;;;213    	datLength = (datLength << 8) + ptrDeal[1];
00000c  7860              LDRB     r0,[r4,#1]
00000e  eb002007          ADD      r0,r0,r7,LSL #8
000012  b287              UXTH     r7,r0
;;;214    	
;;;215    	cmdId     = ptrDeal[3];
000014  78e6              LDRB     r6,[r4,#3]
;;;216    	cmdId     = (cmdId << 8) + ptrDeal[4];
000016  7920              LDRB     r0,[r4,#4]
000018  eb002006          ADD      r0,r0,r6,LSL #8
00001c  b286              UXTH     r6,r0
;;;217    	if(cmdId == 0x8000)
00001e  f5b64f00          CMP      r6,#0x8000
000022  d132              BNE      |L6.138|
;;;218    	{
;;;219    		offset = 5;
000024  2505              MOVS     r5,#5
;;;220    		varOperation.frameNum = ptrDeal[offset++] + 0x80;//得到新程序的128字节的包数
000026  4629              MOV      r1,r5
000028  1c6d              ADDS     r5,r5,#1
00002a  5c60              LDRB     r0,[r4,r1]
00002c  3080              ADDS     r0,r0,#0x80
00002e  497c              LDR      r1,|L6.544|
000030  80c8              STRH     r0,[r1,#6]
;;;221    		varOperation.frameNum = (varOperation.frameNum << 8) + ptrDeal[offset++];
000032  4629              MOV      r1,r5
000034  1c6d              ADDS     r5,r5,#1
000036  5c60              LDRB     r0,[r4,r1]
000038  4979              LDR      r1,|L6.544|
00003a  7989              LDRB     r1,[r1,#6]  ; varOperation
00003c  eb002001          ADD      r0,r0,r1,LSL #8
000040  4977              LDR      r1,|L6.544|
000042  80c8              STRH     r0,[r1,#6]
;;;222    		varOperation.newSoftCRC = ptrDeal[offset++];//得到文件校验码
000044  4629              MOV      r1,r5
000046  1c6d              ADDS     r5,r5,#1
000048  5c60              LDRB     r0,[r4,r1]
00004a  4975              LDR      r1,|L6.544|
00004c  8088              STRH     r0,[r1,#4]
;;;223    		varOperation.newSoftCRC = (varOperation.newSoftCRC << 8) + ptrDeal[offset++];
00004e  4629              MOV      r1,r5
000050  1c6d              ADDS     r5,r5,#1
000052  5c60              LDRB     r0,[r4,r1]
000054  4972              LDR      r1,|L6.544|
000056  7909              LDRB     r1,[r1,#4]  ; varOperation
000058  eb002001          ADD      r0,r0,r1,LSL #8
00005c  4970              LDR      r1,|L6.544|
00005e  8088              STRH     r0,[r1,#4]
;;;224    		
;;;225    		currentNum = 0x8001;
000060  f2480001          MOV      r0,#0x8001
000064  496f              LDR      r1,|L6.548|
000066  8008              STRH     r0,[r1,#0]
;;;226    		fileCRC    = 0;
000068  2000              MOVS     r0,#0
00006a  496f              LDR      r1,|L6.552|
00006c  8008              STRH     r0,[r1,#0]
;;;227    		flashAddr  = 0;
00006e  496f              LDR      r1,|L6.556|
000070  6008              STR      r0,[r1,#0]  ; flashAddr
;;;228    		frameIndex = 0;
000072  496f              LDR      r1,|L6.560|
000074  7008              STRB     r0,[r1,#0]
;;;229    		SendFrameNum(currentNum);//发送第一包程序请求帧0x8001
000076  486b              LDR      r0,|L6.548|
000078  8800              LDRH     r0,[r0,#0]  ; currentNum
00007a  f7fffffe          BL       SendFrameNum
;;;230    		memset(configData,0,2048);
00007e  f44f6100          MOV      r1,#0x800
000082  486c              LDR      r0,|L6.564|
000084  f7fffffe          BL       __aeabi_memclr
                  |L6.136|
000088  e0c7              B        |L6.538|
                  |L6.138|
;;;231    	}
;;;232    	else if(cmdId>0x8000)        //程序代码
00008a  f5b64f00          CMP      r6,#0x8000
00008e  ddfb              BLE      |L6.136|
;;;233    	{
;;;234    		if(cmdId != currentNum)  //接收到的帧序号，与所申请的帧序号不同，则放弃数据并重新申请
000090  4864              LDR      r0,|L6.548|
000092  8800              LDRH     r0,[r0,#0]  ; currentNum
000094  4286              CMP      r6,r0
000096  d001              BEQ      |L6.156|
                  |L6.152|
;;;235    		{
;;;236    //			SendFrameNum(currentNum);//todo：重新接收数据？
;;;237    			return;
;;;238    		}
;;;239    			
;;;240    		
;;;241    		frameNum = (datLength%131) == 0? (datLength/131) : (datLength/131) + 1;//得到此帧数据一共有多少包128字节的程序代码
;;;242    		
;;;243    		offset = 2;
;;;244    		for(i=0;i<frameNum;i++)//
;;;245    		{
;;;246    			frameLen = ptrDeal[offset++] - 3;//实际的小包程序的字节数
;;;247    			cmdId    = ptrDeal[offset++];
;;;248    			cmdId    = (cmdId << 8) + ptrDeal[offset++]; 
;;;249    			memcpy(&updateBuff[frameIndex*128],&ptrDeal[offset],frameLen);
;;;250    			offset += 128;
;;;251    			frameIndex ++;
;;;252    			if((frameIndex >= 16) && (cmdId != varOperation.frameNum))
;;;253    			{
;;;254    				frameIndex = 0;
;;;255    				SoftErasePage(flashAddr);
;;;256    				SoftProgramUpdate(flashAddr,updateBuff,2048);
;;;257    				//计算CRC校验
;;;258    				fileCRC = CRC_ComputeFile(fileCRC,updateBuff,2048);
;;;259    				memset(updateBuff,0,2048);//清空数据区
;;;260    				flashAddr += 0x800;
;;;261    			}
;;;262    			else if(cmdId == varOperation.frameNum)
;;;263    			{
;;;264    				SoftErasePage(flashAddr);
;;;265    				SoftProgramUpdate(flashAddr,updateBuff,((frameIndex - 1)*128 + frameLen));
;;;266    				//计算CRC校验
;;;267    				fileCRC = CRC_ComputeFile(fileCRC,updateBuff,((frameIndex - 1)*128 + frameLen));
;;;268    				memset(updateBuff,0,2048);
;;;269    				flashAddr += 0x800;
;;;270    			}
;;;271    		}
;;;272    		if(cmdId == varOperation.frameNum)
;;;273    		{
;;;274    			if(fileCRC != varOperation.newSoftCRC)//CRC校验错误，程序升级失败
;;;275    			{
;;;276    				Mem_free(ptrDeal);
;;;277    				varOperation.isDataFlow     = 0;
;;;278    //				SendFrameNum(0x8000);      //todo:重新升级？
;;;279    				return;	
;;;280    			}
;;;281    			Mem_free(ptrDeal);
;;;282    			sysUpdateVar.isSoftUpdate = 1;      //告诉Sboot,程序需要升级
;;;283    			sysUpdateVar.pageNum      = flashAddr/0x800;
;;;284    			sysUpdateVar.softVersion  = varOperation.newSoftVersion;
;;;285    			
;;;286    			SbootParameterSaveToFlash(&sysUpdateVar);//将升级参数保存到Flash中
;;;287    			
;;;288    			__disable_fault_irq();          //重启
;;;289    			NVIC_SystemReset();
;;;290    		}
;;;291    		currentNum = cmdId + 1;
;;;292    		SendFrameNum(currentNum);//请求下一帧数据；
;;;293    	}
;;;294    }
000098  e8bd87f0          POP      {r4-r10,pc}
                  |L6.156|
00009c  2083              MOVS     r0,#0x83              ;241
00009e  fb97f1f0          SDIV     r1,r7,r0              ;241
0000a2  fb007011          MLS      r0,r0,r1,r7           ;241
0000a6  b918              CBNZ     r0,|L6.176|
0000a8  2083              MOVS     r0,#0x83              ;241
0000aa  fb97f0f0          SDIV     r0,r7,r0              ;241
0000ae  e003              B        |L6.184|
                  |L6.176|
0000b0  2083              MOVS     r0,#0x83              ;241
0000b2  fb97f0f0          SDIV     r0,r7,r0              ;241
0000b6  1c40              ADDS     r0,r0,#1              ;241
                  |L6.184|
0000b8  f0000aff          AND      r10,r0,#0xff          ;241
0000bc  2502              MOVS     r5,#2                 ;243
0000be  f04f0900          MOV      r9,#0                 ;244
0000c2  e07a              B        |L6.442|
                  |L6.196|
0000c4  4628              MOV      r0,r5                 ;246
0000c6  1c69              ADDS     r1,r5,#1              ;246
0000c8  b28d              UXTH     r5,r1                 ;246
0000ca  5c20              LDRB     r0,[r4,r0]            ;246
0000cc  1ec0              SUBS     r0,r0,#3              ;246
0000ce  f00008ff          AND      r8,r0,#0xff           ;246
0000d2  4628              MOV      r0,r5                 ;247
0000d4  1c69              ADDS     r1,r5,#1              ;247
0000d6  b28d              UXTH     r5,r1                 ;247
0000d8  5c26              LDRB     r6,[r4,r0]            ;247
0000da  4628              MOV      r0,r5                 ;248
0000dc  1c69              ADDS     r1,r5,#1              ;248
0000de  b28d              UXTH     r5,r1                 ;248
0000e0  5c20              LDRB     r0,[r4,r0]            ;248
0000e2  eb002006          ADD      r0,r0,r6,LSL #8       ;248
0000e6  b286              UXTH     r6,r0                 ;248
0000e8  1961              ADDS     r1,r4,r5              ;249
0000ea  4a51              LDR      r2,|L6.560|
0000ec  7812              LDRB     r2,[r2,#0]            ;249  ; frameIndex
0000ee  4b52              LDR      r3,|L6.568|
0000f0  eb0310c2          ADD      r0,r3,r2,LSL #7       ;249
0000f4  4642              MOV      r2,r8                 ;249
0000f6  f7fffffe          BL       __aeabi_memcpy
0000fa  f1050080          ADD      r0,r5,#0x80           ;250
0000fe  b285              UXTH     r5,r0                 ;250
000100  484b              LDR      r0,|L6.560|
000102  7800              LDRB     r0,[r0,#0]            ;251  ; frameIndex
000104  1c40              ADDS     r0,r0,#1              ;251
000106  494a              LDR      r1,|L6.560|
000108  7008              STRB     r0,[r1,#0]            ;251
00010a  4608              MOV      r0,r1                 ;252
00010c  7800              LDRB     r0,[r0,#0]            ;252  ; frameIndex
00010e  2810              CMP      r0,#0x10              ;252
000110  db25              BLT      |L6.350|
000112  4843              LDR      r0,|L6.544|
000114  88c0              LDRH     r0,[r0,#6]            ;252  ; varOperation
000116  42b0              CMP      r0,r6                 ;252
000118  d021              BEQ      |L6.350|
00011a  2000              MOVS     r0,#0                 ;254
00011c  7008              STRB     r0,[r1,#0]            ;254
00011e  4843              LDR      r0,|L6.556|
000120  6800              LDR      r0,[r0,#0]            ;255  ; flashAddr
000122  f7fffffe          BL       SoftErasePage
000126  f44f6200          MOV      r2,#0x800             ;256
00012a  4943              LDR      r1,|L6.568|
00012c  483f              LDR      r0,|L6.556|
00012e  6800              LDR      r0,[r0,#0]            ;256  ; flashAddr
000130  f7fffffe          BL       SoftProgramUpdate
000134  f44f6200          MOV      r2,#0x800             ;258
000138  493f              LDR      r1,|L6.568|
00013a  483b              LDR      r0,|L6.552|
00013c  8800              LDRH     r0,[r0,#0]            ;258  ; fileCRC
00013e  f7fffffe          BL       CRC_ComputeFile
000142  4939              LDR      r1,|L6.552|
000144  8008              STRH     r0,[r1,#0]            ;258
000146  f44f6100          MOV      r1,#0x800             ;259
00014a  483b              LDR      r0,|L6.568|
00014c  f7fffffe          BL       __aeabi_memclr
000150  4836              LDR      r0,|L6.556|
000152  6800              LDR      r0,[r0,#0]            ;260  ; flashAddr
000154  f5006000          ADD      r0,r0,#0x800          ;260
000158  4934              LDR      r1,|L6.556|
00015a  6008              STR      r0,[r1,#0]            ;260  ; flashAddr
00015c  e029              B        |L6.434|
                  |L6.350|
00015e  4830              LDR      r0,|L6.544|
000160  88c0              LDRH     r0,[r0,#6]            ;262  ; varOperation
000162  42b0              CMP      r0,r6                 ;262
000164  d125              BNE      |L6.434|
000166  4831              LDR      r0,|L6.556|
000168  6800              LDR      r0,[r0,#0]            ;264  ; flashAddr
00016a  f7fffffe          BL       SoftErasePage
00016e  4830              LDR      r0,|L6.560|
000170  7800              LDRB     r0,[r0,#0]            ;265  ; frameIndex
000172  1e40              SUBS     r0,r0,#1              ;265
000174  eb0810c0          ADD      r0,r8,r0,LSL #7       ;265
000178  b282              UXTH     r2,r0                 ;265
00017a  492f              LDR      r1,|L6.568|
00017c  482b              LDR      r0,|L6.556|
00017e  6800              LDR      r0,[r0,#0]            ;265  ; flashAddr
000180  f7fffffe          BL       SoftProgramUpdate
000184  482a              LDR      r0,|L6.560|
000186  7800              LDRB     r0,[r0,#0]            ;267  ; frameIndex
000188  1e40              SUBS     r0,r0,#1              ;267
00018a  eb0812c0          ADD      r2,r8,r0,LSL #7       ;267
00018e  492a              LDR      r1,|L6.568|
000190  4825              LDR      r0,|L6.552|
000192  8800              LDRH     r0,[r0,#0]            ;267  ; fileCRC
000194  f7fffffe          BL       CRC_ComputeFile
000198  4923              LDR      r1,|L6.552|
00019a  8008              STRH     r0,[r1,#0]            ;267
00019c  f44f6100          MOV      r1,#0x800             ;268
0001a0  4825              LDR      r0,|L6.568|
0001a2  f7fffffe          BL       __aeabi_memclr
0001a6  4821              LDR      r0,|L6.556|
0001a8  6800              LDR      r0,[r0,#0]            ;269  ; flashAddr
0001aa  f5006000          ADD      r0,r0,#0x800          ;269
0001ae  491f              LDR      r1,|L6.556|
0001b0  6008              STR      r0,[r1,#0]            ;269  ; flashAddr
                  |L6.434|
0001b2  f1090001          ADD      r0,r9,#1              ;244
0001b6  fa1ff980          UXTH     r9,r0                 ;244
                  |L6.442|
0001ba  45d1              CMP      r9,r10                ;244
0001bc  db82              BLT      |L6.196|
0001be  4818              LDR      r0,|L6.544|
0001c0  88c0              LDRH     r0,[r0,#6]            ;272  ; varOperation
0001c2  42b0              CMP      r0,r6                 ;272
0001c4  d122              BNE      |L6.524|
0001c6  4816              LDR      r0,|L6.544|
0001c8  8880              LDRH     r0,[r0,#4]            ;274  ; varOperation
0001ca  4917              LDR      r1,|L6.552|
0001cc  8809              LDRH     r1,[r1,#0]            ;274  ; fileCRC
0001ce  4288              CMP      r0,r1                 ;274
0001d0  d007              BEQ      |L6.482|
0001d2  4620              MOV      r0,r4                 ;276
0001d4  f7fffffe          BL       Mem_free
0001d8  2000              MOVS     r0,#0                 ;277
0001da  4911              LDR      r1,|L6.544|
0001dc  f881002d          STRB     r0,[r1,#0x2d]         ;277
0001e0  e75a              B        |L6.152|
                  |L6.482|
0001e2  4620              MOV      r0,r4                 ;281
0001e4  f7fffffe          BL       Mem_free
0001e8  2001              MOVS     r0,#1                 ;282
0001ea  4914              LDR      r1,|L6.572|
0001ec  7008              STRB     r0,[r1,#0]            ;282
0001ee  480f              LDR      r0,|L6.556|
0001f0  6800              LDR      r0,[r0,#0]            ;283  ; flashAddr
0001f2  0ac0              LSRS     r0,r0,#11             ;283
0001f4  f8c10001          STR      r0,[r1,#1]            ;283  ; sysUpdateVar
0001f8  4809              LDR      r0,|L6.544|
0001fa  6800              LDR      r0,[r0,#0]            ;284  ; varOperation
0001fc  f8c10005          STR      r0,[r1,#5]            ;284  ; sysUpdateVar
000200  4608              MOV      r0,r1                 ;286
000202  f7fffffe          BL       SbootParameterSaveToFlash
000206  b671              CPSID    f                     ;288
000208  f7fffffe          BL       NVIC_SystemReset
                  |L6.524|
00020c  1c70              ADDS     r0,r6,#1              ;291
00020e  4905              LDR      r1,|L6.548|
000210  8008              STRH     r0,[r1,#0]            ;291
000212  4608              MOV      r0,r1                 ;292
000214  8800              LDRH     r0,[r0,#0]            ;292  ; currentNum
000216  f7fffffe          BL       SendFrameNum
                  |L6.538|
00021a  bf00              NOP      
00021c  e73c              B        |L6.152|
;;;295    
                          ENDP

00021e  0000              DCW      0x0000
                  |L6.544|
                          DCD      varOperation
                  |L6.548|
                          DCD      currentNum
                  |L6.552|
                          DCD      fileCRC
                  |L6.556|
                          DCD      flashAddr
                  |L6.560|
                          DCD      frameIndex
                  |L6.564|
                          DCD      configData
                  |L6.568|
                          DCD      updateBuff
                  |L6.572|
                          DCD      sysUpdateVar

                          AREA ||i.RecvLoginDatDeal||, CODE, READONLY, ALIGN=2

                  RecvLoginDatDeal PROC
;;;108    
;;;109    static void RecvLoginDatDeal(uint8_t* ptr)//对服务器回复的登录报文进行解析
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;110    {
000004  4604              MOV      r4,r0
;;;111    	uint16_t cmdId = 0;
000006  f04f0900          MOV      r9,#0
;;;112    	uint8_t  ipLen = 0;
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
;;;113    	uint32_t ecuId = 0;
00000e  2600              MOVS     r6,#0
;;;114    	uint32_t serverTime  = 0;
000010  4680              MOV      r8,r0
;;;115    	uint32_t softVersion = 0;
000012  2700              MOVS     r7,#0
;;;116    	uint16_t offset = 3;
000014  2503              MOVS     r5,#3
;;;117    	
;;;118    	cmdId = ptr[offset++];
000016  4629              MOV      r1,r5
000018  1c6d              ADDS     r5,r5,#1
00001a  f8149001          LDRB     r9,[r4,r1]
;;;119    	cmdId = (cmdId<<8) + ptr[offset++];
00001e  4629              MOV      r1,r5
000020  1c6d              ADDS     r5,r5,#1
000022  5c60              LDRB     r0,[r4,r1]
000024  eb002009          ADD      r0,r0,r9,LSL #8
000028  fa1ff980          UXTH     r9,r0
;;;120    
;;;121    	serverTime = ptr[offset++];     //得到服务器时间
00002c  4629              MOV      r1,r5
00002e  1c6d              ADDS     r5,r5,#1
000030  f8148001          LDRB     r8,[r4,r1]
;;;122    	serverTime = (serverTime << 8) + ptr[offset++];
000034  4629              MOV      r1,r5
000036  1c6d              ADDS     r5,r5,#1
000038  5c60              LDRB     r0,[r4,r1]
00003a  eb002808          ADD      r8,r0,r8,LSL #8
;;;123    	serverTime = (serverTime << 8) + ptr[offset++];
00003e  4629              MOV      r1,r5
000040  1c6d              ADDS     r5,r5,#1
000042  5c60              LDRB     r0,[r4,r1]
000044  eb002808          ADD      r8,r0,r8,LSL #8
;;;124    	serverTime = (serverTime << 8) + ptr[offset++];
000048  4629              MOV      r1,r5
00004a  1c6d              ADDS     r5,r5,#1
00004c  5c60              LDRB     r0,[r4,r1]
00004e  eb002808          ADD      r8,r0,r8,LSL #8
;;;125    	
;;;126    	RTC_Time_Adjust(serverTime);//登录的时候，跟服务器时间进行校时。
000052  4640              MOV      r0,r8
000054  f7fffffe          BL       RTC_Time_Adjust
;;;127    	
;;;128    	softVersion = ptr[offset++];    //得到软件版本号
000058  4629              MOV      r1,r5
00005a  1c6d              ADDS     r5,r5,#1
00005c  5c67              LDRB     r7,[r4,r1]
;;;129    	softVersion = (softVersion << 8) + ptr[offset++];
00005e  4629              MOV      r1,r5
000060  1c6d              ADDS     r5,r5,#1
000062  5c60              LDRB     r0,[r4,r1]
000064  eb002707          ADD      r7,r0,r7,LSL #8
;;;130    	softVersion = (softVersion << 8) + ptr[offset++];
000068  4629              MOV      r1,r5
00006a  1c6d              ADDS     r5,r5,#1
00006c  5c60              LDRB     r0,[r4,r1]
00006e  eb002707          ADD      r7,r0,r7,LSL #8
;;;131    	softVersion = (softVersion << 8) + ptr[offset++];
000072  4629              MOV      r1,r5
000074  1c6d              ADDS     r5,r5,#1
000076  5c60              LDRB     r0,[r4,r1]
000078  eb002707          ADD      r7,r0,r7,LSL #8
;;;132    	
;;;133    	ecuId = ptr[offset++];          //得到ECU ID
00007c  4629              MOV      r1,r5
00007e  1c6d              ADDS     r5,r5,#1
000080  5c66              LDRB     r6,[r4,r1]
;;;134    	ecuId = (ecuId << 8) + ptr[offset++];
000082  4629              MOV      r1,r5
000084  1c6d              ADDS     r5,r5,#1
000086  5c60              LDRB     r0,[r4,r1]
000088  eb002606          ADD      r6,r0,r6,LSL #8
;;;135    	ecuId = (ecuId << 8) + ptr[offset++];
00008c  4629              MOV      r1,r5
00008e  1c6d              ADDS     r5,r5,#1
000090  5c60              LDRB     r0,[r4,r1]
000092  eb002606          ADD      r6,r0,r6,LSL #8
;;;136    	ecuId = (ecuId << 8) + ptr[offset++];
000096  4629              MOV      r1,r5
000098  1c6d              ADDS     r5,r5,#1
00009a  5c60              LDRB     r0,[r4,r1]
00009c  eb002606          ADD      r6,r0,r6,LSL #8
;;;137    	
;;;138    	ipLen = ptr[offset++];              //得到IP长度
0000a0  4628              MOV      r0,r5
0000a2  1c69              ADDS     r1,r5,#1
0000a4  b28d              UXTH     r5,r1
0000a6  5c20              LDRB     r0,[r4,r0]
0000a8  9000              STR      r0,[sp,#0]
;;;139    	memset(varOperation.newIP_Addr,0,18);//清零
0000aa  4830              LDR      r0,|L7.364|
0000ac  f7fffffe          BL       __aeabi_memclr
;;;140    	memcpy(varOperation.newIP_Addr,&ptr[offset],ipLen); //得到IP地址
0000b0  1961              ADDS     r1,r4,r5
0000b2  f89d2000          LDRB     r2,[sp,#0]
0000b6  482d              LDR      r0,|L7.364|
0000b8  f7fffffe          BL       __aeabi_memcpy
;;;141    	
;;;142    	varOperation.newIP_Potr = ptr[offset + ipLen];      //得到端口号
0000bc  f89d0000          LDRB     r0,[sp,#0]
0000c0  4428              ADD      r0,r0,r5
0000c2  5c20              LDRB     r0,[r4,r0]
0000c4  4929              LDR      r1,|L7.364|
0000c6  3946              SUBS     r1,r1,#0x46
0000c8  f8a10058          STRH     r0,[r1,#0x58]
;;;143    	varOperation.newIP_Potr = (varOperation.newIP_Potr << 8) + ptr[offset + ipLen + 1];
0000cc  f89d0000          LDRB     r0,[sp,#0]
0000d0  4428              ADD      r0,r0,r5
0000d2  1c40              ADDS     r0,r0,#1
0000d4  5c20              LDRB     r0,[r4,r0]
0000d6  f8911058          LDRB     r1,[r1,#0x58]  ; varOperation
0000da  eb002001          ADD      r0,r0,r1,LSL #8
0000de  4923              LDR      r1,|L7.364|
0000e0  3946              SUBS     r1,r1,#0x46
0000e2  f8a10058          STRH     r0,[r1,#0x58]
;;;144    	
;;;145    	if(softVersion != sysUpdateVar.softVersion) //先考虑OTA升级
0000e6  4822              LDR      r0,|L7.368|
0000e8  f8d00005          LDR      r0,[r0,#5]  ; sysUpdateVar
0000ec  42b8              CMP      r0,r7
0000ee  d012              BEQ      |L7.278|
;;;146    	{
;;;147    		varOperation.newSoftVersion = softVersion;
0000f0  4608              MOV      r0,r1
0000f2  6007              STR      r7,[r0,#0]  ; varOperation
;;;148    		OSSemPend(sendMsg,100,&ipLen);    //等待200ms  确保CDMA当前没有发送数据
0000f4  466a              MOV      r2,sp
0000f6  2164              MOVS     r1,#0x64
0000f8  481e              LDR      r0,|L7.372|
0000fa  6800              LDR      r0,[r0,#0]  ; sendMsg
0000fc  f7fffffe          BL       OSSemPend
;;;149    		varOperation.isDataFlow     = 1;  // OTA进行升级 停止数据流，一心只为OTA升级
000100  2001              MOVS     r0,#1
000102  491a              LDR      r1,|L7.364|
000104  3946              SUBS     r1,r1,#0x46
000106  f881002d          STRB     r0,[r1,#0x2d]
;;;150    		sysUpdateVar.isSoftUpdate   = 1;  
00010a  4919              LDR      r1,|L7.368|
00010c  7008              STRB     r0,[r1,#0]
;;;151    		
;;;152    		SendFrameNum(0x8000);             //发送0x8000以请求程序文件大小以及CRC校验
00010e  03c0              LSLS     r0,r0,#15
000110  f7fffffe          BL       SendFrameNum
000114  e027              B        |L7.358|
                  |L7.278|
;;;153    	}
;;;154    	else if(ecuId != sysUpdateVar.pidVersion && sysUpdateVar.isSoftUpdate ==0)  //再考虑配置文件升级
000116  4816              LDR      r0,|L7.368|
000118  f8d00009          LDR      r0,[r0,#9]  ; sysUpdateVar
00011c  42b0              CMP      r0,r6
00011e  d014              BEQ      |L7.330|
000120  4813              LDR      r0,|L7.368|
000122  7800              LDRB     r0,[r0,#0]  ; sysUpdateVar
000124  b988              CBNZ     r0,|L7.330|
;;;155    	{
;;;156    		varOperation.newPIDVersion = ecuId;
000126  4811              LDR      r0,|L7.364|
000128  3846              SUBS     r0,r0,#0x46
00012a  f8c0607e          STR      r6,[r0,#0x7e]  ; varOperation
;;;157    		OSSemPend(sendMsg,100,&ipLen);    //等待200ms  确保CDMA当前没有发送数据
00012e  466a              MOV      r2,sp
000130  2164              MOVS     r1,#0x64
000132  4810              LDR      r0,|L7.372|
000134  6800              LDR      r0,[r0,#0]  ; sendMsg
000136  f7fffffe          BL       OSSemPend
;;;158    		varOperation.isDataFlow     = 1;  //配置文件升级，停止数据流，一心只为配置
00013a  2001              MOVS     r0,#1
00013c  490b              LDR      r1,|L7.364|
00013e  3946              SUBS     r1,r1,#0x46
000140  f881002d          STRB     r0,[r1,#0x2d]
;;;159    		
;;;160    		GetConfigInfo();                  //请求配置文件 - 发送0x4000及版本信息
000144  f7fffffe          BL       GetConfigInfo
000148  e00d              B        |L7.358|
                  |L7.330|
;;;161    	}
;;;162    	else 
;;;163    	{
;;;164    		varOperation.isLoginDeal = 1;  //没有登录报文需要处理
00014a  2001              MOVS     r0,#1
00014c  4907              LDR      r1,|L7.364|
00014e  3946              SUBS     r1,r1,#0x46
000150  f8810030          STRB     r0,[r1,#0x30]
;;;165    		if(OSSemAccept(LoginMes) == 0)
000154  4808              LDR      r0,|L7.376|
000156  6800              LDR      r0,[r0,#0]  ; LoginMes
000158  f7fffffe          BL       OSSemAccept
00015c  b918              CBNZ     r0,|L7.358|
;;;166    			OSSemPost(LoginMes);
00015e  4806              LDR      r0,|L7.376|
000160  6800              LDR      r0,[r0,#0]  ; LoginMes
000162  f7fffffe          BL       OSSemPost
                  |L7.358|
;;;167    	}
;;;168    	
;;;169    	
;;;170    	//todo:IP更改，后期会有需要
;;;171    //	isIpEqual = strcmp(varOperation.ipAddr,varOperation.newIP_Addr);//比较IP是否相等  =0 - 相等
;;;172    //	if((varOperation.newIP_Potr != varOperation.ipPotr) || (isIpEqual != 0))//端口号不相等或者IP地址不相等
;;;173    //	{
;;;174    //		memset(varOperation.ipAddr,0,18);//将原始IP清零
;;;175    //		memcpy(varOperation.ipAddr,varOperation.newIP_Addr,18);//新IP
;;;176    //		varOperation.ipPotr = varOperation.newIP_Potr;         //新端口
;;;177    //		varOperation.isDataFlow = 1; //停止数据流
;;;178    //		OSSemPend(sendMsg,0,&ipLen);//等待CDMA发送空闲，不能在其发送数据的时候，重新TCP连接
;;;179    //		
;;;180    //		CDMASendCmd((const uint8_t*)"AT+ZIPCLOSE=0\r","ZIPCLOSE",sizeof("AT+ZIPCLOSE=0\r"));//关闭TCP连接
;;;181    //	}
;;;182    }
000166  e8bd83f8          POP      {r3-r9,pc}
;;;183    static void SendFrameNum(uint16_t frameNum)
                          ENDP

00016a  0000              DCW      0x0000
                  |L7.364|
                          DCD      varOperation+0x46
                  |L7.368|
                          DCD      sysUpdateVar
                  |L7.372|
                          DCD      sendMsg
                  |L7.376|
                          DCD      LoginMes

                          AREA ||i.SendConfigNum||, CODE, READONLY, ALIGN=2

                  SendConfigNum PROC
;;;296    
;;;297    static void SendConfigNum(uint16_t cmd)
000000  b570              PUSH     {r4-r6,lr}
;;;298    {
000002  4605              MOV      r5,r0
;;;299    	_CDMADataToSend* otaUpdatSend;
;;;300    	otaUpdatSend = CDMNSendInfoInit(60);//升级请求帧
000004  203c              MOVS     r0,#0x3c
000006  f7fffffe          BL       CDMNSendInfoInit
00000a  4604              MOV      r4,r0
;;;301    
;;;302    	otaUpdatSend->data[otaUpdatSend->datLength++] = 7;   //长度
00000c  2107              MOVS     r1,#7
00000e  8822              LDRH     r2,[r4,#0]
000010  1c50              ADDS     r0,r2,#1
000012  8020              STRH     r0,[r4,#0]
000014  6860              LDR      r0,[r4,#4]
000016  5481              STRB     r1,[r0,r2]
;;;303    	otaUpdatSend->data[otaUpdatSend->datLength++] = (cmd>>8) &0x00FF;
000018  0a29              LSRS     r1,r5,#8
00001a  8822              LDRH     r2,[r4,#0]
00001c  1c50              ADDS     r0,r2,#1
00001e  8020              STRH     r0,[r4,#0]
000020  6860              LDR      r0,[r4,#4]
000022  5481              STRB     r1,[r0,r2]
;;;304    	otaUpdatSend->data[otaUpdatSend->datLength++] = cmd &0x00FF;
000024  8822              LDRH     r2,[r4,#0]
000026  1c50              ADDS     r0,r2,#1
000028  8020              STRH     r0,[r4,#0]
00002a  6860              LDR      r0,[r4,#4]
00002c  5485              STRB     r5,[r0,r2]
;;;305    	//请求升级的版本
;;;306    	otaUpdatSend->data[otaUpdatSend->datLength++] = (varOperation.newPIDVersion >> 24) & 0x00FF;
00002e  4817              LDR      r0,|L8.140|
000030  f8d0007e          LDR      r0,[r0,#0x7e]  ; varOperation
000034  0e00              LSRS     r0,r0,#24
000036  8822              LDRH     r2,[r4,#0]
000038  1c51              ADDS     r1,r2,#1
00003a  8021              STRH     r1,[r4,#0]
00003c  6861              LDR      r1,[r4,#4]
00003e  5488              STRB     r0,[r1,r2]
;;;307    	otaUpdatSend->data[otaUpdatSend->datLength++] = (varOperation.newPIDVersion >> 16) & 0x00FF;
000040  4812              LDR      r0,|L8.140|
000042  f8d0007e          LDR      r0,[r0,#0x7e]  ; varOperation
000046  f3c04107          UBFX     r1,r0,#16,#8
00004a  8822              LDRH     r2,[r4,#0]
00004c  1c50              ADDS     r0,r2,#1
00004e  8020              STRH     r0,[r4,#0]
000050  6860              LDR      r0,[r4,#4]
000052  5481              STRB     r1,[r0,r2]
;;;308    	otaUpdatSend->data[otaUpdatSend->datLength++] = (varOperation.newPIDVersion >> 8) & 0x00FF;
000054  480d              LDR      r0,|L8.140|
000056  f8b0007e          LDRH     r0,[r0,#0x7e]  ; varOperation
00005a  f3c02107          UBFX     r1,r0,#8,#8
00005e  8822              LDRH     r2,[r4,#0]
000060  1c50              ADDS     r0,r2,#1
000062  8020              STRH     r0,[r4,#0]
000064  6860              LDR      r0,[r4,#4]
000066  5481              STRB     r1,[r0,r2]
;;;309    	otaUpdatSend->data[otaUpdatSend->datLength++] = varOperation.newPIDVersion & 0x00FF;
000068  4808              LDR      r0,|L8.140|
00006a  f890107e          LDRB     r1,[r0,#0x7e]  ; varOperation
00006e  8822              LDRH     r2,[r4,#0]
000070  1c50              ADDS     r0,r2,#1
000072  8020              STRH     r0,[r4,#0]
000074  6860              LDR      r0,[r4,#4]
000076  5481              STRB     r1,[r0,r2]
;;;310    	
;;;311    	CDMASendDataPack(otaUpdatSend);//将请求包进行封包
000078  4620              MOV      r0,r4
00007a  f7fffffe          BL       CDMASendDataPack
;;;312    	
;;;313    	OSQPost(CDMASendQ,otaUpdatSend);
00007e  4621              MOV      r1,r4
000080  4803              LDR      r0,|L8.144|
000082  6800              LDR      r0,[r0,#0]  ; CDMASendQ
000084  f7fffffe          BL       OSQPost
;;;314    }
000088  bd70              POP      {r4-r6,pc}
;;;315    static void ConfigUpdata(uint8_t* ptrDeal )
                          ENDP

00008a  0000              DCW      0x0000
                  |L8.140|
                          DCD      varOperation
                  |L8.144|
                          DCD      CDMASendQ

                          AREA ||i.SendFrameNum||, CODE, READONLY, ALIGN=2

                  SendFrameNum PROC
;;;182    }
;;;183    static void SendFrameNum(uint16_t frameNum)
000000  b570              PUSH     {r4-r6,lr}
;;;184    {
000002  4605              MOV      r5,r0
;;;185    	_CDMADataToSend* otaUpdatSend;
;;;186    	otaUpdatSend = CDMNSendInfoInit(60);//
000004  203c              MOVS     r0,#0x3c
000006  f7fffffe          BL       CDMNSendInfoInit
00000a  4604              MOV      r4,r0
;;;187    	otaUpdatSend->data[otaUpdatSend->datLength++] =  3;   //长度
00000c  2103              MOVS     r1,#3
00000e  8822              LDRH     r2,[r4,#0]
000010  1c50              ADDS     r0,r2,#1
000012  8020              STRH     r0,[r4,#0]
000014  6860              LDR      r0,[r4,#4]
000016  5481              STRB     r1,[r0,r2]
;;;188    	otaUpdatSend->data[otaUpdatSend->datLength++] = (frameNum >> 8) &0x00FF;
000018  0a29              LSRS     r1,r5,#8
00001a  8822              LDRH     r2,[r4,#0]
00001c  1c50              ADDS     r0,r2,#1
00001e  8020              STRH     r0,[r4,#0]
000020  6860              LDR      r0,[r4,#4]
000022  5481              STRB     r1,[r0,r2]
;;;189    	otaUpdatSend->data[otaUpdatSend->datLength++] = frameNum & 0x00FF;
000024  8822              LDRH     r2,[r4,#0]
000026  1c50              ADDS     r0,r2,#1
000028  8020              STRH     r0,[r4,#0]
00002a  6860              LDR      r0,[r4,#4]
00002c  5485              STRB     r5,[r0,r2]
;;;190    	
;;;191    	CDMASendDataPack(otaUpdatSend);//将程序请求帧进行封包
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       CDMASendDataPack
;;;192    	
;;;193    	OSQPost(CDMASendQ,otaUpdatSend);
000034  4621              MOV      r1,r4
000036  4802              LDR      r0,|L9.64|
000038  6800              LDR      r0,[r0,#0]  ; CDMASendQ
00003a  f7fffffe          BL       OSQPost
;;;194    }
00003e  bd70              POP      {r4-r6,pc}
;;;195    extern uint8_t configData[2048];//用来存储配置PID
                          ENDP

                  |L9.64|
                          DCD      CDMASendQ

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  updateBuff
                          %        2048

                          AREA ||.data||, DATA, ALIGN=2

                  currentNum
000000  0000              DCW      0x0000
                  fileCRC
000002  0000              DCW      0x0000
                  flashAddr
                          DCD      0x00000000
                  frameIndex
000008  0000              DCB      0x00,0x00
                  |symbol_number.36|
00000a  0000              DCW      0x0000
                  |symbol_number.37|
00000c  0000              DCW      0x0000
                  pidPackNum
00000e  00                DCB      0x00
