; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\obj\cdmarecvtask.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=..\obj\cdmarecvtask.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\OBD -I..\SYSTEM -I..\USER -I..\LIB\inc -I..\UCOSII\CONFIG -I..\UCOSII\PORT -I..\UCOSII\CORE -I..\HAEDWARE -I..\GPS -I..\CDMA -I..\DEAL -I..\USB\CONFIG -I..\USB\STM32_USB-FS-Device_Driver\inc -I.\RTE\_Project -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\5.2.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=524 -D_RTE_ -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\cdmarecvtask.crf ..\CDMA\CDMARecvTask.c]
                          THUMB

                          AREA ||i.CDMARecvTask||, CODE, READONLY, ALIGN=2

                  CDMARecvTask PROC
;;;16     //本任务用来上发登录报文、处理OTA升级、配置文件升级、模式切换（强动力模式、节油模式等）
;;;17     void CDMARecvTask(void *pdata)
000000  b508              PUSH     {r3,lr}
;;;18     {
;;;19     	uint8_t  err;
;;;20     	uint16_t cmdId;
;;;21     	uint8_t* ptrRECV = NULL;
000002  2600              MOVS     r6,#0
;;;22     	uint8_t* ptrDeal = NULL;
000004  2500              MOVS     r5,#0
;;;23     	
;;;24     	while(1)
000006  e069              B        |L1.220|
                  |L1.8|
;;;25     	{
;;;26     		ptrRECV = OSQPend(ZIPRecv_Q,30000,&err);  //等待60s后服务器无响应，则退出
000008  466a              MOV      r2,sp
00000a  f2475130          MOV      r1,#0x7530
00000e  4834              LDR      r0,|L1.224|
000010  6800              LDR      r0,[r0,#0]  ; ZIPRecv_Q
000012  f7fffffe          BL       OSQPend
000016  4606              MOV      r6,r0
;;;27     		if(err == OS_ERR_NONE)
000018  f89d0000          LDRB     r0,[sp,#0]
00001c  2800              CMP      r0,#0
00001e  d145              BNE      |L1.172|
;;;28     		{
;;;29     			ptrDeal = RecvDataAnalysis(ptrRECV);  //将接收到的数据进行加工
000020  4630              MOV      r0,r6
000022  f7fffffe          BL       RecvDataAnalysis
000026  4605              MOV      r5,r0
;;;30     			if(ptrDeal == NULL)                   //接收到错误的数据
000028  b905              CBNZ     r5,|L1.44|
;;;31     				continue; 
00002a  e057              B        |L1.220|
                  |L1.44|
;;;32     			
;;;33     			cmdId = ptrDeal[3];
00002c  78ec              LDRB     r4,[r5,#3]
;;;34     			cmdId = (cmdId<<8) + ptrDeal[4];
00002e  7928              LDRB     r0,[r5,#4]
000030  eb002004          ADD      r0,r0,r4,LSL #8
000034  b284              UXTH     r4,r0
;;;35     			
;;;36     			if(cmdId == 0x5001)                          //接收到登录报文
000036  f2450001          MOV      r0,#0x5001
00003a  4284              CMP      r4,r0
00003c  d103              BNE      |L1.70|
;;;37     				RecvLoginDatDeal(ptrDeal);
00003e  4628              MOV      r0,r5
000040  f7fffffe          BL       RecvLoginDatDeal
000044  e02a              B        |L1.156|
                  |L1.70|
;;;38     			else if(cmdId == 0x5015)                     //模式切换
000046  f2450015          MOV      r0,#0x5015
00004a  4284              CMP      r4,r0
00004c  d103              BNE      |L1.86|
;;;39     				FuelModeChange(ptrDeal);
00004e  4628              MOV      r0,r5
000050  f7fffffe          BL       FuelModeChange
000054  e022              B        |L1.156|
                  |L1.86|
;;;40     			else if(cmdId == 0x5017)                     //服务器下发的测试指令
000056  f2450017          MOV      r0,#0x5017
00005a  4284              CMP      r4,r0
00005c  d103              BNE      |L1.102|
;;;41     				CanTestCmd(ptrDeal);
00005e  4628              MOV      r0,r5
000060  f7fffffe          BL       CanTestCmd
000064  e01a              B        |L1.156|
                  |L1.102|
;;;42     			else if((cmdId >= 0x4000)&&(cmdId < 0x5000)) //第一部分的配置文件
000066  f5b44f80          CMP      r4,#0x4000
00006a  db06              BLT      |L1.122|
00006c  f5b44fa0          CMP      r4,#0x5000
000070  da03              BGE      |L1.122|
;;;43     				ConfigUpdata(ptrDeal);
000072  4628              MOV      r0,r5
000074  f7fffffe          BL       ConfigUpdata
000078  e010              B        |L1.156|
                  |L1.122|
;;;44     			else if(cmdId == 0x5012)                     //第二部分的配置文件
00007a  f2450012          MOV      r0,#0x5012
00007e  4284              CMP      r4,r0
000080  d103              BNE      |L1.138|
;;;45     				ConfigUpdata(ptrDeal);
000082  4628              MOV      r0,r5
000084  f7fffffe          BL       ConfigUpdata
000088  e008              B        |L1.156|
                  |L1.138|
;;;46     			else if((cmdId >= 0x8000)&&(cmdId < 0x9000)) //程序升级报文    
00008a  f5b44f00          CMP      r4,#0x8000
00008e  db05              BLT      |L1.156|
000090  f5b44f10          CMP      r4,#0x9000
000094  da02              BGE      |L1.156|
;;;47     				OTA_Updata(ptrDeal);
000096  4628              MOV      r0,r5
000098  f7fffffe          BL       OTA_Updata
                  |L1.156|
;;;48     			
;;;49     			Mem_free(ptrDeal);             //释放内存块
00009c  4628              MOV      r0,r5
00009e  f7fffffe          BL       Mem_free
;;;50     			varOperation.isLoginDeal = 1;  //登录报文处理完毕
0000a2  2001              MOVS     r0,#1
0000a4  490f              LDR      r1,|L1.228|
0000a6  f8810030          STRB     r0,[r1,#0x30]
0000aa  e016              B        |L1.218|
                  |L1.172|
;;;51     		}
;;;52     		else   //等待超时
;;;53     		{
;;;54     			varOperation.isLoginDeal = 1; 
0000ac  2001              MOVS     r0,#1
0000ae  490d              LDR      r1,|L1.228|
0000b0  f8810030          STRB     r0,[r1,#0x30]
;;;55     			if(sysUpdateVar.isSoftUpdate == 1)//OTA升级超时
0000b4  480c              LDR      r0,|L1.232|
0000b6  7800              LDRB     r0,[r0,#0]  ; sysUpdateVar
0000b8  2801              CMP      r0,#1
0000ba  d10e              BNE      |L1.218|
;;;56     			{
;;;57     				sysUpdateVar.isSoftUpdate = 0;
0000bc  2000              MOVS     r0,#0
0000be  490a              LDR      r1,|L1.232|
0000c0  7008              STRB     r0,[r1,#0]
;;;58     				varOperation.isDataFlow   = 0;//重启数据流
0000c2  4908              LDR      r1,|L1.228|
0000c4  f881002d          STRB     r0,[r1,#0x2d]
;;;59     				if(OSSemAccept(LoginMes) == 0)//启动CAN
0000c8  4808              LDR      r0,|L1.236|
0000ca  6800              LDR      r0,[r0,#0]  ; LoginMes
0000cc  f7fffffe          BL       OSSemAccept
0000d0  b918              CBNZ     r0,|L1.218|
;;;60     					OSSemPost(LoginMes);	
0000d2  4806              LDR      r0,|L1.236|
0000d4  6800              LDR      r0,[r0,#0]  ; LoginMes
0000d6  f7fffffe          BL       OSSemPost
                  |L1.218|
0000da  bf00              NOP                            ;31
                  |L1.220|
0000dc  e794              B        |L1.8|
;;;61     			} 
;;;62     		}
;;;63     	}
;;;64     }
;;;65     //登录报文
                          ENDP

0000de  0000              DCW      0x0000
                  |L1.224|
                          DCD      ZIPRecv_Q
                  |L1.228|
                          DCD      varOperation
                  |L1.232|
                          DCD      sysUpdateVar
                  |L1.236|
                          DCD      LoginMes

                          AREA ||i.CanTestCmd||, CODE, READONLY, ALIGN=2

                  CanTestCmd PROC
;;;494    extern CAN1DataToSend  dataToSend; 
;;;495    static void CanTestCmd(uint8_t* ptrDeal)//服务器下发的  CAN测试指令
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;496    {
000004  b087              SUB      sp,sp,#0x1c
000006  4606              MOV      r6,r0
;;;497    	uint32_t flowId;
;;;498    	uint32_t canRxId;
;;;499    //	uint32_t recordId;
;;;500    	uint32_t canTxId;
;;;501    	uint8_t*  pidVerCmd;
;;;502    	uint16_t cmdId;
;;;503    	uint8_t offset = 3,err = 0,i = 0,cmdManyPackNum = 0;
000008  2403              MOVS     r4,#3
00000a  2000              MOVS     r0,#0
00000c  9005              STR      r0,[sp,#0x14]
00000e  4681              MOV      r9,r0
000010  9004              STR      r0,[sp,#0x10]
;;;504    	CanRxMsg* CAN1_RxMsg;
;;;505    	CAN_InitTypeDef   CAN_InitStructure;
;;;506    	
;;;507    //	recordId = dataToSend.canId;//记录之前的  CANID
;;;508    	
;;;509    	pidVerCmd = Mem_malloc(8);
000012  2008              MOVS     r0,#8
000014  f7fffffe          BL       Mem_malloc
000018  4605              MOV      r5,r0
;;;510    	
;;;511    	cmdId     = ptrDeal[offset ++];
00001a  4621              MOV      r1,r4
00001c  1c64              ADDS     r4,r4,#1
00001e  5c70              LDRB     r0,[r6,r1]
000020  9006              STR      r0,[sp,#0x18]
;;;512    	cmdId     = (cmdId << 8) + ptrDeal[offset ++];
000022  4621              MOV      r1,r4
000024  1c64              ADDS     r4,r4,#1
000026  5c71              LDRB     r1,[r6,r1]
000028  9806              LDR      r0,[sp,#0x18]
00002a  eb012000          ADD      r0,r1,r0,LSL #8
00002e  b280              UXTH     r0,r0
000030  9006              STR      r0,[sp,#0x18]
;;;513    	
;;;514    	flowId = ptrDeal[offset ++];//流水ID
000032  4621              MOV      r1,r4
000034  1c64              ADDS     r4,r4,#1
000036  5c77              LDRB     r7,[r6,r1]
;;;515    	flowId = (flowId<<8) + ptrDeal[offset++];
000038  4621              MOV      r1,r4
00003a  1c64              ADDS     r4,r4,#1
00003c  5c70              LDRB     r0,[r6,r1]
00003e  eb002707          ADD      r7,r0,r7,LSL #8
;;;516    	flowId = (flowId<<8) + ptrDeal[offset++];
000042  4621              MOV      r1,r4
000044  1c64              ADDS     r4,r4,#1
000046  5c70              LDRB     r0,[r6,r1]
000048  eb002707          ADD      r7,r0,r7,LSL #8
;;;517    	flowId = (flowId<<8) + ptrDeal[offset++];
00004c  4621              MOV      r1,r4
00004e  1c64              ADDS     r4,r4,#1
000050  5c70              LDRB     r0,[r6,r1]
000052  eb002707          ADD      r7,r0,r7,LSL #8
;;;518    	
;;;519    	canRxId = ptrDeal[offset ++];//卡路宝ID
000056  4620              MOV      r0,r4
000058  1c61              ADDS     r1,r4,#1
00005a  b2cc              UXTB     r4,r1
00005c  f816a000          LDRB     r10,[r6,r0]
;;;520    	canRxId = (canRxId<<8) + ptrDeal[offset++];
000060  4620              MOV      r0,r4
000062  1c61              ADDS     r1,r4,#1
000064  b2cc              UXTB     r4,r1
000066  5c30              LDRB     r0,[r6,r0]
000068  eb002a0a          ADD      r10,r0,r10,LSL #8
;;;521    	canRxId = (canRxId<<8) + ptrDeal[offset++];
00006c  4620              MOV      r0,r4
00006e  1c61              ADDS     r1,r4,#1
000070  b2cc              UXTB     r4,r1
000072  5c30              LDRB     r0,[r6,r0]
000074  eb002a0a          ADD      r10,r0,r10,LSL #8
;;;522    	canRxId = (canRxId<<8) + ptrDeal[offset++];
000078  4620              MOV      r0,r4
00007a  1c61              ADDS     r1,r4,#1
00007c  b2cc              UXTB     r4,r1
00007e  5c30              LDRB     r0,[r6,r0]
000080  eb002a0a          ADD      r10,r0,r10,LSL #8
;;;523    	
;;;524    	canTxId = ptrDeal[offset ++];//ECU ID 
000084  4620              MOV      r0,r4
000086  1c61              ADDS     r1,r4,#1
000088  b2cc              UXTB     r4,r1
00008a  f816b000          LDRB     r11,[r6,r0]
;;;525    	canTxId = (canTxId<<8) + ptrDeal[offset++];
00008e  4620              MOV      r0,r4
000090  1c61              ADDS     r1,r4,#1
000092  b2cc              UXTB     r4,r1
000094  5c30              LDRB     r0,[r6,r0]
000096  eb002b0b          ADD      r11,r0,r11,LSL #8
;;;526    	canTxId = (canTxId<<8) + ptrDeal[offset++];
00009a  4620              MOV      r0,r4
00009c  1c61              ADDS     r1,r4,#1
00009e  b2cc              UXTB     r4,r1
0000a0  5c30              LDRB     r0,[r6,r0]
0000a2  eb002b0b          ADD      r11,r0,r11,LSL #8
;;;527    	canTxId = (canTxId<<8) + ptrDeal[offset++];
0000a6  4620              MOV      r0,r4
0000a8  1c61              ADDS     r1,r4,#1
0000aa  b2cc              UXTB     r4,r1
0000ac  5c30              LDRB     r0,[r6,r0]
0000ae  eb002b0b          ADD      r11,r0,r11,LSL #8
;;;528    	
;;;529    	memcpy(pidVerCmd,&ptrDeal[offset],8);//要测试的 PID 指令
0000b2  1930              ADDS     r0,r6,r4
0000b4  6801              LDR      r1,[r0,#0]
0000b6  6029              STR      r1,[r5,#0]
0000b8  6840              LDR      r0,[r0,#4]
0000ba  6068              STR      r0,[r5,#4]
;;;530    	
;;;531    	varOperation.pidTset = 1;
0000bc  2001              MOVS     r0,#1
0000be  49b1              LDR      r1,|L2.900|
0000c0  f8810093          STRB     r0,[r1,#0x93]
;;;532    	
;;;533    	CAN_DeInit(CAN1);  
0000c4  48b0              LDR      r0,|L2.904|
0000c6  f7fffffe          BL       CAN_DeInit
;;;534    	CAN_StructInit(&CAN_InitStructure);
0000ca  a801              ADD      r0,sp,#4
0000cc  f7fffffe          BL       CAN_StructInit
;;;535    	CAN1_BaudSet(canDataConfig.canBaud);  //先用flash中的CAN配置进行测试
0000d0  49ae              LDR      r1,|L2.908|
0000d2  7c88              LDRB     r0,[r1,#0x12]  ; canDataConfig
0000d4  f7fffffe          BL       CAN1_BaudSet
;;;536    	CAN1_SetFilter(canRxId ,CAN_ID_EXT); 
0000d8  2104              MOVS     r1,#4
0000da  4650              MOV      r0,r10
0000dc  f7fffffe          BL       CAN1_SetFilter
;;;537    	CAN_ITConfig(CAN1,CAN_IT_FMP1,ENABLE);//重置CAN滤波器
0000e0  2201              MOVS     r2,#1
0000e2  2110              MOVS     r1,#0x10
0000e4  48a8              LDR      r0,|L2.904|
0000e6  f7fffffe          BL       CAN_ITConfig
;;;538    	
;;;539    	for(i = 0;i < 200;i ++)//清空消息队列
0000ea  bf00              NOP      
0000ec  e011              B        |L2.274|
                  |L2.238|
;;;540    	{
;;;541    		CAN1_RxMsg = OSQPend(canRecieveQ,40,&err);
0000ee  aa05              ADD      r2,sp,#0x14
0000f0  2128              MOVS     r1,#0x28
0000f2  48a7              LDR      r0,|L2.912|
0000f4  6800              LDR      r0,[r0,#0]  ; canRecieveQ
0000f6  f7fffffe          BL       OSQPend
0000fa  4680              MOV      r8,r0
;;;542    		if(err != OS_ERR_NONE)//消息队列没数据了
0000fc  f89d0014          LDRB     r0,[sp,#0x14]
000100  b100              CBZ      r0,|L2.260|
;;;543    			break;
000102  e009              B        |L2.280|
                  |L2.260|
;;;544    		Mem_free(CAN1_RxMsg);
000104  4640              MOV      r0,r8
000106  f7fffffe          BL       Mem_free
00010a  f1090001          ADD      r0,r9,#1              ;539
00010e  f00009ff          AND      r9,r0,#0xff           ;539
                  |L2.274|
000112  f1b90fc8          CMP      r9,#0xc8              ;539
000116  dbea              BLT      |L2.238|
                  |L2.280|
000118  bf00              NOP                            ;543
;;;545    	}
;;;546    	dataToSend.canId = canTxId;
00011a  489e              LDR      r0,|L2.916|
00011c  f8c0b000          STR      r11,[r0,#0]  ; dataToSend
;;;547    	dataToSend.pdat  = pidVerCmd;
000120  6085              STR      r5,[r0,#8]  ; dataToSend
;;;548    	OBD_CAN_SendData(dataToSend.canId,CAN_ID_EXT,dataToSend.pdat);//发送PID指令
000122  4601              MOV      r1,r0
000124  688a              LDR      r2,[r1,#8]  ; dataToSend
000126  6808              LDR      r0,[r1,#0]  ; dataToSend
000128  2104              MOVS     r1,#4
00012a  f7fffffe          BL       OBD_CAN_SendData
;;;549    
;;;550    	CAN1_RxMsg = OSQPend(canRecieveQ,500,&err); // 接收到OBD回复
00012e  aa05              ADD      r2,sp,#0x14
000130  f44f71fa          MOV      r1,#0x1f4
000134  4896              LDR      r0,|L2.912|
000136  6800              LDR      r0,[r0,#0]  ; canRecieveQ
000138  f7fffffe          BL       OSQPend
00013c  4680              MOV      r8,r0
;;;551    	if(err == OS_ERR_NONE)
00013e  f89d0014          LDRB     r0,[sp,#0x14]
000142  2800              CMP      r0,#0
000144  d179              BNE      |L2.570|
;;;552    	{
;;;553    		if(CAN1_RxMsg->Data[0] == 0x10)     // 多包处理
000146  f898000b          LDRB     r0,[r8,#0xb]
00014a  2810              CMP      r0,#0x10
00014c  d177              BNE      |L2.574|
;;;554    		{
;;;555    			pidVerCmd = Mem_malloc(CAN1_RxMsg->Data[1] + 15);// 申请的内存块足够长
00014e  f898100c          LDRB     r1,[r8,#0xc]
000152  f101000f          ADD      r0,r1,#0xf
000156  f7fffffe          BL       Mem_malloc
00015a  4605              MOV      r5,r0
;;;556    			if(pidVerCmd != NULL)
00015c  2d00              CMP      r5,#0
00015e  d06b              BEQ      |L2.568|
;;;557    			{
;;;558    				pidVerCmd[0] = CAN1_RxMsg -> Data[1] + 8;
000160  f898000c          LDRB     r0,[r8,#0xc]
000164  3008              ADDS     r0,r0,#8
000166  7028              STRB     r0,[r5,#0]
;;;559    				pidVerCmd[1] = 0x50;
000168  2050              MOVS     r0,#0x50
00016a  7068              STRB     r0,[r5,#1]
;;;560    				pidVerCmd[2] = 0x17;
00016c  2017              MOVS     r0,#0x17
00016e  70a8              STRB     r0,[r5,#2]
;;;561    				
;;;562    				pidVerCmd[3] = (flowId>>24) & 0xFF;//指令流水号
000170  0e38              LSRS     r0,r7,#24
000172  70e8              STRB     r0,[r5,#3]
;;;563    				pidVerCmd[4] = (flowId>>16) & 0xFF;
000174  0c38              LSRS     r0,r7,#16
000176  7128              STRB     r0,[r5,#4]
;;;564    				pidVerCmd[5] = (flowId>>8)  & 0xFF;
000178  0a38              LSRS     r0,r7,#8
00017a  7168              STRB     r0,[r5,#5]
;;;565    				pidVerCmd[6] = (flowId>>0)  & 0xFF;
00017c  71af              STRB     r7,[r5,#6]
;;;566    				
;;;567    				pidVerCmd[7] = CAN1_RxMsg->Data[1];//收到的数据长度
00017e  f898000c          LDRB     r0,[r8,#0xc]
000182  71e8              STRB     r0,[r5,#7]
;;;568    				
;;;569    				memcpy(&pidVerCmd[8],&CAN1_RxMsg->Data[2],6);
000184  f8d8100d          LDR      r1,[r8,#0xd]
000188  60a9              STR      r1,[r5,#8]
00018a  f8b80011          LDRH     r0,[r8,#0x11]
00018e  81a8              STRH     r0,[r5,#0xc]
;;;570    				cmdManyPackNum = (CAN1_RxMsg->Data[1] - 6) % 7 == 0? (CAN1_RxMsg->Data[1] - 6)/7 : (CAN1_RxMsg->Data[1] - 6)/7 + 1;
000190  f898000c          LDRB     r0,[r8,#0xc]
000194  1f80              SUBS     r0,r0,#6
000196  2107              MOVS     r1,#7
000198  fb90f2f1          SDIV     r2,r0,r1
00019c  fb010012          MLS      r0,r1,r2,r0
0001a0  b928              CBNZ     r0,|L2.430|
0001a2  f898000c          LDRB     r0,[r8,#0xc]
0001a6  1f80              SUBS     r0,r0,#6
0001a8  fb90f0f1          SDIV     r0,r0,r1
0001ac  e006              B        |L2.444|
                  |L2.430|
0001ae  f898000c          LDRB     r0,[r8,#0xc]
0001b2  1f80              SUBS     r0,r0,#6
0001b4  2107              MOVS     r1,#7
0001b6  fb90f0f1          SDIV     r0,r0,r1
0001ba  1c40              ADDS     r0,r0,#1
                  |L2.444|
0001bc  b2c0              UXTB     r0,r0
0001be  9004              STR      r0,[sp,#0x10]
;;;571    				Mem_free(CAN1_RxMsg);
0001c0  4640              MOV      r0,r8
0001c2  f7fffffe          BL       Mem_free
;;;572    				dataToSend.pdat = pidManyBag;//发送 0x30 请求接下来的多包
0001c6  4874              LDR      r0,|L2.920|
0001c8  4972              LDR      r1,|L2.916|
0001ca  6088              STR      r0,[r1,#8]  ; dataToSend
;;;573    				OBD_CAN_SendData(dataToSend.canId,dataToSend.ide,dataToSend.pdat);
0001cc  460b              MOV      r3,r1
0001ce  689a              LDR      r2,[r3,#8]  ; dataToSend
0001d0  6859              LDR      r1,[r3,#4]  ; dataToSend
0001d2  6818              LDR      r0,[r3,#0]  ; dataToSend
0001d4  f7fffffe          BL       OBD_CAN_SendData
;;;574    				for(i=0;i<cmdManyPackNum;i++)
0001d8  f04f0900          MOV      r9,#0
0001dc  e01f              B        |L2.542|
                  |L2.478|
;;;575    				{
;;;576    					CAN1_RxMsg = OSQPend(canRecieveQ,25,&err);// 接收多包
0001de  aa05              ADD      r2,sp,#0x14
0001e0  2119              MOVS     r1,#0x19
0001e2  486b              LDR      r0,|L2.912|
0001e4  6800              LDR      r0,[r0,#0]  ; canRecieveQ
0001e6  f7fffffe          BL       OSQPend
0001ea  4680              MOV      r8,r0
;;;577    					if(err == OS_ERR_NONE)
0001ec  f89d0014          LDRB     r0,[sp,#0x14]
0001f0  b980              CBNZ     r0,|L2.532|
;;;578    					{
;;;579    						memcpy(&pidVerCmd[7*i + 14],&CAN1_RxMsg->Data[1],7);
0001f2  ebc900c9          RSB      r0,r9,r9,LSL #3
0001f6  300e              ADDS     r0,r0,#0xe
0001f8  1941              ADDS     r1,r0,r5
0001fa  f8d8200c          LDR      r2,[r8,#0xc]
0001fe  600a              STR      r2,[r1,#0]
000200  f8b82010          LDRH     r2,[r8,#0x10]
000204  808a              STRH     r2,[r1,#4]
000206  f8980012          LDRB     r0,[r8,#0x12]
00020a  7188              STRB     r0,[r1,#6]
;;;580    						Mem_free(CAN1_RxMsg);
00020c  4640              MOV      r0,r8
00020e  f7fffffe          BL       Mem_free
000212  e000              B        |L2.534|
                  |L2.532|
;;;581    					}
;;;582    					else 
;;;583    						break;
000214  e006              B        |L2.548|
                  |L2.534|
000216  f1090001          ADD      r0,r9,#1              ;574
00021a  f00009ff          AND      r9,r0,#0xff           ;574
                  |L2.542|
00021e  9804              LDR      r0,[sp,#0x10]         ;574
000220  4581              CMP      r9,r0                 ;574
000222  dbdc              BLT      |L2.478|
                  |L2.548|
000224  bf00              NOP      
;;;584    				} 
;;;585    				if(i == cmdManyPackNum)
000226  9804              LDR      r0,[sp,#0x10]
000228  4581              CMP      r9,r0
00022a  d102              BNE      |L2.562|
;;;586    				{
;;;587    					SendPidCmdData(pidVerCmd);
00022c  4628              MOV      r0,r5
00022e  f7fffffe          BL       SendPidCmdData
                  |L2.562|
;;;588    				}
;;;589    				Mem_free(pidVerCmd);
000232  4628              MOV      r0,r5
000234  f7fffffe          BL       Mem_free
                  |L2.568|
000238  e084              B        |L2.836|
                  |L2.570|
00023a  e03b              B        |L2.692|
00023c  e7ff              B        |L2.574|
                  |L2.574|
;;;590    			}
;;;591    		}
;;;592    		else  //单包处理
;;;593    		{
;;;594    			offset = 0;
00023e  2400              MOVS     r4,#0
;;;595    			pidVerCmd = Mem_malloc(16);
000240  2010              MOVS     r0,#0x10
000242  f7fffffe          BL       Mem_malloc
000246  4605              MOV      r5,r0
;;;596    			pidVerCmd[offset++] = 16;
000248  2210              MOVS     r2,#0x10
00024a  4621              MOV      r1,r4
00024c  1c64              ADDS     r4,r4,#1
00024e  546a              STRB     r2,[r5,r1]
;;;597    			pidVerCmd[offset++] = 0x50;
000250  2250              MOVS     r2,#0x50
000252  4621              MOV      r1,r4
000254  1c64              ADDS     r4,r4,#1
000256  546a              STRB     r2,[r5,r1]
;;;598    			pidVerCmd[offset++] = 0x17;
000258  2217              MOVS     r2,#0x17
00025a  4621              MOV      r1,r4
00025c  1c64              ADDS     r4,r4,#1
00025e  546a              STRB     r2,[r5,r1]
;;;599    			
;;;600    			pidVerCmd[offset++] = (flowId>>24) & 0xFF;//指令流水号
000260  0e39              LSRS     r1,r7,#24
000262  4622              MOV      r2,r4
000264  1c64              ADDS     r4,r4,#1
000266  54a9              STRB     r1,[r5,r2]
;;;601    			pidVerCmd[offset++] = (flowId>>16) & 0xFF;
000268  f3c74207          UBFX     r2,r7,#16,#8
00026c  4621              MOV      r1,r4
00026e  1c64              ADDS     r4,r4,#1
000270  546a              STRB     r2,[r5,r1]
;;;602    			pidVerCmd[offset++] = (flowId>>8)  & 0xFF;
000272  f3c72207          UBFX     r2,r7,#8,#8
000276  4621              MOV      r1,r4
000278  1c64              ADDS     r4,r4,#1
00027a  546a              STRB     r2,[r5,r1]
;;;603    			pidVerCmd[offset++] = (flowId>>0)  & 0xFF;
00027c  4621              MOV      r1,r4
00027e  1c64              ADDS     r4,r4,#1
000280  546f              STRB     r7,[r5,r1]
;;;604    			
;;;605    			pidVerCmd[offset++] = 8;//收到的数据长度
000282  2208              MOVS     r2,#8
000284  4620              MOV      r0,r4
000286  1c61              ADDS     r1,r4,#1
000288  b2cc              UXTB     r4,r1
00028a  542a              STRB     r2,[r5,r0]
;;;606    			memcpy(&pidVerCmd[offset++],CAN1_RxMsg->Data,8);
00028c  4620              MOV      r0,r4
00028e  1c61              ADDS     r1,r4,#1
000290  b2cc              UXTB     r4,r1
000292  4428              ADD      r0,r0,r5
000294  f8d8100b          LDR      r1,[r8,#0xb]
000298  6001              STR      r1,[r0,#0]
00029a  f8d8100f          LDR      r1,[r8,#0xf]
00029e  6041              STR      r1,[r0,#4]
;;;607    			SendPidCmdData(pidVerCmd);
0002a0  4628              MOV      r0,r5
0002a2  f7fffffe          BL       SendPidCmdData
;;;608    			Mem_free(pidVerCmd);
0002a6  4628              MOV      r0,r5
0002a8  f7fffffe          BL       Mem_free
;;;609    			Mem_free(CAN1_RxMsg);
0002ac  4640              MOV      r0,r8
0002ae  f7fffffe          BL       Mem_free
0002b2  e047              B        |L2.836|
                  |L2.692|
;;;610    		}
;;;611    	}else//ECU 无回复
;;;612    	{	offset = 0;
0002b4  2400              MOVS     r4,#0
;;;613    		pidVerCmd = Mem_malloc(16);
0002b6  2010              MOVS     r0,#0x10
0002b8  f7fffffe          BL       Mem_malloc
0002bc  4605              MOV      r5,r0
;;;614    		pidVerCmd[offset++] = 13;
0002be  220d              MOVS     r2,#0xd
0002c0  4621              MOV      r1,r4
0002c2  1c64              ADDS     r4,r4,#1
0002c4  546a              STRB     r2,[r5,r1]
;;;615    		pidVerCmd[offset++] = 0x50;
0002c6  2250              MOVS     r2,#0x50
0002c8  4621              MOV      r1,r4
0002ca  1c64              ADDS     r4,r4,#1
0002cc  546a              STRB     r2,[r5,r1]
;;;616    		pidVerCmd[offset++] = 0x17;
0002ce  2217              MOVS     r2,#0x17
0002d0  4621              MOV      r1,r4
0002d2  1c64              ADDS     r4,r4,#1
0002d4  546a              STRB     r2,[r5,r1]
;;;617    		
;;;618    		pidVerCmd[offset++] = (flowId>>24) & 0xFF;//指令流水号
0002d6  0e39              LSRS     r1,r7,#24
0002d8  4622              MOV      r2,r4
0002da  1c64              ADDS     r4,r4,#1
0002dc  54a9              STRB     r1,[r5,r2]
;;;619    		pidVerCmd[offset++] = (flowId>>16) & 0xFF;
0002de  f3c74207          UBFX     r2,r7,#16,#8
0002e2  4621              MOV      r1,r4
0002e4  1c64              ADDS     r4,r4,#1
0002e6  546a              STRB     r2,[r5,r1]
;;;620    		pidVerCmd[offset++] = (flowId>>8)  & 0xFF;
0002e8  f3c72207          UBFX     r2,r7,#8,#8
0002ec  4621              MOV      r1,r4
0002ee  1c64              ADDS     r4,r4,#1
0002f0  546a              STRB     r2,[r5,r1]
;;;621    		pidVerCmd[offset++] = (flowId>>0)  & 0xFF;
0002f2  4621              MOV      r1,r4
0002f4  1c64              ADDS     r4,r4,#1
0002f6  546f              STRB     r7,[r5,r1]
;;;622    		
;;;623    		pidVerCmd[offset++] = 5;//ERROR  -  配置指令错误
0002f8  2205              MOVS     r2,#5
0002fa  4620              MOV      r0,r4
0002fc  1c61              ADDS     r1,r4,#1
0002fe  b2cc              UXTB     r4,r1
000300  542a              STRB     r2,[r5,r0]
;;;624    		pidVerCmd[offset++] = 'E';pidVerCmd[offset++] = 'R';pidVerCmd[offset++] = 'R';
000302  2245              MOVS     r2,#0x45
000304  4620              MOV      r0,r4
000306  1c61              ADDS     r1,r4,#1
000308  b2cc              UXTB     r4,r1
00030a  542a              STRB     r2,[r5,r0]
00030c  2252              MOVS     r2,#0x52
00030e  4620              MOV      r0,r4
000310  1c61              ADDS     r1,r4,#1
000312  b2cc              UXTB     r4,r1
000314  542a              STRB     r2,[r5,r0]
000316  4620              MOV      r0,r4
000318  1c61              ADDS     r1,r4,#1
00031a  b2cc              UXTB     r4,r1
00031c  542a              STRB     r2,[r5,r0]
;;;625    		pidVerCmd[offset++] = 'O';pidVerCmd[offset++] = 'R';
00031e  224f              MOVS     r2,#0x4f
000320  4620              MOV      r0,r4
000322  1c61              ADDS     r1,r4,#1
000324  b2cc              UXTB     r4,r1
000326  542a              STRB     r2,[r5,r0]
000328  2252              MOVS     r2,#0x52
00032a  4621              MOV      r1,r4
00032c  1c60              ADDS     r0,r4,#1
00032e  b2c4              UXTB     r4,r0
000330  546a              STRB     r2,[r5,r1]
;;;626    		SendPidCmdData(pidVerCmd);
000332  4628              MOV      r0,r5
000334  f7fffffe          BL       SendPidCmdData
;;;627    		Mem_free(pidVerCmd);
000338  4628              MOV      r0,r5
00033a  f7fffffe          BL       Mem_free
;;;628    		Mem_free(CAN1_RxMsg);
00033e  4640              MOV      r0,r8
000340  f7fffffe          BL       Mem_free
                  |L2.836|
;;;629    	}
;;;630    	if(varOperation.canTest == 2)
000344  480f              LDR      r0,|L2.900|
000346  f8b00091          LDRH     r0,[r0,#0x91]  ; varOperation
00034a  2802              CMP      r0,#2
00034c  d110              BNE      |L2.880|
;;;631    	{
;;;632    		CAN_DeInit(CAN1);  
00034e  480e              LDR      r0,|L2.904|
000350  f7fffffe          BL       CAN_DeInit
;;;633    		CAN_StructInit(&CAN_InitStructure);
000354  a801              ADD      r0,sp,#4
000356  f7fffffe          BL       CAN_StructInit
;;;634    		CAN1_BaudSet(canDataConfig.canBaud);  //先用flash中的CAN配置进行测试
00035a  490c              LDR      r1,|L2.908|
00035c  7c88              LDRB     r0,[r1,#0x12]  ; canDataConfig
00035e  f7fffffe          BL       CAN1_BaudSet
;;;635    		CAN1_ClearFilter();           
000362  f7fffffe          BL       CAN1_ClearFilter
;;;636    		CAN_ITConfig(CAN1,CAN_IT_FMP1,ENABLE);//重置CAN滤波器
000366  2201              MOVS     r2,#1
000368  2110              MOVS     r1,#0x10
00036a  4807              LDR      r0,|L2.904|
00036c  f7fffffe          BL       CAN_ITConfig
                  |L2.880|
;;;637    	}
;;;638    	varOperation.pidTset = 0;
000370  2000              MOVS     r0,#0
000372  4904              LDR      r1,|L2.900|
000374  f8810093          STRB     r0,[r1,#0x93]
;;;639    	Mem_free(pidVerCmd);
000378  4628              MOV      r0,r5
00037a  f7fffffe          BL       Mem_free
;;;640    }
00037e  b007              ADD      sp,sp,#0x1c
000380  e8bd8ff0          POP      {r4-r11,pc}
;;;641    
                          ENDP

                  |L2.900|
                          DCD      varOperation
                  |L2.904|
                          DCD      0x40006400
                  |L2.908|
                          DCD      canDataConfig
                  |L2.912|
                          DCD      canRecieveQ
                  |L2.916|
                          DCD      dataToSend
                  |L2.920|
                          DCD      pidManyBag

                          AREA ||i.ConfigUpdata||, CODE, READONLY, ALIGN=2

                  ConfigUpdata PROC
;;;333    }
;;;334    static void ConfigUpdata(uint8_t* ptrDeal )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;335    {
000004  4605              MOV      r5,r0
;;;336    	uint8_t  temp;
;;;337    	uint16_t frameLen;
;;;338    	uint16_t cmdId;
;;;339    	
;;;340    	uint16_t i = 0,offset = 0;
000006  2400              MOVS     r4,#0
000008  2600              MOVS     r6,#0
;;;341        static uint16_t currentNum = 0;//发送下一个配置请求包
;;;342    	static uint16_t frameIndex = 0;
;;;343    	static uint8_t  pidPackNum = 0;//PID 总包数
;;;344    	static uint32_t addrSavePid = 0;
;;;345    		
;;;346    	cmdId     = ptrDeal[3];
00000a  78ef              LDRB     r7,[r5,#3]
;;;347    	cmdId     = (cmdId << 8) + ptrDeal[4];
00000c  7928              LDRB     r0,[r5,#4]
00000e  eb002007          ADD      r0,r0,r7,LSL #8
000012  b287              UXTH     r7,r0
;;;348    	if(cmdId == 0x4000)
000014  f5b74f80          CMP      r7,#0x4000
000018  d17e              BNE      |L3.280|
;;;349    	{
;;;350    		offset = 5;
00001a  2605              MOVS     r6,#5
;;;351    		varOperation.busType   = ptrDeal[offset++];//总线类型  CAN总线还是K线
00001c  4631              MOV      r1,r6
00001e  1c76              ADDS     r6,r6,#1
000020  5c68              LDRB     r0,[r5,r1]
000022  49e7              LDR      r1,|L3.960|
000024  f8810086          STRB     r0,[r1,#0x86]
;;;352    		varOperation.canIdType = ptrDeal[offset++];//CAN ID类型，扩展帧还是标准帧
000028  4631              MOV      r1,r6
00002a  1c76              ADDS     r6,r6,#1
00002c  5c68              LDRB     r0,[r5,r1]
00002e  49e4              LDR      r1,|L3.960|
000030  f8810087          STRB     r0,[r1,#0x87]
;;;353    		
;;;354    		varOperation.canRxId = ptrDeal[offset++];  //卡路宝 CAN 接收ID
000034  4631              MOV      r1,r6
000036  1c76              ADDS     r6,r6,#1
000038  5c68              LDRB     r0,[r5,r1]
00003a  49e1              LDR      r1,|L3.960|
00003c  f8c1008c          STR      r0,[r1,#0x8c]  ; varOperation
;;;355    		varOperation.canRxId = (varOperation.canRxId << 8) + ptrDeal[offset++];
000040  4631              MOV      r1,r6
000042  1c76              ADDS     r6,r6,#1
000044  5c68              LDRB     r0,[r5,r1]
000046  49de              LDR      r1,|L3.960|
000048  f8d1108c          LDR      r1,[r1,#0x8c]  ; varOperation
00004c  eb002001          ADD      r0,r0,r1,LSL #8
000050  49db              LDR      r1,|L3.960|
000052  f8c1008c          STR      r0,[r1,#0x8c]  ; varOperation
;;;356    		varOperation.canRxId = (varOperation.canRxId << 8) + ptrDeal[offset++];
000056  4631              MOV      r1,r6
000058  1c76              ADDS     r6,r6,#1
00005a  5c68              LDRB     r0,[r5,r1]
00005c  49d8              LDR      r1,|L3.960|
00005e  f8d1108c          LDR      r1,[r1,#0x8c]  ; varOperation
000062  eb002001          ADD      r0,r0,r1,LSL #8
000066  49d6              LDR      r1,|L3.960|
000068  f8c1008c          STR      r0,[r1,#0x8c]  ; varOperation
;;;357    		varOperation.canRxId = (varOperation.canRxId << 8) + ptrDeal[offset++];
00006c  4631              MOV      r1,r6
00006e  1c76              ADDS     r6,r6,#1
000070  5c68              LDRB     r0,[r5,r1]
000072  49d3              LDR      r1,|L3.960|
000074  f8d1108c          LDR      r1,[r1,#0x8c]  ; varOperation
000078  eb002001          ADD      r0,r0,r1,LSL #8
00007c  49d0              LDR      r1,|L3.960|
00007e  f8c1008c          STR      r0,[r1,#0x8c]  ; varOperation
;;;358    		
;;;359    		varOperation.canTxId = ptrDeal[offset++];  //卡路宝 CAN 发送ID
000082  4631              MOV      r1,r6
000084  1c76              ADDS     r6,r6,#1
000086  5c68              LDRB     r0,[r5,r1]
000088  49cd              LDR      r1,|L3.960|
00008a  f8c10088          STR      r0,[r1,#0x88]  ; varOperation
;;;360    		varOperation.canTxId = (varOperation.canTxId << 8) + ptrDeal[offset++];
00008e  4631              MOV      r1,r6
000090  1c76              ADDS     r6,r6,#1
000092  5c68              LDRB     r0,[r5,r1]
000094  49ca              LDR      r1,|L3.960|
000096  f8d11088          LDR      r1,[r1,#0x88]  ; varOperation
00009a  eb002001          ADD      r0,r0,r1,LSL #8
00009e  49c8              LDR      r1,|L3.960|
0000a0  f8c10088          STR      r0,[r1,#0x88]  ; varOperation
;;;361    		varOperation.canTxId = (varOperation.canTxId << 8) + ptrDeal[offset++];
0000a4  4631              MOV      r1,r6
0000a6  1c76              ADDS     r6,r6,#1
0000a8  5c68              LDRB     r0,[r5,r1]
0000aa  49c5              LDR      r1,|L3.960|
0000ac  f8d11088          LDR      r1,[r1,#0x88]  ; varOperation
0000b0  eb002001          ADD      r0,r0,r1,LSL #8
0000b4  49c2              LDR      r1,|L3.960|
0000b6  f8c10088          STR      r0,[r1,#0x88]  ; varOperation
;;;362    		varOperation.canTxId = (varOperation.canTxId << 8) + ptrDeal[offset++];
0000ba  4631              MOV      r1,r6
0000bc  1c76              ADDS     r6,r6,#1
0000be  5c68              LDRB     r0,[r5,r1]
0000c0  49bf              LDR      r1,|L3.960|
0000c2  f8d11088          LDR      r1,[r1,#0x88]  ; varOperation
0000c6  eb002001          ADD      r0,r0,r1,LSL #8
0000ca  49bd              LDR      r1,|L3.960|
0000cc  f8c10088          STR      r0,[r1,#0x88]  ; varOperation
;;;363    		
;;;364    		varOperation.newPidNum = ptrDeal[offset++];//新的PID命令个数
0000d0  4631              MOV      r1,r6
0000d2  1c76              ADDS     r6,r6,#1
0000d4  5c68              LDRB     r0,[r5,r1]
0000d6  49ba              LDR      r1,|L3.960|
0000d8  f8a10082          STRH     r0,[r1,#0x82]
;;;365    		varOperation.newPidNum = varOperation.newPidNum * 256 + ptrDeal[offset++];//新的PID命令个数
0000dc  4631              MOV      r1,r6
0000de  1c76              ADDS     r6,r6,#1
0000e0  5c69              LDRB     r1,[r5,r1]
0000e2  48b7              LDR      r0,|L3.960|
0000e4  f8900082          LDRB     r0,[r0,#0x82]  ; varOperation
0000e8  eb012000          ADD      r0,r1,r0,LSL #8
0000ec  49b4              LDR      r1,|L3.960|
0000ee  f8a10082          STRH     r0,[r1,#0x82]
;;;366    		
;;;367    		pidPackNum = ptrDeal[offset++];            //一帧共有多少PID包配置项
0000f2  4631              MOV      r1,r6
0000f4  1c76              ADDS     r6,r6,#1
0000f6  5c68              LDRB     r0,[r5,r1]
0000f8  49b2              LDR      r1,|L3.964|
0000fa  7008              STRB     r0,[r1,#0]
;;;368    		
;;;369    		varOperation.canBaud = (CANBAUD_Enum)ptrDeal[offset++];  //CAN波特率，协议中的 protocolType
0000fc  4630              MOV      r0,r6
0000fe  1c71              ADDS     r1,r6,#1
000100  b28e              UXTH     r6,r1
000102  5c28              LDRB     r0,[r5,r0]
000104  49ae              LDR      r1,|L3.960|
000106  f8810090          STRB     r0,[r1,#0x90]
;;;370    		
;;;371    		memcpy(varOperation.pidVerCmd,&ptrDeal[offset],8);  //提取 读取ECU版本号的指令
00010a  19a9              ADDS     r1,r5,r6
00010c  48ac              LDR      r0,|L3.960|
00010e  3096              ADDS     r0,r0,#0x96
000110  680a              LDR      r2,[r1,#0]
000112  6002              STR      r2,[r0,#0]  ; varOperation
000114  6849              LDR      r1,[r1,#4]
000116  e000              B        |L3.282|
                  |L3.280|
000118  e014              B        |L3.324|
                  |L3.282|
00011a  6041              STR      r1,[r0,#4]  ; varOperation
;;;372    		
;;;373    		currentNum = 0x4001;
00011c  f2440001          MOV      r0,#0x4001
000120  49a9              LDR      r1,|L3.968|
000122  8008              STRH     r0,[r1,#0]
;;;374    		frameIndex = 0;
000124  2000              MOVS     r0,#0
000126  49a9              LDR      r1,|L3.972|
000128  8008              STRH     r0,[r1,#0]
;;;375    		addrSavePid  = PID1CONFIGADDR;
00012a  48a9              LDR      r0,|L3.976|
00012c  49a9              LDR      r1,|L3.980|
00012e  6008              STR      r0,[r1,#0]  ; addrSavePid
;;;376    		memset(updateBuff,0,2048);
000130  f44f6100          MOV      r1,#0x800
000134  48a8              LDR      r0,|L3.984|
000136  f7fffffe          BL       __aeabi_memclr
;;;377    		SendConfigNum(currentNum);//发送第一包程序请求帧0x4001
00013a  48a3              LDR      r0,|L3.968|
00013c  8800              LDRH     r0,[r0,#0]  ; currentNum
00013e  f7fffffe          BL       SendConfigNum
000142  e13b              B        |L3.956|
                  |L3.324|
;;;378    		
;;;379    	}else if(cmdId > 0x4000 && cmdId < 0x5000)
000144  f5b74f80          CMP      r7,#0x4000
000148  dd6f              BLE      |L3.554|
00014a  f5b74fa0          CMP      r7,#0x5000
00014e  da6c              BGE      |L3.554|
;;;380    	{
;;;381    		if(cmdId != currentNum)       //接收到的帧序号，与所申请的帧序号不同，则放弃数据并重新申请
000150  489d              LDR      r0,|L3.968|
000152  8800              LDRH     r0,[r0,#0]  ; currentNum
000154  4287              CMP      r7,r0
000156  d001              BEQ      |L3.348|
                  |L3.344|
;;;382    		{
;;;383    			//SendConfigNum(currentNum);//todo：重新发送？
;;;384    			return;
;;;385    		}
;;;386    		
;;;387    		offset = 2;
;;;388    		frameLen = ptrDeal[offset++] - 3;
;;;389    		cmdId    = ptrDeal[offset++];
;;;390    		cmdId    = (cmdId << 8) + ptrDeal[offset++]; 
;;;391    		memcpy(&updateBuff[frameIndex],&ptrDeal[offset],frameLen);
;;;392    		frameIndex += frameLen;
;;;393    		if(((cmdId - 0x4000) % 11 == 0)&&((cmdId - pidPackNum) != 0x4000))//2K 存110个PID，一个PID占17byte
;;;394    		{
;;;395    			for(i = 0;i < frameIndex;i += 17)      //更改 指令发送周期 的字节序
;;;396    			{
;;;397    				temp            = updateBuff[i];
;;;398    				updateBuff[i]   = updateBuff[i+3];
;;;399    				updateBuff[i+3] = temp;
;;;400    				temp            = updateBuff[i+1];
;;;401    				updateBuff[i+1] = updateBuff[i+2];
;;;402    				updateBuff[i+2] = temp;
;;;403    			}
;;;404    			Save2KDataToFlash(updateBuff,addrSavePid,2048);
;;;405    			addrSavePid += 0x800;
;;;406    			frameIndex = 0;
;;;407    			memset(updateBuff,0,2048);
;;;408    			currentNum = cmdId + 1;   
;;;409    			SendConfigNum(currentNum);//请求下一包数据
;;;410    		}
;;;411    		else if((cmdId - pidPackNum) == 0x4000)
;;;412    		{
;;;413    			for(i = 0;i < frameIndex;i += 17)                   //更改 指令发送周期 的字节序
;;;414    			{
;;;415    				temp            = updateBuff[i];
;;;416    				updateBuff[i]   = updateBuff[i+3];
;;;417    				updateBuff[i+3] = temp;
;;;418    				temp            = updateBuff[i+1];
;;;419    				updateBuff[i+1]   = updateBuff[i+2];
;;;420    				updateBuff[i+2] = temp;
;;;421    			}
;;;422    			Save2KDataToFlash(updateBuff,addrSavePid,2048);
;;;423    			addrSavePid = PID2CONFIGADDR;
;;;424    			frameIndex = 0;
;;;425    			memset(updateBuff,0,2048);
;;;426    			SendConfigNum(0x5012);//请求第二个配置文件
;;;427    		}
;;;428    		else  
;;;429    		{
;;;430    			currentNum = cmdId + 1;   
;;;431    			SendConfigNum(currentNum);//请求下一包数据
;;;432    		}
;;;433    	}
;;;434    	else if(cmdId == 0x5012)
;;;435    	{
;;;436    		offset = 2;
;;;437    		frameLen = ptrDeal[offset++] - 3;
;;;438    		
;;;439    		canDataConfig.pidVarNum = frameLen / 14;   //得到上报 ECU 变量的个数
;;;440    		
;;;441    		cmdId    = ptrDeal[offset++];
;;;442    		cmdId    = (cmdId << 8) + ptrDeal[offset++]; 
;;;443    		memcpy(updateBuff,&ptrDeal[offset],frameLen);
;;;444    		frameIndex += frameLen;
;;;445    		
;;;446    		for(i = 0;i < 500;i += 14)      //更改系数、偏移量的字节序
;;;447    		{
;;;448    			temp            = updateBuff[i+6];
;;;449    			updateBuff[i+6] = updateBuff[i+9];
;;;450    			updateBuff[i+9] = temp;
;;;451    			temp            = updateBuff[i+7];
;;;452    			updateBuff[i+7] = updateBuff[i+8];
;;;453    			updateBuff[i+8] = temp;
;;;454    			
;;;455    			temp             = updateBuff[i+10];
;;;456    			updateBuff[i+10] = updateBuff[i+13];
;;;457    			updateBuff[i+13] = temp;
;;;458    			temp             = updateBuff[i+11];
;;;459    			updateBuff[i+11] = updateBuff[i+12];
;;;460    			updateBuff[i+12] = temp;
;;;461    		}
;;;462    		
;;;463    		Save2KDataToFlash(updateBuff,PID2CONFIGADDR,500);//将数据写入第二配置文件区，（flash:0x08061000）
;;;464    		
;;;465    		canDataConfig.pidVersion = varOperation.newPIDVersion;
;;;466    		canDataConfig.pidNum     = varOperation.newPidNum;
;;;467    		
;;;468    		canDataConfig.busType    = varOperation.busType;     //todo:CAN线和K线的切换，后期处理
;;;469    		canDataConfig.canIdType  = varOperation.canIdType;
;;;470    		canDataConfig.canTxId    = varOperation.canTxId;
;;;471    		canDataConfig.canRxId    = varOperation.canRxId;
;;;472    		canDataConfig.canBaud    = varOperation.canBaud;
;;;473    		memcpy(canDataConfig.pidVerCmd,varOperation.pidVerCmd,8);
;;;474    		Save2KDataToFlash((uint8_t *)&canDataConfig,PIDCONFIG,(sizeof(_CANDataConfig)+3)); //保存 CAN 通讯参数
;;;475    		
;;;476    		__disable_fault_irq();                    //重启
;;;477    		NVIC_SystemReset();
;;;478    	}
;;;479    }
000158  e8bd87f0          POP      {r4-r10,pc}
                  |L3.348|
00015c  2602              MOVS     r6,#2                 ;387
00015e  4631              MOV      r1,r6                 ;388
000160  1c76              ADDS     r6,r6,#1              ;388
000162  5c68              LDRB     r0,[r5,r1]            ;388
000164  1ec0              SUBS     r0,r0,#3              ;388
000166  fa1ff980          UXTH     r9,r0                 ;388
00016a  4631              MOV      r1,r6                 ;389
00016c  1c76              ADDS     r6,r6,#1              ;389
00016e  5c6f              LDRB     r7,[r5,r1]            ;389
000170  4631              MOV      r1,r6                 ;390
000172  1c76              ADDS     r6,r6,#1              ;390
000174  5c68              LDRB     r0,[r5,r1]            ;390
000176  eb002007          ADD      r0,r0,r7,LSL #8       ;390
00017a  b287              UXTH     r7,r0                 ;390
00017c  19a9              ADDS     r1,r5,r6              ;391
00017e  4a96              LDR      r2,|L3.984|
000180  4b92              LDR      r3,|L3.972|
000182  881b              LDRH     r3,[r3,#0]            ;391  ; frameIndex
000184  18d0              ADDS     r0,r2,r3              ;391
000186  464a              MOV      r2,r9                 ;391
000188  f7fffffe          BL       __aeabi_memcpy
00018c  488f              LDR      r0,|L3.972|
00018e  8800              LDRH     r0,[r0,#0]            ;392  ; frameIndex
000190  4448              ADD      r0,r0,r9              ;392
000192  498e              LDR      r1,|L3.972|
000194  8008              STRH     r0,[r1,#0]            ;392
000196  f5a74080          SUB      r0,r7,#0x4000         ;393
00019a  210b              MOVS     r1,#0xb               ;393
00019c  fb90f2f1          SDIV     r2,r0,r1              ;393
0001a0  fb010012          MLS      r0,r1,r2,r0           ;393
0001a4  2800              CMP      r0,#0                 ;393
0001a6  d141              BNE      |L3.556|
0001a8  4886              LDR      r0,|L3.964|
0001aa  7800              LDRB     r0,[r0,#0]            ;393  ; pidPackNum
0001ac  1a38              SUBS     r0,r7,r0              ;393
0001ae  f5b04f80          CMP      r0,#0x4000            ;393
0001b2  d03b              BEQ      |L3.556|
0001b4  2400              MOVS     r4,#0                 ;395
0001b6  e017              B        |L3.488|
                  |L3.440|
0001b8  4887              LDR      r0,|L3.984|
0001ba  f8108004          LDRB     r8,[r0,r4]            ;397
0001be  4601              MOV      r1,r0                 ;398
0001c0  1ce0              ADDS     r0,r4,#3              ;398
0001c2  5c08              LDRB     r0,[r1,r0]            ;398
0001c4  5508              STRB     r0,[r1,r4]            ;398
0001c6  1ce0              ADDS     r0,r4,#3              ;399
0001c8  f8018000          STRB     r8,[r1,r0]            ;399
0001cc  1c60              ADDS     r0,r4,#1              ;400
0001ce  f8118000          LDRB     r8,[r1,r0]            ;400
0001d2  1ca0              ADDS     r0,r4,#2              ;401
0001d4  5c09              LDRB     r1,[r1,r0]            ;401
0001d6  4a80              LDR      r2,|L3.984|
0001d8  1c60              ADDS     r0,r4,#1              ;401
0001da  5411              STRB     r1,[r2,r0]            ;401
0001dc  4611              MOV      r1,r2                 ;402
0001de  1ca0              ADDS     r0,r4,#2              ;402
0001e0  f8018000          STRB     r8,[r1,r0]            ;402
0001e4  300f              ADDS     r0,r0,#0xf            ;395
0001e6  b284              UXTH     r4,r0                 ;395
                  |L3.488|
0001e8  4878              LDR      r0,|L3.972|
0001ea  8800              LDRH     r0,[r0,#0]            ;395  ; frameIndex
0001ec  4284              CMP      r4,r0                 ;395
0001ee  dbe3              BLT      |L3.440|
0001f0  f44f6200          MOV      r2,#0x800             ;404
0001f4  4877              LDR      r0,|L3.980|
0001f6  6801              LDR      r1,[r0,#0]            ;404  ; addrSavePid
0001f8  4877              LDR      r0,|L3.984|
0001fa  f7fffffe          BL       Save2KDataToFlash
0001fe  4875              LDR      r0,|L3.980|
000200  6800              LDR      r0,[r0,#0]            ;405  ; addrSavePid
000202  f5006000          ADD      r0,r0,#0x800          ;405
000206  4973              LDR      r1,|L3.980|
000208  6008              STR      r0,[r1,#0]            ;405  ; addrSavePid
00020a  2000              MOVS     r0,#0                 ;406
00020c  496f              LDR      r1,|L3.972|
00020e  8008              STRH     r0,[r1,#0]            ;406
000210  f44f6100          MOV      r1,#0x800             ;407
000214  4870              LDR      r0,|L3.984|
000216  f7fffffe          BL       __aeabi_memclr
00021a  1c78              ADDS     r0,r7,#1              ;408
00021c  496a              LDR      r1,|L3.968|
00021e  8008              STRH     r0,[r1,#0]            ;408
000220  4608              MOV      r0,r1                 ;409
000222  8800              LDRH     r0,[r0,#0]            ;409  ; currentNum
000224  f7fffffe          BL       SendConfigNum
                  |L3.552|
000228  e0c8              B        |L3.956|
                  |L3.554|
00022a  e042              B        |L3.690|
                  |L3.556|
00022c  4865              LDR      r0,|L3.964|
00022e  7800              LDRB     r0,[r0,#0]            ;411  ; pidPackNum
000230  1a38              SUBS     r0,r7,r0              ;411
000232  f5b04f80          CMP      r0,#0x4000            ;411
000236  d134              BNE      |L3.674|
000238  2400              MOVS     r4,#0                 ;413
00023a  e017              B        |L3.620|
                  |L3.572|
00023c  4866              LDR      r0,|L3.984|
00023e  f8108004          LDRB     r8,[r0,r4]            ;415
000242  4601              MOV      r1,r0                 ;416
000244  1ce0              ADDS     r0,r4,#3              ;416
000246  5c08              LDRB     r0,[r1,r0]            ;416
000248  5508              STRB     r0,[r1,r4]            ;416
00024a  1ce0              ADDS     r0,r4,#3              ;417
00024c  f8018000          STRB     r8,[r1,r0]            ;417
000250  1c60              ADDS     r0,r4,#1              ;418
000252  f8118000          LDRB     r8,[r1,r0]            ;418
000256  1ca0              ADDS     r0,r4,#2              ;419
000258  5c09              LDRB     r1,[r1,r0]            ;419
00025a  4a5f              LDR      r2,|L3.984|
00025c  1c60              ADDS     r0,r4,#1              ;419
00025e  5411              STRB     r1,[r2,r0]            ;419
000260  4611              MOV      r1,r2                 ;420
000262  1ca0              ADDS     r0,r4,#2              ;420
000264  f8018000          STRB     r8,[r1,r0]            ;420
000268  300f              ADDS     r0,r0,#0xf            ;413
00026a  b284              UXTH     r4,r0                 ;413
                  |L3.620|
00026c  4857              LDR      r0,|L3.972|
00026e  8800              LDRH     r0,[r0,#0]            ;413  ; frameIndex
000270  4284              CMP      r4,r0                 ;413
000272  dbe3              BLT      |L3.572|
000274  f44f6200          MOV      r2,#0x800             ;422
000278  4856              LDR      r0,|L3.980|
00027a  6801              LDR      r1,[r0,#0]            ;422  ; addrSavePid
00027c  4856              LDR      r0,|L3.984|
00027e  f7fffffe          BL       Save2KDataToFlash
000282  4856              LDR      r0,|L3.988|
000284  4953              LDR      r1,|L3.980|
000286  6008              STR      r0,[r1,#0]            ;423  ; addrSavePid
000288  2000              MOVS     r0,#0                 ;424
00028a  4950              LDR      r1,|L3.972|
00028c  8008              STRH     r0,[r1,#0]            ;424
00028e  f44f6100          MOV      r1,#0x800             ;425
000292  4851              LDR      r0,|L3.984|
000294  f7fffffe          BL       __aeabi_memclr
000298  f2450012          MOV      r0,#0x5012            ;426
00029c  f7fffffe          BL       SendConfigNum
0002a0  e08c              B        |L3.956|
                  |L3.674|
0002a2  1c78              ADDS     r0,r7,#1              ;430
0002a4  4948              LDR      r1,|L3.968|
0002a6  8008              STRH     r0,[r1,#0]            ;430
0002a8  4608              MOV      r0,r1                 ;431
0002aa  8800              LDRH     r0,[r0,#0]            ;431  ; currentNum
0002ac  f7fffffe          BL       SendConfigNum
0002b0  e084              B        |L3.956|
                  |L3.690|
0002b2  f2450012          MOV      r0,#0x5012            ;434
0002b6  4287              CMP      r7,r0                 ;434
0002b8  d1b6              BNE      |L3.552|
0002ba  2602              MOVS     r6,#2                 ;436
0002bc  4631              MOV      r1,r6                 ;437
0002be  1c76              ADDS     r6,r6,#1              ;437
0002c0  5c68              LDRB     r0,[r5,r1]            ;437
0002c2  1ec0              SUBS     r0,r0,#3              ;437
0002c4  fa1ff980          UXTH     r9,r0                 ;437
0002c8  200e              MOVS     r0,#0xe               ;439
0002ca  fb99f0f0          SDIV     r0,r9,r0              ;439
0002ce  4944              LDR      r1,|L3.992|
0002d0  80c8              STRH     r0,[r1,#6]            ;439
0002d2  1c76              ADDS     r6,r6,#1              ;441
0002d4  1c76              ADDS     r6,r6,#1              ;442
0002d6  19a9              ADDS     r1,r5,r6              ;443
0002d8  464a              MOV      r2,r9                 ;443
0002da  483f              LDR      r0,|L3.984|
0002dc  f7fffffe          BL       __aeabi_memcpy
0002e0  483a              LDR      r0,|L3.972|
0002e2  8800              LDRH     r0,[r0,#0]            ;444  ; frameIndex
0002e4  4448              ADD      r0,r0,r9              ;444
0002e6  4939              LDR      r1,|L3.972|
0002e8  8008              STRH     r0,[r1,#0]            ;444
0002ea  2400              MOVS     r4,#0                 ;446
0002ec  e02f              B        |L3.846|
                  |L3.750|
0002ee  493a              LDR      r1,|L3.984|
0002f0  1da0              ADDS     r0,r4,#6              ;448
0002f2  f8118000          LDRB     r8,[r1,r0]            ;448
0002f6  1cc0              ADDS     r0,r0,#3              ;449
0002f8  5c09              LDRB     r1,[r1,r0]            ;449
0002fa  4a37              LDR      r2,|L3.984|
0002fc  1da0              ADDS     r0,r4,#6              ;449
0002fe  5411              STRB     r1,[r2,r0]            ;449
000300  4611              MOV      r1,r2                 ;450
000302  1cc0              ADDS     r0,r0,#3              ;450
000304  f8018000          STRB     r8,[r1,r0]            ;450
000308  1de0              ADDS     r0,r4,#7              ;451
00030a  f8118000          LDRB     r8,[r1,r0]            ;451
00030e  1c40              ADDS     r0,r0,#1              ;452
000310  5c09              LDRB     r1,[r1,r0]            ;452
000312  1de0              ADDS     r0,r4,#7              ;452
000314  5411              STRB     r1,[r2,r0]            ;452
000316  4611              MOV      r1,r2                 ;453
000318  1c40              ADDS     r0,r0,#1              ;453
00031a  f8018000          STRB     r8,[r1,r0]            ;453
00031e  1c80              ADDS     r0,r0,#2              ;455
000320  f8118000          LDRB     r8,[r1,r0]            ;455
000324  1cc0              ADDS     r0,r0,#3              ;456
000326  5c09              LDRB     r1,[r1,r0]            ;456
000328  1ec0              SUBS     r0,r0,#3              ;456
00032a  5411              STRB     r1,[r2,r0]            ;456
00032c  4611              MOV      r1,r2                 ;457
00032e  1cc0              ADDS     r0,r0,#3              ;457
000330  f8018000          STRB     r8,[r1,r0]            ;457
000334  1e80              SUBS     r0,r0,#2              ;458
000336  f8118000          LDRB     r8,[r1,r0]            ;458
00033a  1c40              ADDS     r0,r0,#1              ;459
00033c  5c09              LDRB     r1,[r1,r0]            ;459
00033e  1e40              SUBS     r0,r0,#1              ;459
000340  5411              STRB     r1,[r2,r0]            ;459
000342  4611              MOV      r1,r2                 ;460
000344  1c40              ADDS     r0,r0,#1              ;460
000346  f8018000          STRB     r8,[r1,r0]            ;460
00034a  1c80              ADDS     r0,r0,#2              ;446
00034c  b284              UXTH     r4,r0                 ;446
                  |L3.846|
00034e  f5b47ffa          CMP      r4,#0x1f4             ;446
000352  dbcc              BLT      |L3.750|
000354  f44f72fa          MOV      r2,#0x1f4             ;463
000358  4920              LDR      r1,|L3.988|
00035a  481f              LDR      r0,|L3.984|
00035c  f7fffffe          BL       Save2KDataToFlash
000360  4817              LDR      r0,|L3.960|
000362  f8d0007e          LDR      r0,[r0,#0x7e]         ;465  ; varOperation
000366  491e              LDR      r1,|L3.992|
000368  6008              STR      r0,[r1,#0]            ;465  ; canDataConfig
00036a  4815              LDR      r0,|L3.960|
00036c  f8b00082          LDRH     r0,[r0,#0x82]         ;466  ; varOperation
000370  8088              STRH     r0,[r1,#4]            ;466
000372  4813              LDR      r0,|L3.960|
000374  f8900086          LDRB     r0,[r0,#0x86]         ;468  ; varOperation
000378  7208              STRB     r0,[r1,#8]            ;468
00037a  4811              LDR      r0,|L3.960|
00037c  f8900087          LDRB     r0,[r0,#0x87]         ;469  ; varOperation
000380  7248              STRB     r0,[r1,#9]            ;469
000382  480f              LDR      r0,|L3.960|
000384  f8d00088          LDR      r0,[r0,#0x88]         ;470  ; varOperation
000388  f8c1000a          STR      r0,[r1,#0xa]          ;470  ; canDataConfig
00038c  480c              LDR      r0,|L3.960|
00038e  f8d0008c          LDR      r0,[r0,#0x8c]         ;471  ; varOperation
000392  f8c1000e          STR      r0,[r1,#0xe]          ;471  ; canDataConfig
000396  480a              LDR      r0,|L3.960|
000398  f8900090          LDRB     r0,[r0,#0x90]         ;472  ; varOperation
00039c  7488              STRB     r0,[r1,#0x12]         ;472
00039e  3113              ADDS     r1,r1,#0x13           ;473
0003a0  4807              LDR      r0,|L3.960|
0003a2  3096              ADDS     r0,r0,#0x96           ;473
0003a4  6802              LDR      r2,[r0,#0]            ;473  ; varOperation
0003a6  600a              STR      r2,[r1,#0]            ;473  ; canDataConfig
0003a8  6840              LDR      r0,[r0,#4]            ;473  ; varOperation
0003aa  6048              STR      r0,[r1,#4]            ;473  ; canDataConfig
0003ac  221e              MOVS     r2,#0x1e              ;474
0003ae  490d              LDR      r1,|L3.996|
0003b0  480b              LDR      r0,|L3.992|
0003b2  f7fffffe          BL       Save2KDataToFlash
0003b6  b671              CPSID    f                     ;476
0003b8  f7fffffe          BL       __NVIC_SystemReset
                  |L3.956|
0003bc  bf00              NOP      
0003be  e6cb              B        |L3.344|
;;;480    #include "obd.h"
                          ENDP

                  |L3.960|
                          DCD      varOperation
                  |L3.964|
                          DCD      pidPackNum
                  |L3.968|
                          DCD      |symbol_number.46|
                  |L3.972|
                          DCD      |symbol_number.47|
                  |L3.976|
                          DCD      0x08063000
                  |L3.980|
                          DCD      addrSavePid
                  |L3.984|
                          DCD      updateBuff
                  |L3.988|
                          DCD      0x08061000
                  |L3.992|
                          DCD      canDataConfig
                  |L3.996|
                          DCD      0x08060800

                          AREA ||i.FuelModeChange||, CODE, READONLY, ALIGN=2

                  FuelModeChange PROC
;;;641    
;;;642    static void FuelModeChange(uint8_t* ptrDeal)         //节油、强动力、普通模式 切换
000000  b570              PUSH     {r4-r6,lr}
;;;643    {
000002  4605              MOV      r5,r0
;;;644    	uint8_t* ptrMode;
;;;645    	ptrMode = Mem_malloc(4);
000004  2004              MOVS     r0,#4
000006  f7fffffe          BL       Mem_malloc
00000a  4604              MOV      r4,r0
;;;646    	ptrMode[0] = 4;
00000c  2004              MOVS     r0,#4
00000e  7020              STRB     r0,[r4,#0]
;;;647    	ptrMode[1] = 0x50;
000010  2050              MOVS     r0,#0x50
000012  7060              STRB     r0,[r4,#1]
;;;648    	ptrMode[2] = 0x15;
000014  2015              MOVS     r0,#0x15
000016  70a0              STRB     r0,[r4,#2]
;;;649    	ptrMode[3] = ptrDeal[5];
000018  7968              LDRB     r0,[r5,#5]
00001a  70e0              STRB     r0,[r4,#3]
;;;650    	SendPidCmdData(ptrMode);
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       SendPidCmdData
;;;651    	
;;;652    	varOperation.oilMode = ptrDeal[5];
000022  7968              LDRB     r0,[r5,#5]
000024  4904              LDR      r1,|L4.56|
000026  f8810094          STRB     r0,[r1,#0x94]
;;;653    
;;;654    	Mem_free(ptrMode);
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       Mem_free
;;;655    	Mem_free(ptrDeal);
000030  4628              MOV      r0,r5
000032  f7fffffe          BL       Mem_free
;;;656    }
000036  bd70              POP      {r4-r6,pc}
;;;657    
                          ENDP

                  |L4.56|
                          DCD      varOperation

                          AREA ||i.GetConfigInfo||, CODE, READONLY, ALIGN=2

                  GetConfigInfo PROC
;;;95     }
;;;96     static void GetConfigInfo(void)
000000  b510              PUSH     {r4,lr}
;;;97     {
;;;98     	_CDMADataToSend* otaUpdatSend;
;;;99     	otaUpdatSend = CDMNSendInfoInit(60);//升级请求帧
000002  203c              MOVS     r0,#0x3c
000004  f7fffffe          BL       CDMNSendInfoInit
000008  4604              MOV      r4,r0
;;;100    
;;;101    	otaUpdatSend->data[otaUpdatSend->datLength++] = 11;   //长度
00000a  210b              MOVS     r1,#0xb
00000c  8822              LDRH     r2,[r4,#0]
00000e  1c50              ADDS     r0,r2,#1
000010  8020              STRH     r0,[r4,#0]
000012  6860              LDR      r0,[r4,#4]
000014  5481              STRB     r1,[r0,r2]
;;;102    	otaUpdatSend->data[otaUpdatSend->datLength++] = 0x40;
000016  2140              MOVS     r1,#0x40
000018  8822              LDRH     r2,[r4,#0]
00001a  1c50              ADDS     r0,r2,#1
00001c  8020              STRH     r0,[r4,#0]
00001e  6860              LDR      r0,[r4,#4]
000020  5481              STRB     r1,[r0,r2]
;;;103    	otaUpdatSend->data[otaUpdatSend->datLength++] = 0x00;
000022  2100              MOVS     r1,#0
000024  8822              LDRH     r2,[r4,#0]
000026  1c50              ADDS     r0,r2,#1
000028  8020              STRH     r0,[r4,#0]
00002a  6860              LDR      r0,[r4,#4]
00002c  5481              STRB     r1,[r0,r2]
;;;104    	//当前版本
;;;105    	otaUpdatSend->data[otaUpdatSend->datLength++] = (varOperation.pidVersion >> 24) & 0x00FF; 
00002e  4829              LDR      r0,|L5.212|
000030  f8d0007a          LDR      r0,[r0,#0x7a]  ; varOperation
000034  0e00              LSRS     r0,r0,#24
000036  8822              LDRH     r2,[r4,#0]
000038  1c51              ADDS     r1,r2,#1
00003a  8021              STRH     r1,[r4,#0]
00003c  6861              LDR      r1,[r4,#4]
00003e  5488              STRB     r0,[r1,r2]
;;;106    	otaUpdatSend->data[otaUpdatSend->datLength++] = (varOperation.pidVersion >> 16) & 0x00FF; 
000040  4824              LDR      r0,|L5.212|
000042  f8d0007a          LDR      r0,[r0,#0x7a]  ; varOperation
000046  f3c04107          UBFX     r1,r0,#16,#8
00004a  8822              LDRH     r2,[r4,#0]
00004c  1c50              ADDS     r0,r2,#1
00004e  8020              STRH     r0,[r4,#0]
000050  6860              LDR      r0,[r4,#4]
000052  5481              STRB     r1,[r0,r2]
;;;107    	otaUpdatSend->data[otaUpdatSend->datLength++] = (varOperation.pidVersion >> 8) & 0x00FF;   
000054  481f              LDR      r0,|L5.212|
000056  f8b0007a          LDRH     r0,[r0,#0x7a]  ; varOperation
00005a  f3c02107          UBFX     r1,r0,#8,#8
00005e  8822              LDRH     r2,[r4,#0]
000060  1c50              ADDS     r0,r2,#1
000062  8020              STRH     r0,[r4,#0]
000064  6860              LDR      r0,[r4,#4]
000066  5481              STRB     r1,[r0,r2]
;;;108    	otaUpdatSend->data[otaUpdatSend->datLength++] = varOperation.pidVersion & 0x00FF;
000068  481a              LDR      r0,|L5.212|
00006a  f890107a          LDRB     r1,[r0,#0x7a]  ; varOperation
00006e  8822              LDRH     r2,[r4,#0]
000070  1c50              ADDS     r0,r2,#1
000072  8020              STRH     r0,[r4,#0]
000074  6860              LDR      r0,[r4,#4]
000076  5481              STRB     r1,[r0,r2]
;;;109    	
;;;110    	//请求升级的版本
;;;111    	otaUpdatSend->data[otaUpdatSend->datLength++] = (varOperation.newPIDVersion >> 24) & 0x00FF;
000078  4816              LDR      r0,|L5.212|
00007a  f8d0007e          LDR      r0,[r0,#0x7e]  ; varOperation
00007e  0e00              LSRS     r0,r0,#24
000080  8822              LDRH     r2,[r4,#0]
000082  1c51              ADDS     r1,r2,#1
000084  8021              STRH     r1,[r4,#0]
000086  6861              LDR      r1,[r4,#4]
000088  5488              STRB     r0,[r1,r2]
;;;112    	otaUpdatSend->data[otaUpdatSend->datLength++] = (varOperation.newPIDVersion >> 16) & 0x00FF;
00008a  4812              LDR      r0,|L5.212|
00008c  f8d0007e          LDR      r0,[r0,#0x7e]  ; varOperation
000090  f3c04107          UBFX     r1,r0,#16,#8
000094  8822              LDRH     r2,[r4,#0]
000096  1c50              ADDS     r0,r2,#1
000098  8020              STRH     r0,[r4,#0]
00009a  6860              LDR      r0,[r4,#4]
00009c  5481              STRB     r1,[r0,r2]
;;;113    	otaUpdatSend->data[otaUpdatSend->datLength++] = (varOperation.newPIDVersion >> 8) & 0x00FF;
00009e  480d              LDR      r0,|L5.212|
0000a0  f8b0007e          LDRH     r0,[r0,#0x7e]  ; varOperation
0000a4  f3c02107          UBFX     r1,r0,#8,#8
0000a8  8822              LDRH     r2,[r4,#0]
0000aa  1c50              ADDS     r0,r2,#1
0000ac  8020              STRH     r0,[r4,#0]
0000ae  6860              LDR      r0,[r4,#4]
0000b0  5481              STRB     r1,[r0,r2]
;;;114    	otaUpdatSend->data[otaUpdatSend->datLength++] = varOperation.newPIDVersion & 0x00FF;
0000b2  4808              LDR      r0,|L5.212|
0000b4  f890107e          LDRB     r1,[r0,#0x7e]  ; varOperation
0000b8  8822              LDRH     r2,[r4,#0]
0000ba  1c50              ADDS     r0,r2,#1
0000bc  8020              STRH     r0,[r4,#0]
0000be  6860              LDR      r0,[r4,#4]
0000c0  5481              STRB     r1,[r0,r2]
;;;115    	
;;;116    	CDMASendDataPack(otaUpdatSend);//将请求包进行封包
0000c2  4620              MOV      r0,r4
0000c4  f7fffffe          BL       CDMASendDataPack
;;;117    	
;;;118    	OSQPost(CDMASendQ,otaUpdatSend);
0000c8  4621              MOV      r1,r4
0000ca  4803              LDR      r0,|L5.216|
0000cc  6800              LDR      r0,[r0,#0]  ; CDMASendQ
0000ce  f7fffffe          BL       OSQPost
;;;119    }
0000d2  bd10              POP      {r4,pc}
;;;120    
                          ENDP

                  |L5.212|
                          DCD      varOperation
                  |L5.216|
                          DCD      CDMASendQ

                          AREA ||i.LoginDataSend||, CODE, READONLY, ALIGN=2

                  LoginDataSend PROC
;;;65     //登录报文
;;;66     void LoginDataSend(void)
000000  b570              PUSH     {r4-r6,lr}
;;;67     {
;;;68     	uint8_t err;
;;;69     	uint32_t buff;
;;;70     	_CDMADataToSend* loginData = CDMNSendInfoInit(100);        //发送登录报文
000002  2064              MOVS     r0,#0x64
000004  f7fffffe          BL       CDMNSendInfoInit
000008  4604              MOV      r4,r0
;;;71     	
;;;72     	loginData->data[loginData->datLength++] = 31;
00000a  211f              MOVS     r1,#0x1f
00000c  8822              LDRH     r2,[r4,#0]
00000e  1c50              ADDS     r0,r2,#1
000010  8020              STRH     r0,[r4,#0]
000012  6860              LDR      r0,[r4,#4]
000014  5481              STRB     r1,[r0,r2]
;;;73     	loginData->data[loginData->datLength++] = 0x50;
000016  2150              MOVS     r1,#0x50
000018  8822              LDRH     r2,[r4,#0]
00001a  1c50              ADDS     r0,r2,#1
00001c  8020              STRH     r0,[r4,#0]
00001e  6860              LDR      r0,[r4,#4]
000020  5481              STRB     r1,[r0,r2]
;;;74     	loginData->data[loginData->datLength++] = 0x01;
000022  2101              MOVS     r1,#1
000024  8822              LDRH     r2,[r4,#0]
000026  1c50              ADDS     r0,r2,#1
000028  8020              STRH     r0,[r4,#0]
00002a  6860              LDR      r0,[r4,#4]
00002c  5481              STRB     r1,[r0,r2]
;;;75     	
;;;76     	buff = sysUpdateVar.curSoftVer; 
00002e  481b              LDR      r0,|L6.156|
000030  8845              LDRH     r5,[r0,#2]  ; sysUpdateVar
;;;77     	buff =t_htonl(buff);			//软件固件版本  
000032  4628              MOV      r0,r5
000034  f7fffffe          BL       t_htonl
000038  4605              MOV      r5,r0
;;;78     	memcpy(&loginData->data[loginData->datLength],&buff,4);
00003a  6860              LDR      r0,[r4,#4]
00003c  8821              LDRH     r1,[r4,#0]
00003e  4408              ADD      r0,r0,r1
000040  6005              STR      r5,[r0,#0]
;;;79     	loginData->datLength += 4;
000042  8820              LDRH     r0,[r4,#0]
000044  1d00              ADDS     r0,r0,#4
000046  8020              STRH     r0,[r4,#0]
;;;80     	
;;;81     	buff = t_htonl(canDataConfig.pidVersion);
000048  4915              LDR      r1,|L6.160|
00004a  6808              LDR      r0,[r1,#0]  ; canDataConfig
00004c  f7fffffe          BL       t_htonl
000050  4605              MOV      r5,r0
;;;82     	memcpy(&loginData->data[loginData->datLength],&buff,4);
000052  6860              LDR      r0,[r4,#4]
000054  8821              LDRH     r1,[r4,#0]
000056  4408              ADD      r0,r0,r1
000058  6005              STR      r5,[r0,#0]
;;;83     	loginData->datLength += 4;
00005a  8820              LDRH     r0,[r4,#0]
00005c  1d00              ADDS     r0,r0,#4
00005e  8020              STRH     r0,[r4,#0]
;;;84     	
;;;85     	memcpy(&loginData->data[loginData->datLength],varOperation.iccID,20);
000060  6861              LDR      r1,[r4,#4]
000062  8822              LDRH     r2,[r4,#0]
000064  1888              ADDS     r0,r1,r2
000066  2214              MOVS     r2,#0x14
000068  490e              LDR      r1,|L6.164|
00006a  f7fffffe          BL       __aeabi_memcpy
;;;86     	loginData->datLength += 20;
00006e  8820              LDRH     r0,[r4,#0]
000070  3014              ADDS     r0,r0,#0x14
000072  8020              STRH     r0,[r4,#0]
;;;87     	
;;;88     	CDMASendDataPack(loginData);//对登录报文进行打包（添加帧头、校验码、帧尾）
000074  4620              MOV      r0,r4
000076  f7fffffe          BL       CDMASendDataPack
;;;89     	err = OSQPost(CDMASendQ,loginData);
00007a  4621              MOV      r1,r4
00007c  480a              LDR      r0,|L6.168|
00007e  6800              LDR      r0,[r0,#0]  ; CDMASendQ
000080  f7fffffe          BL       OSQPost
000084  4606              MOV      r6,r0
;;;90     	if(err != OS_ERR_NONE)
000086  b116              CBZ      r6,|L6.142|
;;;91     	{
;;;92     		Mem_free(loginData);
000088  4620              MOV      r0,r4
00008a  f7fffffe          BL       Mem_free
                  |L6.142|
;;;93     	}
;;;94     	varOperation.isLoginDeal = 0;//正在处理登录报文
00008e  2000              MOVS     r0,#0
000090  4904              LDR      r1,|L6.164|
000092  3919              SUBS     r1,r1,#0x19
000094  f8810030          STRB     r0,[r1,#0x30]
;;;95     }
000098  bd70              POP      {r4-r6,pc}
;;;96     static void GetConfigInfo(void)
                          ENDP

00009a  0000              DCW      0x0000
                  |L6.156|
                          DCD      sysUpdateVar
                  |L6.160|
                          DCD      canDataConfig
                  |L6.164|
                          DCD      varOperation+0x19
                  |L6.168|
                          DCD      CDMASendQ

                          AREA ||i.OTA_Updata||, CODE, READONLY, ALIGN=2

                  OTA_Updata PROC
;;;214    uint8_t updateBuff[2048];       //升级用
;;;215    static void OTA_Updata(uint8_t* ptrDeal)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;216    {
000004  4604              MOV      r4,r0
;;;217    	uint16_t cmdId;
;;;218    	uint16_t datLength = 0;
000006  f04f0800          MOV      r8,#0
;;;219    	uint16_t i = 0;
00000a  46c1              MOV      r9,r8
;;;220    	uint8_t  frameNum;           //此次一共接收到128字节的包数
;;;221    	uint8_t  frameLen;           //每一帧的每一小包到底有多少个字节
;;;222    	uint16_t offset;
;;;223    	
;;;224    	static uint16_t currentNum = 0;      //发送下一个请求包
;;;225    	static uint16_t fileCRC    = 0;      //文件CRC校验
;;;226    	static uint32_t flashAddr  = 0;      //地址信息，写2K便自增0x800,向Flash一次写2K字节
;;;227    	static uint8_t  frameIndex = 0;      //要保存的帧索引
;;;228    	
;;;229    	
;;;230    	datLength = ptrDeal[0];
00000c  f8948000          LDRB     r8,[r4,#0]
;;;231    	datLength = (datLength << 8) + ptrDeal[1];
000010  7860              LDRB     r0,[r4,#1]
000012  eb002008          ADD      r0,r0,r8,LSL #8
000016  fa1ff880          UXTH     r8,r0
;;;232    	
;;;233    	cmdId     = ptrDeal[3];
00001a  78e6              LDRB     r6,[r4,#3]
;;;234    	cmdId     = (cmdId << 8) + ptrDeal[4];
00001c  7920              LDRB     r0,[r4,#4]
00001e  eb002006          ADD      r0,r0,r6,LSL #8
000022  b286              UXTH     r6,r0
;;;235    	if(cmdId == 0x8000)
000024  f5b64f00          CMP      r6,#0x8000
000028  d132              BNE      |L7.144|
;;;236    	{
;;;237    		offset = 5;
00002a  2505              MOVS     r5,#5
;;;238    		varOperation.frameNum = ptrDeal[offset++] + 0x80;//得到新程序的128字节的包数
00002c  4629              MOV      r1,r5
00002e  1c6d              ADDS     r5,r5,#1
000030  5c60              LDRB     r0,[r4,r1]
000032  3080              ADDS     r0,r0,#0x80
000034  4981              LDR      r1,|L7.572|
000036  80c8              STRH     r0,[r1,#6]
;;;239    		varOperation.frameNum = (varOperation.frameNum << 8) + ptrDeal[offset++];
000038  4629              MOV      r1,r5
00003a  1c6d              ADDS     r5,r5,#1
00003c  5c60              LDRB     r0,[r4,r1]
00003e  497f              LDR      r1,|L7.572|
000040  7989              LDRB     r1,[r1,#6]  ; varOperation
000042  eb002001          ADD      r0,r0,r1,LSL #8
000046  497d              LDR      r1,|L7.572|
000048  80c8              STRH     r0,[r1,#6]
;;;240    		varOperation.newSoftCRC = ptrDeal[offset++];//得到文件校验码
00004a  4629              MOV      r1,r5
00004c  1c6d              ADDS     r5,r5,#1
00004e  5c60              LDRB     r0,[r4,r1]
000050  497a              LDR      r1,|L7.572|
000052  8088              STRH     r0,[r1,#4]
;;;241    		varOperation.newSoftCRC = (varOperation.newSoftCRC << 8) + ptrDeal[offset++];
000054  4629              MOV      r1,r5
000056  1c6d              ADDS     r5,r5,#1
000058  5c60              LDRB     r0,[r4,r1]
00005a  4978              LDR      r1,|L7.572|
00005c  7909              LDRB     r1,[r1,#4]  ; varOperation
00005e  eb002001          ADD      r0,r0,r1,LSL #8
000062  4976              LDR      r1,|L7.572|
000064  8088              STRH     r0,[r1,#4]
;;;242    		
;;;243    		currentNum = 0x8001;
000066  f2480001          MOV      r0,#0x8001
00006a  4975              LDR      r1,|L7.576|
00006c  8008              STRH     r0,[r1,#0]
;;;244    		fileCRC    = 0;
00006e  2000              MOVS     r0,#0
000070  4974              LDR      r1,|L7.580|
000072  8008              STRH     r0,[r1,#0]
;;;245    		flashAddr  = 0;
000074  4974              LDR      r1,|L7.584|
000076  6008              STR      r0,[r1,#0]  ; flashAddr
;;;246    		frameIndex = 0;
000078  4974              LDR      r1,|L7.588|
00007a  7008              STRB     r0,[r1,#0]
;;;247    		SendFrameNum(currentNum);//发送第一包程序请求帧0x8001
00007c  4870              LDR      r0,|L7.576|
00007e  8800              LDRH     r0,[r0,#0]  ; currentNum
000080  f7fffffe          BL       SendFrameNum
;;;248    		memset(updateBuff,0,2048);
000084  f44f6100          MOV      r1,#0x800
000088  4871              LDR      r0,|L7.592|
00008a  f7fffffe          BL       __aeabi_memclr
                  |L7.142|
00008e  e0d2              B        |L7.566|
                  |L7.144|
;;;249    	}
;;;250    	else if(cmdId>0x8000)        //程序代码
000090  f5b64f00          CMP      r6,#0x8000
000094  ddfb              BLE      |L7.142|
;;;251    	{
;;;252    		if(cmdId != currentNum)  //接收到的帧序号，与所申请的帧序号不同，则放弃数据并重新申请
000096  486a              LDR      r0,|L7.576|
000098  8800              LDRH     r0,[r0,#0]  ; currentNum
00009a  4286              CMP      r6,r0
00009c  d001              BEQ      |L7.162|
                  |L7.158|
;;;253    		{
;;;254    //			SendFrameNum(currentNum);//todo：重新接收数据？
;;;255    			return;
;;;256    		}
;;;257    			
;;;258    		frameNum = (datLength%131) == 0? (datLength/131) : (datLength/131) + 1;//得到此帧数据一共有多少包128字节的程序代码
;;;259    		
;;;260    		offset = 2;
;;;261    		for(i=0;i<frameNum;i++)//
;;;262    		{
;;;263    			frameLen = ptrDeal[offset++] - 3;//实际的小包程序的字节数
;;;264    			cmdId    = ptrDeal[offset++];
;;;265    			cmdId    = (cmdId << 8) + ptrDeal[offset++]; 
;;;266    			memcpy(&updateBuff[frameIndex*128],&ptrDeal[offset],frameLen);
;;;267    			offset += 128;
;;;268    			frameIndex ++;
;;;269    			if((frameIndex >= 16) && (cmdId != varOperation.frameNum))
;;;270    			{
;;;271    				frameIndex = 0;
;;;272    				SoftErasePage(flashAddr);
;;;273    				SoftProgramUpdate(flashAddr,updateBuff,2048);
;;;274    				//计算CRC校验
;;;275    				fileCRC = CRC_ComputeFile(fileCRC,updateBuff,2048);
;;;276    				memset(updateBuff,0,2048);//清空数据区
;;;277    				flashAddr += 0x800;
;;;278    			}
;;;279    			else if(cmdId == varOperation.frameNum)
;;;280    			{
;;;281    				SoftErasePage(flashAddr);
;;;282    				SoftProgramUpdate(flashAddr,updateBuff,((frameIndex - 1)*128 + frameLen));
;;;283    				//计算CRC校验
;;;284    				fileCRC = CRC_ComputeFile(fileCRC,updateBuff,((frameIndex - 1)*128 + frameLen));
;;;285    				memset(updateBuff,0,2048);
;;;286    				flashAddr += ((frameIndex - 1)*128 + frameLen);
;;;287    			}
;;;288    		}
;;;289    		if(cmdId == varOperation.frameNum)
;;;290    		{
;;;291    			if(fileCRC != varOperation.newSoftCRC)//CRC校验错误，程序升级失败
;;;292    			{
;;;293    				Mem_free(ptrDeal);
;;;294    				varOperation.isDataFlow     = 0;
;;;295    //				SendFrameNum(0x8000);      //todo:重新升级？
;;;296    				return;	
;;;297    			}
;;;298    			Mem_free(ptrDeal);
;;;299    			sysUpdateVar.isSoftUpdate = 1;      //告诉Sboot,程序需要升级
;;;300    			sysUpdateVar.pageNum      = flashAddr/0x800 + 1;
;;;301    			sysUpdateVar.softByteSize = flashAddr;
;;;302    			sysUpdateVar.newSoftCRC   = fileCRC;
;;;303    			sysUpdateVar.newSoftVer   = varOperation.newSoftVersion;
;;;304    			
;;;305    			SbootParameterSaveToFlash(&sysUpdateVar);//将升级参数保存到Flash中
;;;306    			
;;;307    			__disable_fault_irq();          //重启
;;;308    			NVIC_SystemReset();
;;;309    		}
;;;310    		currentNum = cmdId + 1;
;;;311    		SendFrameNum(currentNum);//请求下一帧数据；
;;;312    	}
;;;313    }
00009e  e8bd87f0          POP      {r4-r10,pc}
                  |L7.162|
0000a2  2083              MOVS     r0,#0x83              ;258
0000a4  fb98f1f0          SDIV     r1,r8,r0              ;258
0000a8  fb008011          MLS      r0,r0,r1,r8           ;258
0000ac  b918              CBNZ     r0,|L7.182|
0000ae  2083              MOVS     r0,#0x83              ;258
0000b0  fb98f0f0          SDIV     r0,r8,r0              ;258
0000b4  e003              B        |L7.190|
                  |L7.182|
0000b6  2083              MOVS     r0,#0x83              ;258
0000b8  fb98f0f0          SDIV     r0,r8,r0              ;258
0000bc  1c40              ADDS     r0,r0,#1              ;258
                  |L7.190|
0000be  f0000aff          AND      r10,r0,#0xff          ;258
0000c2  2502              MOVS     r5,#2                 ;260
0000c4  f04f0900          MOV      r9,#0                 ;261
0000c8  e07d              B        |L7.454|
                  |L7.202|
0000ca  4628              MOV      r0,r5                 ;263
0000cc  1c69              ADDS     r1,r5,#1              ;263
0000ce  b28d              UXTH     r5,r1                 ;263
0000d0  5c20              LDRB     r0,[r4,r0]            ;263
0000d2  1ec0              SUBS     r0,r0,#3              ;263
0000d4  b2c7              UXTB     r7,r0                 ;263
0000d6  4628              MOV      r0,r5                 ;264
0000d8  1c69              ADDS     r1,r5,#1              ;264
0000da  b28d              UXTH     r5,r1                 ;264
0000dc  5c26              LDRB     r6,[r4,r0]            ;264
0000de  4628              MOV      r0,r5                 ;265
0000e0  1c69              ADDS     r1,r5,#1              ;265
0000e2  b28d              UXTH     r5,r1                 ;265
0000e4  5c20              LDRB     r0,[r4,r0]            ;265
0000e6  eb002006          ADD      r0,r0,r6,LSL #8       ;265
0000ea  b286              UXTH     r6,r0                 ;265
0000ec  1961              ADDS     r1,r4,r5              ;266
0000ee  4a57              LDR      r2,|L7.588|
0000f0  7812              LDRB     r2,[r2,#0]            ;266  ; frameIndex
0000f2  4b57              LDR      r3,|L7.592|
0000f4  eb0310c2          ADD      r0,r3,r2,LSL #7       ;266
0000f8  463a              MOV      r2,r7                 ;266
0000fa  f7fffffe          BL       __aeabi_memcpy
0000fe  f1050080          ADD      r0,r5,#0x80           ;267
000102  b285              UXTH     r5,r0                 ;267
000104  4851              LDR      r0,|L7.588|
000106  7800              LDRB     r0,[r0,#0]            ;268  ; frameIndex
000108  1c40              ADDS     r0,r0,#1              ;268
00010a  4950              LDR      r1,|L7.588|
00010c  7008              STRB     r0,[r1,#0]            ;268
00010e  4608              MOV      r0,r1                 ;269
000110  7800              LDRB     r0,[r0,#0]            ;269  ; frameIndex
000112  2810              CMP      r0,#0x10              ;269
000114  db25              BLT      |L7.354|
000116  4849              LDR      r0,|L7.572|
000118  88c0              LDRH     r0,[r0,#6]            ;269  ; varOperation
00011a  42b0              CMP      r0,r6                 ;269
00011c  d021              BEQ      |L7.354|
00011e  2000              MOVS     r0,#0                 ;271
000120  7008              STRB     r0,[r1,#0]            ;271
000122  4849              LDR      r0,|L7.584|
000124  6800              LDR      r0,[r0,#0]            ;272  ; flashAddr
000126  f7fffffe          BL       SoftErasePage
00012a  f44f6200          MOV      r2,#0x800             ;273
00012e  4948              LDR      r1,|L7.592|
000130  4845              LDR      r0,|L7.584|
000132  6800              LDR      r0,[r0,#0]            ;273  ; flashAddr
000134  f7fffffe          BL       SoftProgramUpdate
000138  f44f6200          MOV      r2,#0x800             ;275
00013c  4944              LDR      r1,|L7.592|
00013e  4841              LDR      r0,|L7.580|
000140  8800              LDRH     r0,[r0,#0]            ;275  ; fileCRC
000142  f7fffffe          BL       CRC_ComputeFile
000146  493f              LDR      r1,|L7.580|
000148  8008              STRH     r0,[r1,#0]            ;275
00014a  f44f6100          MOV      r1,#0x800             ;276
00014e  4840              LDR      r0,|L7.592|
000150  f7fffffe          BL       __aeabi_memclr
000154  483c              LDR      r0,|L7.584|
000156  6800              LDR      r0,[r0,#0]            ;277  ; flashAddr
000158  f5006000          ADD      r0,r0,#0x800          ;277
00015c  493a              LDR      r1,|L7.584|
00015e  6008              STR      r0,[r1,#0]            ;277  ; flashAddr
000160  e02d              B        |L7.446|
                  |L7.354|
000162  4836              LDR      r0,|L7.572|
000164  88c0              LDRH     r0,[r0,#6]            ;279  ; varOperation
000166  42b0              CMP      r0,r6                 ;279
000168  d129              BNE      |L7.446|
00016a  4837              LDR      r0,|L7.584|
00016c  6800              LDR      r0,[r0,#0]            ;281  ; flashAddr
00016e  f7fffffe          BL       SoftErasePage
000172  4836              LDR      r0,|L7.588|
000174  7800              LDRB     r0,[r0,#0]            ;282  ; frameIndex
000176  1e40              SUBS     r0,r0,#1              ;282
000178  eb0710c0          ADD      r0,r7,r0,LSL #7       ;282
00017c  b282              UXTH     r2,r0                 ;282
00017e  4934              LDR      r1,|L7.592|
000180  4831              LDR      r0,|L7.584|
000182  6800              LDR      r0,[r0,#0]            ;282  ; flashAddr
000184  f7fffffe          BL       SoftProgramUpdate
000188  4830              LDR      r0,|L7.588|
00018a  7800              LDRB     r0,[r0,#0]            ;284  ; frameIndex
00018c  1e40              SUBS     r0,r0,#1              ;284
00018e  eb0712c0          ADD      r2,r7,r0,LSL #7       ;284
000192  492f              LDR      r1,|L7.592|
000194  482b              LDR      r0,|L7.580|
000196  8800              LDRH     r0,[r0,#0]            ;284  ; fileCRC
000198  f7fffffe          BL       CRC_ComputeFile
00019c  4929              LDR      r1,|L7.580|
00019e  8008              STRH     r0,[r1,#0]            ;284
0001a0  f44f6100          MOV      r1,#0x800             ;285
0001a4  482a              LDR      r0,|L7.592|
0001a6  f7fffffe          BL       __aeabi_memclr
0001aa  4828              LDR      r0,|L7.588|
0001ac  7800              LDRB     r0,[r0,#0]            ;286  ; frameIndex
0001ae  1e40              SUBS     r0,r0,#1              ;286
0001b0  eb0710c0          ADD      r0,r7,r0,LSL #7       ;286
0001b4  4924              LDR      r1,|L7.584|
0001b6  6809              LDR      r1,[r1,#0]            ;286  ; flashAddr
0001b8  4408              ADD      r0,r0,r1              ;286
0001ba  4923              LDR      r1,|L7.584|
0001bc  6008              STR      r0,[r1,#0]            ;286  ; flashAddr
                  |L7.446|
0001be  f1090001          ADD      r0,r9,#1              ;261
0001c2  fa1ff980          UXTH     r9,r0                 ;261
                  |L7.454|
0001c6  45d1              CMP      r9,r10                ;261
0001c8  f6ffaf7f          BLT      |L7.202|
0001cc  481b              LDR      r0,|L7.572|
0001ce  88c0              LDRH     r0,[r0,#6]            ;289  ; varOperation
0001d0  42b0              CMP      r0,r6                 ;289
0001d2  d129              BNE      |L7.552|
0001d4  4819              LDR      r0,|L7.572|
0001d6  8880              LDRH     r0,[r0,#4]            ;291  ; varOperation
0001d8  491a              LDR      r1,|L7.580|
0001da  8809              LDRH     r1,[r1,#0]            ;291  ; fileCRC
0001dc  4288              CMP      r0,r1                 ;291
0001de  d007              BEQ      |L7.496|
0001e0  4620              MOV      r0,r4                 ;293
0001e2  f7fffffe          BL       Mem_free
0001e6  2000              MOVS     r0,#0                 ;294
0001e8  4914              LDR      r1,|L7.572|
0001ea  f881002d          STRB     r0,[r1,#0x2d]         ;294
0001ee  e756              B        |L7.158|
                  |L7.496|
0001f0  4620              MOV      r0,r4                 ;298
0001f2  f7fffffe          BL       Mem_free
0001f6  2001              MOVS     r0,#1                 ;299
0001f8  4916              LDR      r1,|L7.596|
0001fa  7008              STRB     r0,[r1,#0]            ;299
0001fc  4812              LDR      r0,|L7.584|
0001fe  6800              LDR      r0,[r0,#0]            ;300  ; flashAddr
000200  2101              MOVS     r1,#1                 ;300
000202  eb0120d0          ADD      r0,r1,r0,LSR #11      ;300
000206  4913              LDR      r1,|L7.596|
000208  80c8              STRH     r0,[r1,#6]            ;300
00020a  480f              LDR      r0,|L7.584|
00020c  6800              LDR      r0,[r0,#0]            ;301  ; flashAddr
00020e  60c8              STR      r0,[r1,#0xc]          ;301  ; sysUpdateVar
000210  480c              LDR      r0,|L7.580|
000212  8800              LDRH     r0,[r0,#0]            ;302  ; fileCRC
000214  8108              STRH     r0,[r1,#8]            ;302
000216  4809              LDR      r0,|L7.572|
000218  8800              LDRH     r0,[r0,#0]            ;303  ; varOperation
00021a  8088              STRH     r0,[r1,#4]            ;303
00021c  4608              MOV      r0,r1                 ;305
00021e  f7fffffe          BL       SbootParameterSaveToFlash
000222  b671              CPSID    f                     ;307
000224  f7fffffe          BL       __NVIC_SystemReset
                  |L7.552|
000228  1c70              ADDS     r0,r6,#1              ;310
00022a  4905              LDR      r1,|L7.576|
00022c  8008              STRH     r0,[r1,#0]            ;310
00022e  4608              MOV      r0,r1                 ;311
000230  8800              LDRH     r0,[r0,#0]            ;311  ; currentNum
000232  f7fffffe          BL       SendFrameNum
                  |L7.566|
000236  bf00              NOP      
000238  e731              B        |L7.158|
;;;314    
                          ENDP

00023a  0000              DCW      0x0000
                  |L7.572|
                          DCD      varOperation
                  |L7.576|
                          DCD      currentNum
                  |L7.580|
                          DCD      fileCRC
                  |L7.584|
                          DCD      flashAddr
                  |L7.588|
                          DCD      frameIndex
                  |L7.592|
                          DCD      updateBuff
                  |L7.596|
                          DCD      sysUpdateVar

                          AREA ||i.RecvLoginDatDeal||, CODE, READONLY, ALIGN=2

                  RecvLoginDatDeal PROC
;;;120    
;;;121    static void RecvLoginDatDeal(uint8_t* ptr)//对服务器回复的登录报文进行解析
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;122    {
000004  4604              MOV      r4,r0
;;;123    	uint16_t cmdId = 0;
000006  f04f0900          MOV      r9,#0
;;;124    	uint8_t  ipLen = 0;
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
;;;125    	uint32_t ecuId = 0;
00000e  2600              MOVS     r6,#0
;;;126    	uint32_t serverTime  = 0;
000010  2700              MOVS     r7,#0
;;;127    	uint32_t softVersion = 0;
000012  4680              MOV      r8,r0
;;;128    	uint16_t offset = 3;
000014  2503              MOVS     r5,#3
;;;129    	static uint8_t timetemp = 0;
;;;130    	cmdId = ptr[offset++];
000016  4629              MOV      r1,r5
000018  1c6d              ADDS     r5,r5,#1
00001a  f8149001          LDRB     r9,[r4,r1]
;;;131    	cmdId = (cmdId<<8) + ptr[offset++];
00001e  4629              MOV      r1,r5
000020  1c6d              ADDS     r5,r5,#1
000022  5c60              LDRB     r0,[r4,r1]
000024  eb002009          ADD      r0,r0,r9,LSL #8
000028  fa1ff980          UXTH     r9,r0
;;;132    
;;;133    	serverTime = ptr[offset++];     //得到服务器时间
00002c  4629              MOV      r1,r5
00002e  1c6d              ADDS     r5,r5,#1
000030  5c67              LDRB     r7,[r4,r1]
;;;134    	serverTime = (serverTime << 8) + ptr[offset++];
000032  4629              MOV      r1,r5
000034  1c6d              ADDS     r5,r5,#1
000036  5c60              LDRB     r0,[r4,r1]
000038  eb002707          ADD      r7,r0,r7,LSL #8
;;;135    	serverTime = (serverTime << 8) + ptr[offset++];
00003c  4629              MOV      r1,r5
00003e  1c6d              ADDS     r5,r5,#1
000040  5c60              LDRB     r0,[r4,r1]
000042  eb002707          ADD      r7,r0,r7,LSL #8
;;;136    	serverTime = (serverTime << 8) + ptr[offset++];
000046  4629              MOV      r1,r5
000048  1c6d              ADDS     r5,r5,#1
00004a  5c60              LDRB     r0,[r4,r1]
00004c  eb002707          ADD      r7,r0,r7,LSL #8
;;;137    	
;;;138    	if(timetemp == 0)
000050  4851              LDR      r0,|L8.408|
000052  7800              LDRB     r0,[r0,#0]  ; timetemp
000054  b920              CBNZ     r0,|L8.96|
;;;139    	{
;;;140    		carAllRecord.startTime = serverTime; //行程起始时间
000056  4851              LDR      r0,|L8.412|
000058  6007              STR      r7,[r0,#0]  ; carAllRecord
;;;141    		timetemp = 1;
00005a  2001              MOVS     r0,#1
00005c  494e              LDR      r1,|L8.408|
00005e  7008              STRB     r0,[r1,#0]
                  |L8.96|
;;;142    	}
;;;143    	
;;;144    	RTC_Time_Adjust(serverTime);   //登录的时候，跟服务器时间进行校时。
000060  4638              MOV      r0,r7
000062  f7fffffe          BL       RTC_Time_Adjust
;;;145    	
;;;146    	softVersion = ptr[offset++];   //得到软件版本号
000066  4628              MOV      r0,r5
000068  1c69              ADDS     r1,r5,#1
00006a  b28d              UXTH     r5,r1
00006c  f8148000          LDRB     r8,[r4,r0]
;;;147    	softVersion = (softVersion << 8) + ptr[offset++];
000070  4628              MOV      r0,r5
000072  1c69              ADDS     r1,r5,#1
000074  b28d              UXTH     r5,r1
000076  5c20              LDRB     r0,[r4,r0]
000078  eb002808          ADD      r8,r0,r8,LSL #8
;;;148    	softVersion = (softVersion << 8) + ptr[offset++];
00007c  4628              MOV      r0,r5
00007e  1c69              ADDS     r1,r5,#1
000080  b28d              UXTH     r5,r1
000082  5c20              LDRB     r0,[r4,r0]
000084  eb002808          ADD      r8,r0,r8,LSL #8
;;;149    	softVersion = (softVersion << 8) + ptr[offset++];
000088  4628              MOV      r0,r5
00008a  1c69              ADDS     r1,r5,#1
00008c  b28d              UXTH     r5,r1
00008e  5c20              LDRB     r0,[r4,r0]
000090  eb002808          ADD      r8,r0,r8,LSL #8
;;;150    	
;;;151    	ecuId = ptr[offset++];          //得到ECU ID
000094  4628              MOV      r0,r5
000096  1c69              ADDS     r1,r5,#1
000098  b28d              UXTH     r5,r1
00009a  5c26              LDRB     r6,[r4,r0]
;;;152    	ecuId = (ecuId << 8) + ptr[offset++];
00009c  4628              MOV      r0,r5
00009e  1c69              ADDS     r1,r5,#1
0000a0  b28d              UXTH     r5,r1
0000a2  5c20              LDRB     r0,[r4,r0]
0000a4  eb002606          ADD      r6,r0,r6,LSL #8
;;;153    	ecuId = (ecuId << 8) + ptr[offset++];
0000a8  4628              MOV      r0,r5
0000aa  1c69              ADDS     r1,r5,#1
0000ac  b28d              UXTH     r5,r1
0000ae  5c20              LDRB     r0,[r4,r0]
0000b0  eb002606          ADD      r6,r0,r6,LSL #8
;;;154    	ecuId = (ecuId << 8) + ptr[offset++];
0000b4  4628              MOV      r0,r5
0000b6  1c69              ADDS     r1,r5,#1
0000b8  b28d              UXTH     r5,r1
0000ba  5c20              LDRB     r0,[r4,r0]
0000bc  eb002606          ADD      r6,r0,r6,LSL #8
;;;155    	
;;;156    	ipLen = ptr[offset++];              //得到IP长度
0000c0  4628              MOV      r0,r5
0000c2  1c69              ADDS     r1,r5,#1
0000c4  b28d              UXTH     r5,r1
0000c6  5c20              LDRB     r0,[r4,r0]
0000c8  9000              STR      r0,[sp,#0]
;;;157    	memset(varOperation.newIP_Addr,0,18);//清零
0000ca  2112              MOVS     r1,#0x12
0000cc  4834              LDR      r0,|L8.416|
0000ce  f7fffffe          BL       __aeabi_memclr
;;;158    	memcpy(varOperation.newIP_Addr,&ptr[offset],ipLen); //得到IP地址
0000d2  1961              ADDS     r1,r4,r5
0000d4  f89d2000          LDRB     r2,[sp,#0]
0000d8  4831              LDR      r0,|L8.416|
0000da  f7fffffe          BL       __aeabi_memcpy
;;;159    	
;;;160    	varOperation.newIP_Potr = ptr[offset + ipLen];      //得到端口号
0000de  f89d0000          LDRB     r0,[sp,#0]
0000e2  4428              ADD      r0,r0,r5
0000e4  5c20              LDRB     r0,[r4,r0]
0000e6  492e              LDR      r1,|L8.416|
0000e8  3946              SUBS     r1,r1,#0x46
0000ea  f8a10058          STRH     r0,[r1,#0x58]
;;;161    	varOperation.newIP_Potr = (varOperation.newIP_Potr << 8) + ptr[offset + ipLen + 1];
0000ee  f89d0000          LDRB     r0,[sp,#0]
0000f2  4428              ADD      r0,r0,r5
0000f4  1c40              ADDS     r0,r0,#1
0000f6  5c20              LDRB     r0,[r4,r0]
0000f8  f8911058          LDRB     r1,[r1,#0x58]  ; varOperation
0000fc  eb002001          ADD      r0,r0,r1,LSL #8
000100  4927              LDR      r1,|L8.416|
000102  3946              SUBS     r1,r1,#0x46
000104  f8a10058          STRH     r0,[r1,#0x58]
;;;162    	
;;;163    	varOperation.oilMode = ptr[offset + ipLen + 2];
000108  f89d0000          LDRB     r0,[sp,#0]
00010c  4428              ADD      r0,r0,r5
00010e  1c80              ADDS     r0,r0,#2
000110  5c20              LDRB     r0,[r4,r0]
000112  f8810094          STRB     r0,[r1,#0x94]
;;;164    	
;;;165    	if(softVersion != sysUpdateVar.curSoftVer) //先考虑OTA升级
000116  4823              LDR      r0,|L8.420|
000118  8840              LDRH     r0,[r0,#2]  ; sysUpdateVar
00011a  4540              CMP      r0,r8
00011c  d013              BEQ      |L8.326|
;;;166    	{
;;;167    		varOperation.newSoftVersion = softVersion;
00011e  4608              MOV      r0,r1
000120  f8c08000          STR      r8,[r0,#0]  ; varOperation
;;;168    		OSSemPend(sendMsg,100,&ipLen);    //等待200ms  确保CDMA当前没有发送数据
000124  466a              MOV      r2,sp
000126  2164              MOVS     r1,#0x64
000128  481f              LDR      r0,|L8.424|
00012a  6800              LDR      r0,[r0,#0]  ; sendMsg
00012c  f7fffffe          BL       OSSemPend
;;;169    		varOperation.isDataFlow     = 1;  // OTA进行升级 停止数据流，一心只为OTA升级
000130  2001              MOVS     r0,#1
000132  491b              LDR      r1,|L8.416|
000134  3946              SUBS     r1,r1,#0x46
000136  f881002d          STRB     r0,[r1,#0x2d]
;;;170    		sysUpdateVar.isSoftUpdate   = 1;  
00013a  491a              LDR      r1,|L8.420|
00013c  7008              STRB     r0,[r1,#0]
;;;171    		
;;;172    		SendFrameNum(0x8000);             //发送0x8000以请求程序文件大小以及CRC校验
00013e  03c0              LSLS     r0,r0,#15
000140  f7fffffe          BL       SendFrameNum
000144  e026              B        |L8.404|
                  |L8.326|
;;;173    	}
;;;174    	else if(ecuId != canDataConfig.pidVersion && sysUpdateVar.isSoftUpdate ==0)  //再考虑配置文件升级
000146  4819              LDR      r0,|L8.428|
000148  6800              LDR      r0,[r0,#0]  ; canDataConfig
00014a  42b0              CMP      r0,r6
00014c  d014              BEQ      |L8.376|
00014e  4815              LDR      r0,|L8.420|
000150  7800              LDRB     r0,[r0,#0]  ; sysUpdateVar
000152  b988              CBNZ     r0,|L8.376|
;;;175    	{
;;;176    		varOperation.newPIDVersion = ecuId;
000154  4812              LDR      r0,|L8.416|
000156  3846              SUBS     r0,r0,#0x46
000158  f8c0607e          STR      r6,[r0,#0x7e]  ; varOperation
;;;177    		OSSemPend(sendMsg,100,&ipLen);    //等待200ms  确保CDMA当前没有发送数据
00015c  466a              MOV      r2,sp
00015e  2164              MOVS     r1,#0x64
000160  4811              LDR      r0,|L8.424|
000162  6800              LDR      r0,[r0,#0]  ; sendMsg
000164  f7fffffe          BL       OSSemPend
;;;178    		varOperation.isDataFlow     = 1;  //配置文件升级，停止数据流，一心只为配置
000168  2001              MOVS     r0,#1
00016a  490d              LDR      r1,|L8.416|
00016c  3946              SUBS     r1,r1,#0x46
00016e  f881002d          STRB     r0,[r1,#0x2d]
;;;179    		
;;;180    		GetConfigInfo();                  //请求配置文件 - 发送0x4000及版本信息
000172  f7fffffe          BL       GetConfigInfo
000176  e00d              B        |L8.404|
                  |L8.376|
;;;181    	}
;;;182    	else 
;;;183    	{
;;;184    		varOperation.isLoginDeal = 1;  //没有登录报文需要处理
000178  2001              MOVS     r0,#1
00017a  4909              LDR      r1,|L8.416|
00017c  3946              SUBS     r1,r1,#0x46
00017e  f8810030          STRB     r0,[r1,#0x30]
;;;185    		if(OSSemAccept(LoginMes) == 0)
000182  480b              LDR      r0,|L8.432|
000184  6800              LDR      r0,[r0,#0]  ; LoginMes
000186  f7fffffe          BL       OSSemAccept
00018a  b918              CBNZ     r0,|L8.404|
;;;186    			OSSemPost(LoginMes);
00018c  4808              LDR      r0,|L8.432|
00018e  6800              LDR      r0,[r0,#0]  ; LoginMes
000190  f7fffffe          BL       OSSemPost
                  |L8.404|
;;;187    	}
;;;188    	
;;;189    //todo:IP更改，后期会有需要
;;;190    //	isIpEqual = strcmp(varOperation.ipAddr,varOperation.newIP_Addr);//比较IP是否相等  =0 - 相等
;;;191    //	if((varOperation.newIP_Potr != varOperation.ipPotr) || (isIpEqual != 0))//端口号不相等或者IP地址不相等
;;;192    //	{
;;;193    //		memset(varOperation.ipAddr,0,18);//将原始IP清零
;;;194    //		memcpy(varOperation.ipAddr,varOperation.newIP_Addr,18);//新IP
;;;195    //		varOperation.ipPotr = varOperation.newIP_Potr;         //新端口
;;;196    //		varOperation.isDataFlow = 1; //停止数据流
;;;197    //		OSSemPend(sendMsg,0,&ipLen);//等待CDMA发送空闲，不能在其发送数据的时候，重新TCP连接
;;;198    //		
;;;199    //		CDMASendCmd((const uint8_t*)"AT+ZIPCLOSE=0\r","ZIPCLOSE",sizeof("AT+ZIPCLOSE=0\r"));//关闭TCP连接
;;;200    //	}
;;;201    }
000194  e8bd83f8          POP      {r3-r9,pc}
;;;202    static void SendFrameNum(uint16_t frameNum)
                          ENDP

                  |L8.408|
                          DCD      timetemp
                  |L8.412|
                          DCD      carAllRecord
                  |L8.416|
                          DCD      varOperation+0x46
                  |L8.420|
                          DCD      sysUpdateVar
                  |L8.424|
                          DCD      sendMsg
                  |L8.428|
                          DCD      canDataConfig
                  |L8.432|
                          DCD      LoginMes

                          AREA ||i.SendConfigNum||, CODE, READONLY, ALIGN=2

                  SendConfigNum PROC
;;;315    
;;;316    static void SendConfigNum(uint16_t cmd)
000000  b570              PUSH     {r4-r6,lr}
;;;317    {
000002  4605              MOV      r5,r0
;;;318    	_CDMADataToSend* otaUpdatSend;
;;;319    	otaUpdatSend = CDMNSendInfoInit(60);//升级请求帧
000004  203c              MOVS     r0,#0x3c
000006  f7fffffe          BL       CDMNSendInfoInit
00000a  4604              MOV      r4,r0
;;;320    
;;;321    	otaUpdatSend->data[otaUpdatSend->datLength++] = 7;   //长度
00000c  2107              MOVS     r1,#7
00000e  8822              LDRH     r2,[r4,#0]
000010  1c50              ADDS     r0,r2,#1
000012  8020              STRH     r0,[r4,#0]
000014  6860              LDR      r0,[r4,#4]
000016  5481              STRB     r1,[r0,r2]
;;;322    	otaUpdatSend->data[otaUpdatSend->datLength++] = (cmd>>8) &0x00FF;
000018  0a29              LSRS     r1,r5,#8
00001a  8822              LDRH     r2,[r4,#0]
00001c  1c50              ADDS     r0,r2,#1
00001e  8020              STRH     r0,[r4,#0]
000020  6860              LDR      r0,[r4,#4]
000022  5481              STRB     r1,[r0,r2]
;;;323    	otaUpdatSend->data[otaUpdatSend->datLength++] = cmd &0x00FF;
000024  8822              LDRH     r2,[r4,#0]
000026  1c50              ADDS     r0,r2,#1
000028  8020              STRH     r0,[r4,#0]
00002a  6860              LDR      r0,[r4,#4]
00002c  5485              STRB     r5,[r0,r2]
;;;324    	//请求升级的版本
;;;325    	otaUpdatSend->data[otaUpdatSend->datLength++] = (varOperation.newPIDVersion >> 24) & 0x00FF;
00002e  4817              LDR      r0,|L9.140|
000030  f8d0007e          LDR      r0,[r0,#0x7e]  ; varOperation
000034  0e00              LSRS     r0,r0,#24
000036  8822              LDRH     r2,[r4,#0]
000038  1c51              ADDS     r1,r2,#1
00003a  8021              STRH     r1,[r4,#0]
00003c  6861              LDR      r1,[r4,#4]
00003e  5488              STRB     r0,[r1,r2]
;;;326    	otaUpdatSend->data[otaUpdatSend->datLength++] = (varOperation.newPIDVersion >> 16) & 0x00FF;
000040  4812              LDR      r0,|L9.140|
000042  f8d0007e          LDR      r0,[r0,#0x7e]  ; varOperation
000046  f3c04107          UBFX     r1,r0,#16,#8
00004a  8822              LDRH     r2,[r4,#0]
00004c  1c50              ADDS     r0,r2,#1
00004e  8020              STRH     r0,[r4,#0]
000050  6860              LDR      r0,[r4,#4]
000052  5481              STRB     r1,[r0,r2]
;;;327    	otaUpdatSend->data[otaUpdatSend->datLength++] = (varOperation.newPIDVersion >> 8) & 0x00FF;
000054  480d              LDR      r0,|L9.140|
000056  f8b0007e          LDRH     r0,[r0,#0x7e]  ; varOperation
00005a  f3c02107          UBFX     r1,r0,#8,#8
00005e  8822              LDRH     r2,[r4,#0]
000060  1c50              ADDS     r0,r2,#1
000062  8020              STRH     r0,[r4,#0]
000064  6860              LDR      r0,[r4,#4]
000066  5481              STRB     r1,[r0,r2]
;;;328    	otaUpdatSend->data[otaUpdatSend->datLength++] = varOperation.newPIDVersion & 0x00FF;
000068  4808              LDR      r0,|L9.140|
00006a  f890107e          LDRB     r1,[r0,#0x7e]  ; varOperation
00006e  8822              LDRH     r2,[r4,#0]
000070  1c50              ADDS     r0,r2,#1
000072  8020              STRH     r0,[r4,#0]
000074  6860              LDR      r0,[r4,#4]
000076  5481              STRB     r1,[r0,r2]
;;;329    	
;;;330    	CDMASendDataPack(otaUpdatSend);//将请求包进行封包
000078  4620              MOV      r0,r4
00007a  f7fffffe          BL       CDMASendDataPack
;;;331    	
;;;332    	OSQPost(CDMASendQ,otaUpdatSend);
00007e  4621              MOV      r1,r4
000080  4803              LDR      r0,|L9.144|
000082  6800              LDR      r0,[r0,#0]  ; CDMASendQ
000084  f7fffffe          BL       OSQPost
;;;333    }
000088  bd70              POP      {r4-r6,pc}
;;;334    static void ConfigUpdata(uint8_t* ptrDeal )
                          ENDP

00008a  0000              DCW      0x0000
                  |L9.140|
                          DCD      varOperation
                  |L9.144|
                          DCD      CDMASendQ

                          AREA ||i.SendFrameNum||, CODE, READONLY, ALIGN=2

                  SendFrameNum PROC
;;;201    }
;;;202    static void SendFrameNum(uint16_t frameNum)
000000  b570              PUSH     {r4-r6,lr}
;;;203    {
000002  4605              MOV      r5,r0
;;;204    	_CDMADataToSend* otaUpdatSend;
;;;205    	otaUpdatSend = CDMNSendInfoInit(60);//
000004  203c              MOVS     r0,#0x3c
000006  f7fffffe          BL       CDMNSendInfoInit
00000a  4604              MOV      r4,r0
;;;206    	otaUpdatSend->data[otaUpdatSend->datLength++] =  3;   //长度
00000c  2103              MOVS     r1,#3
00000e  8822              LDRH     r2,[r4,#0]
000010  1c50              ADDS     r0,r2,#1
000012  8020              STRH     r0,[r4,#0]
000014  6860              LDR      r0,[r4,#4]
000016  5481              STRB     r1,[r0,r2]
;;;207    	otaUpdatSend->data[otaUpdatSend->datLength++] = (frameNum >> 8) &0x00FF;
000018  0a29              LSRS     r1,r5,#8
00001a  8822              LDRH     r2,[r4,#0]
00001c  1c50              ADDS     r0,r2,#1
00001e  8020              STRH     r0,[r4,#0]
000020  6860              LDR      r0,[r4,#4]
000022  5481              STRB     r1,[r0,r2]
;;;208    	otaUpdatSend->data[otaUpdatSend->datLength++] = frameNum & 0x00FF;
000024  8822              LDRH     r2,[r4,#0]
000026  1c50              ADDS     r0,r2,#1
000028  8020              STRH     r0,[r4,#0]
00002a  6860              LDR      r0,[r4,#4]
00002c  5485              STRB     r5,[r0,r2]
;;;209    	
;;;210    	CDMASendDataPack(otaUpdatSend);//将程序请求帧进行封包
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       CDMASendDataPack
;;;211    	
;;;212    	OSQPost(CDMASendQ,otaUpdatSend);
000034  4621              MOV      r1,r4
000036  4802              LDR      r0,|L10.64|
000038  6800              LDR      r0,[r0,#0]  ; CDMASendQ
00003a  f7fffffe          BL       OSQPost
;;;213    }
00003e  bd70              POP      {r4-r6,pc}
;;;214    uint8_t updateBuff[2048];       //升级用
                          ENDP

                  |L10.64|
                          DCD      CDMASendQ

                          AREA ||i.SendPidCmdData||, CODE, READONLY, ALIGN=2

                  SendPidCmdData PROC
;;;109    
;;;481    static void SendPidCmdData(uint8_t* cmdData)
000000  b570              PUSH     {r4-r6,lr}
;;;482    {
000002  4605              MOV      r5,r0
;;;483    	_CDMADataToSend* cmdPidSend;
;;;484    	cmdPidSend = CDMNSendInfoInit(60);//
000004  203c              MOVS     r0,#0x3c
000006  f7fffffe          BL       CDMNSendInfoInit
00000a  4604              MOV      r4,r0
;;;485    	memcpy(&cmdPidSend->data[cmdPidSend->datLength],cmdData,cmdData[0]);
00000c  6861              LDR      r1,[r4,#4]
00000e  8823              LDRH     r3,[r4,#0]
000010  18c8              ADDS     r0,r1,r3
000012  782a              LDRB     r2,[r5,#0]
000014  4629              MOV      r1,r5
000016  f7fffffe          BL       __aeabi_memcpy
;;;486    	cmdPidSend->datLength += cmdData[0];
00001a  8820              LDRH     r0,[r4,#0]
00001c  7829              LDRB     r1,[r5,#0]
00001e  4408              ADD      r0,r0,r1
000020  8020              STRH     r0,[r4,#0]
;;;487    
;;;488    	CDMASendDataPack(cmdPidSend);//将程序请求帧进行封包
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       CDMASendDataPack
;;;489    	
;;;490    	OSQPost(CDMASendQ,cmdPidSend);
000028  4621              MOV      r1,r4
00002a  4804              LDR      r0,|L11.60|
00002c  6800              LDR      r0,[r0,#0]  ; CDMASendQ
00002e  f7fffffe          BL       OSQPost
;;;491    	Mem_free(cmdData);
000032  4628              MOV      r0,r5
000034  f7fffffe          BL       Mem_free
;;;492    }
000038  bd70              POP      {r4-r6,pc}
;;;493    extern uint8_t pidManyBag[8];
                          ENDP

00003a  0000              DCW      0x0000
                  |L11.60|
                          DCD      CDMASendQ

                          AREA ||i.__NVIC_SystemReset||, CODE, READONLY, ALIGN=2

                  __NVIC_SystemReset PROC
;;;1750    */
;;;1751   __STATIC_INLINE void __NVIC_SystemReset(void)
000000  bf00              NOP      
;;;1752   {
;;;1753     __DSB();                                                          /* Ensure all outstanding memory accesses included
000002  bf00              NOP      
000004  bf00              NOP      
000006  f3bf8f4f          DSB      
00000a  bf00              NOP      
00000c  bf00              NOP      
00000e  bf00              NOP      
;;;1754                                                                          buffered write are completed before reset */
;;;1755     SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
000010  4809              LDR      r0,|L12.56|
000012  6800              LDR      r0,[r0,#0]
000014  f40060e0          AND      r0,r0,#0x700
000018  4908              LDR      r1,|L12.60|
00001a  4308              ORRS     r0,r0,r1
00001c  1d00              ADDS     r0,r0,#4
00001e  4906              LDR      r1,|L12.56|
000020  6008              STR      r0,[r1,#0]
;;;1756                              (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
;;;1757                               SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
;;;1758     __DSB();                                                          /* Ensure completion of memory access */
000022  bf00              NOP      
000024  bf00              NOP      
000026  bf00              NOP      
000028  f3bf8f4f          DSB      
00002c  bf00              NOP      
00002e  bf00              NOP      
000030  bf00              NOP      
;;;1759   
;;;1760     for(;;)                                                           /* wait until reset */
000032  bf00              NOP      
                  |L12.52|
;;;1761     {
;;;1762       __NOP();
000034  bf00              NOP      
000036  e7fd              B        |L12.52|
;;;1763     }
;;;1764   }
;;;1765   
                          ENDP

                  |L12.56|
                          DCD      0xe000ed0c
                  |L12.60|
                          DCD      0x05fa0000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  updateBuff
                          %        2048

                          AREA ||.data||, DATA, ALIGN=2

                  timetemp
000000  0000              DCB      0x00,0x00
                  currentNum
000002  0000              DCW      0x0000
                  fileCRC
000004  0000              DCW      0x0000
000006  0000              DCB      0x00,0x00
                  flashAddr
                          DCD      0x00000000
                  frameIndex
00000c  0000              DCB      0x00,0x00
                  |symbol_number.46|
00000e  0000              DCW      0x0000
                  |symbol_number.47|
000010  0000              DCW      0x0000
                  pidPackNum
000012  0000              DCB      0x00,0x00
                  addrSavePid
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\CDMA\\CDMARecvTask.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_CDMARecvTask_c_1d630633____REV16|
#line 465 "D:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.2.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___14_CDMARecvTask_c_1d630633____REV16| PROC
#line 466

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_CDMARecvTask_c_1d630633____REVSH|
#line 480
|__asm___14_CDMARecvTask_c_1d630633____REVSH| PROC
#line 481

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___14_CDMARecvTask_c_1d630633____RRX|
#line 667
|__asm___14_CDMARecvTask_c_1d630633____RRX| PROC
#line 668

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
