; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\obj\cdmarecvtask.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=..\obj\cdmarecvtask.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\OBD -I..\SYSTEM -I..\USER -I..\LIB\inc -I..\UCOSII\CONFIG -I..\UCOSII\PORT -I..\UCOSII\CORE -I..\HAEDWARE -I..\GPS -I..\CDMA -I..\DEAL -I..\USB\CONFIG -I..\USB\STM32_USB-FS-Device_Driver\inc -I.\RTE\_Project -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\5.2.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=524 -D_RTE_ -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\cdmarecvtask.crf ..\CDMA\CDMARecvTask.c]
                          THUMB

                          AREA ||i.CDMARecvTask||, CODE, READONLY, ALIGN=2

                  CDMARecvTask PROC
;;;19     //本任务用来上发登录报文、处理OTA升级、配置文件升级、模式切换（强动力模式、节油模式等）
;;;20     void CDMARecvTask(void *pdata)
000000  b508              PUSH     {r3,lr}
;;;21     {
;;;22     	uint8_t  err;
;;;23     	uint16_t cmdId;
;;;24     	uint8_t* ptrRECV = NULL;
000002  2600              MOVS     r6,#0
;;;25     	uint8_t* ptrDeal = NULL;
000004  2500              MOVS     r5,#0
;;;26     	while(1)
000006  e06f              B        |L1.232|
                  |L1.8|
;;;27     	{
;;;28     		ptrRECV = OSQPend(ZIPRecv_Q,30000,&err);  //等待60s后服务器无响应，则退出
000008  466a              MOV      r2,sp
00000a  f2475130          MOV      r1,#0x7530
00000e  4837              LDR      r0,|L1.236|
000010  6800              LDR      r0,[r0,#0]  ; ZIPRecv_Q
000012  f7fffffe          BL       OSQPend
000016  4606              MOV      r6,r0
;;;29     		if(err == OS_ERR_NONE)
000018  f89d0000          LDRB     r0,[sp,#0]
00001c  2800              CMP      r0,#0
00001e  d14b              BNE      |L1.184|
;;;30     		{
;;;31     			ptrDeal = RecvDataAnalysis(ptrRECV);  //将接收到的数据进行加工
000020  4630              MOV      r0,r6
000022  f7fffffe          BL       RecvDataAnalysis
000026  4605              MOV      r5,r0
;;;32     			if(ptrDeal == NULL)                   //接收到错误的数据
000028  b905              CBNZ     r5,|L1.44|
;;;33     				continue; 
00002a  e05d              B        |L1.232|
                  |L1.44|
;;;34     			
;;;35     			cmdId = ptrDeal[3];
00002c  78ec              LDRB     r4,[r5,#3]
;;;36     			cmdId = (cmdId<<8) + ptrDeal[4];
00002e  7928              LDRB     r0,[r5,#4]
000030  eb002004          ADD      r0,r0,r4,LSL #8
000034  b284              UXTH     r4,r0
;;;37     			
;;;38     			if(cmdId == 0x5001)				//接收到登录报文
000036  f2450001          MOV      r0,#0x5001
00003a  4284              CMP      r4,r0
00003c  d103              BNE      |L1.70|
;;;39     				RecvLoginDatDeal(ptrDeal);
00003e  4628              MOV      r0,r5
000040  f7fffffe          BL       RecvLoginDatDeal
000044  e030              B        |L1.168|
                  |L1.70|
;;;40     			
;;;41     			else if(cmdId == 0x5015)		//模式切换
000046  f2450015          MOV      r0,#0x5015
00004a  4284              CMP      r4,r0
00004c  d103              BNE      |L1.86|
;;;42     				FuelModeChange(ptrDeal);
00004e  4628              MOV      r0,r5
000050  f7fffffe          BL       FuelModeChange
000054  e028              B        |L1.168|
                  |L1.86|
;;;43     			
;;;44     			else if(cmdId == 0x5027)		//服务器下发的测试指令
000056  f2450027          MOV      r0,#0x5027
00005a  4284              CMP      r4,r0
00005c  d103              BNE      |L1.102|
;;;45     				CanTestCmd(ptrDeal);
00005e  4628              MOV      r0,r5
000060  f7fffffe          BL       CanTestCmd
000064  e020              B        |L1.168|
                  |L1.102|
;;;46     			
;;;47     			else if(((cmdId >= 0x4000)&&(cmdId < 0x5000))||(cmdId == 0x5012)||(cmdId == 0x5018)) //第一、二部分的配置文件  
000066  f5b44f80          CMP      r4,#0x4000
00006a  db02              BLT      |L1.114|
00006c  f5b44fa0          CMP      r4,#0x5000
000070  db06              BLT      |L1.128|
                  |L1.114|
000072  f2450012          MOV      r0,#0x5012
000076  4284              CMP      r4,r0
000078  d002              BEQ      |L1.128|
00007a  1d80              ADDS     r0,r0,#6
00007c  4284              CMP      r4,r0
00007e  d103              BNE      |L1.136|
                  |L1.128|
;;;48     				ConfigUpdata(ptrDeal);
000080  4628              MOV      r0,r5
000082  f7fffffe          BL       ConfigUpdata
000086  e00f              B        |L1.168|
                  |L1.136|
;;;49     			
;;;50     			else if((cmdId >= 0x8000)&&(cmdId < 0x9000)) //程序升级报文    
000088  f5b44f00          CMP      r4,#0x8000
00008c  db06              BLT      |L1.156|
00008e  f5b44f10          CMP      r4,#0x9000
000092  da03              BGE      |L1.156|
;;;51     				OTA_Updata(ptrDeal);
000094  4628              MOV      r0,r5
000096  f7fffffe          BL       OTA_Updata
00009a  e005              B        |L1.168|
                  |L1.156|
;;;52     			else if(cmdId == 0x5021)
00009c  f2450021          MOV      r0,#0x5021
0000a0  4284              CMP      r4,r0
0000a2  d101              BNE      |L1.168|
;;;53     				ClearFaultCmd();
0000a4  f7fffffe          BL       ClearFaultCmd
                  |L1.168|
;;;54     			Mem_free(ptrDeal);             //释放内存块
0000a8  4628              MOV      r0,r5
0000aa  f7fffffe          BL       Mem_free
;;;55     			varOperation.isLoginDeal = 1;  //登录报文处理完毕
0000ae  2001              MOVS     r0,#1
0000b0  490f              LDR      r1,|L1.240|
0000b2  f8810030          STRB     r0,[r1,#0x30]
0000b6  e016              B        |L1.230|
                  |L1.184|
;;;56     		}
;;;57     		else   //等待超时
;;;58     		{
;;;59     			varOperation.isLoginDeal = 1; 
0000b8  2001              MOVS     r0,#1
0000ba  490d              LDR      r1,|L1.240|
0000bc  f8810030          STRB     r0,[r1,#0x30]
;;;60     			if(sysUpdateVar.isSoftUpdate == 1)// OTA 升级超时
0000c0  480c              LDR      r0,|L1.244|
0000c2  7800              LDRB     r0,[r0,#0]  ; sysUpdateVar
0000c4  2801              CMP      r0,#1
0000c6  d10e              BNE      |L1.230|
;;;61     			{
;;;62     				sysUpdateVar.isSoftUpdate = 0;
0000c8  2000              MOVS     r0,#0
0000ca  490a              LDR      r1,|L1.244|
0000cc  7008              STRB     r0,[r1,#0]
;;;63     				varOperation.isDataFlow   = 0;//重启数据流
0000ce  4908              LDR      r1,|L1.240|
0000d0  f881002d          STRB     r0,[r1,#0x2d]
;;;64     				if(OSSemAccept(LoginMes) == 0)//启动CAN
0000d4  4808              LDR      r0,|L1.248|
0000d6  6800              LDR      r0,[r0,#0]  ; LoginMes
0000d8  f7fffffe          BL       OSSemAccept
0000dc  b918              CBNZ     r0,|L1.230|
;;;65     					OSSemPost(LoginMes);	
0000de  4806              LDR      r0,|L1.248|
0000e0  6800              LDR      r0,[r0,#0]  ; LoginMes
0000e2  f7fffffe          BL       OSSemPost
                  |L1.230|
0000e6  bf00              NOP                            ;33
                  |L1.232|
0000e8  e78e              B        |L1.8|
;;;66     			} 
;;;67     		}
;;;68     	}
;;;69     }
;;;70     //登录报文
                          ENDP

0000ea  0000              DCW      0x0000
                  |L1.236|
                          DCD      ZIPRecv_Q
                  |L1.240|
                          DCD      varOperation
                  |L1.244|
                          DCD      sysUpdateVar
                  |L1.248|
                          DCD      LoginMes

                          AREA ||i.CanTestCmd||, CODE, READONLY, ALIGN=2

                  CanTestCmd PROC
;;;557    extern CAN1DataToSend  dataToSend; 
;;;558    static void CanTestCmd(uint8_t* ptrDeal)//服务器下发的  CAN测试指令
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;559    {
000004  b08b              SUB      sp,sp,#0x2c
000006  4605              MOV      r5,r0
;;;560    	uint32_t canRxId;
;;;561    	CANBAUD_Enum canBaud;
;;;562    	uint32_t canTxId;
;;;563    	uint32_t saveCanID;
;;;564    	_CDMADataToSend* pidVerCmd;
;;;565    	uint16_t cmdId;
;;;566    	uint8_t pidNum;
;;;567    	uint8_t offset = 3,err = 0,i = 0,j=0,cmdManyPackNum = 0;
000008  2603              MOVS     r6,#3
00000a  2000              MOVS     r0,#0
00000c  9006              STR      r0,[sp,#0x18]
00000e  4680              MOV      r8,r0
000010  4683              MOV      r11,r0
000012  9005              STR      r0,[sp,#0x14]
;;;568    	CanRxMsg* CAN1_RxMsg;
;;;569    	CAN_InitTypeDef CAN_InitStructure;
;;;570    	uint8_t * can1_Txbuff;
;;;571    	cmdId = ptrDeal[offset ++];
000014  4631              MOV      r1,r6
000016  1c76              ADDS     r6,r6,#1
000018  5c68              LDRB     r0,[r5,r1]
00001a  9008              STR      r0,[sp,#0x20]
;;;572    	cmdId = (cmdId << 8) + ptrDeal[offset ++];
00001c  4631              MOV      r1,r6
00001e  1c76              ADDS     r6,r6,#1
000020  5c69              LDRB     r1,[r5,r1]
000022  9808              LDR      r0,[sp,#0x20]
000024  eb012000          ADD      r0,r1,r0,LSL #8
000028  b280              UXTH     r0,r0
00002a  9008              STR      r0,[sp,#0x20]
;;;573    	
;;;574    	pidVerCmd = CDMNSendDataInit(500); 
00002c  f44f70fa          MOV      r0,#0x1f4
000030  f7fffffe          BL       CDMNSendDataInit
000034  4604              MOV      r4,r0
;;;575    	pidVerCmd->data[pidVerCmd->datLength++] = 0;
000036  2100              MOVS     r1,#0
000038  8822              LDRH     r2,[r4,#0]
00003a  1c50              ADDS     r0,r2,#1
00003c  8020              STRH     r0,[r4,#0]
00003e  6860              LDR      r0,[r4,#4]
000040  5481              STRB     r1,[r0,r2]
;;;576    	pidVerCmd->data[pidVerCmd->datLength++] = 0x50;
000042  2150              MOVS     r1,#0x50
000044  8822              LDRH     r2,[r4,#0]
000046  1c50              ADDS     r0,r2,#1
000048  8020              STRH     r0,[r4,#0]
00004a  6860              LDR      r0,[r4,#4]
00004c  5481              STRB     r1,[r0,r2]
;;;577    	pidVerCmd->data[pidVerCmd->datLength++] = 0x27;
00004e  2127              MOVS     r1,#0x27
000050  8822              LDRH     r2,[r4,#0]
000052  1c50              ADDS     r0,r2,#1
000054  8020              STRH     r0,[r4,#0]
000056  6860              LDR      r0,[r4,#4]
000058  5481              STRB     r1,[r0,r2]
;;;578    	memcpy(&pidVerCmd->data[pidVerCmd->datLength],&ptrDeal[offset],8);
00005a  6860              LDR      r0,[r4,#4]
00005c  8821              LDRH     r1,[r4,#0]
00005e  4408              ADD      r0,r0,r1
000060  19a9              ADDS     r1,r5,r6
000062  680a              LDR      r2,[r1,#0]
000064  6002              STR      r2,[r0,#0]
000066  6849              LDR      r1,[r1,#4]
000068  6041              STR      r1,[r0,#4]
;;;579    	offset += 8;
00006a  3608              ADDS     r6,r6,#8
;;;580    	pidVerCmd->datLength += 8;
00006c  8820              LDRH     r0,[r4,#0]
00006e  3008              ADDS     r0,r0,#8
000070  8020              STRH     r0,[r4,#0]
;;;581    	
;;;582    	canRxId = ptrDeal[offset ++];               //卡路宝ID
000072  4631              MOV      r1,r6
000074  1c76              ADDS     r6,r6,#1
000076  f8159001          LDRB     r9,[r5,r1]
;;;583    	canRxId = (canRxId<<8) + ptrDeal[offset++];
00007a  4631              MOV      r1,r6
00007c  1c76              ADDS     r6,r6,#1
00007e  5c68              LDRB     r0,[r5,r1]
000080  eb002909          ADD      r9,r0,r9,LSL #8
;;;584    	canRxId = (canRxId<<8) + ptrDeal[offset++];
000084  4631              MOV      r1,r6
000086  1c76              ADDS     r6,r6,#1
000088  5c68              LDRB     r0,[r5,r1]
00008a  eb002909          ADD      r9,r0,r9,LSL #8
;;;585    	canRxId = (canRxId<<8) + ptrDeal[offset++];
00008e  4630              MOV      r0,r6
000090  1c71              ADDS     r1,r6,#1
000092  b2ce              UXTB     r6,r1
000094  5c28              LDRB     r0,[r5,r0]
000096  eb002909          ADD      r9,r0,r9,LSL #8
;;;586    	saveCanID = varOperation.canRxId;
00009a  48a5              LDR      r0,|L2.816|
00009c  f8d0008c          LDR      r0,[r0,#0x8c]  ; varOperation
0000a0  9009              STR      r0,[sp,#0x24]
;;;587    	varOperation.canRxId = canRxId;
0000a2  48a3              LDR      r0,|L2.816|
0000a4  f8c0908c          STR      r9,[r0,#0x8c]  ; varOperation
;;;588    	
;;;589    	canTxId = ptrDeal[offset ++];              //ECU ID 
0000a8  4630              MOV      r0,r6
0000aa  1c71              ADDS     r1,r6,#1
0000ac  b2ce              UXTB     r6,r1
0000ae  f815a000          LDRB     r10,[r5,r0]
;;;590    	canTxId = (canTxId<<8) + ptrDeal[offset++];
0000b2  4630              MOV      r0,r6
0000b4  1c71              ADDS     r1,r6,#1
0000b6  b2ce              UXTB     r6,r1
0000b8  5c28              LDRB     r0,[r5,r0]
0000ba  eb002a0a          ADD      r10,r0,r10,LSL #8
;;;591    	canTxId = (canTxId<<8) + ptrDeal[offset++];
0000be  4630              MOV      r0,r6
0000c0  1c71              ADDS     r1,r6,#1
0000c2  b2ce              UXTB     r6,r1
0000c4  5c28              LDRB     r0,[r5,r0]
0000c6  eb002a0a          ADD      r10,r0,r10,LSL #8
;;;592    	canTxId = (canTxId<<8) + ptrDeal[offset++];
0000ca  4630              MOV      r0,r6
0000cc  1c71              ADDS     r1,r6,#1
0000ce  b2ce              UXTB     r6,r1
0000d0  5c28              LDRB     r0,[r5,r0]
0000d2  eb002a0a          ADD      r10,r0,r10,LSL #8
;;;593    	canBaud = (CANBAUD_Enum)ptrDeal[offset++];
0000d6  4630              MOV      r0,r6
0000d8  1c71              ADDS     r1,r6,#1
0000da  b2ce              UXTB     r6,r1
0000dc  5c28              LDRB     r0,[r5,r0]
0000de  900a              STR      r0,[sp,#0x28]
;;;594    	pidNum  = ptrDeal[offset++];
0000e0  4630              MOV      r0,r6
0000e2  1c71              ADDS     r1,r6,#1
0000e4  b2ce              UXTB     r6,r1
0000e6  5c28              LDRB     r0,[r5,r0]
0000e8  9007              STR      r0,[sp,#0x1c]
;;;595    	
;;;596    	varOperation.pidRun = 0;                //停止PID发送
0000ea  2000              MOVS     r0,#0
0000ec  4990              LDR      r1,|L2.816|
0000ee  f8810095          STRB     r0,[r1,#0x95]
;;;597    	varOperation.pidTset = 1;
0000f2  2001              MOVS     r0,#1
0000f4  f8810093          STRB     r0,[r1,#0x93]
;;;598    	OSTimeDlyHMSM(0,0,2,0);//延时2秒，用于确保OBD任务没有发送接收的任务
0000f8  2300              MOVS     r3,#0
0000fa  2202              MOVS     r2,#2
0000fc  4619              MOV      r1,r3
0000fe  4618              MOV      r0,r3
000100  f7fffffe          BL       OSTimeDlyHMSM
;;;599    	varOperation.flagRecvOK = 0;
000104  2000              MOVS     r0,#0
000106  498a              LDR      r1,|L2.816|
000108  f88100a6          STRB     r0,[r1,#0xa6]
;;;600    	do{
00010c  bf00              NOP      
                  |L2.270|
;;;601    		can1_Txbuff = OSQAccept(canSendQ,&err);//清空消息队列里的消息
00010e  a906              ADD      r1,sp,#0x18
000110  4888              LDR      r0,|L2.820|
000112  6800              LDR      r0,[r0,#0]  ; canSendQ
000114  f7fffffe          BL       OSQAccept
000118  9001              STR      r0,[sp,#4]
;;;602    		Mem_free(can1_Txbuff);
00011a  9801              LDR      r0,[sp,#4]
00011c  f7fffffe          BL       Mem_free
;;;603    	}while(err == OS_ERR_NONE);
000120  f89d0018          LDRB     r0,[sp,#0x18]
000124  2800              CMP      r0,#0
000126  d0f2              BEQ      |L2.270|
;;;604    	
;;;605    	CAN_DeInit(CAN1);  
000128  4883              LDR      r0,|L2.824|
00012a  f7fffffe          BL       CAN_DeInit
;;;606    	CAN_StructInit(&CAN_InitStructure);
00012e  a802              ADD      r0,sp,#8
000130  f7fffffe          BL       CAN_StructInit
;;;607    	CAN1_BaudSet(canBaud);  //先用flash中的CAN配置进行测试
000134  980a              LDR      r0,[sp,#0x28]
000136  f7fffffe          BL       CAN1_BaudSet
;;;608    	CAN1_ClearFilter();
00013a  f7fffffe          BL       CAN1_ClearFilter
;;;609    	CAN_ITConfig(CAN1,CAN_IT_FMP1,ENABLE);//重置CAN滤波器
00013e  2201              MOVS     r2,#1
000140  2110              MOVS     r1,#0x10
000142  487d              LDR      r0,|L2.824|
000144  f7fffffe          BL       CAN_ITConfig
;;;610    	
;;;611    	for(i = 0;i < 200;i ++)//清空消息队列
000148  f04f0800          MOV      r8,#0
00014c  e011              B        |L2.370|
                  |L2.334|
;;;612    	{
;;;613    		CAN1_RxMsg = OSQPend(canRecieveQ,40,&err);
00014e  aa06              ADD      r2,sp,#0x18
000150  2128              MOVS     r1,#0x28
000152  487a              LDR      r0,|L2.828|
000154  6800              LDR      r0,[r0,#0]  ; canRecieveQ
000156  f7fffffe          BL       OSQPend
00015a  4607              MOV      r7,r0
;;;614    		if(err != OS_ERR_NONE)//消息队列没数据了
00015c  f89d0018          LDRB     r0,[sp,#0x18]
000160  b100              CBZ      r0,|L2.356|
;;;615    			break;
000162  e009              B        |L2.376|
                  |L2.356|
;;;616    		Mem_free(CAN1_RxMsg);
000164  4638              MOV      r0,r7
000166  f7fffffe          BL       Mem_free
00016a  f1080001          ADD      r0,r8,#1              ;611
00016e  f00008ff          AND      r8,r0,#0xff           ;611
                  |L2.370|
000172  f1b80fc8          CMP      r8,#0xc8              ;611
000176  dbea              BLT      |L2.334|
                  |L2.376|
000178  bf00              NOP                            ;615
;;;617    	}
;;;618    	
;;;619    	dataToSend.canId = canTxId;
00017a  4871              LDR      r0,|L2.832|
00017c  f8c0a000          STR      r10,[r0,#0]  ; dataToSend
;;;620    
;;;621    	for(i = 0;i < pidNum;i ++)
000180  f04f0800          MOV      r8,#0
000184  e08d              B        |L2.674|
                  |L2.390|
;;;622    	{
;;;623    		dataToSend.pdat  = &ptrDeal[offset + i*8];
000186  eb0600c8          ADD      r0,r6,r8,LSL #3
00018a  4428              ADD      r0,r0,r5
00018c  496c              LDR      r1,|L2.832|
00018e  6088              STR      r0,[r1,#8]  ; dataToSend
;;;624    		OBD_CAN_SendData(dataToSend.canId,CAN_ID_EXT,dataToSend.pdat);//发送 PID 指令
000190  688a              LDR      r2,[r1,#8]  ; dataToSend
000192  6808              LDR      r0,[r1,#0]  ; dataToSend
000194  2104              MOVS     r1,#4
000196  f7fffffe          BL       OBD_CAN_SendData
;;;625    		CAN1_RxMsg = OSQPend(canRecieveQ,25,&err);
00019a  aa06              ADD      r2,sp,#0x18
00019c  2119              MOVS     r1,#0x19
00019e  4867              LDR      r0,|L2.828|
0001a0  6800              LDR      r0,[r0,#0]  ; canRecieveQ
0001a2  f7fffffe          BL       OSQPend
0001a6  4607              MOV      r7,r0
;;;626    		if(err == OS_ERR_NONE)
0001a8  f89d0018          LDRB     r0,[sp,#0x18]
0001ac  2800              CMP      r0,#0
0001ae  d174              BNE      |L2.666|
;;;627    		{
;;;628    			if(CAN1_RxMsg->Data[0] == 0x10)         // 多包处理
0001b0  7af8              LDRB     r0,[r7,#0xb]
0001b2  2810              CMP      r0,#0x10
0001b4  d15c              BNE      |L2.624|
;;;629    			{
;;;630    				cmdManyPackNum = (CAN1_RxMsg->Data[1] - 6) % 7 == 0? (CAN1_RxMsg->Data[1] - 6)/7 : (CAN1_RxMsg->Data[1] - 6)/7 + 1;
0001b6  7b38              LDRB     r0,[r7,#0xc]
0001b8  1f80              SUBS     r0,r0,#6
0001ba  2107              MOVS     r1,#7
0001bc  fb90f2f1          SDIV     r2,r0,r1
0001c0  fb010012          MLS      r0,r1,r2,r0
0001c4  b920              CBNZ     r0,|L2.464|
0001c6  7b38              LDRB     r0,[r7,#0xc]
0001c8  1f80              SUBS     r0,r0,#6
0001ca  fb90f0f1          SDIV     r0,r0,r1
0001ce  e005              B        |L2.476|
                  |L2.464|
0001d0  7b38              LDRB     r0,[r7,#0xc]
0001d2  1f80              SUBS     r0,r0,#6
0001d4  2107              MOVS     r1,#7
0001d6  fb90f0f1          SDIV     r0,r0,r1
0001da  1c40              ADDS     r0,r0,#1
                  |L2.476|
0001dc  b2c0              UXTB     r0,r0
0001de  9005              STR      r0,[sp,#0x14]
;;;631    				pidVerCmd->data[pidVerCmd->datLength++] = (cmdManyPackNum+1) *7;           //收到的数据长度
0001e0  9805              LDR      r0,[sp,#0x14]
0001e2  1c40              ADDS     r0,r0,#1
0001e4  ebc000c0          RSB      r0,r0,r0,LSL #3
0001e8  b2c1              UXTB     r1,r0
0001ea  8822              LDRH     r2,[r4,#0]
0001ec  1c50              ADDS     r0,r2,#1
0001ee  8020              STRH     r0,[r4,#0]
0001f0  6860              LDR      r0,[r4,#4]
0001f2  5481              STRB     r1,[r0,r2]
;;;632    				memcpy(&pidVerCmd->data[pidVerCmd->datLength],&CAN1_RxMsg->Data[2],6);
0001f4  6860              LDR      r0,[r4,#4]
0001f6  8821              LDRH     r1,[r4,#0]
0001f8  4401              ADD      r1,r1,r0
0001fa  f8d7200d          LDR      r2,[r7,#0xd]
0001fe  600a              STR      r2,[r1,#0]
000200  f8b70011          LDRH     r0,[r7,#0x11]
000204  8088              STRH     r0,[r1,#4]
;;;633    				pidVerCmd->datLength += 6;
000206  8820              LDRH     r0,[r4,#0]
000208  1d80              ADDS     r0,r0,#6
00020a  8020              STRH     r0,[r4,#0]
;;;634    				Mem_free(CAN1_RxMsg);
00020c  4638              MOV      r0,r7
00020e  f7fffffe          BL       Mem_free
;;;635    				dataToSend.pdat = pidManyBag;                 //发送 0x30 请求接下来的多包
000212  484c              LDR      r0,|L2.836|
000214  494a              LDR      r1,|L2.832|
000216  6088              STR      r0,[r1,#8]  ; dataToSend
;;;636    				OBD_CAN_SendData(dataToSend.canId,dataToSend.ide,dataToSend.pdat);
000218  460b              MOV      r3,r1
00021a  689a              LDR      r2,[r3,#8]  ; dataToSend
00021c  6859              LDR      r1,[r3,#4]  ; dataToSend
00021e  6818              LDR      r0,[r3,#0]  ; dataToSend
000220  f7fffffe          BL       OBD_CAN_SendData
;;;637    				for(j=0;j<cmdManyPackNum;j++)
000224  f04f0b00          MOV      r11,#0
000228  e01e              B        |L2.616|
                  |L2.554|
;;;638    				{
;;;639    					CAN1_RxMsg = OSQPend(canRecieveQ,25,&err);// 接收多包
00022a  aa06              ADD      r2,sp,#0x18
00022c  2119              MOVS     r1,#0x19
00022e  4843              LDR      r0,|L2.828|
000230  6800              LDR      r0,[r0,#0]  ; canRecieveQ
000232  f7fffffe          BL       OSQPend
000236  4607              MOV      r7,r0
;;;640    					if(err == OS_ERR_NONE)
000238  f89d0018          LDRB     r0,[sp,#0x18]
00023c  b978              CBNZ     r0,|L2.606|
;;;641    					{
;;;642    						memcpy(&pidVerCmd->data[pidVerCmd->datLength],&CAN1_RxMsg->Data[1],7);
00023e  6860              LDR      r0,[r4,#4]
000240  8821              LDRH     r1,[r4,#0]
000242  4401              ADD      r1,r1,r0
000244  68fa              LDR      r2,[r7,#0xc]
000246  600a              STR      r2,[r1,#0]
000248  8a3a              LDRH     r2,[r7,#0x10]
00024a  808a              STRH     r2,[r1,#4]
00024c  7cb8              LDRB     r0,[r7,#0x12]
00024e  7188              STRB     r0,[r1,#6]
;;;643    						Mem_free(CAN1_RxMsg);
000250  4638              MOV      r0,r7
000252  f7fffffe          BL       Mem_free
;;;644    						pidVerCmd->datLength += 7;
000256  8820              LDRH     r0,[r4,#0]
000258  1dc0              ADDS     r0,r0,#7
00025a  8020              STRH     r0,[r4,#0]
00025c  e000              B        |L2.608|
                  |L2.606|
;;;645    					}
;;;646    					else
;;;647    						break;
00025e  e006              B        |L2.622|
                  |L2.608|
000260  f10b0001          ADD      r0,r11,#1             ;637
000264  f0000bff          AND      r11,r0,#0xff          ;637
                  |L2.616|
000268  9805              LDR      r0,[sp,#0x14]         ;637
00026a  4583              CMP      r11,r0                ;637
00026c  dbdd              BLT      |L2.554|
                  |L2.622|
00026e  e014              B        |L2.666|
                  |L2.624|
;;;648    				} 
;;;649    			}
;;;650    			else  //单包处理
;;;651    			{
;;;652    				pidVerCmd->data[pidVerCmd->datLength++] = 9;
000270  2109              MOVS     r1,#9
000272  8822              LDRH     r2,[r4,#0]
000274  1c50              ADDS     r0,r2,#1
000276  8020              STRH     r0,[r4,#0]
000278  6860              LDR      r0,[r4,#4]
00027a  5481              STRB     r1,[r0,r2]
;;;653    				memcpy(&pidVerCmd->data[pidVerCmd->datLength],CAN1_RxMsg->Data,8);
00027c  6860              LDR      r0,[r4,#4]
00027e  8821              LDRH     r1,[r4,#0]
000280  4408              ADD      r0,r0,r1
000282  f8d7100b          LDR      r1,[r7,#0xb]
000286  6001              STR      r1,[r0,#0]
000288  f8d7100f          LDR      r1,[r7,#0xf]
00028c  6041              STR      r1,[r0,#4]
;;;654    				pidVerCmd->datLength += 8;
00028e  8820              LDRH     r0,[r4,#0]
000290  3008              ADDS     r0,r0,#8
000292  8020              STRH     r0,[r4,#0]
;;;655    			
;;;656    				Mem_free(CAN1_RxMsg);
000294  4638              MOV      r0,r7
000296  f7fffffe          BL       Mem_free
                  |L2.666|
00029a  f1080001          ADD      r0,r8,#1              ;621
00029e  f00008ff          AND      r8,r0,#0xff           ;621
                  |L2.674|
0002a2  9807              LDR      r0,[sp,#0x1c]         ;621
0002a4  4580              CMP      r8,r0                 ;621
0002a6  f6ffaf6e          BLT      |L2.390|
;;;657    			}
;;;658    		}
;;;659    	}
;;;660    	Mem_free(ptrDeal);
0002aa  4628              MOV      r0,r5
0002ac  f7fffffe          BL       Mem_free
;;;661    	pidVerCmd->data[34] = pidVerCmd->datLength - 34;
0002b0  7820              LDRB     r0,[r4,#0]
0002b2  3822              SUBS     r0,r0,#0x22
0002b4  6861              LDR      r1,[r4,#4]
0002b6  f8810022          STRB     r0,[r1,#0x22]
;;;662    	
;;;663    	dataToSend.canId = canDataConfig.canTxId;  //恢复初始的PID
0002ba  4823              LDR      r0,|L2.840|
0002bc  f8d0000a          LDR      r0,[r0,#0xa]  ; canDataConfig
0002c0  491f              LDR      r1,|L2.832|
0002c2  6008              STR      r0,[r1,#0]  ; dataToSend
;;;664    	varOperation.canRxId = saveCanID;
0002c4  491a              LDR      r1,|L2.816|
0002c6  9809              LDR      r0,[sp,#0x24]
0002c8  f8c1008c          STR      r0,[r1,#0x8c]  ; varOperation
;;;665    	
;;;666    	CAN_DeInit(CAN1);  
0002cc  481a              LDR      r0,|L2.824|
0002ce  f7fffffe          BL       CAN_DeInit
;;;667    	CAN_StructInit(&CAN_InitStructure);
0002d2  a802              ADD      r0,sp,#8
0002d4  f7fffffe          BL       CAN_StructInit
;;;668    	CAN1_BaudSet(canDataConfig.canBaud);  //恢复初始配置的波特率
0002d8  491b              LDR      r1,|L2.840|
0002da  7c88              LDRB     r0,[r1,#0x12]  ; canDataConfig
0002dc  f7fffffe          BL       CAN1_BaudSet
;;;669    	CAN1_ClearFilter();
0002e0  f7fffffe          BL       CAN1_ClearFilter
;;;670    	CAN_ITConfig(CAN1,CAN_IT_FMP1,ENABLE);//重置CAN滤波器
0002e4  2201              MOVS     r2,#1
0002e6  2110              MOVS     r1,#0x10
0002e8  4813              LDR      r0,|L2.824|
0002ea  f7fffffe          BL       CAN_ITConfig
;;;671    	
;;;672    	varOperation.pidTset = 0;
0002ee  2000              MOVS     r0,#0
0002f0  490f              LDR      r1,|L2.816|
0002f2  f8810093          STRB     r0,[r1,#0x93]
;;;673    	varOperation.pidRun = 1;  //启动PID发送
0002f6  2001              MOVS     r0,#1
0002f8  f8810095          STRB     r0,[r1,#0x95]
;;;674    	
;;;675    	CDMASendDataPack(pidVerCmd);     //将采集到的数据封包
0002fc  4620              MOV      r0,r4
0002fe  f7fffffe          BL       CDMASendDataPack
;;;676    	OSQPost(CDMASendQ,pidVerCmd);
000302  4621              MOV      r1,r4
000304  4811              LDR      r0,|L2.844|
000306  6800              LDR      r0,[r0,#0]  ; CDMASendQ
000308  f7fffffe          BL       OSQPost
;;;677    	err = OSQPost(CDMASendQ,pidVerCmd);
00030c  4621              MOV      r1,r4
00030e  480f              LDR      r0,|L2.844|
000310  6800              LDR      r0,[r0,#0]  ; CDMASendQ
000312  f7fffffe          BL       OSQPost
000316  9006              STR      r0,[sp,#0x18]
;;;678    	if(err != OS_ERR_NONE)
000318  f89d0018          LDRB     r0,[sp,#0x18]
00031c  b128              CBZ      r0,|L2.810|
;;;679    	{
;;;680    		Mem_free(pidVerCmd->data);
00031e  6860              LDR      r0,[r4,#4]
000320  f7fffffe          BL       Mem_free
;;;681    		Mem_free(pidVerCmd);
000324  4620              MOV      r0,r4
000326  f7fffffe          BL       Mem_free
                  |L2.810|
;;;682    	}
;;;683    		
;;;684    }
00032a  b00b              ADD      sp,sp,#0x2c
00032c  e8bd8ff0          POP      {r4-r11,pc}
;;;685    
                          ENDP

                  |L2.816|
                          DCD      varOperation
                  |L2.820|
                          DCD      canSendQ
                  |L2.824|
                          DCD      0x40006400
                  |L2.828|
                          DCD      canRecieveQ
                  |L2.832|
                          DCD      dataToSend
                  |L2.836|
                          DCD      pidManyBag
                  |L2.840|
                          DCD      canDataConfig
                  |L2.844|
                          DCD      CDMASendQ

                          AREA ||i.ClearFaultCmd||, CODE, READONLY, ALIGN=2

                  ClearFaultCmd PROC
;;;780    
;;;781    void ClearFaultCmd(void)
000000  b570              PUSH     {r4-r6,lr}
;;;782    {
;;;783    	uint8_t * ptrOBDSend;
;;;784    	uint8_t err;
;;;785    //	static uint32_t timeCount = 0;
;;;786    	
;;;787    	ptrOBDSend = Mem_malloc(9);
000002  2009              MOVS     r0,#9
000004  f7fffffe          BL       Mem_malloc
000008  4604              MOV      r4,r0
;;;788    	ptrOBDSend[0] = 201;
00000a  20c9              MOVS     r0,#0xc9
00000c  7020              STRB     r0,[r4,#0]
;;;789    	memcpy(&ptrOBDSend[1],strengthFuelFlash.faultClear,8);
00000e  4809              LDR      r0,|L3.52|
000010  6801              LDR      r1,[r0,#0]  ; strengthFuelFlash
000012  f8c41001          STR      r1,[r4,#1]
000016  6840              LDR      r0,[r0,#4]  ; strengthFuelFlash
000018  f8c40005          STR      r0,[r4,#5]
;;;790    	err = OSQPost(canSendQ,ptrOBDSend);//向OBD推送要发送的PID指令
00001c  4621              MOV      r1,r4
00001e  4806              LDR      r0,|L3.56|
000020  6800              LDR      r0,[r0,#0]  ; canSendQ
000022  f7fffffe          BL       OSQPost
000026  4605              MOV      r5,r0
;;;791    	if(err != OS_ERR_NONE)
000028  b115              CBZ      r5,|L3.48|
;;;792    	{
;;;793    		Mem_free(ptrOBDSend);          //推送不成功，需要释放内存块
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       Mem_free
                  |L3.48|
;;;794    	} 
;;;795    }
000030  bd70              POP      {r4-r6,pc}
;;;796    
                          ENDP

000032  0000              DCW      0x0000
                  |L3.52|
                          DCD      strengthFuelFlash+0x4b
                  |L3.56|
                          DCD      canSendQ

                          AREA ||i.ConfigUpdata||, CODE, READONLY, ALIGN=2

                  ConfigUpdata PROC
;;;340    }
;;;341    static void ConfigUpdata(uint8_t* ptrDeal )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;342    {
000004  4605              MOV      r5,r0
;;;343    	uint8_t  temp;
;;;344    	uint16_t frameLen;
;;;345    	uint16_t cmdId;
;;;346    	uint8_t* ptrMode;
;;;347    	uint16_t i = 0,offset = 0;
000006  2600              MOVS     r6,#0
000008  2400              MOVS     r4,#0
;;;348        static uint16_t currentNum = 0;//发送下一个配置请求包
;;;349    	static uint16_t frameIndex = 0;
;;;350    	static uint8_t  pidPackNum = 0;//PID 总包数
;;;351    	static uint32_t addrSavePid = 0;
;;;352    		
;;;353    	cmdId     = ptrDeal[3];
00000a  78ef              LDRB     r7,[r5,#3]
;;;354    	cmdId     = (cmdId << 8) + ptrDeal[4];
00000c  7928              LDRB     r0,[r5,#4]
00000e  eb002007          ADD      r0,r0,r7,LSL #8
000012  b287              UXTH     r7,r0
;;;355    	if(cmdId == 0x4000)
000014  f5b74f80          CMP      r7,#0x4000
000018  d17e              BNE      |L4.280|
;;;356    	{
;;;357    		offset = 5;
00001a  2405              MOVS     r4,#5
;;;358    		varOperation.busType   = ptrDeal[offset++];//总线类型  CAN总线还是K线
00001c  4621              MOV      r1,r4
00001e  1c64              ADDS     r4,r4,#1
000020  5c68              LDRB     r0,[r5,r1]
000022  49fe              LDR      r1,|L4.1052|
000024  f8810086          STRB     r0,[r1,#0x86]
;;;359    		varOperation.canIdType = ptrDeal[offset++];//CAN ID类型，扩展帧还是标准帧
000028  4621              MOV      r1,r4
00002a  1c64              ADDS     r4,r4,#1
00002c  5c68              LDRB     r0,[r5,r1]
00002e  49fb              LDR      r1,|L4.1052|
000030  f8810087          STRB     r0,[r1,#0x87]
;;;360    		
;;;361    		varOperation.canRxId = ptrDeal[offset++];  //卡路宝 CAN 接收ID
000034  4621              MOV      r1,r4
000036  1c64              ADDS     r4,r4,#1
000038  5c68              LDRB     r0,[r5,r1]
00003a  49f8              LDR      r1,|L4.1052|
00003c  f8c1008c          STR      r0,[r1,#0x8c]  ; varOperation
;;;362    		varOperation.canRxId = (varOperation.canRxId << 8) + ptrDeal[offset++];
000040  4621              MOV      r1,r4
000042  1c64              ADDS     r4,r4,#1
000044  5c68              LDRB     r0,[r5,r1]
000046  49f5              LDR      r1,|L4.1052|
000048  f8d1108c          LDR      r1,[r1,#0x8c]  ; varOperation
00004c  eb002001          ADD      r0,r0,r1,LSL #8
000050  49f2              LDR      r1,|L4.1052|
000052  f8c1008c          STR      r0,[r1,#0x8c]  ; varOperation
;;;363    		varOperation.canRxId = (varOperation.canRxId << 8) + ptrDeal[offset++];
000056  4621              MOV      r1,r4
000058  1c64              ADDS     r4,r4,#1
00005a  5c68              LDRB     r0,[r5,r1]
00005c  49ef              LDR      r1,|L4.1052|
00005e  f8d1108c          LDR      r1,[r1,#0x8c]  ; varOperation
000062  eb002001          ADD      r0,r0,r1,LSL #8
000066  49ed              LDR      r1,|L4.1052|
000068  f8c1008c          STR      r0,[r1,#0x8c]  ; varOperation
;;;364    		varOperation.canRxId = (varOperation.canRxId << 8) + ptrDeal[offset++];
00006c  4621              MOV      r1,r4
00006e  1c64              ADDS     r4,r4,#1
000070  5c68              LDRB     r0,[r5,r1]
000072  49ea              LDR      r1,|L4.1052|
000074  f8d1108c          LDR      r1,[r1,#0x8c]  ; varOperation
000078  eb002001          ADD      r0,r0,r1,LSL #8
00007c  49e7              LDR      r1,|L4.1052|
00007e  f8c1008c          STR      r0,[r1,#0x8c]  ; varOperation
;;;365    		
;;;366    		varOperation.canTxId = ptrDeal[offset++];  //卡路宝 CAN 发送ID
000082  4621              MOV      r1,r4
000084  1c64              ADDS     r4,r4,#1
000086  5c68              LDRB     r0,[r5,r1]
000088  49e4              LDR      r1,|L4.1052|
00008a  f8c10088          STR      r0,[r1,#0x88]  ; varOperation
;;;367    		varOperation.canTxId = (varOperation.canTxId << 8) + ptrDeal[offset++];
00008e  4621              MOV      r1,r4
000090  1c64              ADDS     r4,r4,#1
000092  5c68              LDRB     r0,[r5,r1]
000094  49e1              LDR      r1,|L4.1052|
000096  f8d11088          LDR      r1,[r1,#0x88]  ; varOperation
00009a  eb002001          ADD      r0,r0,r1,LSL #8
00009e  49df              LDR      r1,|L4.1052|
0000a0  f8c10088          STR      r0,[r1,#0x88]  ; varOperation
;;;368    		varOperation.canTxId = (varOperation.canTxId << 8) + ptrDeal[offset++];
0000a4  4621              MOV      r1,r4
0000a6  1c64              ADDS     r4,r4,#1
0000a8  5c68              LDRB     r0,[r5,r1]
0000aa  49dc              LDR      r1,|L4.1052|
0000ac  f8d11088          LDR      r1,[r1,#0x88]  ; varOperation
0000b0  eb002001          ADD      r0,r0,r1,LSL #8
0000b4  49d9              LDR      r1,|L4.1052|
0000b6  f8c10088          STR      r0,[r1,#0x88]  ; varOperation
;;;369    		varOperation.canTxId = (varOperation.canTxId << 8) + ptrDeal[offset++];
0000ba  4621              MOV      r1,r4
0000bc  1c64              ADDS     r4,r4,#1
0000be  5c68              LDRB     r0,[r5,r1]
0000c0  49d6              LDR      r1,|L4.1052|
0000c2  f8d11088          LDR      r1,[r1,#0x88]  ; varOperation
0000c6  eb002001          ADD      r0,r0,r1,LSL #8
0000ca  49d4              LDR      r1,|L4.1052|
0000cc  f8c10088          STR      r0,[r1,#0x88]  ; varOperation
;;;370    		
;;;371    		varOperation.newPidNum = ptrDeal[offset++];//新的PID命令个数
0000d0  4621              MOV      r1,r4
0000d2  1c64              ADDS     r4,r4,#1
0000d4  5c68              LDRB     r0,[r5,r1]
0000d6  49d1              LDR      r1,|L4.1052|
0000d8  f8a10082          STRH     r0,[r1,#0x82]
;;;372    		varOperation.newPidNum = varOperation.newPidNum * 256 + ptrDeal[offset++];//新的PID命令个数
0000dc  4621              MOV      r1,r4
0000de  1c64              ADDS     r4,r4,#1
0000e0  5c69              LDRB     r1,[r5,r1]
0000e2  48ce              LDR      r0,|L4.1052|
0000e4  f8900082          LDRB     r0,[r0,#0x82]  ; varOperation
0000e8  eb012000          ADD      r0,r1,r0,LSL #8
0000ec  49cb              LDR      r1,|L4.1052|
0000ee  f8a10082          STRH     r0,[r1,#0x82]
;;;373    		
;;;374    		pidPackNum = ptrDeal[offset++];            //一帧共有多少PID包配置项
0000f2  4621              MOV      r1,r4
0000f4  1c64              ADDS     r4,r4,#1
0000f6  5c68              LDRB     r0,[r5,r1]
0000f8  49c9              LDR      r1,|L4.1056|
0000fa  7008              STRB     r0,[r1,#0]
;;;375    		
;;;376    		varOperation.canBaud = (CANBAUD_Enum)ptrDeal[offset++];  //CAN波特率，协议中的 protocolType
0000fc  4620              MOV      r0,r4
0000fe  1c61              ADDS     r1,r4,#1
000100  b28c              UXTH     r4,r1
000102  5c28              LDRB     r0,[r5,r0]
000104  49c5              LDR      r1,|L4.1052|
000106  f8810090          STRB     r0,[r1,#0x90]
;;;377    		
;;;378    		memcpy(varOperation.pidVerCmd,&ptrDeal[offset],8);  //提取 读取ECU版本号的指令
00010a  1929              ADDS     r1,r5,r4
00010c  48c3              LDR      r0,|L4.1052|
00010e  309b              ADDS     r0,r0,#0x9b
000110  680a              LDR      r2,[r1,#0]
000112  6002              STR      r2,[r0,#0]  ; varOperation
000114  6849              LDR      r1,[r1,#4]
000116  e000              B        |L4.282|
                  |L4.280|
000118  e014              B        |L4.324|
                  |L4.282|
00011a  6041              STR      r1,[r0,#4]  ; varOperation
;;;379    		
;;;380    		currentNum = 0x4001;
00011c  f2440001          MOV      r0,#0x4001
000120  49c0              LDR      r1,|L4.1060|
000122  8008              STRH     r0,[r1,#0]
;;;381    		frameIndex = 0;
000124  2000              MOVS     r0,#0
000126  49c0              LDR      r1,|L4.1064|
000128  8008              STRH     r0,[r1,#0]
;;;382    		addrSavePid  = PID1CONFIGADDR;
00012a  48c0              LDR      r0,|L4.1068|
00012c  49c0              LDR      r1,|L4.1072|
00012e  6008              STR      r0,[r1,#0]  ; addrSavePid
;;;383    		memset(updateBuff,0,2048);
000130  f44f6100          MOV      r1,#0x800
000134  48bf              LDR      r0,|L4.1076|
000136  f7fffffe          BL       __aeabi_memclr
;;;384    		SendConfigNum(currentNum);//发送第一包程序请求帧0x4001
00013a  48ba              LDR      r0,|L4.1060|
00013c  8800              LDRH     r0,[r0,#0]  ; currentNum
00013e  f7fffffe          BL       SendConfigNum
000142  e220              B        |L4.1414|
                  |L4.324|
;;;385    		
;;;386    	}else if(cmdId > 0x4000 && cmdId < 0x5000)
000144  f5b74f80          CMP      r7,#0x4000
000148  dd6f              BLE      |L4.554|
00014a  f5b74fa0          CMP      r7,#0x5000
00014e  da6c              BGE      |L4.554|
;;;387    	{
;;;388    		if(cmdId != currentNum)       //接收到的帧序号，与所申请的帧序号不同，则放弃数据并重新申请
000150  48b4              LDR      r0,|L4.1060|
000152  8800              LDRH     r0,[r0,#0]  ; currentNum
000154  4287              CMP      r7,r0
000156  d001              BEQ      |L4.348|
                  |L4.344|
;;;389    		{
;;;390    			//SendConfigNum(currentNum);//todo：重新发送？
;;;391    			return;
;;;392    		}
;;;393    		 
;;;394    		offset = 2;
;;;395    		frameLen = ptrDeal[offset++] - 3;
;;;396    		cmdId    = ptrDeal[offset++];
;;;397    		cmdId    = (cmdId << 8) + ptrDeal[offset++]; 
;;;398    		memcpy(&updateBuff[frameIndex],&ptrDeal[offset],frameLen);
;;;399    		frameIndex += frameLen;
;;;400    		if(((cmdId - 0x4000) % 11 == 0)&&((cmdId - pidPackNum) != 0x4000))//2K 存110个PID，一个PID占17byte
;;;401    		{
;;;402    			for(i = 0;i < frameIndex;i += 17)      //更改 指令发送周期 的字节序
;;;403    			{
;;;404    				temp            = updateBuff[i];
;;;405    				updateBuff[i]   = updateBuff[i+3];
;;;406    				updateBuff[i+3] = temp;
;;;407    				temp            = updateBuff[i+1];
;;;408    				updateBuff[i+1] = updateBuff[i+2];
;;;409    				updateBuff[i+2] = temp;
;;;410    			}
;;;411    			Save2KDataToFlash(updateBuff,addrSavePid,2048);
;;;412    			addrSavePid += 0x800;
;;;413    			frameIndex = 0;
;;;414    			memset(updateBuff,0,2048);
;;;415    			currentNum = cmdId + 1;   
;;;416    			SendConfigNum(currentNum);//请求下一包数据
;;;417    		}
;;;418    		else if((cmdId - pidPackNum) == 0x4000)
;;;419    		{
;;;420    			for(i = 0;i < frameIndex;i += 17)                   //更改 指令发送周期 的字节序
;;;421    			{
;;;422    				temp            = updateBuff[i];
;;;423    				updateBuff[i]   = updateBuff[i+3];
;;;424    				updateBuff[i+3] = temp;
;;;425    				temp            = updateBuff[i+1];
;;;426    				updateBuff[i+1] = updateBuff[i+2];
;;;427    				updateBuff[i+2] = temp;
;;;428    			}
;;;429    			Save2KDataToFlash(updateBuff,addrSavePid,2048);
;;;430    			addrSavePid = PID2CONFIGADDR;
;;;431    			frameIndex = 0;
;;;432    			memset(updateBuff,0,2048);
;;;433    			SendConfigNum(0x5012);//请求提升动力相关参数 (原来是0x5012请求第二个配置文件)
;;;434    		}
;;;435    		else  
;;;436    		{
;;;437    			currentNum = cmdId + 1;   
;;;438    			SendConfigNum(currentNum);//请求下一包数据
;;;439    		}
;;;440    	}
;;;441    	else if(cmdId == 0x5012)
;;;442    	{
;;;443    		offset = 2;
;;;444    		frameLen = ptrDeal[offset++] - 3;
;;;445    		
;;;446    		canDataConfig.pidVarNum = frameLen / 14;   //得到上报 ECU 变量的个数
;;;447    		
;;;448    		cmdId    = ptrDeal[offset++];
;;;449    		cmdId    = (cmdId << 8) + ptrDeal[offset++]; 
;;;450    		memcpy(updateBuff,&ptrDeal[offset],frameLen);
;;;451    		frameIndex += frameLen;
;;;452    		
;;;453    		for(i = 0;i < 500;i += 14)      //更改系数、偏移量的字节序
;;;454    		{
;;;455    			temp            = updateBuff[i+6];
;;;456    			updateBuff[i+6] = updateBuff[i+9];
;;;457    			updateBuff[i+9] = temp;
;;;458    			temp            = updateBuff[i+7];
;;;459    			updateBuff[i+7] = updateBuff[i+8];
;;;460    			updateBuff[i+8] = temp;
;;;461    			
;;;462    			temp             = updateBuff[i+10];
;;;463    			updateBuff[i+10] = updateBuff[i+13];
;;;464    			updateBuff[i+13] = temp;
;;;465    			temp             = updateBuff[i+11];
;;;466    			updateBuff[i+11] = updateBuff[i+12];
;;;467    			updateBuff[i+12] = temp;
;;;468    		}
;;;469    		
;;;470    		Save2KDataToFlash(updateBuff,PID2CONFIGADDR,500);//将数据写入第二配置文件区，（flash:0x08061000）
;;;471    		
;;;472    		canDataConfig.pidVersion = varOperation.newPIDVersion;
;;;473    		canDataConfig.pidNum     = varOperation.newPidNum;
;;;474    		
;;;475    		canDataConfig.busType    = varOperation.busType;     //todo:CAN线和K线的切换，后期处理
;;;476    		canDataConfig.canIdType  = varOperation.canIdType;
;;;477    		canDataConfig.canTxId    = varOperation.canTxId;
;;;478    		canDataConfig.canRxId    = varOperation.canRxId;
;;;479    		canDataConfig.canBaud    = varOperation.canBaud;
;;;480    		memcpy(canDataConfig.pidVerCmd,varOperation.pidVerCmd,8);
;;;481    		Save2KDataToFlash((uint8_t *)&canDataConfig,PIDCONFIG,(sizeof(_CANDataConfig)+3)); //保存 CAN 通讯参数
;;;482    		SendConfigNum(0x5018);
;;;483    	}
;;;484    	else if(cmdId == 0x5018)
;;;485    	{
;;;486    		offset = 5;
;;;487    		memcpy(strengthFuel.ecuVer,&ptrDeal[offset],16); //版本号
;;;488    		offset += 16;
;;;489    		memcpy(strengthFuel.fuelAddr,&ptrDeal[offset],5);//读取喷油量的地址
;;;490    		offset += 5;
;;;491    		memcpy(strengthFuel.mask,&ptrDeal[offset],4); //安全算法掩码
;;;492    		offset += 4;
;;;493    		strengthFuel.coe = ptrDeal[offset];           //提升动力的系数
;;;494    		offset ++;
;;;495    		memcpy(strengthFuel.safe1,&ptrDeal[offset],8);//安全算法cmd 1
;;;496    		offset += 8;
;;;497    		memcpy(strengthFuel.safe2,&ptrDeal[offset],8);//安全算法cmd 2
;;;498    		offset += 8;
;;;499    		memcpy(strengthFuel.mode1,&ptrDeal[offset],8);//模式 cmd 1
;;;500    		offset += 8;
;;;501    		memcpy(strengthFuel.mode2,&ptrDeal[offset],8);//模式 cmd 2
;;;502    		offset += 8;
;;;503    		strengthFuel.modeOrder = ptrDeal[offset];     //模式指令与安全算法执行的顺序
;;;504    		offset++;
;;;505    		memcpy(strengthFuel.faultCmd1,&ptrDeal[offset],8); //当前故障码
;;;506    		offset += 8;
;;;507    		memcpy(strengthFuel.faultCmd2,&ptrDeal[offset],8); //历史故障码
;;;508    		offset += 8;
;;;509    		memcpy(strengthFuel.faultClear,&ptrDeal[offset],8);//清除故障码
;;;510    		
;;;511    		ptrMode = Mem_malloc(100);
;;;512    		offset = 0;
;;;513    		
;;;514    		memcpy(&ptrMode[offset],strengthFuel.ecuVer,16);//为了拷贝代码，我就用中间数据的方法得了
;;;515    		offset += 16;
;;;516    		memcpy(&ptrMode[offset],strengthFuel.fuelAddr,5);
;;;517    		offset += 5;
;;;518    		memcpy(&ptrMode[offset],strengthFuel.mask,4);
;;;519    		offset += 4;
;;;520    		memcpy(&ptrMode[offset],strengthFuel.safe1,8);
;;;521    		offset += 8;
;;;522    		memcpy(&ptrMode[offset],strengthFuel.safe2,8);
;;;523    		offset += 8;
;;;524    		memcpy(&ptrMode[offset],strengthFuel.mode1,8);
;;;525    		offset += 8;
;;;526    		memcpy(&ptrMode[offset],strengthFuel.mode2,8);
;;;527    		offset += 8;
;;;528    		ptrMode[offset++] = strengthFuel.modeOrder;
;;;529    		offset++;
;;;530    		memcpy(&ptrMode[offset],strengthFuel.faultCmd1,8);    //当前故障码指令
;;;531    		offset += 8;
;;;532    		memcpy(&ptrMode[offset],strengthFuel.faultCmd2,8);    //历史故障码指令
;;;533    		offset += 8;
;;;534    		memcpy(&ptrMode[offset],strengthFuel.faultClear,8);   //清除故障码指令
;;;535    		
;;;536    		Save2KDataToFlash(ptrMode,PROMOTE_ADDR,100);
;;;537    		Mem_free(ptrMode);
;;;538    		
;;;539    		__disable_fault_irq();                    //重启
;;;540    		NVIC_SystemReset();
;;;541    	}
;;;542    }
000158  e8bd87f0          POP      {r4-r10,pc}
                  |L4.348|
00015c  2402              MOVS     r4,#2                 ;394
00015e  4621              MOV      r1,r4                 ;395
000160  1c64              ADDS     r4,r4,#1              ;395
000162  5c68              LDRB     r0,[r5,r1]            ;395
000164  1ec0              SUBS     r0,r0,#3              ;395
000166  fa1ffa80          UXTH     r10,r0                ;395
00016a  4621              MOV      r1,r4                 ;396
00016c  1c64              ADDS     r4,r4,#1              ;396
00016e  5c6f              LDRB     r7,[r5,r1]            ;396
000170  4621              MOV      r1,r4                 ;397
000172  1c64              ADDS     r4,r4,#1              ;397
000174  5c68              LDRB     r0,[r5,r1]            ;397
000176  eb002007          ADD      r0,r0,r7,LSL #8       ;397
00017a  b287              UXTH     r7,r0                 ;397
00017c  1929              ADDS     r1,r5,r4              ;398
00017e  4aad              LDR      r2,|L4.1076|
000180  4ba9              LDR      r3,|L4.1064|
000182  881b              LDRH     r3,[r3,#0]            ;398  ; frameIndex
000184  18d0              ADDS     r0,r2,r3              ;398
000186  4652              MOV      r2,r10                ;398
000188  f7fffffe          BL       __aeabi_memcpy
00018c  48a6              LDR      r0,|L4.1064|
00018e  8800              LDRH     r0,[r0,#0]            ;399  ; frameIndex
000190  4450              ADD      r0,r0,r10             ;399
000192  49a5              LDR      r1,|L4.1064|
000194  8008              STRH     r0,[r1,#0]            ;399
000196  f5a74080          SUB      r0,r7,#0x4000         ;400
00019a  210b              MOVS     r1,#0xb               ;400
00019c  fb90f2f1          SDIV     r2,r0,r1              ;400
0001a0  fb010012          MLS      r0,r1,r2,r0           ;400
0001a4  2800              CMP      r0,#0                 ;400
0001a6  d141              BNE      |L4.556|
0001a8  489d              LDR      r0,|L4.1056|
0001aa  7800              LDRB     r0,[r0,#0]            ;400  ; pidPackNum
0001ac  1a38              SUBS     r0,r7,r0              ;400
0001ae  f5b04f80          CMP      r0,#0x4000            ;400
0001b2  d03b              BEQ      |L4.556|
0001b4  2600              MOVS     r6,#0                 ;402
0001b6  e017              B        |L4.488|
                  |L4.440|
0001b8  489e              LDR      r0,|L4.1076|
0001ba  f8109006          LDRB     r9,[r0,r6]            ;404
0001be  4601              MOV      r1,r0                 ;405
0001c0  1cf0              ADDS     r0,r6,#3              ;405
0001c2  5c08              LDRB     r0,[r1,r0]            ;405
0001c4  5588              STRB     r0,[r1,r6]            ;405
0001c6  1cf0              ADDS     r0,r6,#3              ;406
0001c8  f8019000          STRB     r9,[r1,r0]            ;406
0001cc  1c70              ADDS     r0,r6,#1              ;407
0001ce  f8119000          LDRB     r9,[r1,r0]            ;407
0001d2  1cb0              ADDS     r0,r6,#2              ;408
0001d4  5c09              LDRB     r1,[r1,r0]            ;408
0001d6  4a97              LDR      r2,|L4.1076|
0001d8  1c70              ADDS     r0,r6,#1              ;408
0001da  5411              STRB     r1,[r2,r0]            ;408
0001dc  4611              MOV      r1,r2                 ;409
0001de  1cb0              ADDS     r0,r6,#2              ;409
0001e0  f8019000          STRB     r9,[r1,r0]            ;409
0001e4  300f              ADDS     r0,r0,#0xf            ;402
0001e6  b286              UXTH     r6,r0                 ;402
                  |L4.488|
0001e8  488f              LDR      r0,|L4.1064|
0001ea  8800              LDRH     r0,[r0,#0]            ;402  ; frameIndex
0001ec  4286              CMP      r6,r0                 ;402
0001ee  dbe3              BLT      |L4.440|
0001f0  f44f6200          MOV      r2,#0x800             ;411
0001f4  488e              LDR      r0,|L4.1072|
0001f6  6801              LDR      r1,[r0,#0]            ;411  ; addrSavePid
0001f8  488e              LDR      r0,|L4.1076|
0001fa  f7fffffe          BL       Save2KDataToFlash
0001fe  488c              LDR      r0,|L4.1072|
000200  6800              LDR      r0,[r0,#0]            ;412  ; addrSavePid
000202  f5006000          ADD      r0,r0,#0x800          ;412
000206  498a              LDR      r1,|L4.1072|
000208  6008              STR      r0,[r1,#0]            ;412  ; addrSavePid
00020a  2000              MOVS     r0,#0                 ;413
00020c  4986              LDR      r1,|L4.1064|
00020e  8008              STRH     r0,[r1,#0]            ;413
000210  f44f6100          MOV      r1,#0x800             ;414
000214  4887              LDR      r0,|L4.1076|
000216  f7fffffe          BL       __aeabi_memclr
00021a  1c78              ADDS     r0,r7,#1              ;415
00021c  4981              LDR      r1,|L4.1060|
00021e  8008              STRH     r0,[r1,#0]            ;415
000220  4608              MOV      r0,r1                 ;416
000222  8800              LDRH     r0,[r0,#0]            ;416  ; currentNum
000224  f7fffffe          BL       SendConfigNum
000228  e1ad              B        |L4.1414|
                  |L4.554|
00022a  e042              B        |L4.690|
                  |L4.556|
00022c  487c              LDR      r0,|L4.1056|
00022e  7800              LDRB     r0,[r0,#0]            ;418  ; pidPackNum
000230  1a38              SUBS     r0,r7,r0              ;418
000232  f5b04f80          CMP      r0,#0x4000            ;418
000236  d134              BNE      |L4.674|
000238  2600              MOVS     r6,#0                 ;420
00023a  e017              B        |L4.620|
                  |L4.572|
00023c  487d              LDR      r0,|L4.1076|
00023e  f8109006          LDRB     r9,[r0,r6]            ;422
000242  4601              MOV      r1,r0                 ;423
000244  1cf0              ADDS     r0,r6,#3              ;423
000246  5c08              LDRB     r0,[r1,r0]            ;423
000248  5588              STRB     r0,[r1,r6]            ;423
00024a  1cf0              ADDS     r0,r6,#3              ;424
00024c  f8019000          STRB     r9,[r1,r0]            ;424
000250  1c70              ADDS     r0,r6,#1              ;425
000252  f8119000          LDRB     r9,[r1,r0]            ;425
000256  1cb0              ADDS     r0,r6,#2              ;426
000258  5c09              LDRB     r1,[r1,r0]            ;426
00025a  4a76              LDR      r2,|L4.1076|
00025c  1c70              ADDS     r0,r6,#1              ;426
00025e  5411              STRB     r1,[r2,r0]            ;426
000260  4611              MOV      r1,r2                 ;427
000262  1cb0              ADDS     r0,r6,#2              ;427
000264  f8019000          STRB     r9,[r1,r0]            ;427
000268  300f              ADDS     r0,r0,#0xf            ;420
00026a  b286              UXTH     r6,r0                 ;420
                  |L4.620|
00026c  486e              LDR      r0,|L4.1064|
00026e  8800              LDRH     r0,[r0,#0]            ;420  ; frameIndex
000270  4286              CMP      r6,r0                 ;420
000272  dbe3              BLT      |L4.572|
000274  f44f6200          MOV      r2,#0x800             ;429
000278  486d              LDR      r0,|L4.1072|
00027a  6801              LDR      r1,[r0,#0]            ;429  ; addrSavePid
00027c  486d              LDR      r0,|L4.1076|
00027e  f7fffffe          BL       Save2KDataToFlash
000282  486d              LDR      r0,|L4.1080|
000284  496a              LDR      r1,|L4.1072|
000286  6008              STR      r0,[r1,#0]            ;430  ; addrSavePid
000288  2000              MOVS     r0,#0                 ;431
00028a  4967              LDR      r1,|L4.1064|
00028c  8008              STRH     r0,[r1,#0]            ;431
00028e  f44f6100          MOV      r1,#0x800             ;432
000292  4868              LDR      r0,|L4.1076|
000294  f7fffffe          BL       __aeabi_memclr
000298  f2450012          MOV      r0,#0x5012            ;433
00029c  f7fffffe          BL       SendConfigNum
0002a0  e171              B        |L4.1414|
                  |L4.674|
0002a2  1c78              ADDS     r0,r7,#1              ;437
0002a4  495f              LDR      r1,|L4.1060|
0002a6  8008              STRH     r0,[r1,#0]            ;437
0002a8  4608              MOV      r0,r1                 ;438
0002aa  8800              LDRH     r0,[r0,#0]            ;438  ; currentNum
0002ac  f7fffffe          BL       SendConfigNum
0002b0  e169              B        |L4.1414|
                  |L4.690|
0002b2  f2450012          MOV      r0,#0x5012            ;441
0002b6  4287              CMP      r7,r0                 ;441
0002b8  d17e              BNE      |L4.952|
0002ba  2402              MOVS     r4,#2                 ;443
0002bc  4621              MOV      r1,r4                 ;444
0002be  1c64              ADDS     r4,r4,#1              ;444
0002c0  5c68              LDRB     r0,[r5,r1]            ;444
0002c2  1ec0              SUBS     r0,r0,#3              ;444
0002c4  fa1ffa80          UXTH     r10,r0                ;444
0002c8  200e              MOVS     r0,#0xe               ;446
0002ca  fb9af0f0          SDIV     r0,r10,r0             ;446
0002ce  495b              LDR      r1,|L4.1084|
0002d0  80c8              STRH     r0,[r1,#6]            ;446
0002d2  4621              MOV      r1,r4                 ;448
0002d4  1c64              ADDS     r4,r4,#1              ;448
0002d6  5c6f              LDRB     r7,[r5,r1]            ;448
0002d8  4621              MOV      r1,r4                 ;449
0002da  1c64              ADDS     r4,r4,#1              ;449
0002dc  5c68              LDRB     r0,[r5,r1]            ;449
0002de  eb002007          ADD      r0,r0,r7,LSL #8       ;449
0002e2  b287              UXTH     r7,r0                 ;449
0002e4  1929              ADDS     r1,r5,r4              ;450
0002e6  4652              MOV      r2,r10                ;450
0002e8  4852              LDR      r0,|L4.1076|
0002ea  f7fffffe          BL       __aeabi_memcpy
0002ee  484e              LDR      r0,|L4.1064|
0002f0  8800              LDRH     r0,[r0,#0]            ;451  ; frameIndex
0002f2  4450              ADD      r0,r0,r10             ;451
0002f4  494c              LDR      r1,|L4.1064|
0002f6  8008              STRH     r0,[r1,#0]            ;451
0002f8  2600              MOVS     r6,#0                 ;453
0002fa  e02f              B        |L4.860|
                  |L4.764|
0002fc  494d              LDR      r1,|L4.1076|
0002fe  1db0              ADDS     r0,r6,#6              ;455
000300  f8119000          LDRB     r9,[r1,r0]            ;455
000304  1cc0              ADDS     r0,r0,#3              ;456
000306  5c09              LDRB     r1,[r1,r0]            ;456
000308  4a4a              LDR      r2,|L4.1076|
00030a  1db0              ADDS     r0,r6,#6              ;456
00030c  5411              STRB     r1,[r2,r0]            ;456
00030e  4611              MOV      r1,r2                 ;457
000310  1cc0              ADDS     r0,r0,#3              ;457
000312  f8019000          STRB     r9,[r1,r0]            ;457
000316  1df0              ADDS     r0,r6,#7              ;458
000318  f8119000          LDRB     r9,[r1,r0]            ;458
00031c  1c40              ADDS     r0,r0,#1              ;459
00031e  5c09              LDRB     r1,[r1,r0]            ;459
000320  1df0              ADDS     r0,r6,#7              ;459
000322  5411              STRB     r1,[r2,r0]            ;459
000324  4611              MOV      r1,r2                 ;460
000326  1c40              ADDS     r0,r0,#1              ;460
000328  f8019000          STRB     r9,[r1,r0]            ;460
00032c  1c80              ADDS     r0,r0,#2              ;462
00032e  f8119000          LDRB     r9,[r1,r0]            ;462
000332  1cc0              ADDS     r0,r0,#3              ;463
000334  5c09              LDRB     r1,[r1,r0]            ;463
000336  1ec0              SUBS     r0,r0,#3              ;463
000338  5411              STRB     r1,[r2,r0]            ;463
00033a  4611              MOV      r1,r2                 ;464
00033c  1cc0              ADDS     r0,r0,#3              ;464
00033e  f8019000          STRB     r9,[r1,r0]            ;464
000342  1e80              SUBS     r0,r0,#2              ;465
000344  f8119000          LDRB     r9,[r1,r0]            ;465
000348  1c40              ADDS     r0,r0,#1              ;466
00034a  5c09              LDRB     r1,[r1,r0]            ;466
00034c  1e40              SUBS     r0,r0,#1              ;466
00034e  5411              STRB     r1,[r2,r0]            ;466
000350  4611              MOV      r1,r2                 ;467
000352  1c40              ADDS     r0,r0,#1              ;467
000354  f8019000          STRB     r9,[r1,r0]            ;467
000358  1c80              ADDS     r0,r0,#2              ;453
00035a  b286              UXTH     r6,r0                 ;453
                  |L4.860|
00035c  f5b67ffa          CMP      r6,#0x1f4             ;453
000360  dbcc              BLT      |L4.764|
000362  f44f72fa          MOV      r2,#0x1f4             ;470
000366  4934              LDR      r1,|L4.1080|
000368  4832              LDR      r0,|L4.1076|
00036a  f7fffffe          BL       Save2KDataToFlash
00036e  482b              LDR      r0,|L4.1052|
000370  f8d0007e          LDR      r0,[r0,#0x7e]         ;472  ; varOperation
000374  4931              LDR      r1,|L4.1084|
000376  6008              STR      r0,[r1,#0]            ;472  ; canDataConfig
000378  4828              LDR      r0,|L4.1052|
00037a  f8b00082          LDRH     r0,[r0,#0x82]         ;473  ; varOperation
00037e  8088              STRH     r0,[r1,#4]            ;473
000380  4826              LDR      r0,|L4.1052|
000382  f8900086          LDRB     r0,[r0,#0x86]         ;475  ; varOperation
000386  7208              STRB     r0,[r1,#8]            ;475
000388  4824              LDR      r0,|L4.1052|
00038a  f8900087          LDRB     r0,[r0,#0x87]         ;476  ; varOperation
00038e  7248              STRB     r0,[r1,#9]            ;476
000390  4822              LDR      r0,|L4.1052|
000392  f8d00088          LDR      r0,[r0,#0x88]         ;477  ; varOperation
000396  f8c1000a          STR      r0,[r1,#0xa]          ;477  ; canDataConfig
00039a  4820              LDR      r0,|L4.1052|
00039c  f8d0008c          LDR      r0,[r0,#0x8c]         ;478  ; varOperation
0003a0  f8c1000e          STR      r0,[r1,#0xe]          ;478  ; canDataConfig
0003a4  481d              LDR      r0,|L4.1052|
0003a6  f8900090          LDRB     r0,[r0,#0x90]         ;479  ; varOperation
0003aa  7488              STRB     r0,[r1,#0x12]         ;479
0003ac  3113              ADDS     r1,r1,#0x13           ;480
0003ae  481b              LDR      r0,|L4.1052|
0003b0  309b              ADDS     r0,r0,#0x9b           ;480
0003b2  6802              LDR      r2,[r0,#0]            ;480  ; varOperation
0003b4  600a              STR      r2,[r1,#0]            ;480  ; canDataConfig
0003b6  e000              B        |L4.954|
                  |L4.952|
0003b8  e00b              B        |L4.978|
                  |L4.954|
0003ba  6840              LDR      r0,[r0,#4]            ;480  ; varOperation
0003bc  6048              STR      r0,[r1,#4]            ;480  ; canDataConfig
0003be  221e              MOVS     r2,#0x1e              ;481
0003c0  491f              LDR      r1,|L4.1088|
0003c2  481e              LDR      r0,|L4.1084|
0003c4  f7fffffe          BL       Save2KDataToFlash
0003c8  f2450018          MOV      r0,#0x5018            ;482
0003cc  f7fffffe          BL       SendConfigNum
                  |L4.976|
0003d0  e0d9              B        |L4.1414|
                  |L4.978|
0003d2  f2450018          MOV      r0,#0x5018            ;484
0003d6  4287              CMP      r7,r0                 ;484
0003d8  d1fa              BNE      |L4.976|
0003da  2405              MOVS     r4,#5                 ;486
0003dc  1929              ADDS     r1,r5,r4              ;487
0003de  2210              MOVS     r2,#0x10              ;487
0003e0  4818              LDR      r0,|L4.1092|
0003e2  f7fffffe          BL       __aeabi_memcpy
0003e6  3410              ADDS     r4,r4,#0x10           ;488
0003e8  1929              ADDS     r1,r5,r4              ;489
0003ea  4816              LDR      r0,|L4.1092|
0003ec  680a              LDR      r2,[r1,#0]            ;489
0003ee  6102              STR      r2,[r0,#0x10]         ;489  ; strengthFuel
0003f0  7909              LDRB     r1,[r1,#4]            ;489
0003f2  7501              STRB     r1,[r0,#0x14]         ;489
0003f4  1d64              ADDS     r4,r4,#5              ;490
0003f6  1929              ADDS     r1,r5,r4              ;491
0003f8  6809              LDR      r1,[r1,#0]            ;491
0003fa  f8c01015          STR      r1,[r0,#0x15]         ;491  ; strengthFuel
0003fe  1d24              ADDS     r4,r4,#4              ;492
000400  5d28              LDRB     r0,[r5,r4]            ;493
000402  b240              SXTB     r0,r0                 ;493
000404  490f              LDR      r1,|L4.1092|
000406  7648              STRB     r0,[r1,#0x19]         ;493
000408  1c64              ADDS     r4,r4,#1              ;494
00040a  1928              ADDS     r0,r5,r4              ;495
00040c  311a              ADDS     r1,r1,#0x1a           ;495
00040e  6802              LDR      r2,[r0,#0]            ;495
000410  600a              STR      r2,[r1,#0]            ;495  ; strengthFuel
000412  6840              LDR      r0,[r0,#4]            ;495
000414  6048              STR      r0,[r1,#4]            ;495  ; strengthFuel
000416  3408              ADDS     r4,r4,#8              ;496
000418  1929              ADDS     r1,r5,r4              ;497
00041a  e015              B        |L4.1096|
                  |L4.1052|
                          DCD      varOperation
                  |L4.1056|
                          DCD      pidPackNum
                  |L4.1060|
                          DCD      |symbol_number.52|
                  |L4.1064|
                          DCD      |symbol_number.53|
                  |L4.1068|
                          DCD      0x08063000
                  |L4.1072|
                          DCD      addrSavePid
                  |L4.1076|
                          DCD      updateBuff
                  |L4.1080|
                          DCD      0x08061000
                  |L4.1084|
                          DCD      canDataConfig
                  |L4.1088|
                          DCD      0x08060800
                  |L4.1092|
                          DCD      strengthFuel
                  |L4.1096|
000448  4850              LDR      r0,|L4.1420|
00044a  680a              LDR      r2,[r1,#0]            ;497
00044c  6002              STR      r2,[r0,#0]            ;497  ; strengthFuel
00044e  6849              LDR      r1,[r1,#4]            ;497
000450  6041              STR      r1,[r0,#4]            ;497  ; strengthFuel
000452  3408              ADDS     r4,r4,#8              ;498
000454  1929              ADDS     r1,r5,r4              ;499
000456  3008              ADDS     r0,r0,#8              ;499
000458  680a              LDR      r2,[r1,#0]            ;499
00045a  6002              STR      r2,[r0,#0]            ;499  ; strengthFuel
00045c  6849              LDR      r1,[r1,#4]            ;499
00045e  6041              STR      r1,[r0,#4]            ;499  ; strengthFuel
000460  3408              ADDS     r4,r4,#8              ;500
000462  1929              ADDS     r1,r5,r4              ;501
000464  3008              ADDS     r0,r0,#8              ;501
000466  680a              LDR      r2,[r1,#0]            ;501
000468  6002              STR      r2,[r0,#0]            ;501  ; strengthFuel
00046a  6849              LDR      r1,[r1,#4]            ;501
00046c  6041              STR      r1,[r0,#4]            ;501  ; strengthFuel
00046e  3408              ADDS     r4,r4,#8              ;502
000470  5d28              LDRB     r0,[r5,r4]            ;503
000472  4946              LDR      r1,|L4.1420|
000474  3922              SUBS     r1,r1,#0x22           ;503
000476  f881003a          STRB     r0,[r1,#0x3a]         ;503
00047a  1c64              ADDS     r4,r4,#1              ;504
00047c  1928              ADDS     r0,r5,r4              ;505
00047e  313b              ADDS     r1,r1,#0x3b           ;505
000480  6802              LDR      r2,[r0,#0]            ;505
000482  600a              STR      r2,[r1,#0]            ;505  ; strengthFuel
000484  6840              LDR      r0,[r0,#4]            ;505
000486  6048              STR      r0,[r1,#4]            ;505  ; strengthFuel
000488  3408              ADDS     r4,r4,#8              ;506
00048a  1929              ADDS     r1,r5,r4              ;507
00048c  483f              LDR      r0,|L4.1420|
00048e  3021              ADDS     r0,r0,#0x21           ;507
000490  680a              LDR      r2,[r1,#0]            ;507
000492  6002              STR      r2,[r0,#0]            ;507  ; strengthFuel
000494  6849              LDR      r1,[r1,#4]            ;507
000496  6041              STR      r1,[r0,#4]            ;507  ; strengthFuel
000498  3408              ADDS     r4,r4,#8              ;508
00049a  1928              ADDS     r0,r5,r4              ;509
00049c  493b              LDR      r1,|L4.1420|
00049e  3129              ADDS     r1,r1,#0x29           ;509
0004a0  6802              LDR      r2,[r0,#0]            ;509
0004a2  600a              STR      r2,[r1,#0]            ;509  ; strengthFuel
0004a4  6840              LDR      r0,[r0,#4]            ;509
0004a6  6048              STR      r0,[r1,#4]            ;509  ; strengthFuel
0004a8  2064              MOVS     r0,#0x64              ;511
0004aa  f7fffffe          BL       Mem_malloc
0004ae  4680              MOV      r8,r0                 ;511
0004b0  2400              MOVS     r4,#0                 ;512
0004b2  eb080004          ADD      r0,r8,r4              ;514
0004b6  2210              MOVS     r2,#0x10              ;514
0004b8  4934              LDR      r1,|L4.1420|
0004ba  3922              SUBS     r1,r1,#0x22           ;514
0004bc  f7fffffe          BL       __aeabi_memcpy
0004c0  3410              ADDS     r4,r4,#0x10           ;515
0004c2  eb080004          ADD      r0,r8,r4              ;516
0004c6  4931              LDR      r1,|L4.1420|
0004c8  3922              SUBS     r1,r1,#0x22           ;516
0004ca  690a              LDR      r2,[r1,#0x10]         ;516  ; strengthFuel
0004cc  6002              STR      r2,[r0,#0]            ;516
0004ce  7d09              LDRB     r1,[r1,#0x14]         ;516  ; strengthFuel
0004d0  7101              STRB     r1,[r0,#4]            ;516
0004d2  1d64              ADDS     r4,r4,#5              ;517
0004d4  eb080004          ADD      r0,r8,r4              ;518
0004d8  492c              LDR      r1,|L4.1420|
0004da  3922              SUBS     r1,r1,#0x22           ;518
0004dc  f8d11015          LDR      r1,[r1,#0x15]         ;518  ; strengthFuel
0004e0  6001              STR      r1,[r0,#0]            ;518
0004e2  1d24              ADDS     r4,r4,#4              ;519
0004e4  eb080004          ADD      r0,r8,r4              ;520
0004e8  4928              LDR      r1,|L4.1420|
0004ea  3908              SUBS     r1,r1,#8              ;520
0004ec  680a              LDR      r2,[r1,#0]            ;520  ; strengthFuel
0004ee  6002              STR      r2,[r0,#0]            ;520
0004f0  6849              LDR      r1,[r1,#4]            ;520  ; strengthFuel
0004f2  6041              STR      r1,[r0,#4]            ;520
0004f4  3408              ADDS     r4,r4,#8              ;521
0004f6  eb080004          ADD      r0,r8,r4              ;522
0004fa  4924              LDR      r1,|L4.1420|
0004fc  680a              LDR      r2,[r1,#0]            ;522  ; strengthFuel
0004fe  6002              STR      r2,[r0,#0]            ;522
000500  6849              LDR      r1,[r1,#4]            ;522  ; strengthFuel
000502  6041              STR      r1,[r0,#4]            ;522
000504  3408              ADDS     r4,r4,#8              ;523
000506  eb080004          ADD      r0,r8,r4              ;524
00050a  4920              LDR      r1,|L4.1420|
00050c  3108              ADDS     r1,r1,#8              ;524
00050e  680a              LDR      r2,[r1,#0]            ;524  ; strengthFuel
000510  6002              STR      r2,[r0,#0]            ;524
000512  6849              LDR      r1,[r1,#4]            ;524  ; strengthFuel
000514  6041              STR      r1,[r0,#4]            ;524
000516  3408              ADDS     r4,r4,#8              ;525
000518  eb080004          ADD      r0,r8,r4              ;526
00051c  491b              LDR      r1,|L4.1420|
00051e  3110              ADDS     r1,r1,#0x10           ;526
000520  680a              LDR      r2,[r1,#0]            ;526  ; strengthFuel
000522  6002              STR      r2,[r0,#0]            ;526
000524  6849              LDR      r1,[r1,#4]            ;526  ; strengthFuel
000526  6041              STR      r1,[r0,#4]            ;526
000528  3408              ADDS     r4,r4,#8              ;527
00052a  4818              LDR      r0,|L4.1420|
00052c  3822              SUBS     r0,r0,#0x22           ;528
00052e  f890203a          LDRB     r2,[r0,#0x3a]         ;528  ; strengthFuel
000532  4621              MOV      r1,r4                 ;528
000534  1c64              ADDS     r4,r4,#1              ;528
000536  f8082001          STRB     r2,[r8,r1]            ;528
00053a  1c64              ADDS     r4,r4,#1              ;529
00053c  eb080004          ADD      r0,r8,r4              ;530
000540  4912              LDR      r1,|L4.1420|
000542  3119              ADDS     r1,r1,#0x19           ;530
000544  680a              LDR      r2,[r1,#0]            ;530  ; strengthFuel
000546  6002              STR      r2,[r0,#0]            ;530
000548  6849              LDR      r1,[r1,#4]            ;530  ; strengthFuel
00054a  6041              STR      r1,[r0,#4]            ;530
00054c  3408              ADDS     r4,r4,#8              ;531
00054e  eb080004          ADD      r0,r8,r4              ;532
000552  490e              LDR      r1,|L4.1420|
000554  3121              ADDS     r1,r1,#0x21           ;532
000556  680a              LDR      r2,[r1,#0]            ;532  ; strengthFuel
000558  6002              STR      r2,[r0,#0]            ;532
00055a  6849              LDR      r1,[r1,#4]            ;532  ; strengthFuel
00055c  6041              STR      r1,[r0,#4]            ;532
00055e  3408              ADDS     r4,r4,#8              ;533
000560  eb080004          ADD      r0,r8,r4              ;534
000564  4909              LDR      r1,|L4.1420|
000566  3129              ADDS     r1,r1,#0x29           ;534
000568  680a              LDR      r2,[r1,#0]            ;534  ; strengthFuel
00056a  6002              STR      r2,[r0,#0]            ;534
00056c  6849              LDR      r1,[r1,#4]            ;534  ; strengthFuel
00056e  6041              STR      r1,[r0,#4]            ;534
000570  2264              MOVS     r2,#0x64              ;536
000572  4907              LDR      r1,|L4.1424|
000574  4640              MOV      r0,r8                 ;536
000576  f7fffffe          BL       Save2KDataToFlash
00057a  4640              MOV      r0,r8                 ;537
00057c  f7fffffe          BL       Mem_free
000580  b671              CPSID    f                     ;539
000582  f7fffffe          BL       __NVIC_SystemReset
                  |L4.1414|
000586  bf00              NOP      
000588  e5e6              B        |L4.344|
;;;543    #include "obd.h"
                          ENDP

00058a  0000              DCW      0x0000
                  |L4.1420|
                          DCD      strengthFuel+0x22
                  |L4.1424|
                          DCD      0x08065000

                          AREA ||i.FuelModeChange||, CODE, READONLY, ALIGN=2

                  FuelModeChange PROC
;;;686    extern uint8_t strengPower[300];
;;;687    static void FuelModeChange(uint8_t* ptrDeal)          //节油、强动力、普通模式 切换
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;688    {
000004  4606              MOV      r6,r0
;;;689    	uint16_t offset  = 5;
000006  2405              MOVS     r4,#5
;;;690    	uint8_t* ptrMode = NULL;
000008  2500              MOVS     r5,#0
;;;691    	uint16_t newCRC  = 0,nowCRC = 0;
00000a  2700              MOVS     r7,#0
00000c  f04f0800          MOV      r8,#0
;;;692    	
;;;693    	memcpy(strengthFuel.ecuVer,&ptrDeal[offset],16);  //版本号
000010  1931              ADDS     r1,r6,r4
000012  2210              MOVS     r2,#0x10
000014  489b              LDR      r0,|L5.644|
000016  f7fffffe          BL       __aeabi_memcpy
;;;694    	offset += 16;
00001a  3410              ADDS     r4,r4,#0x10
;;;695    	memcpy(strengthFuel.fuelAddr,&ptrDeal[offset],5); //读取喷油量的地址
00001c  1931              ADDS     r1,r6,r4
00001e  4899              LDR      r0,|L5.644|
000020  680a              LDR      r2,[r1,#0]
000022  6102              STR      r2,[r0,#0x10]  ; strengthFuel
000024  7909              LDRB     r1,[r1,#4]
000026  7501              STRB     r1,[r0,#0x14]
;;;696    	offset += 5;
000028  1d64              ADDS     r4,r4,#5
;;;697    	memcpy(strengthFuel.mask,&ptrDeal[offset],4);     //安全算法掩码
00002a  1931              ADDS     r1,r6,r4
00002c  6809              LDR      r1,[r1,#0]
00002e  f8c01015          STR      r1,[r0,#0x15]  ; strengthFuel
;;;698    	offset += 4;
000032  1d24              ADDS     r4,r4,#4
;;;699    	strengthFuel.coe = ptrDeal[offset];               //提升动力的系数
000034  5d30              LDRB     r0,[r6,r4]
000036  b240              SXTB     r0,r0
000038  4992              LDR      r1,|L5.644|
00003a  7648              STRB     r0,[r1,#0x19]
;;;700    	offset ++;
00003c  1c64              ADDS     r4,r4,#1
;;;701    	memcpy(strengthFuel.safe1,&ptrDeal[offset],8);    //安全算法cmd 1
00003e  1930              ADDS     r0,r6,r4
000040  311a              ADDS     r1,r1,#0x1a
000042  6802              LDR      r2,[r0,#0]
000044  600a              STR      r2,[r1,#0]  ; strengthFuel
000046  6840              LDR      r0,[r0,#4]
000048  6048              STR      r0,[r1,#4]  ; strengthFuel
;;;702    	offset += 8;
00004a  3408              ADDS     r4,r4,#8
;;;703    	memcpy(strengthFuel.safe2,&ptrDeal[offset],8);    //安全算法cmd 2
00004c  1930              ADDS     r0,r6,r4
00004e  3108              ADDS     r1,r1,#8
000050  6802              LDR      r2,[r0,#0]
000052  600a              STR      r2,[r1,#0]  ; strengthFuel
000054  6840              LDR      r0,[r0,#4]
000056  6048              STR      r0,[r1,#4]  ; strengthFuel
;;;704    	offset += 8;
000058  3408              ADDS     r4,r4,#8
;;;705    	memcpy(strengthFuel.mode1,&ptrDeal[offset],8);    //模式 cmd 1
00005a  1930              ADDS     r0,r6,r4
00005c  3108              ADDS     r1,r1,#8
00005e  6802              LDR      r2,[r0,#0]
000060  600a              STR      r2,[r1,#0]  ; strengthFuel
000062  6840              LDR      r0,[r0,#4]
000064  6048              STR      r0,[r1,#4]  ; strengthFuel
;;;706    	offset += 8;
000066  3408              ADDS     r4,r4,#8
;;;707    	memcpy(strengthFuel.mode2,&ptrDeal[offset],8);    //模式 cmd 2
000068  1931              ADDS     r1,r6,r4
00006a  4886              LDR      r0,|L5.644|
00006c  3032              ADDS     r0,r0,#0x32
00006e  680a              LDR      r2,[r1,#0]
000070  6002              STR      r2,[r0,#0]  ; strengthFuel
000072  6849              LDR      r1,[r1,#4]
000074  6041              STR      r1,[r0,#4]  ; strengthFuel
;;;708    	offset += 8;
000076  3408              ADDS     r4,r4,#8
;;;709    	strengthFuel.modeOrder = ptrDeal[offset];         //模式指令与安全算法执行的顺序
000078  5d30              LDRB     r0,[r6,r4]
00007a  4982              LDR      r1,|L5.644|
00007c  f881003a          STRB     r0,[r1,#0x3a]
;;;710    	offset++;
000080  1c64              ADDS     r4,r4,#1
;;;711    	memcpy(strengthFuel.faultCmd1,&ptrDeal[offset],8);    //当前故障码
000082  1930              ADDS     r0,r6,r4
000084  313b              ADDS     r1,r1,#0x3b
000086  6802              LDR      r2,[r0,#0]
000088  600a              STR      r2,[r1,#0]  ; strengthFuel
00008a  6840              LDR      r0,[r0,#4]
00008c  6048              STR      r0,[r1,#4]  ; strengthFuel
;;;712    	offset += 8;
00008e  3408              ADDS     r4,r4,#8
;;;713    	memcpy(strengthFuel.faultCmd2,&ptrDeal[offset],8);    //历史故障码
000090  1930              ADDS     r0,r6,r4
000092  3108              ADDS     r1,r1,#8
000094  6802              LDR      r2,[r0,#0]
000096  600a              STR      r2,[r1,#0]  ; strengthFuel
000098  6840              LDR      r0,[r0,#4]
00009a  6048              STR      r0,[r1,#4]  ; strengthFuel
;;;714    	offset += 8;
00009c  3408              ADDS     r4,r4,#8
;;;715    	memcpy(strengthFuel.faultClear,&ptrDeal[offset],8);   //清除故障码
00009e  1930              ADDS     r0,r6,r4
0000a0  3108              ADDS     r1,r1,#8
0000a2  6802              LDR      r2,[r0,#0]
0000a4  600a              STR      r2,[r1,#0]  ; strengthFuel
0000a6  6840              LDR      r0,[r0,#4]
0000a8  6048              STR      r0,[r1,#4]  ; strengthFuel
;;;716    
;;;717    	if(strengthFuel.coe == strengthFuelFlash.coe)
0000aa  4876              LDR      r0,|L5.644|
0000ac  f9900019          LDRSB    r0,[r0,#0x19]  ; strengthFuel
0000b0  4975              LDR      r1,|L5.648|
0000b2  f9911019          LDRSB    r1,[r1,#0x19]  ; strengthFuelFlash
0000b6  4288              CMP      r0,r1
0000b8  d10f              BNE      |L5.218|
;;;718    	{
;;;719    		ptrMode = Mem_malloc(5);  //
0000ba  2005              MOVS     r0,#5
0000bc  f7fffffe          BL       Mem_malloc
0000c0  4605              MOV      r5,r0
;;;720    		ptrMode[0] = 4;           //长度
0000c2  2004              MOVS     r0,#4
0000c4  7028              STRB     r0,[r5,#0]
;;;721    		ptrMode[1] = 0x50;
0000c6  2050              MOVS     r0,#0x50
0000c8  7068              STRB     r0,[r5,#1]
;;;722    		ptrMode[2] = 0x15;
0000ca  2015              MOVS     r0,#0x15
0000cc  70a8              STRB     r0,[r5,#2]
;;;723    		ptrMode[3] = strengthFuel.coe;
0000ce  486d              LDR      r0,|L5.644|
0000d0  7e40              LDRB     r0,[r0,#0x19]  ; strengthFuel
0000d2  70e8              STRB     r0,[r5,#3]
;;;724    		SendPidCmdData(ptrMode);
0000d4  4628              MOV      r0,r5
0000d6  f7fffffe          BL       SendPidCmdData
                  |L5.218|
;;;725    	}
;;;726    	Mem_free(ptrMode);
0000da  4628              MOV      r0,r5
0000dc  f7fffffe          BL       Mem_free
;;;727    	Mem_free(ptrDeal);
0000e0  4630              MOV      r0,r6
0000e2  f7fffffe          BL       Mem_free
;;;728    	
;;;729    	newCRC = CRC_ComputeFile(newCRC,strengthFuel.ecuVer,16);
0000e6  2210              MOVS     r2,#0x10
0000e8  4966              LDR      r1,|L5.644|
0000ea  4638              MOV      r0,r7
0000ec  f7fffffe          BL       CRC_ComputeFile
0000f0  4607              MOV      r7,r0
;;;730    	newCRC = CRC_ComputeFile(newCRC,strengthFuel.fuelAddr,5);
0000f2  2205              MOVS     r2,#5
0000f4  4963              LDR      r1,|L5.644|
0000f6  3110              ADDS     r1,r1,#0x10
0000f8  4638              MOV      r0,r7
0000fa  f7fffffe          BL       CRC_ComputeFile
0000fe  4607              MOV      r7,r0
;;;731    	newCRC = CRC_ComputeFile(newCRC,strengthFuel.mask,4);
000100  2204              MOVS     r2,#4
000102  4960              LDR      r1,|L5.644|
000104  3115              ADDS     r1,r1,#0x15
000106  4638              MOV      r0,r7
000108  f7fffffe          BL       CRC_ComputeFile
00010c  4607              MOV      r7,r0
;;;732    	newCRC = CRC_ComputeFile(newCRC,strengthFuel.safe1,8);
00010e  2208              MOVS     r2,#8
000110  495c              LDR      r1,|L5.644|
000112  311a              ADDS     r1,r1,#0x1a
000114  4638              MOV      r0,r7
000116  f7fffffe          BL       CRC_ComputeFile
00011a  4607              MOV      r7,r0
;;;733    	newCRC = CRC_ComputeFile(newCRC,strengthFuel.safe2,8);
00011c  2208              MOVS     r2,#8
00011e  4959              LDR      r1,|L5.644|
000120  3122              ADDS     r1,r1,#0x22
000122  4638              MOV      r0,r7
000124  f7fffffe          BL       CRC_ComputeFile
000128  4607              MOV      r7,r0
;;;734    	newCRC = CRC_ComputeFile(newCRC,strengthFuel.mode1,8);
00012a  2208              MOVS     r2,#8
00012c  4955              LDR      r1,|L5.644|
00012e  312a              ADDS     r1,r1,#0x2a
000130  4638              MOV      r0,r7
000132  f7fffffe          BL       CRC_ComputeFile
000136  4607              MOV      r7,r0
;;;735    	newCRC = CRC_ComputeFile(newCRC,strengthFuel.mode2,8);
000138  2208              MOVS     r2,#8
00013a  4952              LDR      r1,|L5.644|
00013c  3132              ADDS     r1,r1,#0x32
00013e  4638              MOV      r0,r7
000140  f7fffffe          BL       CRC_ComputeFile
000144  4607              MOV      r7,r0
;;;736    	
;;;737    	nowCRC = CRC_ComputeFile(nowCRC,strengthFuelFlash.ecuVer,16);
000146  2210              MOVS     r2,#0x10
000148  494f              LDR      r1,|L5.648|
00014a  4640              MOV      r0,r8
00014c  f7fffffe          BL       CRC_ComputeFile
000150  4680              MOV      r8,r0
;;;738    	nowCRC = CRC_ComputeFile(nowCRC,strengthFuelFlash.fuelAddr,5);
000152  2205              MOVS     r2,#5
000154  494c              LDR      r1,|L5.648|
000156  3110              ADDS     r1,r1,#0x10
000158  4640              MOV      r0,r8
00015a  f7fffffe          BL       CRC_ComputeFile
00015e  4680              MOV      r8,r0
;;;739    	nowCRC = CRC_ComputeFile(nowCRC,strengthFuelFlash.mask,4);
000160  2204              MOVS     r2,#4
000162  4949              LDR      r1,|L5.648|
000164  3115              ADDS     r1,r1,#0x15
000166  4640              MOV      r0,r8
000168  f7fffffe          BL       CRC_ComputeFile
00016c  4680              MOV      r8,r0
;;;740    	nowCRC = CRC_ComputeFile(nowCRC,strengthFuelFlash.safe1,8);
00016e  2208              MOVS     r2,#8
000170  4945              LDR      r1,|L5.648|
000172  311a              ADDS     r1,r1,#0x1a
000174  4640              MOV      r0,r8
000176  f7fffffe          BL       CRC_ComputeFile
00017a  4680              MOV      r8,r0
;;;741    	nowCRC = CRC_ComputeFile(nowCRC,strengthFuelFlash.safe2,8);
00017c  2208              MOVS     r2,#8
00017e  4942              LDR      r1,|L5.648|
000180  3122              ADDS     r1,r1,#0x22
000182  4640              MOV      r0,r8
000184  f7fffffe          BL       CRC_ComputeFile
000188  4680              MOV      r8,r0
;;;742    	nowCRC = CRC_ComputeFile(nowCRC,strengthFuelFlash.mode1,8);
00018a  2208              MOVS     r2,#8
00018c  493e              LDR      r1,|L5.648|
00018e  312a              ADDS     r1,r1,#0x2a
000190  4640              MOV      r0,r8
000192  f7fffffe          BL       CRC_ComputeFile
000196  4680              MOV      r8,r0
;;;743    	nowCRC = CRC_ComputeFile(nowCRC,strengthFuelFlash.mode2,8);
000198  2208              MOVS     r2,#8
00019a  493b              LDR      r1,|L5.648|
00019c  3132              ADDS     r1,r1,#0x32
00019e  4640              MOV      r0,r8
0001a0  f7fffffe          BL       CRC_ComputeFile
0001a4  4680              MOV      r8,r0
;;;744    	if(nowCRC == newCRC)
0001a6  45b8              CMP      r8,r7
0001a8  d101              BNE      |L5.430|
;;;745    		return;
;;;746    	ptrMode = Mem_malloc(100);
;;;747    	offset = 0;
;;;748    	
;;;749    	memcpy(&ptrMode[offset],strengthFuel.ecuVer,16);
;;;750    	offset += 16;
;;;751    	memcpy(&ptrMode[offset],strengthFuel.fuelAddr,5);
;;;752    	offset += 5;
;;;753    	memcpy(&ptrMode[offset],strengthFuel.mask,4);
;;;754    	offset += 4;
;;;755    	memcpy(&ptrMode[offset],strengthFuel.safe1,8);
;;;756    	offset += 8;
;;;757    	memcpy(&ptrMode[offset],strengthFuel.safe2,8);
;;;758    	offset += 8;
;;;759    	memcpy(&ptrMode[offset],strengthFuel.mode1,8);
;;;760    	offset += 8;
;;;761    	memcpy(&ptrMode[offset],strengthFuel.mode2,8);
;;;762    	offset += 8;
;;;763    	ptrMode[offset++] = strengthFuel.modeOrder;
;;;764    	offset++;
;;;765    	memcpy(&ptrMode[offset],strengthFuel.faultCmd1,8);    //当前故障码指令
;;;766    	offset += 8;
;;;767    	memcpy(&ptrMode[offset],strengthFuel.faultCmd2,8);    //历史故障码指令
;;;768    	offset += 8;
;;;769    	memcpy(&ptrMode[offset],strengthFuel.faultClear,8);   //清除故障码指令
;;;770    	
;;;771    	Save2KDataToFlash(ptrMode,PROMOTE_ADDR,100);                //将新的增强动力指令写入Flash
;;;772    	
;;;773    	memset(strengPower,0,200);                    //清空Flash保存的喷油量的值
;;;774    	SoftErasePage(STRENGE_Q);
;;;775    	Save2KDataToFlash(strengPower,STRENGE_Q,200);
;;;776    	
;;;777    	__disable_fault_irq();                    //重启
;;;778    	NVIC_SystemReset();
;;;779    }
0001aa  e8bd81f0          POP      {r4-r8,pc}
                  |L5.430|
0001ae  2064              MOVS     r0,#0x64              ;746
0001b0  f7fffffe          BL       Mem_malloc
0001b4  4605              MOV      r5,r0                 ;746
0001b6  2400              MOVS     r4,#0                 ;747
0001b8  1928              ADDS     r0,r5,r4              ;749
0001ba  2210              MOVS     r2,#0x10              ;749
0001bc  4931              LDR      r1,|L5.644|
0001be  f7fffffe          BL       __aeabi_memcpy
0001c2  3410              ADDS     r4,r4,#0x10           ;750
0001c4  1928              ADDS     r0,r5,r4              ;751
0001c6  492f              LDR      r1,|L5.644|
0001c8  690a              LDR      r2,[r1,#0x10]         ;751  ; strengthFuel
0001ca  6002              STR      r2,[r0,#0]            ;751
0001cc  7d09              LDRB     r1,[r1,#0x14]         ;751  ; strengthFuel
0001ce  7101              STRB     r1,[r0,#4]            ;751
0001d0  1d64              ADDS     r4,r4,#5              ;752
0001d2  1928              ADDS     r0,r5,r4              ;753
0001d4  492b              LDR      r1,|L5.644|
0001d6  f8d11015          LDR      r1,[r1,#0x15]         ;753  ; strengthFuel
0001da  6001              STR      r1,[r0,#0]            ;753
0001dc  1d24              ADDS     r4,r4,#4              ;754
0001de  1928              ADDS     r0,r5,r4              ;755
0001e0  4928              LDR      r1,|L5.644|
0001e2  311a              ADDS     r1,r1,#0x1a           ;755
0001e4  680a              LDR      r2,[r1,#0]            ;755  ; strengthFuel
0001e6  6002              STR      r2,[r0,#0]            ;755
0001e8  6849              LDR      r1,[r1,#4]            ;755  ; strengthFuel
0001ea  6041              STR      r1,[r0,#4]            ;755
0001ec  3408              ADDS     r4,r4,#8              ;756
0001ee  1928              ADDS     r0,r5,r4              ;757
0001f0  4924              LDR      r1,|L5.644|
0001f2  3122              ADDS     r1,r1,#0x22           ;757
0001f4  680a              LDR      r2,[r1,#0]            ;757  ; strengthFuel
0001f6  6002              STR      r2,[r0,#0]            ;757
0001f8  6849              LDR      r1,[r1,#4]            ;757  ; strengthFuel
0001fa  6041              STR      r1,[r0,#4]            ;757
0001fc  3408              ADDS     r4,r4,#8              ;758
0001fe  1928              ADDS     r0,r5,r4              ;759
000200  4920              LDR      r1,|L5.644|
000202  312a              ADDS     r1,r1,#0x2a           ;759
000204  680a              LDR      r2,[r1,#0]            ;759  ; strengthFuel
000206  6002              STR      r2,[r0,#0]            ;759
000208  6849              LDR      r1,[r1,#4]            ;759  ; strengthFuel
00020a  6041              STR      r1,[r0,#4]            ;759
00020c  3408              ADDS     r4,r4,#8              ;760
00020e  1928              ADDS     r0,r5,r4              ;761
000210  491c              LDR      r1,|L5.644|
000212  3132              ADDS     r1,r1,#0x32           ;761
000214  680a              LDR      r2,[r1,#0]            ;761  ; strengthFuel
000216  6002              STR      r2,[r0,#0]            ;761
000218  6849              LDR      r1,[r1,#4]            ;761  ; strengthFuel
00021a  6041              STR      r1,[r0,#4]            ;761
00021c  3408              ADDS     r4,r4,#8              ;762
00021e  4819              LDR      r0,|L5.644|
000220  f890203a          LDRB     r2,[r0,#0x3a]         ;763  ; strengthFuel
000224  4621              MOV      r1,r4                 ;763
000226  1c64              ADDS     r4,r4,#1              ;763
000228  546a              STRB     r2,[r5,r1]            ;763
00022a  1c64              ADDS     r4,r4,#1              ;764
00022c  1928              ADDS     r0,r5,r4              ;765
00022e  4915              LDR      r1,|L5.644|
000230  313b              ADDS     r1,r1,#0x3b           ;765
000232  680a              LDR      r2,[r1,#0]            ;765  ; strengthFuel
000234  6002              STR      r2,[r0,#0]            ;765
000236  6849              LDR      r1,[r1,#4]            ;765  ; strengthFuel
000238  6041              STR      r1,[r0,#4]            ;765
00023a  3408              ADDS     r4,r4,#8              ;766
00023c  1928              ADDS     r0,r5,r4              ;767
00023e  4911              LDR      r1,|L5.644|
000240  3143              ADDS     r1,r1,#0x43           ;767
000242  680a              LDR      r2,[r1,#0]            ;767  ; strengthFuel
000244  6002              STR      r2,[r0,#0]            ;767
000246  6849              LDR      r1,[r1,#4]            ;767  ; strengthFuel
000248  6041              STR      r1,[r0,#4]            ;767
00024a  3408              ADDS     r4,r4,#8              ;768
00024c  1928              ADDS     r0,r5,r4              ;769
00024e  490d              LDR      r1,|L5.644|
000250  314b              ADDS     r1,r1,#0x4b           ;769
000252  680a              LDR      r2,[r1,#0]            ;769  ; strengthFuel
000254  6002              STR      r2,[r0,#0]            ;769
000256  6849              LDR      r1,[r1,#4]            ;769  ; strengthFuel
000258  6041              STR      r1,[r0,#4]            ;769
00025a  2264              MOVS     r2,#0x64              ;771
00025c  490b              LDR      r1,|L5.652|
00025e  4628              MOV      r0,r5                 ;771
000260  f7fffffe          BL       Save2KDataToFlash
000264  21c8              MOVS     r1,#0xc8              ;773
000266  480a              LDR      r0,|L5.656|
000268  f7fffffe          BL       __aeabi_memclr
00026c  4809              LDR      r0,|L5.660|
00026e  f7fffffe          BL       SoftErasePage
000272  22c8              MOVS     r2,#0xc8              ;775
000274  4907              LDR      r1,|L5.660|
000276  4806              LDR      r0,|L5.656|
000278  f7fffffe          BL       Save2KDataToFlash
00027c  b671              CPSID    f                     ;777
00027e  f7fffffe          BL       __NVIC_SystemReset
;;;780    
                          ENDP

000282  0000              DCW      0x0000
                  |L5.644|
                          DCD      strengthFuel
                  |L5.648|
                          DCD      strengthFuelFlash
                  |L5.652|
                          DCD      0x08065000
                  |L5.656|
                          DCD      strengPower
                  |L5.660|
                          DCD      0x08060000

                          AREA ||i.GetConfigInfo||, CODE, READONLY, ALIGN=2

                  GetConfigInfo PROC
;;;100    }
;;;101    static void GetConfigInfo(void)
000000  b510              PUSH     {r4,lr}
;;;102    {
;;;103    	_CDMADataToSend* otaUpdatSend;
;;;104    	otaUpdatSend = CDMNSendInfoInit(60);//升级请求帧
000002  203c              MOVS     r0,#0x3c
000004  f7fffffe          BL       CDMNSendInfoInit
000008  4604              MOV      r4,r0
;;;105    
;;;106    	otaUpdatSend->data[otaUpdatSend->datLength++] = 11;  //长度
00000a  210b              MOVS     r1,#0xb
00000c  8822              LDRH     r2,[r4,#0]
00000e  1c50              ADDS     r0,r2,#1
000010  8020              STRH     r0,[r4,#0]
000012  6860              LDR      r0,[r4,#4]
000014  5481              STRB     r1,[r0,r2]
;;;107    	otaUpdatSend->data[otaUpdatSend->datLength++] = 0x40;    
000016  2140              MOVS     r1,#0x40
000018  8822              LDRH     r2,[r4,#0]
00001a  1c50              ADDS     r0,r2,#1
00001c  8020              STRH     r0,[r4,#0]
00001e  6860              LDR      r0,[r4,#4]
000020  5481              STRB     r1,[r0,r2]
;;;108    	otaUpdatSend->data[otaUpdatSend->datLength++] = 0x00;
000022  2100              MOVS     r1,#0
000024  8822              LDRH     r2,[r4,#0]
000026  1c50              ADDS     r0,r2,#1
000028  8020              STRH     r0,[r4,#0]
00002a  6860              LDR      r0,[r4,#4]
00002c  5481              STRB     r1,[r0,r2]
;;;109    	//当前版本
;;;110    	otaUpdatSend->data[otaUpdatSend->datLength++] = (varOperation.pidVersion >> 24) & 0x00FF; 
00002e  4829              LDR      r0,|L6.212|
000030  f8d0007a          LDR      r0,[r0,#0x7a]  ; varOperation
000034  0e00              LSRS     r0,r0,#24
000036  8822              LDRH     r2,[r4,#0]
000038  1c51              ADDS     r1,r2,#1
00003a  8021              STRH     r1,[r4,#0]
00003c  6861              LDR      r1,[r4,#4]
00003e  5488              STRB     r0,[r1,r2]
;;;111    	otaUpdatSend->data[otaUpdatSend->datLength++] = (varOperation.pidVersion >> 16) & 0x00FF; 
000040  4824              LDR      r0,|L6.212|
000042  f8d0007a          LDR      r0,[r0,#0x7a]  ; varOperation
000046  f3c04107          UBFX     r1,r0,#16,#8
00004a  8822              LDRH     r2,[r4,#0]
00004c  1c50              ADDS     r0,r2,#1
00004e  8020              STRH     r0,[r4,#0]
000050  6860              LDR      r0,[r4,#4]
000052  5481              STRB     r1,[r0,r2]
;;;112    	otaUpdatSend->data[otaUpdatSend->datLength++] = (varOperation.pidVersion >> 8) & 0x00FF;   
000054  481f              LDR      r0,|L6.212|
000056  f8b0007a          LDRH     r0,[r0,#0x7a]  ; varOperation
00005a  f3c02107          UBFX     r1,r0,#8,#8
00005e  8822              LDRH     r2,[r4,#0]
000060  1c50              ADDS     r0,r2,#1
000062  8020              STRH     r0,[r4,#0]
000064  6860              LDR      r0,[r4,#4]
000066  5481              STRB     r1,[r0,r2]
;;;113    	otaUpdatSend->data[otaUpdatSend->datLength++] = varOperation.pidVersion & 0x00FF;
000068  481a              LDR      r0,|L6.212|
00006a  f890107a          LDRB     r1,[r0,#0x7a]  ; varOperation
00006e  8822              LDRH     r2,[r4,#0]
000070  1c50              ADDS     r0,r2,#1
000072  8020              STRH     r0,[r4,#0]
000074  6860              LDR      r0,[r4,#4]
000076  5481              STRB     r1,[r0,r2]
;;;114    	
;;;115    	//请求升级的版本
;;;116    	otaUpdatSend->data[otaUpdatSend->datLength++] = (varOperation.newPIDVersion >> 24) & 0x00FF;
000078  4816              LDR      r0,|L6.212|
00007a  f8d0007e          LDR      r0,[r0,#0x7e]  ; varOperation
00007e  0e00              LSRS     r0,r0,#24
000080  8822              LDRH     r2,[r4,#0]
000082  1c51              ADDS     r1,r2,#1
000084  8021              STRH     r1,[r4,#0]
000086  6861              LDR      r1,[r4,#4]
000088  5488              STRB     r0,[r1,r2]
;;;117    	otaUpdatSend->data[otaUpdatSend->datLength++] = (varOperation.newPIDVersion >> 16) & 0x00FF;
00008a  4812              LDR      r0,|L6.212|
00008c  f8d0007e          LDR      r0,[r0,#0x7e]  ; varOperation
000090  f3c04107          UBFX     r1,r0,#16,#8
000094  8822              LDRH     r2,[r4,#0]
000096  1c50              ADDS     r0,r2,#1
000098  8020              STRH     r0,[r4,#0]
00009a  6860              LDR      r0,[r4,#4]
00009c  5481              STRB     r1,[r0,r2]
;;;118    	otaUpdatSend->data[otaUpdatSend->datLength++] = (varOperation.newPIDVersion >> 8) & 0x00FF;
00009e  480d              LDR      r0,|L6.212|
0000a0  f8b0007e          LDRH     r0,[r0,#0x7e]  ; varOperation
0000a4  f3c02107          UBFX     r1,r0,#8,#8
0000a8  8822              LDRH     r2,[r4,#0]
0000aa  1c50              ADDS     r0,r2,#1
0000ac  8020              STRH     r0,[r4,#0]
0000ae  6860              LDR      r0,[r4,#4]
0000b0  5481              STRB     r1,[r0,r2]
;;;119    	otaUpdatSend->data[otaUpdatSend->datLength++] = varOperation.newPIDVersion & 0x00FF;
0000b2  4808              LDR      r0,|L6.212|
0000b4  f890107e          LDRB     r1,[r0,#0x7e]  ; varOperation
0000b8  8822              LDRH     r2,[r4,#0]
0000ba  1c50              ADDS     r0,r2,#1
0000bc  8020              STRH     r0,[r4,#0]
0000be  6860              LDR      r0,[r4,#4]
0000c0  5481              STRB     r1,[r0,r2]
;;;120    	
;;;121    	CDMASendDataPack(otaUpdatSend);             //将请求包进行封包
0000c2  4620              MOV      r0,r4
0000c4  f7fffffe          BL       CDMASendDataPack
;;;122    	
;;;123    	OSQPost(CDMASendQ,otaUpdatSend);
0000c8  4621              MOV      r1,r4
0000ca  4803              LDR      r0,|L6.216|
0000cc  6800              LDR      r0,[r0,#0]  ; CDMASendQ
0000ce  f7fffffe          BL       OSQPost
;;;124    }
0000d2  bd10              POP      {r4,pc}
;;;125    extern u32 timeBase;
                          ENDP

                  |L6.212|
                          DCD      varOperation
                  |L6.216|
                          DCD      CDMASendQ

                          AREA ||i.LoginDataSend||, CODE, READONLY, ALIGN=2

                  LoginDataSend PROC
;;;70     //登录报文
;;;71     void LoginDataSend(void)
000000  b570              PUSH     {r4-r6,lr}
;;;72     {
;;;73     	uint8_t err;
;;;74     	uint32_t buff;
;;;75     	_CDMADataToSend* loginData = CDMNSendInfoInit(100);    //发送登录报文
000002  2064              MOVS     r0,#0x64
000004  f7fffffe          BL       CDMNSendInfoInit
000008  4604              MOV      r4,r0
;;;76     	
;;;77     	loginData->data[loginData->datLength++] = 31;
00000a  211f              MOVS     r1,#0x1f
00000c  8822              LDRH     r2,[r4,#0]
00000e  1c50              ADDS     r0,r2,#1
000010  8020              STRH     r0,[r4,#0]
000012  6860              LDR      r0,[r4,#4]
000014  5481              STRB     r1,[r0,r2]
;;;78     	loginData->data[loginData->datLength++] = 0x50;
000016  2150              MOVS     r1,#0x50
000018  8822              LDRH     r2,[r4,#0]
00001a  1c50              ADDS     r0,r2,#1
00001c  8020              STRH     r0,[r4,#0]
00001e  6860              LDR      r0,[r4,#4]
000020  5481              STRB     r1,[r0,r2]
;;;79     	loginData->data[loginData->datLength++] = 0x01;
000022  2101              MOVS     r1,#1
000024  8822              LDRH     r2,[r4,#0]
000026  1c50              ADDS     r0,r2,#1
000028  8020              STRH     r0,[r4,#0]
00002a  6860              LDR      r0,[r4,#4]
00002c  5481              STRB     r1,[r0,r2]
;;;80     	
;;;81     	buff = sysUpdateVar.curSoftVer; 
00002e  481b              LDR      r0,|L7.156|
000030  8845              LDRH     r5,[r0,#2]  ; sysUpdateVar
;;;82     	buff =t_htonl(buff);			                       //软件固件版本  
000032  4628              MOV      r0,r5
000034  f7fffffe          BL       t_htonl
000038  4605              MOV      r5,r0
;;;83     	memcpy(&loginData->data[loginData->datLength],&buff,4);
00003a  6860              LDR      r0,[r4,#4]
00003c  8821              LDRH     r1,[r4,#0]
00003e  4408              ADD      r0,r0,r1
000040  6005              STR      r5,[r0,#0]
;;;84     	loginData->datLength += 4;
000042  8820              LDRH     r0,[r4,#0]
000044  1d00              ADDS     r0,r0,#4
000046  8020              STRH     r0,[r4,#0]
;;;85     	
;;;86     	buff = t_htonl(canDataConfig.pidVersion);
000048  4915              LDR      r1,|L7.160|
00004a  6808              LDR      r0,[r1,#0]  ; canDataConfig
00004c  f7fffffe          BL       t_htonl
000050  4605              MOV      r5,r0
;;;87     	memcpy(&loginData->data[loginData->datLength],&buff,4);
000052  6860              LDR      r0,[r4,#4]
000054  8821              LDRH     r1,[r4,#0]
000056  4408              ADD      r0,r0,r1
000058  6005              STR      r5,[r0,#0]
;;;88     	loginData->datLength += 4;
00005a  8820              LDRH     r0,[r4,#0]
00005c  1d00              ADDS     r0,r0,#4
00005e  8020              STRH     r0,[r4,#0]
;;;89     	
;;;90     	memcpy(&loginData->data[loginData->datLength],varOperation.iccID,20);
000060  6861              LDR      r1,[r4,#4]
000062  8822              LDRH     r2,[r4,#0]
000064  1888              ADDS     r0,r1,r2
000066  2214              MOVS     r2,#0x14
000068  490e              LDR      r1,|L7.164|
00006a  f7fffffe          BL       __aeabi_memcpy
;;;91     	loginData->datLength += 20;
00006e  8820              LDRH     r0,[r4,#0]
000070  3014              ADDS     r0,r0,#0x14
000072  8020              STRH     r0,[r4,#0]
;;;92     	
;;;93     	CDMASendDataPack(loginData);     //对登录报文进行打包（添加帧头、校验码、帧尾）
000074  4620              MOV      r0,r4
000076  f7fffffe          BL       CDMASendDataPack
;;;94     	err = OSQPost(CDMASendQ,loginData);
00007a  4621              MOV      r1,r4
00007c  480a              LDR      r0,|L7.168|
00007e  6800              LDR      r0,[r0,#0]  ; CDMASendQ
000080  f7fffffe          BL       OSQPost
000084  4606              MOV      r6,r0
;;;95     	if(err != OS_ERR_NONE)
000086  b116              CBZ      r6,|L7.142|
;;;96     	{
;;;97     		Mem_free(loginData);
000088  4620              MOV      r0,r4
00008a  f7fffffe          BL       Mem_free
                  |L7.142|
;;;98     	}
;;;99     	varOperation.isLoginDeal = 0;     //正在处理登录报文
00008e  2000              MOVS     r0,#0
000090  4904              LDR      r1,|L7.164|
000092  3919              SUBS     r1,r1,#0x19
000094  f8810030          STRB     r0,[r1,#0x30]
;;;100    }
000098  bd70              POP      {r4-r6,pc}
;;;101    static void GetConfigInfo(void)
                          ENDP

00009a  0000              DCW      0x0000
                  |L7.156|
                          DCD      sysUpdateVar
                  |L7.160|
                          DCD      canDataConfig
                  |L7.164|
                          DCD      varOperation+0x19
                  |L7.168|
                          DCD      CDMASendQ

                          AREA ||i.OTA_Updata||, CODE, READONLY, ALIGN=2

                  OTA_Updata PROC
;;;223    uint8_t updateBuff[2048];       //升级用
;;;224    static void OTA_Updata(uint8_t* ptrDeal)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;225    {
000004  4604              MOV      r4,r0
;;;226    	uint16_t cmdId;
;;;227    	uint16_t datLength = 0;
000006  f04f0800          MOV      r8,#0
;;;228    	uint16_t i = 0;
00000a  46c1              MOV      r9,r8
;;;229    	uint8_t  frameNum;           //此次一共接收到128字节的包数
;;;230    	uint8_t  frameLen;           //每一帧的每一小包到底有多少个字节
;;;231    	uint16_t offset;
;;;232    	
;;;233    	static uint16_t currentNum = 0;      //发送下一个请求包
;;;234    	static uint16_t fileCRC    = 0;      //文件CRC校验
;;;235    	static uint32_t flashAddr  = 0;      //地址信息，写2K便自增0x800,向Flash一次写2K字节
;;;236    	static uint8_t  frameIndex = 0;      //要保存的帧索引
;;;237    	
;;;238    	
;;;239    	datLength = ptrDeal[0];
00000c  f8948000          LDRB     r8,[r4,#0]
;;;240    	datLength = (datLength << 8) + ptrDeal[1];
000010  7860              LDRB     r0,[r4,#1]
000012  eb002008          ADD      r0,r0,r8,LSL #8
000016  fa1ff880          UXTH     r8,r0
;;;241    	
;;;242    	cmdId     = ptrDeal[3];
00001a  78e6              LDRB     r6,[r4,#3]
;;;243    	cmdId     = (cmdId << 8) + ptrDeal[4];
00001c  7920              LDRB     r0,[r4,#4]
00001e  eb002006          ADD      r0,r0,r6,LSL #8
000022  b286              UXTH     r6,r0
;;;244    	if(cmdId == 0x8000)
000024  f5b64f00          CMP      r6,#0x8000
000028  d132              BNE      |L8.144|
;;;245    	{
;;;246    		offset = 5;
00002a  2505              MOVS     r5,#5
;;;247    		varOperation.frameNum = ptrDeal[offset++] + 0x80;//得到新程序的128字节的包数
00002c  4629              MOV      r1,r5
00002e  1c6d              ADDS     r5,r5,#1
000030  5c60              LDRB     r0,[r4,r1]
000032  3080              ADDS     r0,r0,#0x80
000034  4981              LDR      r1,|L8.572|
000036  80c8              STRH     r0,[r1,#6]
;;;248    		varOperation.frameNum = (varOperation.frameNum << 8) + ptrDeal[offset++];
000038  4629              MOV      r1,r5
00003a  1c6d              ADDS     r5,r5,#1
00003c  5c60              LDRB     r0,[r4,r1]
00003e  497f              LDR      r1,|L8.572|
000040  7989              LDRB     r1,[r1,#6]  ; varOperation
000042  eb002001          ADD      r0,r0,r1,LSL #8
000046  497d              LDR      r1,|L8.572|
000048  80c8              STRH     r0,[r1,#6]
;;;249    		varOperation.newSoftCRC = ptrDeal[offset++];//得到文件校验码
00004a  4629              MOV      r1,r5
00004c  1c6d              ADDS     r5,r5,#1
00004e  5c60              LDRB     r0,[r4,r1]
000050  497a              LDR      r1,|L8.572|
000052  8088              STRH     r0,[r1,#4]
;;;250    		varOperation.newSoftCRC = (varOperation.newSoftCRC << 8) + ptrDeal[offset++];
000054  4629              MOV      r1,r5
000056  1c6d              ADDS     r5,r5,#1
000058  5c60              LDRB     r0,[r4,r1]
00005a  4978              LDR      r1,|L8.572|
00005c  7909              LDRB     r1,[r1,#4]  ; varOperation
00005e  eb002001          ADD      r0,r0,r1,LSL #8
000062  4976              LDR      r1,|L8.572|
000064  8088              STRH     r0,[r1,#4]
;;;251    		
;;;252    		currentNum = 0x8001;
000066  f2480001          MOV      r0,#0x8001
00006a  4975              LDR      r1,|L8.576|
00006c  8008              STRH     r0,[r1,#0]
;;;253    		fileCRC    = 0;
00006e  2000              MOVS     r0,#0
000070  4974              LDR      r1,|L8.580|
000072  8008              STRH     r0,[r1,#0]
;;;254    		flashAddr  = 0;
000074  4974              LDR      r1,|L8.584|
000076  6008              STR      r0,[r1,#0]  ; flashAddr
;;;255    		frameIndex = 0;
000078  4974              LDR      r1,|L8.588|
00007a  7008              STRB     r0,[r1,#0]
;;;256    		SendFrameNum(currentNum);//发送第一包程序请求帧0x8001
00007c  4870              LDR      r0,|L8.576|
00007e  8800              LDRH     r0,[r0,#0]  ; currentNum
000080  f7fffffe          BL       SendFrameNum
;;;257    		memset(updateBuff,0,2048);
000084  f44f6100          MOV      r1,#0x800
000088  4871              LDR      r0,|L8.592|
00008a  f7fffffe          BL       __aeabi_memclr
                  |L8.142|
00008e  e0d2              B        |L8.566|
                  |L8.144|
;;;258    	}
;;;259    	else if(cmdId>0x8000)        //程序代码
000090  f5b64f00          CMP      r6,#0x8000
000094  ddfb              BLE      |L8.142|
;;;260    	{
;;;261    		if(cmdId != currentNum)  //接收到的帧序号，与所申请的帧序号不同，则放弃数据并重新申请
000096  486a              LDR      r0,|L8.576|
000098  8800              LDRH     r0,[r0,#0]  ; currentNum
00009a  4286              CMP      r6,r0
00009c  d001              BEQ      |L8.162|
                  |L8.158|
;;;262    		{
;;;263    //			SendFrameNum(currentNum);//todo：重新接收数据？
;;;264    			return;
;;;265    		}
;;;266    			
;;;267    		frameNum = (datLength%131) == 0? (datLength/131) : (datLength/131) + 1;//得到此帧数据一共有多少包128字节的程序代码
;;;268    		
;;;269    		offset = 2;
;;;270    		for(i=0;i<frameNum;i++)                //
;;;271    		{
;;;272    			frameLen = ptrDeal[offset++] - 3;  //实际的小包程序的字节数
;;;273    			cmdId    = ptrDeal[offset++];
;;;274    			cmdId    = (cmdId << 8) + ptrDeal[offset++]; 
;;;275    			memcpy(&updateBuff[frameIndex*128],&ptrDeal[offset],frameLen);
;;;276    			offset += 128;
;;;277    			frameIndex ++;
;;;278    			if((frameIndex >= 16) && (cmdId != varOperation.frameNum))
;;;279    			{
;;;280    				frameIndex = 0;
;;;281    				SoftErasePage(flashAddr);
;;;282    				SoftProgramUpdate(flashAddr,updateBuff,2048);
;;;283    				//计算CRC校验
;;;284    				fileCRC = CRC_ComputeFile(fileCRC,updateBuff,2048);
;;;285    				memset(updateBuff,0,2048);//清空数据区
;;;286    				flashAddr += 0x800;
;;;287    			}
;;;288    			else if(cmdId == varOperation.frameNum)
;;;289    			{
;;;290    				SoftErasePage(flashAddr);
;;;291    				SoftProgramUpdate(flashAddr,updateBuff,((frameIndex - 1)*128 + frameLen));
;;;292    				//计算CRC校验
;;;293    				fileCRC = CRC_ComputeFile(fileCRC,updateBuff,((frameIndex - 1)*128 + frameLen));
;;;294    				memset(updateBuff,0,2048);
;;;295    				flashAddr += ((frameIndex - 1)*128 + frameLen);
;;;296    			}
;;;297    		}
;;;298    		if(cmdId == varOperation.frameNum)
;;;299    		{
;;;300    			if(fileCRC != varOperation.newSoftCRC)//CRC校验错误，程序升级失败
;;;301    			{
;;;302    				Mem_free(ptrDeal);
;;;303    				varOperation.isDataFlow     = 0;
;;;304    //				SendFrameNum(0x8000);      //todo:重新升级？
;;;305    				return;	
;;;306    			}
;;;307    			Mem_free(ptrDeal);
;;;308    			sysUpdateVar.isSoftUpdate = 1;      //告诉Sboot,程序需要升级
;;;309    			sysUpdateVar.pageNum      = flashAddr / 0x800 + 1;
;;;310    			sysUpdateVar.softByteSize = flashAddr;
;;;311    			sysUpdateVar.newSoftCRC   = fileCRC;
;;;312    			sysUpdateVar.newSoftVer   = varOperation.newSoftVersion;
;;;313    			
;;;314    			SbootParameterSaveToFlash(&sysUpdateVar);//将升级参数保存到Flash中
;;;315    			
;;;316    			__disable_fault_irq();          //重启
;;;317    			NVIC_SystemReset();
;;;318    		}
;;;319    		currentNum = cmdId + 1;
;;;320    		SendFrameNum(currentNum);//请求下一帧数据；
;;;321    	}
;;;322    }
00009e  e8bd87f0          POP      {r4-r10,pc}
                  |L8.162|
0000a2  2083              MOVS     r0,#0x83              ;267
0000a4  fb98f1f0          SDIV     r1,r8,r0              ;267
0000a8  fb008011          MLS      r0,r0,r1,r8           ;267
0000ac  b918              CBNZ     r0,|L8.182|
0000ae  2083              MOVS     r0,#0x83              ;267
0000b0  fb98f0f0          SDIV     r0,r8,r0              ;267
0000b4  e003              B        |L8.190|
                  |L8.182|
0000b6  2083              MOVS     r0,#0x83              ;267
0000b8  fb98f0f0          SDIV     r0,r8,r0              ;267
0000bc  1c40              ADDS     r0,r0,#1              ;267
                  |L8.190|
0000be  f0000aff          AND      r10,r0,#0xff          ;267
0000c2  2502              MOVS     r5,#2                 ;269
0000c4  f04f0900          MOV      r9,#0                 ;270
0000c8  e07d              B        |L8.454|
                  |L8.202|
0000ca  4628              MOV      r0,r5                 ;272
0000cc  1c69              ADDS     r1,r5,#1              ;272
0000ce  b28d              UXTH     r5,r1                 ;272
0000d0  5c20              LDRB     r0,[r4,r0]            ;272
0000d2  1ec0              SUBS     r0,r0,#3              ;272
0000d4  b2c7              UXTB     r7,r0                 ;272
0000d6  4628              MOV      r0,r5                 ;273
0000d8  1c69              ADDS     r1,r5,#1              ;273
0000da  b28d              UXTH     r5,r1                 ;273
0000dc  5c26              LDRB     r6,[r4,r0]            ;273
0000de  4628              MOV      r0,r5                 ;274
0000e0  1c69              ADDS     r1,r5,#1              ;274
0000e2  b28d              UXTH     r5,r1                 ;274
0000e4  5c20              LDRB     r0,[r4,r0]            ;274
0000e6  eb002006          ADD      r0,r0,r6,LSL #8       ;274
0000ea  b286              UXTH     r6,r0                 ;274
0000ec  1961              ADDS     r1,r4,r5              ;275
0000ee  4a57              LDR      r2,|L8.588|
0000f0  7812              LDRB     r2,[r2,#0]            ;275  ; frameIndex
0000f2  4b57              LDR      r3,|L8.592|
0000f4  eb0310c2          ADD      r0,r3,r2,LSL #7       ;275
0000f8  463a              MOV      r2,r7                 ;275
0000fa  f7fffffe          BL       __aeabi_memcpy
0000fe  f1050080          ADD      r0,r5,#0x80           ;276
000102  b285              UXTH     r5,r0                 ;276
000104  4851              LDR      r0,|L8.588|
000106  7800              LDRB     r0,[r0,#0]            ;277  ; frameIndex
000108  1c40              ADDS     r0,r0,#1              ;277
00010a  4950              LDR      r1,|L8.588|
00010c  7008              STRB     r0,[r1,#0]            ;277
00010e  4608              MOV      r0,r1                 ;278
000110  7800              LDRB     r0,[r0,#0]            ;278  ; frameIndex
000112  2810              CMP      r0,#0x10              ;278
000114  db25              BLT      |L8.354|
000116  4849              LDR      r0,|L8.572|
000118  88c0              LDRH     r0,[r0,#6]            ;278  ; varOperation
00011a  42b0              CMP      r0,r6                 ;278
00011c  d021              BEQ      |L8.354|
00011e  2000              MOVS     r0,#0                 ;280
000120  7008              STRB     r0,[r1,#0]            ;280
000122  4849              LDR      r0,|L8.584|
000124  6800              LDR      r0,[r0,#0]            ;281  ; flashAddr
000126  f7fffffe          BL       SoftErasePage
00012a  f44f6200          MOV      r2,#0x800             ;282
00012e  4948              LDR      r1,|L8.592|
000130  4845              LDR      r0,|L8.584|
000132  6800              LDR      r0,[r0,#0]            ;282  ; flashAddr
000134  f7fffffe          BL       SoftProgramUpdate
000138  f44f6200          MOV      r2,#0x800             ;284
00013c  4944              LDR      r1,|L8.592|
00013e  4841              LDR      r0,|L8.580|
000140  8800              LDRH     r0,[r0,#0]            ;284  ; fileCRC
000142  f7fffffe          BL       CRC_ComputeFile
000146  493f              LDR      r1,|L8.580|
000148  8008              STRH     r0,[r1,#0]            ;284
00014a  f44f6100          MOV      r1,#0x800             ;285
00014e  4840              LDR      r0,|L8.592|
000150  f7fffffe          BL       __aeabi_memclr
000154  483c              LDR      r0,|L8.584|
000156  6800              LDR      r0,[r0,#0]            ;286  ; flashAddr
000158  f5006000          ADD      r0,r0,#0x800          ;286
00015c  493a              LDR      r1,|L8.584|
00015e  6008              STR      r0,[r1,#0]            ;286  ; flashAddr
000160  e02d              B        |L8.446|
                  |L8.354|
000162  4836              LDR      r0,|L8.572|
000164  88c0              LDRH     r0,[r0,#6]            ;288  ; varOperation
000166  42b0              CMP      r0,r6                 ;288
000168  d129              BNE      |L8.446|
00016a  4837              LDR      r0,|L8.584|
00016c  6800              LDR      r0,[r0,#0]            ;290  ; flashAddr
00016e  f7fffffe          BL       SoftErasePage
000172  4836              LDR      r0,|L8.588|
000174  7800              LDRB     r0,[r0,#0]            ;291  ; frameIndex
000176  1e40              SUBS     r0,r0,#1              ;291
000178  eb0710c0          ADD      r0,r7,r0,LSL #7       ;291
00017c  b282              UXTH     r2,r0                 ;291
00017e  4934              LDR      r1,|L8.592|
000180  4831              LDR      r0,|L8.584|
000182  6800              LDR      r0,[r0,#0]            ;291  ; flashAddr
000184  f7fffffe          BL       SoftProgramUpdate
000188  4830              LDR      r0,|L8.588|
00018a  7800              LDRB     r0,[r0,#0]            ;293  ; frameIndex
00018c  1e40              SUBS     r0,r0,#1              ;293
00018e  eb0712c0          ADD      r2,r7,r0,LSL #7       ;293
000192  492f              LDR      r1,|L8.592|
000194  482b              LDR      r0,|L8.580|
000196  8800              LDRH     r0,[r0,#0]            ;293  ; fileCRC
000198  f7fffffe          BL       CRC_ComputeFile
00019c  4929              LDR      r1,|L8.580|
00019e  8008              STRH     r0,[r1,#0]            ;293
0001a0  f44f6100          MOV      r1,#0x800             ;294
0001a4  482a              LDR      r0,|L8.592|
0001a6  f7fffffe          BL       __aeabi_memclr
0001aa  4828              LDR      r0,|L8.588|
0001ac  7800              LDRB     r0,[r0,#0]            ;295  ; frameIndex
0001ae  1e40              SUBS     r0,r0,#1              ;295
0001b0  eb0710c0          ADD      r0,r7,r0,LSL #7       ;295
0001b4  4924              LDR      r1,|L8.584|
0001b6  6809              LDR      r1,[r1,#0]            ;295  ; flashAddr
0001b8  4408              ADD      r0,r0,r1              ;295
0001ba  4923              LDR      r1,|L8.584|
0001bc  6008              STR      r0,[r1,#0]            ;295  ; flashAddr
                  |L8.446|
0001be  f1090001          ADD      r0,r9,#1              ;270
0001c2  fa1ff980          UXTH     r9,r0                 ;270
                  |L8.454|
0001c6  45d1              CMP      r9,r10                ;270
0001c8  f6ffaf7f          BLT      |L8.202|
0001cc  481b              LDR      r0,|L8.572|
0001ce  88c0              LDRH     r0,[r0,#6]            ;298  ; varOperation
0001d0  42b0              CMP      r0,r6                 ;298
0001d2  d129              BNE      |L8.552|
0001d4  4819              LDR      r0,|L8.572|
0001d6  8880              LDRH     r0,[r0,#4]            ;300  ; varOperation
0001d8  491a              LDR      r1,|L8.580|
0001da  8809              LDRH     r1,[r1,#0]            ;300  ; fileCRC
0001dc  4288              CMP      r0,r1                 ;300
0001de  d007              BEQ      |L8.496|
0001e0  4620              MOV      r0,r4                 ;302
0001e2  f7fffffe          BL       Mem_free
0001e6  2000              MOVS     r0,#0                 ;303
0001e8  4914              LDR      r1,|L8.572|
0001ea  f881002d          STRB     r0,[r1,#0x2d]         ;303
0001ee  e756              B        |L8.158|
                  |L8.496|
0001f0  4620              MOV      r0,r4                 ;307
0001f2  f7fffffe          BL       Mem_free
0001f6  2001              MOVS     r0,#1                 ;308
0001f8  4916              LDR      r1,|L8.596|
0001fa  7008              STRB     r0,[r1,#0]            ;308
0001fc  4812              LDR      r0,|L8.584|
0001fe  6800              LDR      r0,[r0,#0]            ;309  ; flashAddr
000200  2101              MOVS     r1,#1                 ;309
000202  eb0120d0          ADD      r0,r1,r0,LSR #11      ;309
000206  4913              LDR      r1,|L8.596|
000208  80c8              STRH     r0,[r1,#6]            ;309
00020a  480f              LDR      r0,|L8.584|
00020c  6800              LDR      r0,[r0,#0]            ;310  ; flashAddr
00020e  60c8              STR      r0,[r1,#0xc]          ;310  ; sysUpdateVar
000210  480c              LDR      r0,|L8.580|
000212  8800              LDRH     r0,[r0,#0]            ;311  ; fileCRC
000214  8108              STRH     r0,[r1,#8]            ;311
000216  4809              LDR      r0,|L8.572|
000218  8800              LDRH     r0,[r0,#0]            ;312  ; varOperation
00021a  8088              STRH     r0,[r1,#4]            ;312
00021c  4608              MOV      r0,r1                 ;314
00021e  f7fffffe          BL       SbootParameterSaveToFlash
000222  b671              CPSID    f                     ;316
000224  f7fffffe          BL       __NVIC_SystemReset
                  |L8.552|
000228  1c70              ADDS     r0,r6,#1              ;319
00022a  4905              LDR      r1,|L8.576|
00022c  8008              STRH     r0,[r1,#0]            ;319
00022e  4608              MOV      r0,r1                 ;320
000230  8800              LDRH     r0,[r0,#0]            ;320  ; currentNum
000232  f7fffffe          BL       SendFrameNum
                  |L8.566|
000236  bf00              NOP      
000238  e731              B        |L8.158|
;;;323    static void SendConfigNum(uint16_t cmd)
                          ENDP

00023a  0000              DCW      0x0000
                  |L8.572|
                          DCD      varOperation
                  |L8.576|
                          DCD      currentNum
                  |L8.580|
                          DCD      fileCRC
                  |L8.584|
                          DCD      flashAddr
                  |L8.588|
                          DCD      frameIndex
                  |L8.592|
                          DCD      updateBuff
                  |L8.596|
                          DCD      sysUpdateVar

                          AREA ||i.RecvLoginDatDeal||, CODE, READONLY, ALIGN=2

                  RecvLoginDatDeal PROC
;;;125    extern u32 timeBase;
;;;126    static void RecvLoginDatDeal(uint8_t* ptr)      //对服务器回复的登录报文进行解析
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;127    {
000004  4604              MOV      r4,r0
;;;128    	uint16_t cmdId = 0;
000006  f04f0900          MOV      r9,#0
;;;129    	uint8_t  ipLen = 0;
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
;;;130    	uint32_t ecuId = 0;
00000e  2600              MOVS     r6,#0
;;;131    	uint32_t serverTime  = 0;
000010  2700              MOVS     r7,#0
;;;132    	uint32_t softVersion = 0;
000012  4680              MOV      r8,r0
;;;133    	uint16_t offset = 3;
000014  2503              MOVS     r5,#3
;;;134    	static uint8_t timetemp = 0;
;;;135    	static u8 abflag = 0;
;;;136    	cmdId = ptr[offset++];
000016  4629              MOV      r1,r5
000018  1c6d              ADDS     r5,r5,#1
00001a  f8149001          LDRB     r9,[r4,r1]
;;;137    	cmdId = (cmdId<<8) + ptr[offset++];
00001e  4629              MOV      r1,r5
000020  1c6d              ADDS     r5,r5,#1
000022  5c60              LDRB     r0,[r4,r1]
000024  eb002009          ADD      r0,r0,r9,LSL #8
000028  fa1ff980          UXTH     r9,r0
;;;138    
;;;139    	serverTime = ptr[offset++];                //得到服务器时间
00002c  4629              MOV      r1,r5
00002e  1c6d              ADDS     r5,r5,#1
000030  5c67              LDRB     r7,[r4,r1]
;;;140    	serverTime = (serverTime << 8) + ptr[offset++];
000032  4629              MOV      r1,r5
000034  1c6d              ADDS     r5,r5,#1
000036  5c60              LDRB     r0,[r4,r1]
000038  eb002707          ADD      r7,r0,r7,LSL #8
;;;141    	serverTime = (serverTime << 8) + ptr[offset++];
00003c  4629              MOV      r1,r5
00003e  1c6d              ADDS     r5,r5,#1
000040  5c60              LDRB     r0,[r4,r1]
000042  eb002707          ADD      r7,r0,r7,LSL #8
;;;142    	serverTime = (serverTime << 8) + ptr[offset++];
000046  4629              MOV      r1,r5
000048  1c6d              ADDS     r5,r5,#1
00004a  5c60              LDRB     r0,[r4,r1]
00004c  eb002707          ADD      r7,r0,r7,LSL #8
;;;143    	
;;;144    	if(timetemp == 0)
000050  4859              LDR      r0,|L9.440|
000052  7800              LDRB     r0,[r0,#0]  ; timetemp
000054  b920              CBNZ     r0,|L9.96|
;;;145    	{
;;;146    		carAllRecord.startTime = serverTime;   //行程起始时间
000056  4859              LDR      r0,|L9.444|
000058  6007              STR      r7,[r0,#0]  ; carAllRecord
;;;147    		timetemp = 1;
00005a  2001              MOVS     r0,#1
00005c  4956              LDR      r1,|L9.440|
00005e  7008              STRB     r0,[r1,#0]
                  |L9.96|
;;;148    	}
;;;149    	if(abflag == 0)
000060  4857              LDR      r0,|L9.448|
000062  7800              LDRB     r0,[r0,#0]  ; abflag
000064  b920              CBNZ     r0,|L9.112|
;;;150    	{
;;;151    		abflag = 1;
000066  2001              MOVS     r0,#1
000068  4955              LDR      r1,|L9.448|
00006a  7008              STRB     r0,[r1,#0]
;;;152    		timeBase = serverTime;
00006c  4855              LDR      r0,|L9.452|
00006e  6007              STR      r7,[r0,#0]  ; timeBase
                  |L9.112|
;;;153    	}
;;;154    //		RTC_Time_Adjust(serverTime);   //登录的时候，跟服务器时间进行校时。
;;;155    	
;;;156    	softVersion = ptr[offset++];   //得到软件版本号
000070  4628              MOV      r0,r5
000072  1c69              ADDS     r1,r5,#1
000074  b28d              UXTH     r5,r1
000076  f8148000          LDRB     r8,[r4,r0]
;;;157    	softVersion = (softVersion << 8) + ptr[offset++];
00007a  4628              MOV      r0,r5
00007c  1c69              ADDS     r1,r5,#1
00007e  b28d              UXTH     r5,r1
000080  5c20              LDRB     r0,[r4,r0]
000082  eb002808          ADD      r8,r0,r8,LSL #8
;;;158    	softVersion = (softVersion << 8) + ptr[offset++];
000086  4628              MOV      r0,r5
000088  1c69              ADDS     r1,r5,#1
00008a  b28d              UXTH     r5,r1
00008c  5c20              LDRB     r0,[r4,r0]
00008e  eb002808          ADD      r8,r0,r8,LSL #8
;;;159    	softVersion = (softVersion << 8) + ptr[offset++];
000092  4628              MOV      r0,r5
000094  1c69              ADDS     r1,r5,#1
000096  b28d              UXTH     r5,r1
000098  5c20              LDRB     r0,[r4,r0]
00009a  eb002808          ADD      r8,r0,r8,LSL #8
;;;160    	
;;;161    	ecuId = ptr[offset++];          //得到ECU ID
00009e  4628              MOV      r0,r5
0000a0  1c69              ADDS     r1,r5,#1
0000a2  b28d              UXTH     r5,r1
0000a4  5c26              LDRB     r6,[r4,r0]
;;;162    	ecuId = (ecuId << 8) + ptr[offset++];
0000a6  4628              MOV      r0,r5
0000a8  1c69              ADDS     r1,r5,#1
0000aa  b28d              UXTH     r5,r1
0000ac  5c20              LDRB     r0,[r4,r0]
0000ae  eb002606          ADD      r6,r0,r6,LSL #8
;;;163    	ecuId = (ecuId << 8) + ptr[offset++];
0000b2  4628              MOV      r0,r5
0000b4  1c69              ADDS     r1,r5,#1
0000b6  b28d              UXTH     r5,r1
0000b8  5c20              LDRB     r0,[r4,r0]
0000ba  eb002606          ADD      r6,r0,r6,LSL #8
;;;164    	ecuId = (ecuId << 8) + ptr[offset++];
0000be  4628              MOV      r0,r5
0000c0  1c69              ADDS     r1,r5,#1
0000c2  b28d              UXTH     r5,r1
0000c4  5c20              LDRB     r0,[r4,r0]
0000c6  eb002606          ADD      r6,r0,r6,LSL #8
;;;165    	
;;;166    	ipLen = ptr[offset++];               //得到IP长度
0000ca  4628              MOV      r0,r5
0000cc  1c69              ADDS     r1,r5,#1
0000ce  b28d              UXTH     r5,r1
0000d0  5c20              LDRB     r0,[r4,r0]
0000d2  9000              STR      r0,[sp,#0]
;;;167    	memset(varOperation.newIP_Addr,0,18);//清零
0000d4  2112              MOVS     r1,#0x12
0000d6  483c              LDR      r0,|L9.456|
0000d8  f7fffffe          BL       __aeabi_memclr
;;;168    	memcpy(varOperation.newIP_Addr,&ptr[offset],ipLen); //得到IP地址
0000dc  1961              ADDS     r1,r4,r5
0000de  f89d2000          LDRB     r2,[sp,#0]
0000e2  4839              LDR      r0,|L9.456|
0000e4  f7fffffe          BL       __aeabi_memcpy
;;;169    	
;;;170    	varOperation.newIP_Potr = ptr[offset + ipLen];      //得到端口号
0000e8  f89d0000          LDRB     r0,[sp,#0]
0000ec  4428              ADD      r0,r0,r5
0000ee  5c20              LDRB     r0,[r4,r0]
0000f0  4935              LDR      r1,|L9.456|
0000f2  3946              SUBS     r1,r1,#0x46
0000f4  f8a10058          STRH     r0,[r1,#0x58]
;;;171    	varOperation.newIP_Potr = (varOperation.newIP_Potr << 8) + ptr[offset + ipLen + 1];
0000f8  f89d0000          LDRB     r0,[sp,#0]
0000fc  4428              ADD      r0,r0,r5
0000fe  1c40              ADDS     r0,r0,#1
000100  5c20              LDRB     r0,[r4,r0]
000102  f8911058          LDRB     r1,[r1,#0x58]  ; varOperation
000106  eb002001          ADD      r0,r0,r1,LSL #8
00010a  492f              LDR      r1,|L9.456|
00010c  3946              SUBS     r1,r1,#0x46
00010e  f8a10058          STRH     r0,[r1,#0x58]
;;;172    	
;;;173    	varOperation.oilMode = ptr[offset + ipLen + 2];
000112  f89d0000          LDRB     r0,[sp,#0]
000116  4428              ADD      r0,r0,r5
000118  1c80              ADDS     r0,r0,#2
00011a  5c20              LDRB     r0,[r4,r0]
00011c  b240              SXTB     r0,r0
00011e  f8810098          STRB     r0,[r1,#0x98]
;;;174    	strengthFuel.coe = ptr[offset + ipLen + 2];
000122  f89d0000          LDRB     r0,[sp,#0]
000126  4428              ADD      r0,r0,r5
000128  1c80              ADDS     r0,r0,#2
00012a  5c20              LDRB     r0,[r4,r0]
00012c  b240              SXTB     r0,r0
00012e  4927              LDR      r1,|L9.460|
000130  7648              STRB     r0,[r1,#0x19]
;;;175    	if(softVersion != sysUpdateVar.curSoftVer) //先考虑OTA升级
000132  4827              LDR      r0,|L9.464|
000134  8840              LDRH     r0,[r0,#2]  ; sysUpdateVar
000136  4540              CMP      r0,r8
000138  d014              BEQ      |L9.356|
;;;176    	{
;;;177    		varOperation.newSoftVersion = softVersion;
00013a  4823              LDR      r0,|L9.456|
00013c  3846              SUBS     r0,r0,#0x46
00013e  f8c08000          STR      r8,[r0,#0]  ; varOperation
;;;178    		OSSemPend(sendMsg,100,&ipLen);         //等待200ms  确保CDMA当前没有发送数据
000142  466a              MOV      r2,sp
000144  2164              MOVS     r1,#0x64
000146  4823              LDR      r0,|L9.468|
000148  6800              LDR      r0,[r0,#0]  ; sendMsg
00014a  f7fffffe          BL       OSSemPend
;;;179    		varOperation.isDataFlow     = 1;       // OTA进行升级 停止数据流，一心只为OTA升级
00014e  2001              MOVS     r0,#1
000150  491d              LDR      r1,|L9.456|
000152  3946              SUBS     r1,r1,#0x46
000154  f881002d          STRB     r0,[r1,#0x2d]
;;;180    		sysUpdateVar.isSoftUpdate   = 1;  
000158  491d              LDR      r1,|L9.464|
00015a  7008              STRB     r0,[r1,#0]
;;;181    		
;;;182    		SendFrameNum(0x8000);                  //发送0x8000以请求程序文件大小以及CRC校验
00015c  03c0              LSLS     r0,r0,#15
00015e  f7fffffe          BL       SendFrameNum
000162  e026              B        |L9.434|
                  |L9.356|
;;;183    	}
;;;184    	else if(ecuId != canDataConfig.pidVersion && sysUpdateVar.isSoftUpdate ==0)  //再考虑配置文件升级
000164  481c              LDR      r0,|L9.472|
000166  6800              LDR      r0,[r0,#0]  ; canDataConfig
000168  42b0              CMP      r0,r6
00016a  d014              BEQ      |L9.406|
00016c  4818              LDR      r0,|L9.464|
00016e  7800              LDRB     r0,[r0,#0]  ; sysUpdateVar
000170  b988              CBNZ     r0,|L9.406|
;;;185    	{
;;;186    		varOperation.newPIDVersion = ecuId;
000172  4815              LDR      r0,|L9.456|
000174  3846              SUBS     r0,r0,#0x46
000176  f8c0607e          STR      r6,[r0,#0x7e]  ; varOperation
;;;187    		OSSemPend(sendMsg,100,&ipLen);    //等待200ms  确保 CDMA 当前没有发送数据
00017a  466a              MOV      r2,sp
00017c  2164              MOVS     r1,#0x64
00017e  4815              LDR      r0,|L9.468|
000180  6800              LDR      r0,[r0,#0]  ; sendMsg
000182  f7fffffe          BL       OSSemPend
;;;188    		varOperation.isDataFlow     = 1;  //配置文件升级，停止数据流，一心只为配置
000186  2001              MOVS     r0,#1
000188  490f              LDR      r1,|L9.456|
00018a  3946              SUBS     r1,r1,#0x46
00018c  f881002d          STRB     r0,[r1,#0x2d]
;;;189    		
;;;190    		GetConfigInfo();                  //请求配置文件 - 发送 0x4000 及版本信息
000190  f7fffffe          BL       GetConfigInfo
000194  e00d              B        |L9.434|
                  |L9.406|
;;;191    	}
;;;192    	else 
;;;193    	{
;;;194    		varOperation.isLoginDeal = 1;     //没有登录报文需要处理
000196  2001              MOVS     r0,#1
000198  490b              LDR      r1,|L9.456|
00019a  3946              SUBS     r1,r1,#0x46
00019c  f8810030          STRB     r0,[r1,#0x30]
;;;195    		if(OSSemAccept(LoginMes) == 0)
0001a0  480e              LDR      r0,|L9.476|
0001a2  6800              LDR      r0,[r0,#0]  ; LoginMes
0001a4  f7fffffe          BL       OSSemAccept
0001a8  b918              CBNZ     r0,|L9.434|
;;;196    			OSSemPost(LoginMes);
0001aa  480c              LDR      r0,|L9.476|
0001ac  6800              LDR      r0,[r0,#0]  ; LoginMes
0001ae  f7fffffe          BL       OSSemPost
                  |L9.434|
;;;197    	}
;;;198    //	todo:IP更改，后期会有需要
;;;199    //	isIpEqual = strcmp(varOperation.ipAddr,varOperation.newIP_Addr);//比较IP是否相等  = 0 - 相等
;;;200    //	if((varOperation.newIP_Potr != varOperation.ipPotr) || (isIpEqual != 0))//端口号不相等或者IP地址不相等
;;;201    //	{
;;;202    //		memset(varOperation.ipAddr,0,18);//将原始IP清零
;;;203    //		memcpy(varOperation.ipAddr,varOperation.newIP_Addr,18);//新IP
;;;204    //		varOperation.ipPotr = varOperation.newIP_Potr;         //新端口
;;;205    //		varOperation.isDataFlow = 1; //停止数据流
;;;206    //		OSSemPend(sendMsg,0,&ipLen);//等待CDMA发送空闲，不能在其发送数据的时候，重新TCP连接
;;;207    //		
;;;208    //		CDMASendCmd((const uint8_t*)"AT+ZIPCLOSE=0\r","ZIPCLOSE",sizeof("AT+ZIPCLOSE=0\r"));//关闭TCP连接
;;;209    //	}
;;;210    }
0001b2  e8bd83f8          POP      {r3-r9,pc}
;;;211    static void SendFrameNum(uint16_t frameNum)
                          ENDP

0001b6  0000              DCW      0x0000
                  |L9.440|
                          DCD      timetemp
                  |L9.444|
                          DCD      carAllRecord
                  |L9.448|
                          DCD      abflag
                  |L9.452|
                          DCD      timeBase
                  |L9.456|
                          DCD      varOperation+0x46
                  |L9.460|
                          DCD      strengthFuel
                  |L9.464|
                          DCD      sysUpdateVar
                  |L9.468|
                          DCD      sendMsg
                  |L9.472|
                          DCD      canDataConfig
                  |L9.476|
                          DCD      LoginMes

                          AREA ||i.SendConfigNum||, CODE, READONLY, ALIGN=2

                  SendConfigNum PROC
;;;322    }
;;;323    static void SendConfigNum(uint16_t cmd)
000000  b570              PUSH     {r4-r6,lr}
;;;324    {
000002  4605              MOV      r5,r0
;;;325    	_CDMADataToSend* otaUpdatSend;
;;;326    	otaUpdatSend = CDMNSendInfoInit(60);//升级请求帧
000004  203c              MOVS     r0,#0x3c
000006  f7fffffe          BL       CDMNSendInfoInit
00000a  4604              MOV      r4,r0
;;;327    
;;;328    	otaUpdatSend->data[otaUpdatSend->datLength++] = 7;   //长度
00000c  2107              MOVS     r1,#7
00000e  8822              LDRH     r2,[r4,#0]
000010  1c50              ADDS     r0,r2,#1
000012  8020              STRH     r0,[r4,#0]
000014  6860              LDR      r0,[r4,#4]
000016  5481              STRB     r1,[r0,r2]
;;;329    	otaUpdatSend->data[otaUpdatSend->datLength++] = (cmd>>8) &0x00FF;
000018  0a29              LSRS     r1,r5,#8
00001a  8822              LDRH     r2,[r4,#0]
00001c  1c50              ADDS     r0,r2,#1
00001e  8020              STRH     r0,[r4,#0]
000020  6860              LDR      r0,[r4,#4]
000022  5481              STRB     r1,[r0,r2]
;;;330    	otaUpdatSend->data[otaUpdatSend->datLength++] = cmd &0x00FF;
000024  8822              LDRH     r2,[r4,#0]
000026  1c50              ADDS     r0,r2,#1
000028  8020              STRH     r0,[r4,#0]
00002a  6860              LDR      r0,[r4,#4]
00002c  5485              STRB     r5,[r0,r2]
;;;331    	//请求升级的版本
;;;332    	otaUpdatSend->data[otaUpdatSend->datLength++] = (varOperation.newPIDVersion >> 24) & 0x00FF;
00002e  4817              LDR      r0,|L10.140|
000030  f8d0007e          LDR      r0,[r0,#0x7e]  ; varOperation
000034  0e00              LSRS     r0,r0,#24
000036  8822              LDRH     r2,[r4,#0]
000038  1c51              ADDS     r1,r2,#1
00003a  8021              STRH     r1,[r4,#0]
00003c  6861              LDR      r1,[r4,#4]
00003e  5488              STRB     r0,[r1,r2]
;;;333    	otaUpdatSend->data[otaUpdatSend->datLength++] = (varOperation.newPIDVersion >> 16) & 0x00FF;
000040  4812              LDR      r0,|L10.140|
000042  f8d0007e          LDR      r0,[r0,#0x7e]  ; varOperation
000046  f3c04107          UBFX     r1,r0,#16,#8
00004a  8822              LDRH     r2,[r4,#0]
00004c  1c50              ADDS     r0,r2,#1
00004e  8020              STRH     r0,[r4,#0]
000050  6860              LDR      r0,[r4,#4]
000052  5481              STRB     r1,[r0,r2]
;;;334    	otaUpdatSend->data[otaUpdatSend->datLength++] = (varOperation.newPIDVersion >> 8) & 0x00FF;
000054  480d              LDR      r0,|L10.140|
000056  f8b0007e          LDRH     r0,[r0,#0x7e]  ; varOperation
00005a  f3c02107          UBFX     r1,r0,#8,#8
00005e  8822              LDRH     r2,[r4,#0]
000060  1c50              ADDS     r0,r2,#1
000062  8020              STRH     r0,[r4,#0]
000064  6860              LDR      r0,[r4,#4]
000066  5481              STRB     r1,[r0,r2]
;;;335    	otaUpdatSend->data[otaUpdatSend->datLength++] = varOperation.newPIDVersion & 0x00FF;
000068  4808              LDR      r0,|L10.140|
00006a  f890107e          LDRB     r1,[r0,#0x7e]  ; varOperation
00006e  8822              LDRH     r2,[r4,#0]
000070  1c50              ADDS     r0,r2,#1
000072  8020              STRH     r0,[r4,#0]
000074  6860              LDR      r0,[r4,#4]
000076  5481              STRB     r1,[r0,r2]
;;;336    	
;;;337    	CDMASendDataPack(otaUpdatSend);//将请求包进行封包
000078  4620              MOV      r0,r4
00007a  f7fffffe          BL       CDMASendDataPack
;;;338    	
;;;339    	OSQPost(CDMASendQ,otaUpdatSend);
00007e  4621              MOV      r1,r4
000080  4803              LDR      r0,|L10.144|
000082  6800              LDR      r0,[r0,#0]  ; CDMASendQ
000084  f7fffffe          BL       OSQPost
;;;340    }
000088  bd70              POP      {r4-r6,pc}
;;;341    static void ConfigUpdata(uint8_t* ptrDeal )
                          ENDP

00008a  0000              DCW      0x0000
                  |L10.140|
                          DCD      varOperation
                  |L10.144|
                          DCD      CDMASendQ

                          AREA ||i.SendFrameNum||, CODE, READONLY, ALIGN=2

                  SendFrameNum PROC
;;;210    }
;;;211    static void SendFrameNum(uint16_t frameNum)
000000  b570              PUSH     {r4-r6,lr}
;;;212    {
000002  4605              MOV      r5,r0
;;;213    	_CDMADataToSend* otaUpdatSend;
;;;214    	otaUpdatSend = CDMNSendInfoInit(60);//
000004  203c              MOVS     r0,#0x3c
000006  f7fffffe          BL       CDMNSendInfoInit
00000a  4604              MOV      r4,r0
;;;215    	otaUpdatSend->data[otaUpdatSend->datLength++] =  3;     //长度
00000c  2103              MOVS     r1,#3
00000e  8822              LDRH     r2,[r4,#0]
000010  1c50              ADDS     r0,r2,#1
000012  8020              STRH     r0,[r4,#0]
000014  6860              LDR      r0,[r4,#4]
000016  5481              STRB     r1,[r0,r2]
;;;216    	otaUpdatSend->data[otaUpdatSend->datLength++] = (frameNum >> 8) &0x00FF;
000018  0a29              LSRS     r1,r5,#8
00001a  8822              LDRH     r2,[r4,#0]
00001c  1c50              ADDS     r0,r2,#1
00001e  8020              STRH     r0,[r4,#0]
000020  6860              LDR      r0,[r4,#4]
000022  5481              STRB     r1,[r0,r2]
;;;217    	otaUpdatSend->data[otaUpdatSend->datLength++] = frameNum & 0x00FF;
000024  8822              LDRH     r2,[r4,#0]
000026  1c50              ADDS     r0,r2,#1
000028  8020              STRH     r0,[r4,#0]
00002a  6860              LDR      r0,[r4,#4]
00002c  5485              STRB     r5,[r0,r2]
;;;218    	
;;;219    	CDMASendDataPack(otaUpdatSend);//将程序请求帧进行封包
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       CDMASendDataPack
;;;220    	
;;;221    	OSQPost(CDMASendQ,otaUpdatSend);
000034  4621              MOV      r1,r4
000036  4802              LDR      r0,|L11.64|
000038  6800              LDR      r0,[r0,#0]  ; CDMASendQ
00003a  f7fffffe          BL       OSQPost
;;;222    }
00003e  bd70              POP      {r4-r6,pc}
;;;223    uint8_t updateBuff[2048];       //升级用
                          ENDP

                  |L11.64|
                          DCD      CDMASendQ

                          AREA ||i.SendPidCmdData||, CODE, READONLY, ALIGN=2

                  SendPidCmdData PROC
;;;106    
;;;544    void SendPidCmdData(uint8_t* cmdData)
000000  b570              PUSH     {r4-r6,lr}
;;;545    {
000002  4605              MOV      r5,r0
;;;546    	_CDMADataToSend* cmdPidSend;
;;;547    	cmdPidSend = CDMNSendInfoInit(60);//
000004  203c              MOVS     r0,#0x3c
000006  f7fffffe          BL       CDMNSendInfoInit
00000a  4604              MOV      r4,r0
;;;548    	memcpy(&cmdPidSend->data[cmdPidSend->datLength],cmdData,cmdData[0]);
00000c  6861              LDR      r1,[r4,#4]
00000e  8823              LDRH     r3,[r4,#0]
000010  18c8              ADDS     r0,r1,r3
000012  782a              LDRB     r2,[r5,#0]
000014  4629              MOV      r1,r5
000016  f7fffffe          BL       __aeabi_memcpy
;;;549    	cmdPidSend->datLength += cmdData[0];
00001a  8820              LDRH     r0,[r4,#0]
00001c  7829              LDRB     r1,[r5,#0]
00001e  4408              ADD      r0,r0,r1
000020  8020              STRH     r0,[r4,#0]
;;;550    
;;;551    	CDMASendDataPack(cmdPidSend);     //将程序请求帧进行封包
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       CDMASendDataPack
;;;552    	
;;;553    	OSQPost(CDMASendQ,cmdPidSend);
000028  4621              MOV      r1,r4
00002a  4804              LDR      r0,|L12.60|
00002c  6800              LDR      r0,[r0,#0]  ; CDMASendQ
00002e  f7fffffe          BL       OSQPost
;;;554    	Mem_free(cmdData);
000032  4628              MOV      r0,r5
000034  f7fffffe          BL       Mem_free
;;;555    }
000038  bd70              POP      {r4-r6,pc}
;;;556    extern uint8_t pidManyBag[8];
                          ENDP

00003a  0000              DCW      0x0000
                  |L12.60|
                          DCD      CDMASendQ

                          AREA ||i.__NVIC_SystemReset||, CODE, READONLY, ALIGN=2

                  __NVIC_SystemReset PROC
;;;1750    */
;;;1751   __STATIC_INLINE void __NVIC_SystemReset(void)
000000  bf00              NOP      
;;;1752   {
;;;1753     __DSB();                                                          /* Ensure all outstanding memory accesses included
000002  bf00              NOP      
000004  bf00              NOP      
000006  f3bf8f4f          DSB      
00000a  bf00              NOP      
00000c  bf00              NOP      
00000e  bf00              NOP      
;;;1754                                                                          buffered write are completed before reset */
;;;1755     SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
000010  4809              LDR      r0,|L13.56|
000012  6800              LDR      r0,[r0,#0]
000014  f40060e0          AND      r0,r0,#0x700
000018  4908              LDR      r1,|L13.60|
00001a  4308              ORRS     r0,r0,r1
00001c  1d00              ADDS     r0,r0,#4
00001e  4906              LDR      r1,|L13.56|
000020  6008              STR      r0,[r1,#0]
;;;1756                              (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
;;;1757                               SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
;;;1758     __DSB();                                                          /* Ensure completion of memory access */
000022  bf00              NOP      
000024  bf00              NOP      
000026  bf00              NOP      
000028  f3bf8f4f          DSB      
00002c  bf00              NOP      
00002e  bf00              NOP      
000030  bf00              NOP      
;;;1759   
;;;1760     for(;;)                                                           /* wait until reset */
000032  bf00              NOP      
                  |L13.52|
;;;1761     {
;;;1762       __NOP();
000034  bf00              NOP      
000036  e7fd              B        |L13.52|
;;;1763     }
;;;1764   }
;;;1765   
                          ENDP

                  |L13.56|
                          DCD      0xe000ed0c
                  |L13.60|
                          DCD      0x05fa0000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  updateBuff
                          %        2048

                          AREA ||.data||, DATA, ALIGN=2

                  timetemp
000000  00                DCB      0x00
                  abflag
000001  00                DCB      0x00
                  currentNum
000002  0000              DCW      0x0000
                  fileCRC
000004  0000              DCW      0x0000
000006  0000              DCB      0x00,0x00
                  flashAddr
                          DCD      0x00000000
                  frameIndex
00000c  0000              DCB      0x00,0x00
                  |symbol_number.52|
00000e  0000              DCW      0x0000
                  |symbol_number.53|
000010  0000              DCW      0x0000
                  pidPackNum
000012  0000              DCB      0x00,0x00
                  addrSavePid
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\CDMA\\CDMARecvTask.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_CDMARecvTask_c_1d630633____REV16|
#line 465 "D:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.2.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___14_CDMARecvTask_c_1d630633____REV16| PROC
#line 466

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_CDMARecvTask_c_1d630633____REVSH|
#line 480
|__asm___14_CDMARecvTask_c_1d630633____REVSH| PROC
#line 481

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___14_CDMARecvTask_c_1d630633____RRX|
#line 667
|__asm___14_CDMARecvTask_c_1d630633____RRX| PROC
#line 668

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
