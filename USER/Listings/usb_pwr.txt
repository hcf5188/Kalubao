; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\obj\usb_pwr.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=..\obj\usb_pwr.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\OBD -I..\SYSTEM -I..\USER -I..\LIB\inc -I..\UCOSII\CONFIG -I..\UCOSII\PORT -I..\UCOSII\CORE -I..\HAEDWARE -I..\GPS -I..\CDMA -I..\DEAL -I..\USB\CONFIG -I..\USB\STM32_USB-FS-Device_Driver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\usb_pwr.crf ..\USB\CONFIG\usb_pwr.c]
                          THUMB

                          AREA ||i.PowerOff||, CODE, READONLY, ALIGN=2

                  PowerOff PROC
;;;93     *******************************************************************************/
;;;94     RESULT PowerOff()
000000  b510              PUSH     {r4,lr}
;;;95     {
;;;96       /* disable all interrupts and force USB reset */
;;;97       _SetCNTR(CNTR_FRES);
000002  2001              MOVS     r0,#1
000004  4905              LDR      r1,|L1.28|
000006  6008              STR      r0,[r1,#0]
;;;98       /* clear interrupt status register */
;;;99       _SetISTR(0);
000008  2000              MOVS     r0,#0
00000a  1d09              ADDS     r1,r1,#4
00000c  6008              STR      r0,[r1,#0]
;;;100      /* Disable the Pull-Up*/
;;;101      USB_Cable_Config(DISABLE);
00000e  f7fffffe          BL       USB_Cable_Config
;;;102      /* switch-off device */
;;;103      _SetCNTR(CNTR_FRES + CNTR_PDWN);
000012  2003              MOVS     r0,#3
000014  4901              LDR      r1,|L1.28|
000016  6008              STR      r0,[r1,#0]
;;;104      /* sw variables reset */
;;;105      /* ... */
;;;106    
;;;107      return USB_SUCCESS;
000018  2000              MOVS     r0,#0
;;;108    }
00001a  bd10              POP      {r4,pc}
;;;109    
                          ENDP

                  |L1.28|
                          DCD      0x40005c40

                          AREA ||i.PowerOn||, CODE, READONLY, ALIGN=2

                  PowerOn PROC
;;;63     *******************************************************************************/
;;;64     RESULT PowerOn(void)
000000  b510              PUSH     {r4,lr}
;;;65     {
;;;66       uint16_t wRegVal;
;;;67     
;;;68       /*** cable plugged-in ? ***/
;;;69       USB_Cable_Config(ENABLE);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       USB_Cable_Config
;;;70     
;;;71       /*** CNTR_PWDN = 0 ***/
;;;72       wRegVal = CNTR_FRES;
000008  2401              MOVS     r4,#1
;;;73       _SetCNTR(wRegVal);
00000a  480b              LDR      r0,|L2.56|
00000c  6004              STR      r4,[r0,#0]
;;;74     
;;;75       /*** CNTR_FRES = 0 ***/
;;;76       wInterrupt_Mask = 0;
00000e  2000              MOVS     r0,#0
000010  490a              LDR      r1,|L2.60|
000012  8008              STRH     r0,[r1,#0]
;;;77       _SetCNTR(wInterrupt_Mask);
000014  4608              MOV      r0,r1
000016  8800              LDRH     r0,[r0,#0]  ; wInterrupt_Mask
000018  4907              LDR      r1,|L2.56|
00001a  6008              STR      r0,[r1,#0]
;;;78       /*** Clear pending interrupts ***/
;;;79       _SetISTR(0);
00001c  2000              MOVS     r0,#0
00001e  1d09              ADDS     r1,r1,#4
000020  6008              STR      r0,[r1,#0]
;;;80       /*** Set interrupt mask ***/
;;;81       wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
000022  f44f50e0          MOV      r0,#0x1c00
000026  4905              LDR      r1,|L2.60|
000028  8008              STRH     r0,[r1,#0]
;;;82       _SetCNTR(wInterrupt_Mask);
00002a  4608              MOV      r0,r1
00002c  8800              LDRH     r0,[r0,#0]  ; wInterrupt_Mask
00002e  4902              LDR      r1,|L2.56|
000030  6008              STR      r0,[r1,#0]
;;;83       
;;;84       return USB_SUCCESS;
000032  2000              MOVS     r0,#0
;;;85     }
000034  bd10              POP      {r4,pc}
;;;86     
                          ENDP

000036  0000              DCW      0x0000
                  |L2.56|
                          DCD      0x40005c40
                  |L2.60|
                          DCD      wInterrupt_Mask

                          AREA ||i.Resume||, CODE, READONLY, ALIGN=2

                  Resume PROC
;;;210    *******************************************************************************/
;;;211    void Resume(RESUME_STATE eResumeSetVal)
000000  b570              PUSH     {r4-r6,lr}
;;;212    {
000002  4605              MOV      r5,r0
;;;213      uint16_t wCNTR;
;;;214    
;;;215      if (eResumeSetVal != RESUME_ESOF)
000004  2d07              CMP      r5,#7
000006  d001              BEQ      |L3.12|
;;;216        ResumeS.eState = eResumeSetVal;
000008  482e              LDR      r0,|L3.196|
00000a  7005              STRB     r5,[r0,#0]
                  |L3.12|
;;;217      switch (ResumeS.eState)
00000c  482d              LDR      r0,|L3.196|
00000e  7800              LDRB     r0,[r0,#0]  ; ResumeS
000010  2808              CMP      r0,#8
000012  d24e              BCS      |L3.178|
000014  e8dff000          TBB      [pc,r0]
000018  04111a20          DCB      0x04,0x11,0x1a,0x20
00001c  2b384e4f          DCB      0x2b,0x38,0x4e,0x4f
;;;218      {
;;;219        case RESUME_EXTERNAL:
;;;220          if (remotewakeupon ==0)
000020  4829              LDR      r0,|L3.200|
000022  6800              LDR      r0,[r0,#0]  ; remotewakeupon
000024  b928              CBNZ     r0,|L3.50|
;;;221          {
;;;222            Resume_Init();
000026  f7fffffe          BL       Resume_Init
;;;223            ResumeS.eState = RESUME_OFF;
00002a  2006              MOVS     r0,#6
00002c  4925              LDR      r1,|L3.196|
00002e  7008              STRB     r0,[r1,#0]
000030  e002              B        |L3.56|
                  |L3.50|
;;;224          }
;;;225          else /* RESUME detected during the RemoteWAkeup signalling => keep RemoteWakeup handling*/
;;;226          {
;;;227            ResumeS.eState = RESUME_ON;
000032  2005              MOVS     r0,#5
000034  4923              LDR      r1,|L3.196|
000036  7008              STRB     r0,[r1,#0]
                  |L3.56|
;;;228          }
;;;229          break;
000038  e041              B        |L3.190|
;;;230        case RESUME_INTERNAL:
;;;231          Resume_Init();
00003a  f7fffffe          BL       Resume_Init
;;;232          ResumeS.eState = RESUME_START;
00003e  2004              MOVS     r0,#4
000040  4920              LDR      r1,|L3.196|
000042  7008              STRB     r0,[r1,#0]
;;;233          remotewakeupon = 1;
000044  2001              MOVS     r0,#1
000046  4920              LDR      r1,|L3.200|
000048  6008              STR      r0,[r1,#0]  ; remotewakeupon
;;;234          break;
00004a  e038              B        |L3.190|
;;;235        case RESUME_LATER:
;;;236          ResumeS.bESOFcnt = 2;
00004c  2002              MOVS     r0,#2
00004e  491d              LDR      r1,|L3.196|
000050  7048              STRB     r0,[r1,#1]
;;;237          ResumeS.eState = RESUME_WAIT;
000052  2003              MOVS     r0,#3
000054  7008              STRB     r0,[r1,#0]
;;;238          break;
000056  e032              B        |L3.190|
;;;239        case RESUME_WAIT:
;;;240          ResumeS.bESOFcnt--;
000058  481a              LDR      r0,|L3.196|
00005a  7840              LDRB     r0,[r0,#1]  ; ResumeS
00005c  1e40              SUBS     r0,r0,#1
00005e  4919              LDR      r1,|L3.196|
000060  7048              STRB     r0,[r1,#1]
;;;241          if (ResumeS.bESOFcnt == 0)
000062  4608              MOV      r0,r1
000064  7840              LDRB     r0,[r0,#1]  ; ResumeS
000066  b908              CBNZ     r0,|L3.108|
;;;242            ResumeS.eState = RESUME_START;
000068  2004              MOVS     r0,#4
00006a  7008              STRB     r0,[r1,#0]
                  |L3.108|
;;;243          break;
00006c  e027              B        |L3.190|
;;;244        case RESUME_START:
;;;245          wCNTR = _GetCNTR();
00006e  4817              LDR      r0,|L3.204|
000070  6800              LDR      r0,[r0,#0]
000072  b284              UXTH     r4,r0
;;;246          wCNTR |= CNTR_RESUME;
000074  f0440410          ORR      r4,r4,#0x10
;;;247          _SetCNTR(wCNTR);
000078  4814              LDR      r0,|L3.204|
00007a  6004              STR      r4,[r0,#0]
;;;248          ResumeS.eState = RESUME_ON;
00007c  2005              MOVS     r0,#5
00007e  4911              LDR      r1,|L3.196|
000080  7008              STRB     r0,[r1,#0]
;;;249          ResumeS.bESOFcnt = 10;
000082  200a              MOVS     r0,#0xa
000084  7048              STRB     r0,[r1,#1]
;;;250          break;
000086  e01a              B        |L3.190|
;;;251        case RESUME_ON:    
;;;252          ResumeS.bESOFcnt--;
000088  480e              LDR      r0,|L3.196|
00008a  7840              LDRB     r0,[r0,#1]  ; ResumeS
00008c  1e40              SUBS     r0,r0,#1
00008e  490d              LDR      r1,|L3.196|
000090  7048              STRB     r0,[r1,#1]
;;;253          if (ResumeS.bESOFcnt == 0)
000092  4608              MOV      r0,r1
000094  7840              LDRB     r0,[r0,#1]  ; ResumeS
000096  b958              CBNZ     r0,|L3.176|
;;;254          {
;;;255            wCNTR = _GetCNTR();
000098  480c              LDR      r0,|L3.204|
00009a  6800              LDR      r0,[r0,#0]
00009c  b284              UXTH     r4,r0
;;;256            wCNTR &= (~CNTR_RESUME);
00009e  f0240410          BIC      r4,r4,#0x10
;;;257            _SetCNTR(wCNTR);
0000a2  480a              LDR      r0,|L3.204|
0000a4  6004              STR      r4,[r0,#0]
;;;258            ResumeS.eState = RESUME_OFF;
0000a6  2006              MOVS     r0,#6
0000a8  7008              STRB     r0,[r1,#0]
;;;259            remotewakeupon = 0;
0000aa  2000              MOVS     r0,#0
0000ac  4906              LDR      r1,|L3.200|
0000ae  6008              STR      r0,[r1,#0]  ; remotewakeupon
                  |L3.176|
;;;260          }
;;;261          break;
0000b0  e005              B        |L3.190|
                  |L3.178|
;;;262        case RESUME_OFF:
0000b2  bf00              NOP      
;;;263        case RESUME_ESOF:
0000b4  bf00              NOP      
;;;264        default:
;;;265          ResumeS.eState = RESUME_OFF;
0000b6  2006              MOVS     r0,#6
0000b8  4902              LDR      r1,|L3.196|
0000ba  7008              STRB     r0,[r1,#0]
;;;266          break;
0000bc  bf00              NOP      
                  |L3.190|
0000be  bf00              NOP                            ;229
;;;267      }
;;;268    }
0000c0  bd70              POP      {r4-r6,pc}
;;;269    
                          ENDP

0000c2  0000              DCW      0x0000
                  |L3.196|
                          DCD      ResumeS
                  |L3.200|
                          DCD      remotewakeupon
                  |L3.204|
                          DCD      0x40005c40

                          AREA ||i.Resume_Init||, CODE, READONLY, ALIGN=2

                  Resume_Init PROC
;;;173    *******************************************************************************/
;;;174    void Resume_Init(void)
000000  b510              PUSH     {r4,lr}
;;;175    {
;;;176      uint16_t wCNTR;
;;;177      
;;;178      /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
;;;179      /* restart the clocks */
;;;180      /* ...  */
;;;181    
;;;182      /* CNTR_LPMODE = 0 */
;;;183      wCNTR = _GetCNTR();
000002  4807              LDR      r0,|L4.32|
000004  6800              LDR      r0,[r0,#0]
000006  b284              UXTH     r4,r0
;;;184      wCNTR &= (~CNTR_LPMODE);
000008  f0240404          BIC      r4,r4,#4
;;;185      _SetCNTR(wCNTR);    
00000c  4804              LDR      r0,|L4.32|
00000e  6004              STR      r4,[r0,#0]
;;;186      
;;;187      /* restore full power */
;;;188      /* ... on connected devices */
;;;189      Leave_LowPowerMode();
000010  f7fffffe          BL       Leave_LowPowerMode
;;;190    
;;;191      /* reset FSUSP bit */
;;;192      _SetCNTR(IMR_MSK);
000014  f44f403f          MOV      r0,#0xbf00
000018  4901              LDR      r1,|L4.32|
00001a  6008              STR      r0,[r1,#0]
;;;193    
;;;194      /* reverse suspend preparation */
;;;195      /* ... */ 
;;;196    
;;;197    }
00001c  bd10              POP      {r4,pc}
;;;198    
                          ENDP

00001e  0000              DCW      0x0000
                  |L4.32|
                          DCD      0x40005c40

                          AREA ||i.Suspend||, CODE, READONLY, ALIGN=2

                  Suspend PROC
;;;116    *******************************************************************************/
;;;117    void Suspend(void)
000000  b538              PUSH     {r3-r5,lr}
;;;118    {
;;;119    	uint32_t i =0;
000002  2500              MOVS     r5,#0
;;;120    	uint16_t wCNTR; 
;;;121      __IO uint32_t savePWR_CR=0;
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
;;;122    	/* suspend preparation */
;;;123    	/* ... */
;;;124    	
;;;125    	/*Store CNTR value */
;;;126    	wCNTR = _GetCNTR();  
000008  4821              LDR      r0,|L5.144|
00000a  6800              LDR      r0,[r0,#0]
00000c  b284              UXTH     r4,r0
;;;127    
;;;128        /* This a sequence to apply a force RESET to handle a robustness case */
;;;129        
;;;130    	/*Store endpoints registers status */
;;;131        for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
00000e  bf00              NOP      
000010  e009              B        |L5.38|
                  |L5.18|
000012  4920              LDR      r1,|L5.148|
000014  eb010085          ADD      r0,r1,r5,LSL #2
000018  f8d00c00          LDR      r0,[r0,#0xc00]
00001c  b280              UXTH     r0,r0
00001e  491e              LDR      r1,|L5.152|
000020  f8410025          STR      r0,[r1,r5,LSL #2]
000024  1c6d              ADDS     r5,r5,#1
                  |L5.38|
000026  2d08              CMP      r5,#8
000028  d3f3              BCC      |L5.18|
;;;132    	
;;;133    	/* unmask RESET flag */
;;;134    	wCNTR|=CNTR_RESETM;
00002a  f4446480          ORR      r4,r4,#0x400
;;;135    	_SetCNTR(wCNTR);
00002e  4818              LDR      r0,|L5.144|
000030  6004              STR      r4,[r0,#0]
;;;136    	
;;;137    	/*apply FRES */
;;;138    	wCNTR|=CNTR_FRES;
000032  f0440401          ORR      r4,r4,#1
;;;139    	_SetCNTR(wCNTR);
000036  6004              STR      r4,[r0,#0]
;;;140    	
;;;141    	/*clear FRES*/
;;;142    	wCNTR&=~CNTR_FRES;
000038  f0240401          BIC      r4,r4,#1
;;;143    	_SetCNTR(wCNTR);
00003c  6004              STR      r4,[r0,#0]
;;;144    	
;;;145    	/*poll for RESET flag in ISTR*/
;;;146    	while((_GetISTR()&ISTR_RESET) == 0);
00003e  bf00              NOP      
                  |L5.64|
000040  4813              LDR      r0,|L5.144|
000042  1d00              ADDS     r0,r0,#4
000044  6800              LDR      r0,[r0,#0]
000046  f4006080          AND      r0,r0,#0x400
00004a  2800              CMP      r0,#0
00004c  d0f8              BEQ      |L5.64|
;;;147    	
;;;148    	/* clear RESET flag in ISTR */
;;;149    	_SetISTR((uint16_t)CLR_RESET);
00004e  f64f30ff          MOV      r0,#0xfbff
000052  490f              LDR      r1,|L5.144|
000054  1d09              ADDS     r1,r1,#4
000056  6008              STR      r0,[r1,#0]
;;;150    	
;;;151    	/*restore Enpoints*/
;;;152    	for (i=0;i<8;i++)
000058  2500              MOVS     r5,#0
00005a  e009              B        |L5.112|
                  |L5.92|
;;;153    	_SetENDPOINT(i, EP[i]);
00005c  480e              LDR      r0,|L5.152|
00005e  f8500025          LDR      r0,[r0,r5,LSL #2]
000062  b280              UXTH     r0,r0
000064  4a0b              LDR      r2,|L5.148|
000066  eb020185          ADD      r1,r2,r5,LSL #2
00006a  f8c10c00          STR      r0,[r1,#0xc00]
00006e  1c6d              ADDS     r5,r5,#1              ;152
                  |L5.112|
000070  2d08              CMP      r5,#8                 ;152
000072  d3f3              BCC      |L5.92|
;;;154    	
;;;155    	/* Now it is safe to enter macrocell in suspend mode */
;;;156    	wCNTR |= CNTR_FSUSP;
000074  f0440408          ORR      r4,r4,#8
;;;157    	_SetCNTR(wCNTR);
000078  4805              LDR      r0,|L5.144|
00007a  6004              STR      r4,[r0,#0]
;;;158    	
;;;159    	/* force low-power mode in the macrocell */
;;;160    	wCNTR = _GetCNTR();
00007c  6800              LDR      r0,[r0,#0]
00007e  b284              UXTH     r4,r0
;;;161    	wCNTR |= CNTR_LPMODE;
000080  f0440404          ORR      r4,r4,#4
;;;162    	_SetCNTR(wCNTR);
000084  4802              LDR      r0,|L5.144|
000086  6004              STR      r4,[r0,#0]
;;;163    
;;;164    	Enter_LowPowerMode();
000088  f7fffffe          BL       Enter_LowPowerMode
;;;165    }
00008c  bd38              POP      {r3-r5,pc}
;;;166    
                          ENDP

00008e  0000              DCW      0x0000
                  |L5.144|
                          DCD      0x40005c40
                  |L5.148|
                          DCD      0x40005000
                  |L5.152|
                          DCD      ||EP||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  ||EP||
                          %        32

                          AREA ||.data||, DATA, ALIGN=2

                  bDeviceState
                          DCD      0x00000000
                  fSuspendEnabled
000004  01                DCB      0x01
                  ResumeS
000005  000000            DCB      0x00,0x00,0x00
                  remotewakeupon
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\USB\\CONFIG\\usb_pwr.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_usb_pwr_c_e4e9521d____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_usb_pwr_c_e4e9521d____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_usb_pwr_c_e4e9521d____REVSH|
#line 144
|__asm___9_usb_pwr_c_e4e9521d____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
