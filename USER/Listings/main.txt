; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\obj\main.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=..\obj\main.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\OBD -I..\SYSTEM -I..\USER -I..\LIB\inc -I..\UCOSII\CONFIG -I..\UCOSII\PORT -I..\UCOSII\CORE -I..\HAEDWARE -I..\GPS -I..\CDMA -I..\DEAL -I..\USB\CONFIG -I..\USB\STM32_USB-FS-Device_Driver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\main.crf main.c]
                          THUMB

                          AREA ||i.StartTask||, CODE, READONLY, ALIGN=2

                  StartTask PROC
;;;104    
;;;105    void StartTask(void *pdata)
000000  b508              PUSH     {r3,lr}
;;;106    {
;;;107    	uint8_t err;
;;;108    	uint8_t i = 0;
000002  2400              MOVS     r4,#0
;;;109    	uint8_t *ptrOBDSend;
;;;110    	uint32_t timeToSendLogin  = 0;
000004  2600              MOVS     r6,#0
;;;111    	OS_CPU_SR cpu_sr=0;
000006  2700              MOVS     r7,#0
;;;112    	pdata = pdata; 
000008  bf00              NOP      
;;;113    	
;;;114    	cdmaDataToSend = CDMNSendDataInit(1000);//初始化获取发向CDMA的消息结构体
00000a  f44f707a          MOV      r0,#0x3e8
00000e  f7fffffe          BL       CDMNSendDataInit
000012  49ac              LDR      r1,|L1.708|
000014  6008              STR      r0,[r1,#0]  ; cdmaDataToSend
;;;115    	if(varOperation.USB_NormalMode == 1)//USB 升级模式
000016  48ac              LDR      r0,|L1.712|
000018  7a00              LDRB     r0,[r0,#8]  ; varOperation
00001a  2801              CMP      r0,#1
00001c  d115              BNE      |L1.74|
;;;116    	{
;;;117    		USBRecieveQ = OSQCreate(&usbRecBuf[0],USBRECBUF_SIZE);  //建立USB接收 消息队列
00001e  210a              MOVS     r1,#0xa
000020  48aa              LDR      r0,|L1.716|
000022  f7fffffe          BL       OSQCreate
000026  49aa              LDR      r1,|L1.720|
000028  6008              STR      r0,[r1,#0]  ; USBRecieveQ
;;;118    		USBSendQ    = OSQCreate(&usbSendBuf[0],USBSENDBUF_SIZE);//建立USB发送 消息队列
00002a  2105              MOVS     r1,#5
00002c  48a9              LDR      r0,|L1.724|
00002e  f7fffffe          BL       OSQCreate
000032  49a9              LDR      r1,|L1.728|
000034  6008              STR      r0,[r1,#0]  ; USBSendQ
;;;119    		
;;;120    		OSTaskCreate(USBUpdataTask,(void *)0,(OS_STK*)&USB_TASK_STK[USB_STK_SIZE-1],USB_TASK_PRIO);
000036  2309              MOVS     r3,#9
000038  4aa8              LDR      r2,|L1.732|
00003a  2100              MOVS     r1,#0
00003c  48a8              LDR      r0,|L1.736|
00003e  f7fffffe          BL       OSTaskCreate
;;;121    		OSTaskSuspend(OS_PRIO_SELF);//挂起起始任务
000042  20ff              MOVS     r0,#0xff
000044  f7fffffe          BL       OSTaskSuspend
000048  e086              B        |L1.344|
                  |L1.74|
;;;122    	}else
;;;123    	{
;;;124    		OS_ENTER_CRITICAL();			//进入临界区(无法被中断打断)    
00004a  f7fffffe          BL       OS_CPU_SR_Save
00004e  4607              MOV      r7,r0
;;;125    /***********************************  创建任务间通信的消息     ***************************************************/				
;;;126    		beepSem   = OSSemCreate(1);       //蜂鸣器信号量（目前没啥用，留着以后扩展蜂鸣器响的方式）
000050  2001              MOVS     r0,#1
000052  f7fffffe          BL       OSSemCreate
000056  49a3              LDR      r1,|L1.740|
000058  6008              STR      r0,[r1,#0]  ; beepSem
;;;127    		LoginMes  = OSSemCreate(0);       //登录报文信号量
00005a  2000              MOVS     r0,#0
00005c  f7fffffe          BL       OSSemCreate
000060  49a1              LDR      r1,|L1.744|
000062  6008              STR      r0,[r1,#0]  ; LoginMes
;;;128    		sendMsg   = OSSemCreate(0);       //创建CDMA是否正在发送消息的信号量
000064  2000              MOVS     r0,#0
000066  f7fffffe          BL       OSSemCreate
00006a  49a0              LDR      r1,|L1.748|
00006c  6008              STR      r0,[r1,#0]  ; sendMsg
;;;129    		
;;;130    		CDMASendMutex  = OSMutexCreate(CDMA_SEND_PRIO,&err);       //向CDMA发送缓冲区发送数据 独占 互斥型信号量
00006e  4669              MOV      r1,sp
000070  2008              MOVS     r0,#8
000072  f7fffffe          BL       OSMutexCreate
000076  499e              LDR      r1,|L1.752|
000078  6008              STR      r0,[r1,#0]  ; CDMASendMutex
;;;131    		CDMAPowerMutex = OSMutexCreate(CDMAPOWER_PRIO,&err);       //CDMA电源互斥信号量管理
00007a  4669              MOV      r1,sp
00007c  2007              MOVS     r0,#7
00007e  f7fffffe          BL       OSMutexCreate
000082  499c              LDR      r1,|L1.756|
000084  6008              STR      r0,[r1,#0]  ; CDMAPowerMutex
;;;132    		
;;;133    		CDMARecieveQ = OSQCreate(&cdmaRecBuf[0],CDMARECBUF_SIZE);  //建立CDMA接收 消息队列
000086  210a              MOVS     r1,#0xa
000088  489b              LDR      r0,|L1.760|
00008a  f7fffffe          BL       OSQCreate
00008e  499b              LDR      r1,|L1.764|
000090  6008              STR      r0,[r1,#0]  ; CDMARecieveQ
;;;134    		CDMASendQ    = OSQCreate(&cdmaSendBuf[0],CDMASENDBUF_SIZE);//建立CDMA发送 消息队列
000092  2105              MOVS     r1,#5
000094  489a              LDR      r0,|L1.768|
000096  f7fffffe          BL       OSQCreate
00009a  499a              LDR      r1,|L1.772|
00009c  6008              STR      r0,[r1,#0]  ; CDMASendQ
;;;135    		ZIPRecv_Q    = OSQCreate(&ZIPRecBuf[0],ZIPRECVBUF_SIZE);   //建立“ZIPRECV”处理消息队列
00009e  2105              MOVS     r1,#5
0000a0  4899              LDR      r0,|L1.776|
0000a2  f7fffffe          BL       OSQCreate
0000a6  4999              LDR      r1,|L1.780|
0000a8  6008              STR      r0,[r1,#0]  ; ZIPRecv_Q
;;;136    		
;;;137    		receGPSQ     = OSQCreate(&gpsRecBuf[0],GPSRECBUF_SIZE);    //建立GPS接收 消息队列
0000aa  210a              MOVS     r1,#0xa
0000ac  4898              LDR      r0,|L1.784|
0000ae  f7fffffe          BL       OSQCreate
0000b2  4998              LDR      r1,|L1.788|
0000b4  6008              STR      r0,[r1,#0]  ; receGPSQ
;;;138    		canSendQ    = OSQCreate(&canSendBuf[0],CANSENDBUF_SIZE);   //卡路宝向ECU发送指令的消息队列
0000b6  2150              MOVS     r1,#0x50
0000b8  4897              LDR      r0,|L1.792|
0000ba  f7fffffe          BL       OSQCreate
0000be  4997              LDR      r1,|L1.796|
0000c0  6008              STR      r0,[r1,#0]  ; canSendQ
;;;139    		canRecieveQ = OSQCreate(&canRecBuf[0],CANRECBUF_SIZE);     //卡路宝从ECU接收指令的循环队列
0000c2  2114              MOVS     r1,#0x14
0000c4  4896              LDR      r0,|L1.800|
0000c6  f7fffffe          BL       OSQCreate
0000ca  4996              LDR      r1,|L1.804|
0000cc  6008              STR      r0,[r1,#0]  ; canRecieveQ
;;;140    		canJ1939Q   = OSQCreate(&canJ1939Buf[0],CANJ1939BUF_SIZE); //ECU向卡路宝发送J1939消息队列
0000ce  2114              MOVS     r1,#0x14
0000d0  4895              LDR      r0,|L1.808|
0000d2  f7fffffe          BL       OSQCreate
0000d6  4995              LDR      r1,|L1.812|
0000d8  6008              STR      r0,[r1,#0]  ; canJ1939Q
;;;141    /*************************************      创建各任务           ********************************************************/		
;;;142    		OSTaskCreate(PowerDeal,(void *)0,(OS_STK*)&POWER_TASK_STK[POWER_STK_SIZE-1],POWER_TASK_PRIO);
0000da  2311              MOVS     r3,#0x11
0000dc  4a94              LDR      r2,|L1.816|
0000de  2100              MOVS     r1,#0
0000e0  4894              LDR      r0,|L1.820|
0000e2  f7fffffe          BL       OSTaskCreate
;;;143    		
;;;144    		OSTaskCreate(CDMATask,(void *)0,(OS_STK*)&CDMA_TASK_STK[CDMA_STK_SIZE-1],CDMA_TASK_PRIO);
0000e6  230b              MOVS     r3,#0xb
0000e8  4a93              LDR      r2,|L1.824|
0000ea  2100              MOVS     r1,#0
0000ec  4893              LDR      r0,|L1.828|
0000ee  f7fffffe          BL       OSTaskCreate
;;;145    		
;;;146    		OSTaskCreate(CDMARecvTask,(void *)0,(OS_STK*)&CDMARecv_TASK_STK[CDMARecv_STK_SIZE-1],CDMARevc_TASK_PRIO);	
0000f2  230c              MOVS     r3,#0xc
0000f4  4a92              LDR      r2,|L1.832|
0000f6  2100              MOVS     r1,#0
0000f8  4892              LDR      r0,|L1.836|
0000fa  f7fffffe          BL       OSTaskCreate
;;;147    		
;;;148    		OSTaskCreate(GPSTask, (void *)0,(OS_STK*)&GPS_TASK_STK[GPS_STK_SIZE-1],GPS_TASK_PRIO);	
0000fe  230e              MOVS     r3,#0xe
000100  4a91              LDR      r2,|L1.840|
000102  2100              MOVS     r1,#0
000104  4891              LDR      r0,|L1.844|
000106  f7fffffe          BL       OSTaskCreate
;;;149    		
;;;150    		OSTaskCreate(OBDTask, (void *)0,(OS_STK*)&OBD_TASK_STK[OBD_STK_SIZE-1],OBD_TASK_PRIO);
00010a  230f              MOVS     r3,#0xf
00010c  4a90              LDR      r2,|L1.848|
00010e  2100              MOVS     r1,#0
000110  4890              LDR      r0,|L1.852|
000112  f7fffffe          BL       OSTaskCreate
;;;151    		OSTaskCreate(DealJ1939Date, (void *)0,(OS_STK*)&J1939_TASK_STK[J1939_STK_SIZE-1],J1939_TASK_PRIO);//创建J1939处理任务		
000116  2310              MOVS     r3,#0x10
000118  4a8f              LDR      r2,|L1.856|
00011a  2100              MOVS     r1,#0
00011c  488f              LDR      r0,|L1.860|
00011e  f7fffffe          BL       OSTaskCreate
;;;152    		
;;;153    		OSTaskCreate(CDMALEDTask,(void *)0,(OS_STK*)&CDMA_LED_STK[LED_STK_SIZE-1],CDMA_LED_PRIO);
000122  2314              MOVS     r3,#0x14
000124  4a8e              LDR      r2,|L1.864|
000126  2100              MOVS     r1,#0
000128  488e              LDR      r0,|L1.868|
00012a  f7fffffe          BL       OSTaskCreate
;;;154    		OSTaskCreate(GPSLEDTask, (void *)0,(OS_STK*)&GPS_LED_STK[LED_STK_SIZE-1], GPS_LED_PRIO);		
00012e  2315              MOVS     r3,#0x15
000130  4a8d              LDR      r2,|L1.872|
000132  2100              MOVS     r1,#0
000134  488d              LDR      r0,|L1.876|
000136  f7fffffe          BL       OSTaskCreate
;;;155    		OSTaskCreate(OBDLEDTask, (void *)0,(OS_STK*)&OBD_LED_STK[LED_STK_SIZE-1], OBD_LED_PRIO);	
00013a  2316              MOVS     r3,#0x16
00013c  4a8c              LDR      r2,|L1.880|
00013e  2100              MOVS     r1,#0
000140  488c              LDR      r0,|L1.884|
000142  f7fffffe          BL       OSTaskCreate
;;;156    		OSTaskCreate(BeepTask,   (void *)0,(OS_STK*)&BEEP_STK[BEEP_STK_SIZE-1],   BEEP_TASK_PRIO);
000146  2317              MOVS     r3,#0x17
000148  4a8b              LDR      r2,|L1.888|
00014a  2100              MOVS     r1,#0
00014c  488b              LDR      r0,|L1.892|
00014e  f7fffffe          BL       OSTaskCreate
;;;157    		
;;;158    		OS_EXIT_CRITICAL();				//退出临界区(可以被中断打断)
000152  4638              MOV      r0,r7
000154  f7fffffe          BL       OS_CPU_SR_Restore
                  |L1.344|
;;;159    	}
;;;160    	while(1)
000158  e0b3              B        |L1.706|
                  |L1.346|
;;;161    	{
;;;162    		
;;;163    		OSTimeDlyHMSM(0,0,0,4);         //4ms扫描一次
00015a  2304              MOVS     r3,#4
00015c  2200              MOVS     r2,#0
00015e  4611              MOV      r1,r2
000160  4610              MOV      r0,r2
000162  f7fffffe          BL       OSTimeDlyHMSM
;;;164    		if(varOperation.isDataFlow == 1)
000166  4858              LDR      r0,|L1.712|
000168  f890002d          LDRB     r0,[r0,#0x2d]  ; varOperation
00016c  2801              CMP      r0,#1
00016e  d100              BNE      |L1.370|
;;;165    			continue;
000170  e0a7              B        |L1.706|
                  |L1.370|
;;;166    		timeToSendLogin++;
000172  1c76              ADDS     r6,r6,#1
;;;167    		if(timeToSendLogin % 45000 == 0)//定期3分钟发送登录报文
000174  f64a70c8          MOV      r0,#0xafc8
000178  fbb6f1f0          UDIV     r1,r6,r0
00017c  fb006011          MLS      r0,r0,r1,r6
000180  b908              CBNZ     r0,|L1.390|
;;;168    		{
;;;169    			LoginDataSend(); 
000182  f7fffffe          BL       LoginDataSend
                  |L1.390|
;;;170    		}
;;;171    		if(varOperation.canTest == 2)   //CAN的波特率和ID均已确定
000186  4850              LDR      r0,|L1.712|
000188  f8b0007c          LDRH     r0,[r0,#0x7c]  ; varOperation
00018c  2802              CMP      r0,#2
00018e  d152              BNE      |L1.566|
;;;172    		{
;;;173    			for(i=0;i<varOperation.pidNum;i++)//todo:PID指令的数目 后期需要配置
000190  2400              MOVS     r4,#0
000192  e04b              B        |L1.556|
                  |L1.404|
;;;174    			{
;;;175    				(ptrPIDAllDat + i)->timeCount += 4;
000194  eb040084          ADD      r0,r4,r4,LSL #2
000198  eb0000c4          ADD      r0,r0,r4,LSL #3
00019c  4978              LDR      r1,|L1.896|
00019e  6809              LDR      r1,[r1,#0]  ; ptrPIDAllDat
0001a0  4408              ADD      r0,r0,r1
0001a2  8840              LDRH     r0,[r0,#2]
0001a4  1d00              ADDS     r0,r0,#4
0001a6  b281              UXTH     r1,r0
0001a8  eb040084          ADD      r0,r4,r4,LSL #2
0001ac  eb0000c4          ADD      r0,r0,r4,LSL #3
0001b0  4a73              LDR      r2,|L1.896|
0001b2  6812              LDR      r2,[r2,#0]  ; ptrPIDAllDat
0001b4  4410              ADD      r0,r0,r2
0001b6  8041              STRH     r1,[r0,#2]
;;;176    				if((ptrPIDAllDat + i)->timeCount >=(ptrPIDAllDat + i)->period)
0001b8  eb040084          ADD      r0,r4,r4,LSL #2
0001bc  eb0000c4          ADD      r0,r0,r4,LSL #3
0001c0  496f              LDR      r1,|L1.896|
0001c2  6809              LDR      r1,[r1,#0]  ; ptrPIDAllDat
0001c4  4408              ADD      r0,r0,r1
0001c6  8840              LDRH     r0,[r0,#2]
0001c8  eb040184          ADD      r1,r4,r4,LSL #2
0001cc  eb0101c4          ADD      r1,r1,r4,LSL #3
0001d0  4a6b              LDR      r2,|L1.896|
0001d2  6812              LDR      r2,[r2,#0]  ; ptrPIDAllDat
0001d4  4411              ADD      r1,r1,r2
0001d6  8809              LDRH     r1,[r1,#0]
0001d8  4288              CMP      r0,r1
0001da  db25              BLT      |L1.552|
;;;177    				{
;;;178    					(ptrPIDAllDat + i)->timeCount = 0;
0001dc  2000              MOVS     r0,#0
0001de  eb040184          ADD      r1,r4,r4,LSL #2
0001e2  eb0101c4          ADD      r1,r1,r4,LSL #3
0001e6  4a66              LDR      r2,|L1.896|
0001e8  6812              LDR      r2,[r2,#0]  ; ptrPIDAllDat
0001ea  4411              ADD      r1,r1,r2
0001ec  8048              STRH     r0,[r1,#2]
;;;179    					ptrOBDSend = Mem_malloc(9);
0001ee  2009              MOVS     r0,#9
0001f0  f7fffffe          BL       Mem_malloc
0001f4  4605              MOV      r5,r0
;;;180    					memcpy(ptrOBDSend,(ptrPIDAllDat + i)->data,9);
0001f6  eb040084          ADD      r0,r4,r4,LSL #2
0001fa  eb0000c4          ADD      r0,r0,r4,LSL #3
0001fe  4960              LDR      r1,|L1.896|
000200  6809              LDR      r1,[r1,#0]  ; ptrPIDAllDat
000202  4408              ADD      r0,r0,r1
000204  6841              LDR      r1,[r0,#4]
000206  6029              STR      r1,[r5,#0]
000208  6881              LDR      r1,[r0,#8]
00020a  6069              STR      r1,[r5,#4]
00020c  7b00              LDRB     r0,[r0,#0xc]
00020e  7228              STRB     r0,[r5,#8]
;;;181    					err = OSQPost(canSendQ,ptrOBDSend);//向OBD推送要发送的PID指令
000210  4629              MOV      r1,r5
000212  4842              LDR      r0,|L1.796|
000214  6800              LDR      r0,[r0,#0]  ; canSendQ
000216  f7fffffe          BL       OSQPost
00021a  9000              STR      r0,[sp,#0]
;;;182    					if(err != OS_ERR_NONE)
00021c  f89d0000          LDRB     r0,[sp,#0]
000220  b110              CBZ      r0,|L1.552|
;;;183    						Mem_free(ptrOBDSend);          //推送不成功，需要释放内存块
000222  4628              MOV      r0,r5
000224  f7fffffe          BL       Mem_free
                  |L1.552|
000228  1c60              ADDS     r0,r4,#1              ;173
00022a  b2c4              UXTB     r4,r0                 ;173
                  |L1.556|
00022c  4826              LDR      r0,|L1.712|
00022e  f8b00064          LDRH     r0,[r0,#0x64]         ;173  ; varOperation
000232  42a0              CMP      r0,r4                 ;173
000234  dcae              BGT      |L1.404|
                  |L1.566|
;;;184    				}
;;;185    			}
;;;186    		}
;;;187    		if(cdmaDataToSend->datLength > 36)//要发送的数据不为空
000236  4823              LDR      r0,|L1.708|
000238  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
00023a  8800              LDRH     r0,[r0,#0]
00023c  2824              CMP      r0,#0x24
00023e  dd06              BLE      |L1.590|
;;;188    			cdmaDataToSend->timeCount += 4;
000240  4820              LDR      r0,|L1.708|
000242  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
000244  8840              LDRH     r0,[r0,#2]
000246  1d00              ADDS     r0,r0,#4
000248  491e              LDR      r1,|L1.708|
00024a  6809              LDR      r1,[r1,#0]  ; cdmaDataToSend
00024c  8048              STRH     r0,[r1,#2]
                  |L1.590|
;;;189    		if((cdmaDataToSend->timeCount >= 3000) || (cdmaDataToSend->datLength >= 850))//发送时间到或者要发送的数组长度超过850个字节
00024e  481d              LDR      r0,|L1.708|
000250  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
000252  8840              LDRH     r0,[r0,#2]
000254  f64031b8          MOV      r1,#0xbb8
000258  4288              CMP      r0,r1
00025a  da06              BGE      |L1.618|
00025c  4819              LDR      r0,|L1.708|
00025e  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
000260  8800              LDRH     r0,[r0,#0]
000262  f2403152          MOV      r1,#0x352
000266  4288              CMP      r0,r1
000268  db2a              BLT      |L1.704|
                  |L1.618|
;;;190    		{
;;;191    			MemLog(cdmaDataToSend);//todo：调试时用，产品的时候要注释掉
00026a  4816              LDR      r0,|L1.708|
00026c  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
00026e  f7fffffe          BL       MemLog
;;;192    			
;;;193    			OSMutexPend(CDMASendMutex,0,&err);
000272  466a              MOV      r2,sp
000274  2100              MOVS     r1,#0
000276  481e              LDR      r0,|L1.752|
000278  6800              LDR      r0,[r0,#0]  ; CDMASendMutex
00027a  f7fffffe          BL       OSMutexPend
;;;194    			
;;;195    			CDMASendDataPack(cdmaDataToSend);
00027e  4811              LDR      r0,|L1.708|
000280  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
000282  f7fffffe          BL       CDMASendDataPack
;;;196    			
;;;197    			err = OSQPost(CDMASendQ,cdmaDataToSend);
000286  480f              LDR      r0,|L1.708|
000288  6801              LDR      r1,[r0,#0]  ; cdmaDataToSend
00028a  481e              LDR      r0,|L1.772|
00028c  6800              LDR      r0,[r0,#0]  ; CDMASendQ
00028e  f7fffffe          BL       OSQPost
000292  9000              STR      r0,[sp,#0]
;;;198    			if(err != OS_ERR_NONE)
000294  f89d0000          LDRB     r0,[sp,#0]
000298  b140              CBZ      r0,|L1.684|
;;;199    			{
;;;200    				cdmaDataToSend->datLength = 27;
00029a  201b              MOVS     r0,#0x1b
00029c  4909              LDR      r1,|L1.708|
00029e  6809              LDR      r1,[r1,#0]  ; cdmaDataToSend
0002a0  8008              STRH     r0,[r1,#0]
;;;201    				cdmaDataToSend->timeCount = 0;
0002a2  2000              MOVS     r0,#0
0002a4  4907              LDR      r1,|L1.708|
0002a6  6809              LDR      r1,[r1,#0]  ; cdmaDataToSend
0002a8  8048              STRH     r0,[r1,#2]
0002aa  e005              B        |L1.696|
                  |L1.684|
;;;202    			}
;;;203    			else
;;;204    			{
;;;205    				cdmaDataToSend = CDMNSendDataInit(1000);
0002ac  f44f707a          MOV      r0,#0x3e8
0002b0  f7fffffe          BL       CDMNSendDataInit
0002b4  4903              LDR      r1,|L1.708|
0002b6  6008              STR      r0,[r1,#0]  ; cdmaDataToSend
                  |L1.696|
;;;206    			}	
;;;207    			
;;;208    			OSMutexPost(CDMASendMutex);
0002b8  480d              LDR      r0,|L1.752|
0002ba  6800              LDR      r0,[r0,#0]  ; CDMASendMutex
0002bc  f7fffffe          BL       OSMutexPost
                  |L1.704|
0002c0  bf00              NOP                            ;165
                  |L1.706|
0002c2  e74a              B        |L1.346|
;;;209    		}
;;;210    	}
;;;211    }
;;;212    
                          ENDP

                  |L1.708|
                          DCD      cdmaDataToSend
                  |L1.712|
                          DCD      varOperation
                  |L1.716|
                          DCD      usbRecBuf
                  |L1.720|
                          DCD      USBRecieveQ
                  |L1.724|
                          DCD      usbSendBuf
                  |L1.728|
                          DCD      USBSendQ
                  |L1.732|
                          DCD      USB_TASK_STK+0x1fc
                  |L1.736|
                          DCD      USBUpdataTask
                  |L1.740|
                          DCD      beepSem
                  |L1.744|
                          DCD      LoginMes
                  |L1.748|
                          DCD      sendMsg
                  |L1.752|
                          DCD      CDMASendMutex
                  |L1.756|
                          DCD      CDMAPowerMutex
                  |L1.760|
                          DCD      cdmaRecBuf
                  |L1.764|
                          DCD      CDMARecieveQ
                  |L1.768|
                          DCD      cdmaSendBuf
                  |L1.772|
                          DCD      CDMASendQ
                  |L1.776|
                          DCD      ZIPRecBuf
                  |L1.780|
                          DCD      ZIPRecv_Q
                  |L1.784|
                          DCD      gpsRecBuf
                  |L1.788|
                          DCD      receGPSQ
                  |L1.792|
                          DCD      canSendBuf
                  |L1.796|
                          DCD      canSendQ
                  |L1.800|
                          DCD      canRecBuf
                  |L1.804|
                          DCD      canRecieveQ
                  |L1.808|
                          DCD      canJ1939Buf
                  |L1.812|
                          DCD      canJ1939Q
                  |L1.816|
                          DCD      POWER_TASK_STK+0x1fc
                  |L1.820|
                          DCD      PowerDeal
                  |L1.824|
                          DCD      CDMA_TASK_STK+0x1fc
                  |L1.828|
                          DCD      CDMATask
                  |L1.832|
                          DCD      CDMARecv_TASK_STK+0x2cc
                  |L1.836|
                          DCD      CDMARecvTask
                  |L1.840|
                          DCD      GPS_TASK_STK+0x1fc
                  |L1.844|
                          DCD      GPSTask
                  |L1.848|
                          DCD      OBD_TASK_STK+0x1fc
                  |L1.852|
                          DCD      OBDTask
                  |L1.856|
                          DCD      J1939_TASK_STK+0x1fc
                  |L1.860|
                          DCD      DealJ1939Date
                  |L1.864|
                          DCD      CDMA_LED_STK+0x13c
                  |L1.868|
                          DCD      CDMALEDTask
                  |L1.872|
                          DCD      GPS_LED_STK+0x13c
                  |L1.876|
                          DCD      GPSLEDTask
                  |L1.880|
                          DCD      OBD_LED_STK+0x13c
                  |L1.884|
                          DCD      OBDLEDTask
                  |L1.888|
                          DCD      BEEP_STK+0x13c
                  |L1.892|
                          DCD      BeepTask
                  |L1.896|
                          DCD      ptrPIDAllDat

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;37     ****************************************************************/
;;;38     int main(void )
000000  b510              PUSH     {r4,lr}
;;;39     {
;;;40     	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
000002  f44f60a0          MOV      r0,#0x500
000006  f7fffffe          BL       NVIC_PriorityGroupConfig
;;;41     	
;;;42     	OSInit(); 
00000a  f7fffffe          BL       OSInit
;;;43     	
;;;44     	MemBuf_Init();   //建立内存块
00000e  f7fffffe          BL       MemBuf_Init
;;;45     	
;;;46     	sendCDMA_Q = Cir_Queue_Init(1000);//CDMA 串口发送 循环队列 缓冲区
000012  f44f707a          MOV      r0,#0x3e8
000016  f7fffffe          BL       Cir_Queue_Init
00001a  490f              LDR      r1,|L2.88|
00001c  6008              STR      r0,[r1,#0]  ; sendCDMA_Q
;;;47     	receCDMA_S = Store_Init(1020);    //CDMA 串口接收 数据堆   缓冲区
00001e  f44f707f          MOV      r0,#0x3fc
000022  f7fffffe          BL       Store_Init
000026  490d              LDR      r1,|L2.92|
000028  6008              STR      r0,[r1,#0]  ; receCDMA_S
;;;48     	
;;;49     	sendGPS_Q = Cir_Queue_Init(230);  //GPS  串口发送 循环队列 缓冲区
00002a  20e6              MOVS     r0,#0xe6
00002c  f7fffffe          BL       Cir_Queue_Init
000030  490b              LDR      r1,|L2.96|
000032  6008              STR      r0,[r1,#0]  ; sendGPS_Q
;;;50     	receGPS_S = Store_Init(230);      //GPS  串口接收 数据堆   缓冲区
000034  20e6              MOVS     r0,#0xe6
000036  f7fffffe          BL       Store_Init
00003a  490a              LDR      r1,|L2.100|
00003c  6008              STR      r0,[r1,#0]  ; receGPS_S
;;;51     	
;;;52     	SystemBspInit();                  //硬件初始化 
00003e  f7fffffe          BL       SystemBspInit
;;;53     	OSTaskCreate(StartTask,(void *)0,(OS_STK *)&START_TASK_STK[START_STK_SIZE-1],START_TASK_PRIO );
000042  230a              MOVS     r3,#0xa
000044  4a08              LDR      r2,|L2.104|
000046  2100              MOVS     r1,#0
000048  4808              LDR      r0,|L2.108|
00004a  f7fffffe          BL       OSTaskCreate
;;;54     	
;;;55     	OSStart();	 
00004e  f7fffffe          BL       OSStart
;;;56     }
000052  2000              MOVS     r0,#0
000054  bd10              POP      {r4,pc}
;;;57     
                          ENDP

000056  0000              DCW      0x0000
                  |L2.88|
                          DCD      sendCDMA_Q
                  |L2.92|
                          DCD      receCDMA_S
                  |L2.96|
                          DCD      sendGPS_Q
                  |L2.100|
                          DCD      receGPS_S
                  |L2.104|
                          DCD      START_TASK_STK+0x1fc
                  |L2.108|
                          DCD      StartTask

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  USB_TASK_STK
                          %        512
                  START_TASK_STK
                          %        512
                  CDMA_TASK_STK
                          %        512
                  CDMARecv_TASK_STK
                          %        720
                  GPS_TASK_STK
                          %        512
                  OBD_TASK_STK
                          %        512
                  J1939_TASK_STK
                          %        512
                  POWER_TASK_STK
                          %        512
                  CDMA_LED_STK
                          %        320
                  GPS_LED_STK
                          %        320
                  OBD_LED_STK
                          %        320
                  BEEP_STK
                          %        320
                  cdmaRecBuf
                          %        40
                  cdmaSendBuf
                          %        20
                  ZIPRecBuf
                          %        20
                  gpsRecBuf
                          %        40
                  canRecBuf
                          %        80
                  canSendBuf
                          %        320
                  canJ1939Buf
                          %        80
                  usbRecBuf
                          %        40
                  usbSendBuf
                          %        20

                          AREA ||.data||, DATA, ALIGN=2

                  sendCDMA_Q
                          DCD      0x00000000
                  receCDMA_S
                          DCD      0x00000000
                  sendGPS_Q
                          DCD      0x00000000
                  receGPS_S
                          DCD      0x00000000
                  sendMsg
                          DCD      0x00000000
                  beepSem
                          DCD      0x00000000
                  LoginMes
                          DCD      0x00000000
                  CDMASendMutex
                          DCD      0x00000000
                  CDMAPowerMutex
                          DCD      0x00000000
                  CDMARecieveQ
                          DCD      0x00000000
                  CDMASendQ
                          DCD      0x00000000
                  ZIPRecv_Q
                          DCD      0x00000000
                  receGPSQ
                          DCD      0x00000000
                  canRecieveQ
                          DCD      0x00000000
                  canSendQ
                          DCD      0x00000000
                  canJ1939Q
                          DCD      0x00000000
                  USBSendQ
                          DCD      0x00000000
                  USBRecieveQ
                          DCD      0x00000000
                  cdmaDataToSend
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_4f4e89dc____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_4f4e89dc____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_4f4e89dc____REVSH|
#line 144
|__asm___6_main_c_4f4e89dc____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
