; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\obj\main.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=..\obj\main.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\OBD -I..\SYSTEM -I..\USER -I..\LIB\inc -I..\UCOSII\CONFIG -I..\UCOSII\PORT -I..\UCOSII\CORE -I..\HAEDWARE -I..\GPS -I..\CDMA -I..\DEAL -I..\USB\CONFIG -I..\USB\STM32_USB-FS-Device_Driver\inc -I.\RTE\_Project -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\5.2.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=524 -D_RTE_ -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\main.crf main.c]
                          THUMB

                          AREA ||i.SendFaultCmd||, CODE, READONLY, ALIGN=2

                  SendFaultCmd PROC
;;;296    }
;;;297    void SendFaultCmd(void)
000000  b570              PUSH     {r4-r6,lr}
;;;298    {
;;;299    	uint8_t * ptrOBDSend;
;;;300    	uint8_t err;
;;;301    //	static uint32_t timeCount = 0;
;;;302    	
;;;303    	ptrOBDSend = Mem_malloc(9);
000002  2009              MOVS     r0,#9
000004  f7fffffe          BL       Mem_malloc
000008  4604              MOV      r4,r0
;;;304    	ptrOBDSend[0] = 200;
00000a  20c8              MOVS     r0,#0xc8
00000c  7020              STRB     r0,[r4,#0]
;;;305    	if(strengthFuelFlash.modeOrder == 1)
00000e  482a              LDR      r0,|L1.184|
000010  f890003a          LDRB     r0,[r0,#0x3a]  ; strengthFuelFlash
000014  2801              CMP      r0,#1
000016  d119              BNE      |L1.76|
;;;306    	{
;;;307    		ptrOBDSend = Mem_malloc(9);
000018  2009              MOVS     r0,#9
00001a  f7fffffe          BL       Mem_malloc
00001e  4604              MOV      r4,r0
;;;308    		ptrOBDSend[0] = 236;
000020  20ec              MOVS     r0,#0xec
000022  7020              STRB     r0,[r4,#0]
;;;309    		memcpy(&ptrOBDSend[1],strengthFuelFlash.faultCmd1,8);
000024  4824              LDR      r0,|L1.184|
000026  303b              ADDS     r0,r0,#0x3b
000028  6801              LDR      r1,[r0,#0]  ; strengthFuelFlash
00002a  f8c41001          STR      r1,[r4,#1]
00002e  6840              LDR      r0,[r0,#4]  ; strengthFuelFlash
000030  f8c40005          STR      r0,[r4,#5]
;;;310    		err = OSQPost(canSendQ,ptrOBDSend);//向OBD推送要发送的PID指令
000034  4621              MOV      r1,r4
000036  4821              LDR      r0,|L1.188|
000038  6800              LDR      r0,[r0,#0]  ; canSendQ
00003a  f7fffffe          BL       OSQPost
00003e  4605              MOV      r5,r0
;;;311    		if(err != OS_ERR_NONE)
000040  2d00              CMP      r5,#0
000042  d038              BEQ      |L1.182|
;;;312    		{
;;;313    			Mem_free(ptrOBDSend);          //推送不成功，需要释放内存块
000044  4620              MOV      r0,r4
000046  f7fffffe          BL       Mem_free
00004a  e034              B        |L1.182|
                  |L1.76|
;;;314    		} 
;;;315    	}else if(strengthFuelFlash.modeOrder == 2)
00004c  481a              LDR      r0,|L1.184|
00004e  f890003a          LDRB     r0,[r0,#0x3a]  ; strengthFuelFlash
000052  2802              CMP      r0,#2
000054  d12f              BNE      |L1.182|
;;;316    	{
;;;317    		ptrOBDSend = Mem_malloc(9);//当前故障码
000056  2009              MOVS     r0,#9
000058  f7fffffe          BL       Mem_malloc
00005c  4604              MOV      r4,r0
;;;318    		ptrOBDSend[0] = 234;
00005e  20ea              MOVS     r0,#0xea
000060  7020              STRB     r0,[r4,#0]
;;;319    		memcpy(&ptrOBDSend[1],strengthFuelFlash.faultCmd1,8);
000062  4815              LDR      r0,|L1.184|
000064  303b              ADDS     r0,r0,#0x3b
000066  6801              LDR      r1,[r0,#0]  ; strengthFuelFlash
000068  f8c41001          STR      r1,[r4,#1]
00006c  6840              LDR      r0,[r0,#4]  ; strengthFuelFlash
00006e  f8c40005          STR      r0,[r4,#5]
;;;320    		err = OSQPost(canSendQ,ptrOBDSend);//向OBD推送要发送的PID指令
000072  4621              MOV      r1,r4
000074  4811              LDR      r0,|L1.188|
000076  6800              LDR      r0,[r0,#0]  ; canSendQ
000078  f7fffffe          BL       OSQPost
00007c  4605              MOV      r5,r0
;;;321    		if(err != OS_ERR_NONE)
00007e  b115              CBZ      r5,|L1.134|
;;;322    		{
;;;323    			Mem_free(ptrOBDSend);          //推送不成功，需要释放内存块
000080  4620              MOV      r0,r4
000082  f7fffffe          BL       Mem_free
                  |L1.134|
;;;324    		} 
;;;325    		ptrOBDSend = Mem_malloc(9);//历史故障码
000086  2009              MOVS     r0,#9
000088  f7fffffe          BL       Mem_malloc
00008c  4604              MOV      r4,r0
;;;326    		ptrOBDSend[0] = 235;
00008e  20eb              MOVS     r0,#0xeb
000090  7020              STRB     r0,[r4,#0]
;;;327    		memcpy(&ptrOBDSend[1],strengthFuelFlash.faultCmd2,8);
000092  4809              LDR      r0,|L1.184|
000094  3043              ADDS     r0,r0,#0x43
000096  6801              LDR      r1,[r0,#0]  ; strengthFuelFlash
000098  f8c41001          STR      r1,[r4,#1]
00009c  6840              LDR      r0,[r0,#4]  ; strengthFuelFlash
00009e  f8c40005          STR      r0,[r4,#5]
;;;328    		err = OSQPost(canSendQ,ptrOBDSend);//向OBD推送要发送的PID指令
0000a2  4621              MOV      r1,r4
0000a4  4805              LDR      r0,|L1.188|
0000a6  6800              LDR      r0,[r0,#0]  ; canSendQ
0000a8  f7fffffe          BL       OSQPost
0000ac  4605              MOV      r5,r0
;;;329    		if(err != OS_ERR_NONE)
0000ae  b115              CBZ      r5,|L1.182|
;;;330    		{
;;;331    			Mem_free(ptrOBDSend);          //推送不成功，需要释放内存块
0000b0  4620              MOV      r0,r4
0000b2  f7fffffe          BL       Mem_free
                  |L1.182|
;;;332    		} 
;;;333    	}
;;;334    }
0000b6  bd70              POP      {r4-r6,pc}
;;;335    
                          ENDP

                  |L1.184|
                          DCD      strengthFuelFlash
                  |L1.188|
                          DCD      canSendQ

                          AREA ||i.StartTask||, CODE, READONLY, ALIGN=2

                  StartTask PROC
;;;132    
;;;133    void StartTask(void *pdata)
000000  b508              PUSH     {r3,lr}
;;;134    {
;;;135    	uint8_t   err;
;;;136    	uint8_t   i = 0;
000002  2400              MOVS     r4,#0
;;;137    	uint8_t   *ptrOBDSend;
;;;138    	uint16_t  dataLength;
;;;139    	uint32_t  timeToSendLogin  = 0;
000004  2600              MOVS     r6,#0
;;;140    	OS_CPU_SR cpu_sr=0;
000006  46a0              MOV      r8,r4
;;;141    	pdata = pdata; 
000008  bf00              NOP      
;;;142    	
;;;143    	cdmaDataToSend = CDMNSendDataInit(1000);//初始化获取发向CDMA的消息结构体
00000a  f44f707a          MOV      r0,#0x3e8
00000e  f7fffffe          BL       CDMNSendDataInit
000012  49fe              LDR      r1,|L2.1036|
000014  6008              STR      r0,[r1,#0]  ; cdmaDataToSend
;;;144    	cdmaLogData    = Store_Init(1000);
000016  f44f707a          MOV      r0,#0x3e8
00001a  f7fffffe          BL       Store_Init
00001e  49fc              LDR      r1,|L2.1040|
000020  6008              STR      r0,[r1,#0]  ; cdmaLogData
;;;145    	if(varOperation.USB_NormalMode == 1)    //USB 升级模式
000022  48fc              LDR      r0,|L2.1044|
000024  7a00              LDRB     r0,[r0,#8]  ; varOperation
000026  2801              CMP      r0,#1
000028  d115              BNE      |L2.86|
;;;146    	{
;;;147    		USBRecieveQ = OSQCreate(&usbRecBuf[0],USBRECBUF_SIZE);  //建立USB接收 消息队列
00002a  210a              MOVS     r1,#0xa
00002c  48fa              LDR      r0,|L2.1048|
00002e  f7fffffe          BL       OSQCreate
000032  49fa              LDR      r1,|L2.1052|
000034  6008              STR      r0,[r1,#0]  ; USBRecieveQ
;;;148    		USBSendQ    = OSQCreate(&usbSendBuf[0],USBSENDBUF_SIZE);//建立USB发送 消息队列
000036  2105              MOVS     r1,#5
000038  48f9              LDR      r0,|L2.1056|
00003a  f7fffffe          BL       OSQCreate
00003e  49f9              LDR      r1,|L2.1060|
000040  6008              STR      r0,[r1,#0]  ; USBSendQ
;;;149    		
;;;150    		OSTaskCreate(USBUpdataTask,(void *)0,(OS_STK*)&USB_TASK_STK[USB_STK_SIZE - 1],USB_TASK_PRIO);
000042  2309              MOVS     r3,#9
000044  4af8              LDR      r2,|L2.1064|
000046  2100              MOVS     r1,#0
000048  48f8              LDR      r0,|L2.1068|
00004a  f7fffffe          BL       OSTaskCreate
;;;151    		OSTaskSuspend(OS_PRIO_SELF);    //挂起起始任务
00004e  20ff              MOVS     r0,#0xff
000050  f7fffffe          BL       OSTaskSuspend
000054  e093              B        |L2.382|
                  |L2.86|
;;;152    	}else
;;;153    	{
;;;154    		OS_ENTER_CRITICAL();			//进入临界区(无法被中断打断)    
000056  f7fffffe          BL       OS_CPU_SR_Save
00005a  4680              MOV      r8,r0
;;;155    /***********************************  创建任务间通信的消息     ***************************************************/				
;;;156    
;;;157    		beepSem   = OSSemCreate(1);       //蜂鸣器信号量（目前只是开机响一下，以后可以加点花样）
00005c  2001              MOVS     r0,#1
00005e  f7fffffe          BL       OSSemCreate
000062  49f3              LDR      r1,|L2.1072|
000064  6008              STR      r0,[r1,#0]  ; beepSem
;;;158    		LoginMes  = OSSemCreate(0);       //登录报文信号量
000066  2000              MOVS     r0,#0
000068  f7fffffe          BL       OSSemCreate
00006c  49f1              LDR      r1,|L2.1076|
00006e  6008              STR      r0,[r1,#0]  ; LoginMes
;;;159    		sendMsg   = OSSemCreate(0);       //创建CDMA是否正在发送消息的信号量
000070  2000              MOVS     r0,#0
000072  f7fffffe          BL       OSSemCreate
000076  49f0              LDR      r1,|L2.1080|
000078  6008              STR      r0,[r1,#0]  ; sendMsg
;;;160    		
;;;161    		CDMASendMutex  = OSMutexCreate(CDMA_SEND_PRIO,&err);        //向 CDMA 发送缓冲区发送数据 独占 互斥型信号量
00007a  4669              MOV      r1,sp
00007c  2007              MOVS     r0,#7
00007e  f7fffffe          BL       OSMutexCreate
000082  49ee              LDR      r1,|L2.1084|
000084  6008              STR      r0,[r1,#0]  ; CDMASendMutex
;;;162    		CDMAPowerMutex = OSMutexCreate(CDMAPOWER_PRIO,&err);        //CDMA 电源互斥信号量管理
000086  4669              MOV      r1,sp
000088  2006              MOVS     r0,#6
00008a  f7fffffe          BL       OSMutexCreate
00008e  49ec              LDR      r1,|L2.1088|
000090  6008              STR      r0,[r1,#0]  ; CDMAPowerMutex
;;;163    		CANSendMutex   = OSMutexCreate(CAN_SEND_MUTEX,&err);        //CAN 发送数据信号量
000092  4669              MOV      r1,sp
000094  2008              MOVS     r0,#8
000096  f7fffffe          BL       OSMutexCreate
00009a  49ea              LDR      r1,|L2.1092|
00009c  6008              STR      r0,[r1,#0]  ; CANSendMutex
;;;164    		
;;;165    		CDMARecieveQ = OSQCreate(&cdmaRecBuf[0],CDMARECBUF_SIZE);   //建立CDMA接收 消息队列
00009e  210a              MOVS     r1,#0xa
0000a0  48e9              LDR      r0,|L2.1096|
0000a2  f7fffffe          BL       OSQCreate
0000a6  49e9              LDR      r1,|L2.1100|
0000a8  6008              STR      r0,[r1,#0]  ; CDMARecieveQ
;;;166    		CDMASendQ    = OSQCreate(&cdmaSendBuf[0],CDMASENDBUF_SIZE); //建立CDMA发送 消息队列
0000aa  2105              MOVS     r1,#5
0000ac  48e8              LDR      r0,|L2.1104|
0000ae  f7fffffe          BL       OSQCreate
0000b2  49e8              LDR      r1,|L2.1108|
0000b4  6008              STR      r0,[r1,#0]  ; CDMASendQ
;;;167    		ZIPRecv_Q    = OSQCreate(&ZIPRecBuf[0],ZIPRECVBUF_SIZE);    //建立“ZIPRECV”处理消息队列
0000b6  2105              MOVS     r1,#5
0000b8  48e7              LDR      r0,|L2.1112|
0000ba  f7fffffe          BL       OSQCreate
0000be  49e7              LDR      r1,|L2.1116|
0000c0  6008              STR      r0,[r1,#0]  ; ZIPRecv_Q
;;;168    		
;;;169    		receGPSQ     = OSQCreate(&gpsRecBuf[0],GPSRECBUF_SIZE);     //建立GPS接收 消息队列
0000c2  210a              MOVS     r1,#0xa
0000c4  48e6              LDR      r0,|L2.1120|
0000c6  f7fffffe          BL       OSQCreate
0000ca  49e6              LDR      r1,|L2.1124|
0000cc  6008              STR      r0,[r1,#0]  ; receGPSQ
;;;170    		canSendQ     = OSQCreate(&canSendBuf[0],CANSENDBUF_SIZE);   //卡路宝向ECU发送指令的消息队列
0000ce  f44f71af          MOV      r1,#0x15e
0000d2  48e5              LDR      r0,|L2.1128|
0000d4  f7fffffe          BL       OSQCreate
0000d8  49e4              LDR      r1,|L2.1132|
0000da  6008              STR      r0,[r1,#0]  ; canSendQ
;;;171    		canRecieveQ  = OSQCreate(&canRecBuf[0],CANRECBUF_SIZE);     //卡路宝从ECU接收指令的消息队列
0000dc  2114              MOVS     r1,#0x14
0000de  48e4              LDR      r0,|L2.1136|
0000e0  f7fffffe          BL       OSQCreate
0000e4  49e3              LDR      r1,|L2.1140|
0000e6  6008              STR      r0,[r1,#0]  ; canRecieveQ
;;;172    		canJ1939Q    = OSQCreate(&canJ1939Buf[0],CANJ1939BUF_SIZE); // ECU向卡路宝发送 J1939 消息队列
0000e8  2114              MOVS     r1,#0x14
0000ea  48e3              LDR      r0,|L2.1144|
0000ec  f7fffffe          BL       OSQCreate
0000f0  49e2              LDR      r1,|L2.1148|
0000f2  6008              STR      r0,[r1,#0]  ; canJ1939Q
;;;173    
;;;174    /*************************************        创建各任务         ************************************************/		
;;;175    
;;;176    		OSTaskCreate(PowerDeal,    (void *)0,(OS_STK*)&POWER_TASK_STK[POWER_STK_SIZE - 1],      POWER_TASK_PRIO);
0000f4  2312              MOVS     r3,#0x12
0000f6  4ae2              LDR      r2,|L2.1152|
0000f8  2100              MOVS     r1,#0
0000fa  48e2              LDR      r0,|L2.1156|
0000fc  f7fffffe          BL       OSTaskCreate
;;;177    		
;;;178    		OSTaskCreate(CDMATask,     (void *)0,(OS_STK*)&CDMA_TASK_STK[CDMA_STK_SIZE - 1],        CDMA_TASK_PRIO);
000100  230b              MOVS     r3,#0xb
000102  4ae1              LDR      r2,|L2.1160|
000104  2100              MOVS     r1,#0
000106  48e1              LDR      r0,|L2.1164|
000108  f7fffffe          BL       OSTaskCreate
;;;179    		
;;;180    		OSTaskCreate(CDMARecvTask, (void *)0,(OS_STK*)&CDMARecv_TASK_STK[CDMARecv_STK_SIZE - 1],CDMARevc_TASK_PRIO);	
00010c  230c              MOVS     r3,#0xc
00010e  4ae0              LDR      r2,|L2.1168|
000110  2100              MOVS     r1,#0
000112  48e0              LDR      r0,|L2.1172|
000114  f7fffffe          BL       OSTaskCreate
;;;181    
;;;182    		OSTaskCreate(GPSTask,      (void *)0,(OS_STK*)&GPS_TASK_STK[GPS_STK_SIZE - 1],          GPS_TASK_PRIO);	
000118  230e              MOVS     r3,#0xe
00011a  4adf              LDR      r2,|L2.1176|
00011c  2100              MOVS     r1,#0
00011e  48df              LDR      r0,|L2.1180|
000120  f7fffffe          BL       OSTaskCreate
;;;183    
;;;184    		OSTaskCreate(OBDTask,      (void *)0,(OS_STK*)&OBD_TASK_STK[OBD_STK_SIZE - 1],          OBD_TASK_PRIO);
000124  230f              MOVS     r3,#0xf
000126  4ade              LDR      r2,|L2.1184|
000128  2100              MOVS     r1,#0
00012a  48de              LDR      r0,|L2.1188|
00012c  f7fffffe          BL       OSTaskCreate
;;;185    		OSTaskCreate(DealJ1939Date,(void *)0,(OS_STK*)&J1939_TASK_STK[J1939_STK_SIZE - 1],      J1939_TASK_PRIO);//创建J1939处理任务		
000130  2310              MOVS     r3,#0x10
000132  4add              LDR      r2,|L2.1192|
000134  2100              MOVS     r1,#0
000136  48dd              LDR      r0,|L2.1196|
000138  f7fffffe          BL       OSTaskCreate
;;;186    		OSTaskCreate(SaveFuleTask, (void *)0,(OS_STK*)&SAVEFULE_TASK_STK[SAVEFUEL_STK_SIZE - 1],SAVE_FUEL_PEIO); //创建节油任务		
00013c  2311              MOVS     r3,#0x11
00013e  4adc              LDR      r2,|L2.1200|
000140  2100              MOVS     r1,#0
000142  48dc              LDR      r0,|L2.1204|
000144  f7fffffe          BL       OSTaskCreate
;;;187    
;;;188    		OSTaskCreate(CDMALEDTask,(void *)0,(OS_STK*)&CDMA_LED_STK[LED_STK_SIZE - 1],CDMA_LED_PRIO);
000148  2314              MOVS     r3,#0x14
00014a  4adb              LDR      r2,|L2.1208|
00014c  2100              MOVS     r1,#0
00014e  48db              LDR      r0,|L2.1212|
000150  f7fffffe          BL       OSTaskCreate
;;;189    		OSTaskCreate(GPSLEDTask, (void *)0,(OS_STK*)&GPS_LED_STK[LED_STK_SIZE - 1], GPS_LED_PRIO);		
000154  2315              MOVS     r3,#0x15
000156  4ada              LDR      r2,|L2.1216|
000158  2100              MOVS     r1,#0
00015a  48da              LDR      r0,|L2.1220|
00015c  f7fffffe          BL       OSTaskCreate
;;;190    		OSTaskCreate(OBDLEDTask, (void *)0,(OS_STK*)&OBD_LED_STK[LED_STK_SIZE - 1], OBD_LED_PRIO);	
000160  2316              MOVS     r3,#0x16
000162  4ad9              LDR      r2,|L2.1224|
000164  2100              MOVS     r1,#0
000166  48d9              LDR      r0,|L2.1228|
000168  f7fffffe          BL       OSTaskCreate
;;;191    		OSTaskCreate(BeepTask,   (void *)0,(OS_STK*)&BEEP_STK[BEEP_STK_SIZE - 1],   BEEP_TASK_PRIO);
00016c  2317              MOVS     r3,#0x17
00016e  4ad8              LDR      r2,|L2.1232|
000170  2100              MOVS     r1,#0
000172  48d8              LDR      r0,|L2.1236|
000174  f7fffffe          BL       OSTaskCreate
;;;192    		
;;;193    /***************************************************************************************************************/		
;;;194    		
;;;195    		OS_EXIT_CRITICAL();				  //退出临界区(可以被中断打断)
000178  4640              MOV      r0,r8
00017a  f7fffffe          BL       OS_CPU_SR_Restore
                  |L2.382|
;;;196    	}
;;;197    	while(1)
00017e  e266              B        |L2.1614|
                  |L2.384|
;;;198    	{
;;;199    		OSTimeDlyHMSM(0,0,0,4);           //4ms扫描一次
000180  2304              MOVS     r3,#4
000182  2200              MOVS     r2,#0
000184  4611              MOV      r1,r2
000186  4610              MOV      r0,r2
000188  f7fffffe          BL       OSTimeDlyHMSM
;;;200    		if(varOperation.isDataFlow == 1)
00018c  48a1              LDR      r0,|L2.1044|
00018e  f890002d          LDRB     r0,[r0,#0x2d]  ; varOperation
000192  2801              CMP      r0,#1
000194  d100              BNE      |L2.408|
;;;201    			continue;                     //数据流未流动
000196  e25a              B        |L2.1614|
                  |L2.408|
;;;202    		timeToSendLogin++;
000198  1c76              ADDS     r6,r6,#1
;;;203    		if(timeToSendLogin % 45000 == 0)  //定期3分钟发送登录报文
00019a  f64a70c8          MOV      r0,#0xafc8
00019e  fbb6f1f0          UDIV     r1,r6,r0
0001a2  fb006011          MLS      r0,r0,r1,r6
0001a6  b908              CBNZ     r0,|L2.428|
;;;204    		{
;;;205    			LoginDataSend(); 
0001a8  f7fffffe          BL       LoginDataSend
                  |L2.428|
;;;206    		}
;;;207    		if(varOperation.pidRun == 1 && varOperation.canTest == 2 && varOperation.pidTset == 0 && varOperation.strengthRun == 0 && varOperation.pidNum != 0xFFFF)   //CAN的波特率和ID均已确定
0001ac  4899              LDR      r0,|L2.1044|
0001ae  f8900095          LDRB     r0,[r0,#0x95]  ; varOperation
0001b2  2801              CMP      r0,#1
0001b4  d166              BNE      |L2.644|
0001b6  4897              LDR      r0,|L2.1044|
0001b8  f8b00091          LDRH     r0,[r0,#0x91]  ; varOperation
0001bc  2802              CMP      r0,#2
0001be  d161              BNE      |L2.644|
0001c0  4894              LDR      r0,|L2.1044|
0001c2  f8900093          LDRB     r0,[r0,#0x93]  ; varOperation
0001c6  2800              CMP      r0,#0
0001c8  d15c              BNE      |L2.644|
0001ca  4892              LDR      r0,|L2.1044|
0001cc  f8900094          LDRB     r0,[r0,#0x94]  ; varOperation
0001d0  2800              CMP      r0,#0
0001d2  d157              BNE      |L2.644|
0001d4  488f              LDR      r0,|L2.1044|
0001d6  f8b00078          LDRH     r0,[r0,#0x78]  ; varOperation
0001da  f64f71ff          MOV      r1,#0xffff
0001de  4288              CMP      r0,r1
0001e0  d050              BEQ      |L2.644|
;;;208    		{
;;;209    			if(timeToSendLogin % 2500 == 0)
0001e2  f64010c4          MOV      r0,#0x9c4
0001e6  fbb6f1f0          UDIV     r1,r6,r0
0001ea  fb006011          MLS      r0,r0,r1,r6
0001ee  b908              CBNZ     r0,|L2.500|
;;;210    			{
;;;211    				SendFaultCmd();
0001f0  f7fffffe          BL       SendFaultCmd
                  |L2.500|
;;;212    			}
;;;213    			for(i = 0;i < varOperation.pidNum;i++) //PID指令的数目
0001f4  2400              MOVS     r4,#0
0001f6  e040              B        |L2.634|
                  |L2.504|
;;;214    			{
;;;215    				(ptrPIDAllDat + i) -> timeCount += 4;
0001f8  eb041004          ADD      r0,r4,r4,LSL #4
0001fc  49b6              LDR      r1,|L2.1240|
0001fe  6809              LDR      r1,[r1,#0]  ; ptrPIDAllDat
000200  4408              ADD      r0,r0,r1
000202  6840              LDR      r0,[r0,#4]
000204  1d00              ADDS     r0,r0,#4
000206  eb041104          ADD      r1,r4,r4,LSL #4
00020a  4ab3              LDR      r2,|L2.1240|
00020c  6812              LDR      r2,[r2,#0]  ; ptrPIDAllDat
00020e  4411              ADD      r1,r1,r2
000210  6048              STR      r0,[r1,#4]
;;;216    				if((ptrPIDAllDat + i) -> timeCount < (ptrPIDAllDat + i) -> period)
000212  eb041004          ADD      r0,r4,r4,LSL #4
000216  49b0              LDR      r1,|L2.1240|
000218  6809              LDR      r1,[r1,#0]  ; ptrPIDAllDat
00021a  4408              ADD      r0,r0,r1
00021c  6840              LDR      r0,[r0,#4]
00021e  eb041104          ADD      r1,r4,r4,LSL #4
000222  4aad              LDR      r2,|L2.1240|
000224  6812              LDR      r2,[r2,#0]  ; ptrPIDAllDat
000226  4411              ADD      r1,r1,r2
000228  6809              LDR      r1,[r1,#0]
00022a  4288              CMP      r0,r1
00022c  d200              BCS      |L2.560|
;;;217    					continue;
00022e  e022              B        |L2.630|
                  |L2.560|
;;;218    				(ptrPIDAllDat + i) -> timeCount = 0;
000230  2000              MOVS     r0,#0
000232  eb041104          ADD      r1,r4,r4,LSL #4
000236  4aa8              LDR      r2,|L2.1240|
000238  6812              LDR      r2,[r2,#0]  ; ptrPIDAllDat
00023a  4411              ADD      r1,r1,r2
00023c  6048              STR      r0,[r1,#4]
;;;219    				ptrOBDSend = Mem_malloc(9);
00023e  2009              MOVS     r0,#9
000240  f7fffffe          BL       Mem_malloc
000244  4605              MOV      r5,r0
;;;220    				memcpy(ptrOBDSend,(ptrPIDAllDat + i)->data,9);
000246  eb041004          ADD      r0,r4,r4,LSL #4
00024a  49a3              LDR      r1,|L2.1240|
00024c  6809              LDR      r1,[r1,#0]  ; ptrPIDAllDat
00024e  4408              ADD      r0,r0,r1
000250  6881              LDR      r1,[r0,#8]
000252  6029              STR      r1,[r5,#0]
000254  68c1              LDR      r1,[r0,#0xc]
000256  6069              STR      r1,[r5,#4]
000258  7c00              LDRB     r0,[r0,#0x10]
00025a  7228              STRB     r0,[r5,#8]
;;;221    				err = OSQPost(canSendQ,ptrOBDSend);//向OBD推送要发送的PID指令
00025c  4629              MOV      r1,r5
00025e  4883              LDR      r0,|L2.1132|
000260  6800              LDR      r0,[r0,#0]  ; canSendQ
000262  f7fffffe          BL       OSQPost
000266  9000              STR      r0,[sp,#0]
;;;222    				if(err != OS_ERR_NONE)
000268  f89d0000          LDRB     r0,[sp,#0]
00026c  b110              CBZ      r0,|L2.628|
;;;223    				{
;;;224    					Mem_free(ptrOBDSend);          //推送不成功，需要释放内存块
00026e  4628              MOV      r0,r5
000270  f7fffffe          BL       Mem_free
                  |L2.628|
000274  bf00              NOP                            ;217
                  |L2.630|
000276  1c60              ADDS     r0,r4,#1              ;213
000278  b2c4              UXTB     r4,r0                 ;213
                  |L2.634|
00027a  4866              LDR      r0,|L2.1044|
00027c  f8b00078          LDRH     r0,[r0,#0x78]         ;213  ; varOperation
000280  42a0              CMP      r0,r4                 ;213
000282  dcb9              BGT      |L2.504|
                  |L2.644|
;;;225    //					LogReport("\r\n PID cmd OVERLoad;");
;;;226    				} 
;;;227    			}
;;;228    		}
;;;229    		dataLength = cdmaDataToSend->datLength + cdmaLogData->top;
000284  4861              LDR      r0,|L2.1036|
000286  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
000288  8800              LDRH     r0,[r0,#0]
00028a  4961              LDR      r1,|L2.1040|
00028c  6809              LDR      r1,[r1,#0]  ; cdmaLogData
00028e  8809              LDRH     r1,[r1,#0]
000290  4408              ADD      r0,r0,r1
000292  b287              UXTH     r7,r0
;;;230    		if(dataLength > 36)                        //要发送的数据不为空
000294  2f24              CMP      r7,#0x24
000296  dd06              BLE      |L2.678|
;;;231    			cdmaDataToSend->timeCount += 4;
000298  485c              LDR      r0,|L2.1036|
00029a  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
00029c  8840              LDRH     r0,[r0,#2]
00029e  1d00              ADDS     r0,r0,#4
0002a0  495a              LDR      r1,|L2.1036|
0002a2  6809              LDR      r1,[r1,#0]  ; cdmaDataToSend
0002a4  8048              STRH     r0,[r1,#2]
                  |L2.678|
;;;232    		if((cdmaDataToSend->timeCount >= 3000) || (cdmaDataToSend->datLength >= 650) )//发送时间到或者要发送的数组长度超过850个字节
0002a6  4859              LDR      r0,|L2.1036|
0002a8  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
0002aa  8840              LDRH     r0,[r0,#2]
0002ac  f64031b8          MOV      r1,#0xbb8
0002b0  4288              CMP      r0,r1
0002b2  da06              BGE      |L2.706|
0002b4  4855              LDR      r0,|L2.1036|
0002b6  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
0002b8  8800              LDRH     r0,[r0,#0]
0002ba  f240218a          MOV      r1,#0x28a
0002be  4288              CMP      r0,r1
0002c0  db7e              BLT      |L2.960|
                  |L2.706|
;;;233    		{
;;;234    			cdmaDataToSend->datLength = FRAME_HEAD_LEN + varOperation.datOKLeng;
0002c2  4854              LDR      r0,|L2.1044|
0002c4  f8b00096          LDRH     r0,[r0,#0x96]  ; varOperation
0002c8  301b              ADDS     r0,r0,#0x1b
0002ca  4950              LDR      r1,|L2.1036|
0002cc  6809              LDR      r1,[r1,#0]  ; cdmaDataToSend
0002ce  8008              STRH     r0,[r1,#0]
;;;235    			varOperation.datOKLeng = 0;
0002d0  2000              MOVS     r0,#0
0002d2  4950              LDR      r1,|L2.1044|
0002d4  f8a10096          STRH     r0,[r1,#0x96]
;;;236    			
;;;237    			MemLog(cdmaDataToSend);                //todo：这两行代码用于调试时监控，真正产品的时候可以注释掉
0002d8  484c              LDR      r0,|L2.1036|
0002da  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
0002dc  f7fffffe          BL       MemLog
;;;238    			J1939DataLog();
0002e0  f7fffffe          BL       J1939DataLog
;;;239    		
;;;240    			OSMutexPend(CDMASendMutex,0,&err);     //提高优先级，独占此包数据
0002e4  466a              MOV      r2,sp
0002e6  2100              MOVS     r1,#0
0002e8  4854              LDR      r0,|L2.1084|
0002ea  6800              LDR      r0,[r0,#0]  ; CDMASendMutex
0002ec  f7fffffe          BL       OSMutexPend
;;;241    			//将日志报文打包
;;;242    			if(cdmaLogData->top <= 250)
0002f0  4847              LDR      r0,|L2.1040|
0002f2  6800              LDR      r0,[r0,#0]  ; cdmaLogData
0002f4  8800              LDRH     r0,[r0,#0]
0002f6  28fa              CMP      r0,#0xfa
0002f8  dc52              BGT      |L2.928|
;;;243    			{
;;;244    				cdmaDataToSend->data[cdmaDataToSend->datLength++] = (uint8_t)cdmaLogData->top + 3;
0002fa  4845              LDR      r0,|L2.1040|
0002fc  6800              LDR      r0,[r0,#0]  ; cdmaLogData
0002fe  7800              LDRB     r0,[r0,#0]
000300  1cc0              ADDS     r0,r0,#3
000302  b2c2              UXTB     r2,r0
000304  4841              LDR      r0,|L2.1036|
000306  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
000308  8801              LDRH     r1,[r0,#0]
00030a  4840              LDR      r0,|L2.1036|
00030c  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
00030e  8800              LDRH     r0,[r0,#0]
000310  1c40              ADDS     r0,r0,#1
000312  4b3e              LDR      r3,|L2.1036|
000314  681b              LDR      r3,[r3,#0]  ; cdmaDataToSend
000316  8018              STRH     r0,[r3,#0]
000318  483c              LDR      r0,|L2.1036|
00031a  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
00031c  6840              LDR      r0,[r0,#4]
00031e  5442              STRB     r2,[r0,r1]
;;;245    				cdmaDataToSend->data[cdmaDataToSend->datLength++] = 0x50;
000320  2150              MOVS     r1,#0x50
000322  483a              LDR      r0,|L2.1036|
000324  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
000326  8802              LDRH     r2,[r0,#0]
000328  4838              LDR      r0,|L2.1036|
00032a  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
00032c  8800              LDRH     r0,[r0,#0]
00032e  1c40              ADDS     r0,r0,#1
000330  4b36              LDR      r3,|L2.1036|
000332  681b              LDR      r3,[r3,#0]  ; cdmaDataToSend
000334  8018              STRH     r0,[r3,#0]
000336  4835              LDR      r0,|L2.1036|
000338  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
00033a  6840              LDR      r0,[r0,#4]
00033c  5481              STRB     r1,[r0,r2]
;;;246    				cdmaDataToSend->data[cdmaDataToSend->datLength++] = 0x03;
00033e  2103              MOVS     r1,#3
000340  4832              LDR      r0,|L2.1036|
000342  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
000344  8802              LDRH     r2,[r0,#0]
000346  4831              LDR      r0,|L2.1036|
000348  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
00034a  8800              LDRH     r0,[r0,#0]
00034c  1c40              ADDS     r0,r0,#1
00034e  4b2f              LDR      r3,|L2.1036|
000350  681b              LDR      r3,[r3,#0]  ; cdmaDataToSend
000352  8018              STRH     r0,[r3,#0]
000354  482d              LDR      r0,|L2.1036|
000356  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
000358  6840              LDR      r0,[r0,#4]
00035a  5481              STRB     r1,[r0,r2]
;;;247    				
;;;248    				memcpy(&cdmaDataToSend->data[cdmaDataToSend->datLength],cdmaLogData->base,cdmaLogData->top);
00035c  4b2b              LDR      r3,|L2.1036|
00035e  681b              LDR      r3,[r3,#0]  ; cdmaDataToSend
000360  685b              LDR      r3,[r3,#4]
000362  f8dfc0a8          LDR      r12,|L2.1036|
000366  f8dcc000          LDR      r12,[r12,#0]  ; cdmaDataToSend
00036a  f8bcc000          LDRH     r12,[r12,#0]
00036e  eb03000c          ADD      r0,r3,r12
000372  4b27              LDR      r3,|L2.1040|
000374  681b              LDR      r3,[r3,#0]  ; cdmaLogData
000376  881a              LDRH     r2,[r3,#0]
000378  4b25              LDR      r3,|L2.1040|
00037a  681b              LDR      r3,[r3,#0]  ; cdmaLogData
00037c  6859              LDR      r1,[r3,#4]
00037e  f7fffffe          BL       __aeabi_memcpy
;;;249    				cdmaDataToSend->datLength += cdmaLogData->top;
000382  4822              LDR      r0,|L2.1036|
000384  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
000386  8800              LDRH     r0,[r0,#0]
000388  4921              LDR      r1,|L2.1040|
00038a  6809              LDR      r1,[r1,#0]  ; cdmaLogData
00038c  8809              LDRH     r1,[r1,#0]
00038e  4408              ADD      r0,r0,r1
000390  491e              LDR      r1,|L2.1036|
000392  6809              LDR      r1,[r1,#0]  ; cdmaDataToSend
000394  8008              STRH     r0,[r1,#0]
;;;250    				Store_Clear(cdmaLogData);
000396  481e              LDR      r0,|L2.1040|
000398  6800              LDR      r0,[r0,#0]  ; cdmaLogData
00039a  f7fffffe          BL       Store_Clear
00039e  e0aa              B        |L2.1270|
                  |L2.928|
;;;251    			}
;;;252    			else
;;;253    			{
;;;254    				cdmaDataToSend->data[cdmaDataToSend->datLength++] = 253;
0003a0  21fd              MOVS     r1,#0xfd
0003a2  481a              LDR      r0,|L2.1036|
0003a4  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
0003a6  8802              LDRH     r2,[r0,#0]
0003a8  4818              LDR      r0,|L2.1036|
0003aa  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
0003ac  8800              LDRH     r0,[r0,#0]
0003ae  1c40              ADDS     r0,r0,#1
0003b0  4b16              LDR      r3,|L2.1036|
0003b2  681b              LDR      r3,[r3,#0]  ; cdmaDataToSend
0003b4  8018              STRH     r0,[r3,#0]
0003b6  4815              LDR      r0,|L2.1036|
0003b8  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
0003ba  6840              LDR      r0,[r0,#4]
0003bc  5481              STRB     r1,[r0,r2]
;;;255    				cdmaDataToSend->data[cdmaDataToSend->datLength++] = 0x50;
0003be  e000              B        |L2.962|
                  |L2.960|
0003c0  e144              B        |L2.1612|
                  |L2.962|
0003c2  2150              MOVS     r1,#0x50
0003c4  4811              LDR      r0,|L2.1036|
0003c6  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
0003c8  8802              LDRH     r2,[r0,#0]
0003ca  4810              LDR      r0,|L2.1036|
0003cc  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
0003ce  8800              LDRH     r0,[r0,#0]
0003d0  1c40              ADDS     r0,r0,#1
0003d2  4b0e              LDR      r3,|L2.1036|
0003d4  681b              LDR      r3,[r3,#0]  ; cdmaDataToSend
0003d6  8018              STRH     r0,[r3,#0]
0003d8  480c              LDR      r0,|L2.1036|
0003da  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
0003dc  6840              LDR      r0,[r0,#4]
0003de  5481              STRB     r1,[r0,r2]
;;;256    				cdmaDataToSend->data[cdmaDataToSend->datLength++] = 0x03;
0003e0  2103              MOVS     r1,#3
0003e2  480a              LDR      r0,|L2.1036|
0003e4  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
0003e6  8802              LDRH     r2,[r0,#0]
0003e8  4808              LDR      r0,|L2.1036|
0003ea  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
0003ec  8800              LDRH     r0,[r0,#0]
0003ee  1c40              ADDS     r0,r0,#1
0003f0  4b06              LDR      r3,|L2.1036|
0003f2  681b              LDR      r3,[r3,#0]  ; cdmaDataToSend
0003f4  8018              STRH     r0,[r3,#0]
0003f6  4805              LDR      r0,|L2.1036|
0003f8  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
0003fa  6840              LDR      r0,[r0,#4]
0003fc  5481              STRB     r1,[r0,r2]
;;;257    				Store_Getdates(cdmaLogData,&cdmaDataToSend -> data[cdmaDataToSend->datLength],250);
0003fe  4803              LDR      r0,|L2.1036|
000400  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
000402  6840              LDR      r0,[r0,#4]
000404  4a01              LDR      r2,|L2.1036|
000406  6812              LDR      r2,[r2,#0]  ; cdmaDataToSend
000408  8812              LDRH     r2,[r2,#0]
00040a  e067              B        |L2.1244|
                  |L2.1036|
                          DCD      cdmaDataToSend
                  |L2.1040|
                          DCD      cdmaLogData
                  |L2.1044|
                          DCD      varOperation
                  |L2.1048|
                          DCD      usbRecBuf
                  |L2.1052|
                          DCD      USBRecieveQ
                  |L2.1056|
                          DCD      usbSendBuf
                  |L2.1060|
                          DCD      USBSendQ
                  |L2.1064|
                          DCD      USB_TASK_STK+0x1fc
                  |L2.1068|
                          DCD      USBUpdataTask
                  |L2.1072|
                          DCD      beepSem
                  |L2.1076|
                          DCD      LoginMes
                  |L2.1080|
                          DCD      sendMsg
                  |L2.1084|
                          DCD      CDMASendMutex
                  |L2.1088|
                          DCD      CDMAPowerMutex
                  |L2.1092|
                          DCD      CANSendMutex
                  |L2.1096|
                          DCD      cdmaRecBuf
                  |L2.1100|
                          DCD      CDMARecieveQ
                  |L2.1104|
                          DCD      cdmaSendBuf
                  |L2.1108|
                          DCD      CDMASendQ
                  |L2.1112|
                          DCD      ZIPRecBuf
                  |L2.1116|
                          DCD      ZIPRecv_Q
                  |L2.1120|
                          DCD      gpsRecBuf
                  |L2.1124|
                          DCD      receGPSQ
                  |L2.1128|
                          DCD      canSendBuf
                  |L2.1132|
                          DCD      canSendQ
                  |L2.1136|
                          DCD      canRecBuf
                  |L2.1140|
                          DCD      canRecieveQ
                  |L2.1144|
                          DCD      canJ1939Buf
                  |L2.1148|
                          DCD      canJ1939Q
                  |L2.1152|
                          DCD      POWER_TASK_STK+0x1fc
                  |L2.1156|
                          DCD      PowerDeal
                  |L2.1160|
                          DCD      CDMA_TASK_STK+0x1fc
                  |L2.1164|
                          DCD      CDMATask
                  |L2.1168|
                          DCD      CDMARecv_TASK_STK+0x2cc
                  |L2.1172|
                          DCD      CDMARecvTask
                  |L2.1176|
                          DCD      GPS_TASK_STK+0x1fc
                  |L2.1180|
                          DCD      GPSTask
                  |L2.1184|
                          DCD      OBD_TASK_STK+0x1fc
                  |L2.1188|
                          DCD      OBDTask
                  |L2.1192|
                          DCD      J1939_TASK_STK+0x1fc
                  |L2.1196|
                          DCD      DealJ1939Date
                  |L2.1200|
                          DCD      SAVEFULE_TASK_STK+0x1fc
                  |L2.1204|
                          DCD      SaveFuleTask
                  |L2.1208|
                          DCD      CDMA_LED_STK+0x13c
                  |L2.1212|
                          DCD      CDMALEDTask
                  |L2.1216|
                          DCD      GPS_LED_STK+0x13c
                  |L2.1220|
                          DCD      GPSLEDTask
                  |L2.1224|
                          DCD      OBD_LED_STK+0x13c
                  |L2.1228|
                          DCD      OBDLEDTask
                  |L2.1232|
                          DCD      BEEP_STK+0x13c
                  |L2.1236|
                          DCD      BeepTask
                  |L2.1240|
                          DCD      ptrPIDAllDat
                  |L2.1244|
0004dc  1881              ADDS     r1,r0,r2
0004de  22fa              MOVS     r2,#0xfa
0004e0  485b              LDR      r0,|L2.1616|
0004e2  6800              LDR      r0,[r0,#0]  ; cdmaLogData
0004e4  f7fffffe          BL       Store_Getdates
;;;258    				cdmaDataToSend->datLength += 250;
0004e8  485a              LDR      r0,|L2.1620|
0004ea  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
0004ec  8800              LDRH     r0,[r0,#0]
0004ee  30fa              ADDS     r0,r0,#0xfa
0004f0  4958              LDR      r1,|L2.1620|
0004f2  6809              LDR      r1,[r1,#0]  ; cdmaDataToSend
0004f4  8008              STRH     r0,[r1,#0]
                  |L2.1270|
;;;259    			}
;;;260    			for(i = 0;i < 49; i++)
0004f6  2400              MOVS     r4,#0
0004f8  e02b              B        |L2.1362|
                  |L2.1274|
;;;261    			{
;;;262    				if(pPid[i][0] > 4)
0004fa  4857              LDR      r0,|L2.1624|
0004fc  f8500024          LDR      r0,[r0,r4,LSL #2]
000500  7800              LDRB     r0,[r0,#0]
000502  2804              CMP      r0,#4
000504  dd23              BLE      |L2.1358|
;;;263    				{
;;;264    					memcpy(&cdmaDataToSend->data[cdmaDataToSend->datLength],pPid[i],pPid[i][0]);
000506  4b53              LDR      r3,|L2.1620|
000508  681b              LDR      r3,[r3,#0]  ; cdmaDataToSend
00050a  685b              LDR      r3,[r3,#4]
00050c  f8dfc144          LDR      r12,|L2.1620|
000510  f8dcc000          LDR      r12,[r12,#0]  ; cdmaDataToSend
000514  f8bcc000          LDRH     r12,[r12,#0]
000518  eb03000c          ADD      r0,r3,r12
00051c  4b4e              LDR      r3,|L2.1624|
00051e  f8533024          LDR      r3,[r3,r4,LSL #2]
000522  781a              LDRB     r2,[r3,#0]
000524  4b4c              LDR      r3,|L2.1624|
000526  f8531024          LDR      r1,[r3,r4,LSL #2]
00052a  f7fffffe          BL       __aeabi_memcpy
;;;265    					cdmaDataToSend->datLength += pPid[i][0];
00052e  4849              LDR      r0,|L2.1620|
000530  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
000532  8800              LDRH     r0,[r0,#0]
000534  4948              LDR      r1,|L2.1624|
000536  f8511024          LDR      r1,[r1,r4,LSL #2]
00053a  7809              LDRB     r1,[r1,#0]
00053c  4408              ADD      r0,r0,r1
00053e  4945              LDR      r1,|L2.1620|
000540  6809              LDR      r1,[r1,#0]  ; cdmaDataToSend
000542  8008              STRH     r0,[r1,#0]
;;;266    					pPid[i][0] = 4;
000544  2004              MOVS     r0,#4
000546  4944              LDR      r1,|L2.1624|
000548  f8511024          LDR      r1,[r1,r4,LSL #2]
00054c  7008              STRB     r0,[r1,#0]
                  |L2.1358|
00054e  1c60              ADDS     r0,r4,#1              ;260
000550  b2c4              UXTB     r4,r0                 ;260
                  |L2.1362|
000552  2c31              CMP      r4,#0x31              ;260
000554  dbd1              BLT      |L2.1274|
;;;267    				}
;;;268    			}
;;;269    			if(pPid[49][0] > 3)
000556  4840              LDR      r0,|L2.1624|
000558  f8d000c4          LDR      r0,[r0,#0xc4]  ; pPid
00055c  7800              LDRB     r0,[r0,#0]
00055e  2803              CMP      r0,#3
000560  dd23              BLE      |L2.1450|
;;;270    			{
;;;271    				memcpy(&cdmaDataToSend->data[cdmaDataToSend->datLength],pPid[49],pPid[49][0]);
000562  4b3c              LDR      r3,|L2.1620|
000564  681b              LDR      r3,[r3,#0]  ; cdmaDataToSend
000566  685b              LDR      r3,[r3,#4]
000568  f8dfc0e8          LDR      r12,|L2.1620|
00056c  f8dcc000          LDR      r12,[r12,#0]  ; cdmaDataToSend
000570  f8bcc000          LDRH     r12,[r12,#0]
000574  eb03000c          ADD      r0,r3,r12
000578  4b37              LDR      r3,|L2.1624|
00057a  f8d330c4          LDR      r3,[r3,#0xc4]  ; pPid
00057e  781a              LDRB     r2,[r3,#0]
000580  4b35              LDR      r3,|L2.1624|
000582  f8d310c4          LDR      r1,[r3,#0xc4]  ; pPid
000586  f7fffffe          BL       __aeabi_memcpy
;;;272    				cdmaDataToSend->datLength += pPid[49][0];
00058a  4832              LDR      r0,|L2.1620|
00058c  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
00058e  8800              LDRH     r0,[r0,#0]
000590  4931              LDR      r1,|L2.1624|
000592  f8d110c4          LDR      r1,[r1,#0xc4]  ; pPid
000596  7809              LDRB     r1,[r1,#0]
000598  4408              ADD      r0,r0,r1
00059a  492e              LDR      r1,|L2.1620|
00059c  6809              LDR      r1,[r1,#0]  ; cdmaDataToSend
00059e  8008              STRH     r0,[r1,#0]
;;;273    				pPid[49][0] = 3;
0005a0  2003              MOVS     r0,#3
0005a2  492d              LDR      r1,|L2.1624|
0005a4  f8d110c4          LDR      r1,[r1,#0xc4]  ; pPid
0005a8  7008              STRB     r0,[r1,#0]
                  |L2.1450|
;;;274    			}
;;;275    			for(i=50;i<52;i++)          //GPS 信息和 瞬时油耗
0005aa  2432              MOVS     r4,#0x32
0005ac  e02b              B        |L2.1542|
                  |L2.1454|
;;;276    			{
;;;277    				if(pPid[i][0] > 3)
0005ae  482a              LDR      r0,|L2.1624|
0005b0  f8500024          LDR      r0,[r0,r4,LSL #2]
0005b4  7800              LDRB     r0,[r0,#0]
0005b6  2803              CMP      r0,#3
0005b8  dd23              BLE      |L2.1538|
;;;278    				{
;;;279    					memcpy(&cdmaDataToSend->data[cdmaDataToSend->datLength],pPid[i],pPid[i][0]);
0005ba  4b26              LDR      r3,|L2.1620|
0005bc  681b              LDR      r3,[r3,#0]  ; cdmaDataToSend
0005be  685b              LDR      r3,[r3,#4]
0005c0  f8dfc090          LDR      r12,|L2.1620|
0005c4  f8dcc000          LDR      r12,[r12,#0]  ; cdmaDataToSend
0005c8  f8bcc000          LDRH     r12,[r12,#0]
0005cc  eb03000c          ADD      r0,r3,r12
0005d0  4b21              LDR      r3,|L2.1624|
0005d2  f8533024          LDR      r3,[r3,r4,LSL #2]
0005d6  781a              LDRB     r2,[r3,#0]
0005d8  4b1f              LDR      r3,|L2.1624|
0005da  f8531024          LDR      r1,[r3,r4,LSL #2]
0005de  f7fffffe          BL       __aeabi_memcpy
;;;280    					cdmaDataToSend->datLength += pPid[i][0];
0005e2  481c              LDR      r0,|L2.1620|
0005e4  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
0005e6  8800              LDRH     r0,[r0,#0]
0005e8  491b              LDR      r1,|L2.1624|
0005ea  f8511024          LDR      r1,[r1,r4,LSL #2]
0005ee  7809              LDRB     r1,[r1,#0]
0005f0  4408              ADD      r0,r0,r1
0005f2  4918              LDR      r1,|L2.1620|
0005f4  6809              LDR      r1,[r1,#0]  ; cdmaDataToSend
0005f6  8008              STRH     r0,[r1,#0]
;;;281    					pPid[i][0] = 3;
0005f8  2003              MOVS     r0,#3
0005fa  4917              LDR      r1,|L2.1624|
0005fc  f8511024          LDR      r1,[r1,r4,LSL #2]
000600  7008              STRB     r0,[r1,#0]
                  |L2.1538|
000602  1c60              ADDS     r0,r4,#1              ;275
000604  b2c4              UXTB     r4,r0                 ;275
                  |L2.1542|
000606  2c34              CMP      r4,#0x34              ;275
000608  dbd1              BLT      |L2.1454|
;;;282    				}
;;;283    			}
;;;284    			CDMASendDataPack(cdmaDataToSend);
00060a  4812              LDR      r0,|L2.1620|
00060c  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
00060e  f7fffffe          BL       CDMASendDataPack
;;;285    			err = OSQPost(CDMASendQ,cdmaDataToSend);
000612  4810              LDR      r0,|L2.1620|
000614  6801              LDR      r1,[r0,#0]  ; cdmaDataToSend
000616  4811              LDR      r0,|L2.1628|
000618  6800              LDR      r0,[r0,#0]  ; CDMASendQ
00061a  f7fffffe          BL       OSQPost
00061e  9000              STR      r0,[sp,#0]
;;;286    			if(err != OS_ERR_NONE)     //发送失败
000620  f89d0000          LDRB     r0,[sp,#0]
000624  b140              CBZ      r0,|L2.1592|
;;;287    			{
;;;288    				cdmaDataToSend->datLength = 27;
000626  201b              MOVS     r0,#0x1b
000628  490a              LDR      r1,|L2.1620|
00062a  6809              LDR      r1,[r1,#0]  ; cdmaDataToSend
00062c  8008              STRH     r0,[r1,#0]
;;;289    				cdmaDataToSend->timeCount = 0;
00062e  2000              MOVS     r0,#0
000630  4908              LDR      r1,|L2.1620|
000632  6809              LDR      r1,[r1,#0]  ; cdmaDataToSend
000634  8048              STRH     r0,[r1,#2]
000636  e005              B        |L2.1604|
                  |L2.1592|
;;;290    			}
;;;291    			else
;;;292    				cdmaDataToSend = CDMNSendDataInit(1000);
000638  f44f707a          MOV      r0,#0x3e8
00063c  f7fffffe          BL       CDMNSendDataInit
000640  4904              LDR      r1,|L2.1620|
000642  6008              STR      r0,[r1,#0]  ; cdmaDataToSend
                  |L2.1604|
;;;293    			OSMutexPost(CDMASendMutex);
000644  4806              LDR      r0,|L2.1632|
000646  6800              LDR      r0,[r0,#0]  ; CDMASendMutex
000648  f7fffffe          BL       OSMutexPost
                  |L2.1612|
00064c  bf00              NOP                            ;201
                  |L2.1614|
00064e  e597              B        |L2.384|
;;;294    		}
;;;295    	}
;;;296    }
;;;297    void SendFaultCmd(void)
                          ENDP

                  |L2.1616|
                          DCD      cdmaLogData
                  |L2.1620|
                          DCD      cdmaDataToSend
                  |L2.1624|
                          DCD      pPid
                  |L2.1628|
                          DCD      CDMASendQ
                  |L2.1632|
                          DCD      CDMASendMutex

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;102    ****************************************************************/
;;;103    int main(void )
000000  b510              PUSH     {r4,lr}
;;;104    {
;;;105    	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
000002  f44f60a0          MOV      r0,#0x500
000006  f7fffffe          BL       NVIC_PriorityGroupConfig
;;;106    	
;;;107    	OSInit(); 
00000a  f7fffffe          BL       OSInit
;;;108    	
;;;109    	MemBuf_Init();   //建立内存块
00000e  f7fffffe          BL       MemBuf_Init
;;;110    	
;;;111    	sendCDMA_Q = Cir_Queue_Init(1000);//CDMA 串口发送 循环队列 缓冲区
000012  f44f707a          MOV      r0,#0x3e8
000016  f7fffffe          BL       Cir_Queue_Init
00001a  490f              LDR      r1,|L3.88|
00001c  6008              STR      r0,[r1,#0]  ; sendCDMA_Q
;;;112    	receCDMA_S = Store_Init(1020);    //CDMA 串口接收 数据堆   缓冲区
00001e  f44f707f          MOV      r0,#0x3fc
000022  f7fffffe          BL       Store_Init
000026  490d              LDR      r1,|L3.92|
000028  6008              STR      r0,[r1,#0]  ; receCDMA_S
;;;113    	
;;;114    	sendGPS_Q = Cir_Queue_Init(230);  //GPS  串口发送 循环队列 缓冲区
00002a  20e6              MOVS     r0,#0xe6
00002c  f7fffffe          BL       Cir_Queue_Init
000030  490b              LDR      r1,|L3.96|
000032  6008              STR      r0,[r1,#0]  ; sendGPS_Q
;;;115    	receGPS_S = Store_Init(230);      //GPS  串口接收 数据堆   缓冲区
000034  20e6              MOVS     r0,#0xe6
000036  f7fffffe          BL       Store_Init
00003a  490a              LDR      r1,|L3.100|
00003c  6008              STR      r0,[r1,#0]  ; receGPS_S
;;;116    	
;;;117    	SystemBspInit();                  //硬件初始化 
00003e  f7fffffe          BL       SystemBspInit
;;;118    	
;;;119    	OSTaskCreate(StartTask,(void *)0,(OS_STK *)&START_TASK_STK[START_STK_SIZE-1],START_TASK_PRIO );
000042  230a              MOVS     r3,#0xa
000044  4a08              LDR      r2,|L3.104|
000046  2100              MOVS     r1,#0
000048  4808              LDR      r0,|L3.108|
00004a  f7fffffe          BL       OSTaskCreate
;;;120    	
;;;121    	OSStart();	 
00004e  f7fffffe          BL       OSStart
;;;122    }
000052  2000              MOVS     r0,#0
000054  bd10              POP      {r4,pc}
;;;123    
                          ENDP

000056  0000              DCW      0x0000
                  |L3.88|
                          DCD      sendCDMA_Q
                  |L3.92|
                          DCD      receCDMA_S
                  |L3.96|
                          DCD      sendGPS_Q
                  |L3.100|
                          DCD      receGPS_S
                  |L3.104|
                          DCD      START_TASK_STK+0x1fc
                  |L3.108|
                          DCD      StartTask

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  cdmaRecBuf
                          %        40
                  cdmaSendBuf
                          %        20
                  ZIPRecBuf
                          %        20
                  gpsRecBuf
                          %        40
                  canRecBuf
                          %        80
                  canSendBuf
                          %        1400
                  canJ1939Buf
                          %        80
                  usbRecBuf
                          %        40
                  usbSendBuf
                          %        20
                  USB_TASK_STK
                          %        512
                  START_TASK_STK
                          %        512
                  CDMA_TASK_STK
                          %        512
                  CDMARecv_TASK_STK
                          %        720
                  GPS_TASK_STK
                          %        512
                  OBD_TASK_STK
                          %        512
                  J1939_TASK_STK
                          %        512
                  SAVEFULE_TASK_STK
                          %        512
                  POWER_TASK_STK
                          %        512
                  CDMA_LED_STK
                          %        320
                  GPS_LED_STK
                          %        320
                  OBD_LED_STK
                          %        320
                  BEEP_STK
                          %        320
                  sysUpdateVar
                          %        16
                  varOperation
                          %        163
                  canDataConfig
                          %        27
                  carAllRecord
                          %        92
                  gpsMC
                          %        107
                  strengthFuel
                          %        83
                  strengthFuelFlash
                          %        83

                          AREA ||.data||, DATA, ALIGN=2

                  sendMsg
                          DCD      0x00000000
                  beepSem
                          DCD      0x00000000
                  LoginMes
                          DCD      0x00000000
                  CDMASendMutex
                          DCD      0x00000000
                  CDMAPowerMutex
                          DCD      0x00000000
                  CANSendMutex
                          DCD      0x00000000
                  CDMARecieveQ
                          DCD      0x00000000
                  CDMASendQ
                          DCD      0x00000000
                  ZIPRecv_Q
                          DCD      0x00000000
                  receGPSQ
                          DCD      0x00000000
                  canRecieveQ
                          DCD      0x00000000
                  canSendQ
                          DCD      0x00000000
                  canJ1939Q
                          DCD      0x00000000
                  USBSendQ
                          DCD      0x00000000
                  USBRecieveQ
                          DCD      0x00000000
                  sendCDMA_Q
                          DCD      0x00000000
                  receCDMA_S
                          DCD      0x00000000
                  sendGPS_Q
                          DCD      0x00000000
                  receGPS_S
                          DCD      0x00000000
                  cdmaDataToSend
                          DCD      0x00000000
                  cdmaLogData
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_4f4e89dc____REV16|
#line 465 "D:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.2.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_4f4e89dc____REV16| PROC
#line 466

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_4f4e89dc____REVSH|
#line 480
|__asm___6_main_c_4f4e89dc____REVSH| PROC
#line 481

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_4f4e89dc____RRX|
#line 667
|__asm___6_main_c_4f4e89dc____RRX| PROC
#line 668

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
