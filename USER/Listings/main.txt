; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\obj\main.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=..\obj\main.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\OBD -I..\SYSTEM -I..\USER -I..\LIB\inc -I..\UCOSII\CONFIG -I..\UCOSII\PORT -I..\UCOSII\CORE -I..\HAEDWARE -I..\GPS -I..\CDMA -I..\DEAL -I..\USB\CONFIG -I..\USB\STM32_USB-FS-Device_Driver\inc -I.\RTE\_Project -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\5.2.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=524 -D_RTE_ -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\main.crf main.c]
                          THUMB

                          AREA ||i.SendFaultCmd||, CODE, READONLY, ALIGN=2

                  SendFaultCmd PROC
;;;307    }
;;;308    void SendFaultCmd(void)
000000  b570              PUSH     {r4-r6,lr}
;;;309    {
;;;310    	uint8_t * ptrOBDSend;
;;;311    	uint8_t err;
;;;312    	
;;;313    	ptrOBDSend = Mem_malloc(9);
000002  2009              MOVS     r0,#9
000004  f7fffffe          BL       Mem_malloc
000008  4604              MOV      r4,r0
;;;314    	ptrOBDSend[0] = 200;
00000a  20c8              MOVS     r0,#0xc8
00000c  7020              STRB     r0,[r4,#0]
;;;315    	if(strengthFuelFlash.modeOrder == 1)
00000e  482a              LDR      r0,|L1.184|
000010  f890003a          LDRB     r0,[r0,#0x3a]  ; strengthFuelFlash
000014  2801              CMP      r0,#1
000016  d119              BNE      |L1.76|
;;;316    	{
;;;317    		ptrOBDSend = Mem_malloc(9);
000018  2009              MOVS     r0,#9
00001a  f7fffffe          BL       Mem_malloc
00001e  4604              MOV      r4,r0
;;;318    		ptrOBDSend[0] = 236;
000020  20ec              MOVS     r0,#0xec
000022  7020              STRB     r0,[r4,#0]
;;;319    		memcpy(&ptrOBDSend[1],strengthFuelFlash.faultCmd1,8);
000024  4824              LDR      r0,|L1.184|
000026  303b              ADDS     r0,r0,#0x3b
000028  6801              LDR      r1,[r0,#0]  ; strengthFuelFlash
00002a  f8c41001          STR      r1,[r4,#1]
00002e  6840              LDR      r0,[r0,#4]  ; strengthFuelFlash
000030  f8c40005          STR      r0,[r4,#5]
;;;320    		err = OSQPost(canSendQ,ptrOBDSend);//向 OBD 推送要发送的 PID 指令
000034  4621              MOV      r1,r4
000036  4821              LDR      r0,|L1.188|
000038  6800              LDR      r0,[r0,#0]  ; canSendQ
00003a  f7fffffe          BL       OSQPost
00003e  4605              MOV      r5,r0
;;;321    		if(err != OS_ERR_NONE)
000040  2d00              CMP      r5,#0
000042  d038              BEQ      |L1.182|
;;;322    		{
;;;323    			Mem_free(ptrOBDSend);          //推送不成功，需要释放内存块
000044  4620              MOV      r0,r4
000046  f7fffffe          BL       Mem_free
00004a  e034              B        |L1.182|
                  |L1.76|
;;;324    		} 
;;;325    	}else if(strengthFuelFlash.modeOrder == 2)
00004c  481a              LDR      r0,|L1.184|
00004e  f890003a          LDRB     r0,[r0,#0x3a]  ; strengthFuelFlash
000052  2802              CMP      r0,#2
000054  d12f              BNE      |L1.182|
;;;326    	{
;;;327    		ptrOBDSend = Mem_malloc(9);		   //当前故障码
000056  2009              MOVS     r0,#9
000058  f7fffffe          BL       Mem_malloc
00005c  4604              MOV      r4,r0
;;;328    		ptrOBDSend[0] = 234;
00005e  20ea              MOVS     r0,#0xea
000060  7020              STRB     r0,[r4,#0]
;;;329    		memcpy(&ptrOBDSend[1],strengthFuelFlash.faultCmd1,8);
000062  4815              LDR      r0,|L1.184|
000064  303b              ADDS     r0,r0,#0x3b
000066  6801              LDR      r1,[r0,#0]  ; strengthFuelFlash
000068  f8c41001          STR      r1,[r4,#1]
00006c  6840              LDR      r0,[r0,#4]  ; strengthFuelFlash
00006e  f8c40005          STR      r0,[r4,#5]
;;;330    		err = OSQPost(canSendQ,ptrOBDSend);//向 OBD 推送要发送的 PID 指令
000072  4621              MOV      r1,r4
000074  4811              LDR      r0,|L1.188|
000076  6800              LDR      r0,[r0,#0]  ; canSendQ
000078  f7fffffe          BL       OSQPost
00007c  4605              MOV      r5,r0
;;;331    		if(err != OS_ERR_NONE)
00007e  b115              CBZ      r5,|L1.134|
;;;332    		{
;;;333    			Mem_free(ptrOBDSend);          //推送不成功，需要释放内存块
000080  4620              MOV      r0,r4
000082  f7fffffe          BL       Mem_free
                  |L1.134|
;;;334    		} 
;;;335    		ptrOBDSend = Mem_malloc(9);		   //历史故障码
000086  2009              MOVS     r0,#9
000088  f7fffffe          BL       Mem_malloc
00008c  4604              MOV      r4,r0
;;;336    		ptrOBDSend[0] = 235;
00008e  20eb              MOVS     r0,#0xeb
000090  7020              STRB     r0,[r4,#0]
;;;337    		memcpy(&ptrOBDSend[1],strengthFuelFlash.faultCmd2,8);
000092  4809              LDR      r0,|L1.184|
000094  3043              ADDS     r0,r0,#0x43
000096  6801              LDR      r1,[r0,#0]  ; strengthFuelFlash
000098  f8c41001          STR      r1,[r4,#1]
00009c  6840              LDR      r0,[r0,#4]  ; strengthFuelFlash
00009e  f8c40005          STR      r0,[r4,#5]
;;;338    		err = OSQPost(canSendQ,ptrOBDSend);//向 OBD 推送要发送的 PID 指令
0000a2  4621              MOV      r1,r4
0000a4  4805              LDR      r0,|L1.188|
0000a6  6800              LDR      r0,[r0,#0]  ; canSendQ
0000a8  f7fffffe          BL       OSQPost
0000ac  4605              MOV      r5,r0
;;;339    		if(err != OS_ERR_NONE)
0000ae  b115              CBZ      r5,|L1.182|
;;;340    		{
;;;341    			Mem_free(ptrOBDSend);          //推送不成功，需要释放内存块
0000b0  4620              MOV      r0,r4
0000b2  f7fffffe          BL       Mem_free
                  |L1.182|
;;;342    		} 
;;;343    	}
;;;344    }
0000b6  bd70              POP      {r4-r6,pc}
;;;345    
                          ENDP

                  |L1.184|
                          DCD      strengthFuelFlash
                  |L1.188|
                          DCD      canSendQ

                          AREA ||i.SendPIDCmd||, CODE, READONLY, ALIGN=2

                  SendPIDCmd PROC
;;;345    
;;;346    uint8_t SendPIDCmd(void)
000000  b570              PUSH     {r4-r6,lr}
;;;347    {
;;;348    	uint8_t i = 0;
000002  2500              MOVS     r5,#0
;;;349    	uint8_t * ptrOBDSend;
;;;350    	uint8_t err;
;;;351    	for(i = 0;i < varOperation.pidNum;i ++) // PID 指令的数目
000004  bf00              NOP      
000006  e01a              B        |L2.62|
                  |L2.8|
;;;352    	{
;;;353    		ptrOBDSend = Mem_malloc(9);
000008  2009              MOVS     r0,#9
00000a  f7fffffe          BL       Mem_malloc
00000e  4604              MOV      r4,r0
;;;354    		memcpy(ptrOBDSend,(ptrPIDAllDat + i)->data, 9);
000010  eb051005          ADD      r0,r5,r5,LSL #4
000014  490f              LDR      r1,|L2.84|
000016  6809              LDR      r1,[r1,#0]  ; ptrPIDAllDat
000018  4408              ADD      r0,r0,r1
00001a  6881              LDR      r1,[r0,#8]
00001c  6021              STR      r1,[r4,#0]
00001e  68c1              LDR      r1,[r0,#0xc]
000020  6061              STR      r1,[r4,#4]
000022  7c00              LDRB     r0,[r0,#0x10]
000024  7220              STRB     r0,[r4,#8]
;;;355    		err = OSQPost(canSendQ,ptrOBDSend);//向 OBD 推送要发送的PID指令
000026  4621              MOV      r1,r4
000028  480b              LDR      r0,|L2.88|
00002a  6800              LDR      r0,[r0,#0]  ; canSendQ
00002c  f7fffffe          BL       OSQPost
000030  4606              MOV      r6,r0
;;;356    		if(err != OS_ERR_NONE)
000032  b116              CBZ      r6,|L2.58|
;;;357    		{
;;;358    			Mem_free(ptrOBDSend);          //推送不成功，需要释放内存块
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       Mem_free
                  |L2.58|
00003a  1c68              ADDS     r0,r5,#1              ;351
00003c  b2c5              UXTB     r5,r0                 ;351
                  |L2.62|
00003e  4807              LDR      r0,|L2.92|
000040  f8b00078          LDRH     r0,[r0,#0x78]         ;351  ; varOperation
000044  42a8              CMP      r0,r5                 ;351
000046  dcdf              BGT      |L2.8|
;;;359    		} 
;;;360    	}
;;;361    	varOperation.pidSendFlag = 0;
000048  2000              MOVS     r0,#0
00004a  4904              LDR      r1,|L2.92|
00004c  f88100a3          STRB     r0,[r1,#0xa3]
;;;362    	return 1;
000050  2001              MOVS     r0,#1
;;;363    }
000052  bd70              POP      {r4-r6,pc}
;;;364    
                          ENDP

                  |L2.84|
                          DCD      ptrPIDAllDat
                  |L2.88|
                          DCD      canSendQ
                  |L2.92|
                          DCD      varOperation

                          AREA ||i.StartTask||, CODE, READONLY, ALIGN=2

                  StartTask PROC
;;;134    uint8_t SendPIDCmd(void);
;;;135    void StartTask(void *pdata)
000000  b508              PUSH     {r3,lr}
;;;136    {
;;;137    	uint8_t   err;
;;;138    	uint8_t   i = 0,bag = 1;
000002  2500              MOVS     r5,#0
000004  2601              MOVS     r6,#1
;;;139    //	uint8_t   *ptrOBDSend;
;;;140    	uint8_t   *ptrPIDdate;
;;;141    	uint16_t  dataLength;
;;;142    	uint32_t  timeToSendLogin  = 0;
000006  2700              MOVS     r7,#0
;;;143    	OS_CPU_SR cpu_sr=0;
000008  46a9              MOV      r9,r5
;;;144    	pdata = pdata; 
00000a  bf00              NOP      
;;;145    	
;;;146    	cdmaDataToSend = CDMNSendDataInit(1000);//初始化获取发向CDMA的消息结构体
00000c  f44f707a          MOV      r0,#0x3e8
000010  f7fffffe          BL       CDMNSendDataInit
000014  49fe              LDR      r1,|L3.1040|
000016  6008              STR      r0,[r1,#0]  ; cdmaDataToSend
;;;147    	cdmaLogData    = Store_Init(1000);
000018  f44f707a          MOV      r0,#0x3e8
00001c  f7fffffe          BL       Store_Init
000020  49fc              LDR      r1,|L3.1044|
000022  6008              STR      r0,[r1,#0]  ; cdmaLogData
;;;148    	if(varOperation.USB_NormalMode == 1)    //USB 升级模式
000024  48fc              LDR      r0,|L3.1048|
000026  7a00              LDRB     r0,[r0,#8]  ; varOperation
000028  2801              CMP      r0,#1
00002a  d115              BNE      |L3.88|
;;;149    	{
;;;150    		USBRecieveQ = OSQCreate(&usbRecBuf[0],USBRECBUF_SIZE);  //建立USB接收 消息队列
00002c  210a              MOVS     r1,#0xa
00002e  48fb              LDR      r0,|L3.1052|
000030  f7fffffe          BL       OSQCreate
000034  49fa              LDR      r1,|L3.1056|
000036  6008              STR      r0,[r1,#0]  ; USBRecieveQ
;;;151    		USBSendQ    = OSQCreate(&usbSendBuf[0],USBSENDBUF_SIZE);//建立USB发送 消息队列
000038  2105              MOVS     r1,#5
00003a  48fa              LDR      r0,|L3.1060|
00003c  f7fffffe          BL       OSQCreate
000040  49f9              LDR      r1,|L3.1064|
000042  6008              STR      r0,[r1,#0]  ; USBSendQ
;;;152    		
;;;153    		OSTaskCreate(USBUpdataTask,(void *)0,(OS_STK*)&USB_TASK_STK[USB_STK_SIZE - 1],USB_TASK_PRIO);
000044  2309              MOVS     r3,#9
000046  4af9              LDR      r2,|L3.1068|
000048  2100              MOVS     r1,#0
00004a  48f9              LDR      r0,|L3.1072|
00004c  f7fffffe          BL       OSTaskCreate
;;;154    		OSTaskSuspend(OS_PRIO_SELF);    //挂起起始任务
000050  20ff              MOVS     r0,#0xff
000052  f7fffffe          BL       OSTaskSuspend
000056  e098              B        |L3.394|
                  |L3.88|
;;;155    	}else
;;;156    	{
;;;157    		OS_ENTER_CRITICAL();			//进入临界区(无法被中断打断)    
000058  f7fffffe          BL       OS_CPU_SR_Save
00005c  4681              MOV      r9,r0
;;;158    /***********************************  创建任务间通信的消息     ***************************************************/				
;;;159    
;;;160    		beepSem   = OSSemCreate(1);       //蜂鸣器信号量（目前只是开机响一下，以后可以加点花样）
00005e  2001              MOVS     r0,#1
000060  f7fffffe          BL       OSSemCreate
000064  49f3              LDR      r1,|L3.1076|
000066  6008              STR      r0,[r1,#0]  ; beepSem
;;;161    		LoginMes  = OSSemCreate(0);       //登录报文信号量
000068  2000              MOVS     r0,#0
00006a  f7fffffe          BL       OSSemCreate
00006e  49f2              LDR      r1,|L3.1080|
000070  6008              STR      r0,[r1,#0]  ; LoginMes
;;;162    		sendMsg   = OSSemCreate(0);       //创建CDMA是否正在发送消息的信号量
000072  2000              MOVS     r0,#0
000074  f7fffffe          BL       OSSemCreate
000078  49f0              LDR      r1,|L3.1084|
00007a  6008              STR      r0,[r1,#0]  ; sendMsg
;;;163    		
;;;164    		CDMASendMutex  = OSMutexCreate(CDMA_SEND_PRIO,&err);        //向 CDMA 发送缓冲区发送数据 独占 互斥型信号量
00007c  4669              MOV      r1,sp
00007e  2007              MOVS     r0,#7
000080  f7fffffe          BL       OSMutexCreate
000084  49ee              LDR      r1,|L3.1088|
000086  6008              STR      r0,[r1,#0]  ; CDMASendMutex
;;;165    		CDMAPowerMutex = OSMutexCreate(CDMAPOWER_PRIO,&err);        //CDMA 电源互斥信号量管理
000088  4669              MOV      r1,sp
00008a  2006              MOVS     r0,#6
00008c  f7fffffe          BL       OSMutexCreate
000090  49ec              LDR      r1,|L3.1092|
000092  6008              STR      r0,[r1,#0]  ; CDMAPowerMutex
;;;166    		CANSendMutex   = OSMutexCreate(CAN_SEND_MUTEX,&err);        //CAN 发送数据信号量
000094  4669              MOV      r1,sp
000096  2008              MOVS     r0,#8
000098  f7fffffe          BL       OSMutexCreate
00009c  49ea              LDR      r1,|L3.1096|
00009e  6008              STR      r0,[r1,#0]  ; CANSendMutex
;;;167    		
;;;168    		CDMARecieveQ = OSQCreate(&cdmaRecBuf[0],CDMARECBUF_SIZE);   //建立CDMA接收 消息队列
0000a0  210a              MOVS     r1,#0xa
0000a2  48ea              LDR      r0,|L3.1100|
0000a4  f7fffffe          BL       OSQCreate
0000a8  49e9              LDR      r1,|L3.1104|
0000aa  6008              STR      r0,[r1,#0]  ; CDMARecieveQ
;;;169    		CDMASendQ    = OSQCreate(&cdmaSendBuf[0],CDMASENDBUF_SIZE); //建立CDMA发送 消息队列
0000ac  2105              MOVS     r1,#5
0000ae  48e9              LDR      r0,|L3.1108|
0000b0  f7fffffe          BL       OSQCreate
0000b4  49e8              LDR      r1,|L3.1112|
0000b6  6008              STR      r0,[r1,#0]  ; CDMASendQ
;;;170    		ZIPRecv_Q    = OSQCreate(&ZIPRecBuf[0],ZIPRECVBUF_SIZE);    //建立“ZIPRECV”处理消息队列
0000b8  2105              MOVS     r1,#5
0000ba  48e8              LDR      r0,|L3.1116|
0000bc  f7fffffe          BL       OSQCreate
0000c0  49e7              LDR      r1,|L3.1120|
0000c2  6008              STR      r0,[r1,#0]  ; ZIPRecv_Q
;;;171    		
;;;172    		receGPSQ     = OSQCreate(&gpsRecBuf[0],GPSRECBUF_SIZE);     //建立GPS接收 消息队列
0000c4  210a              MOVS     r1,#0xa
0000c6  48e7              LDR      r0,|L3.1124|
0000c8  f7fffffe          BL       OSQCreate
0000cc  49e6              LDR      r1,|L3.1128|
0000ce  6008              STR      r0,[r1,#0]  ; receGPSQ
;;;173    		canSendQ     = OSQCreate(&canSendBuf[0],CANSENDBUF_SIZE);   //卡路宝向ECU发送指令的消息队列
0000d0  21c8              MOVS     r1,#0xc8
0000d2  48e6              LDR      r0,|L3.1132|
0000d4  f7fffffe          BL       OSQCreate
0000d8  49e5              LDR      r1,|L3.1136|
0000da  6008              STR      r0,[r1,#0]  ; canSendQ
;;;174    		canRecieveQ  = OSQCreate(&canRecBuf[0],CANRECBUF_SIZE);     //卡路宝从ECU接收指令的消息队列
0000dc  2114              MOVS     r1,#0x14
0000de  48e5              LDR      r0,|L3.1140|
0000e0  f7fffffe          BL       OSQCreate
0000e4  49e4              LDR      r1,|L3.1144|
0000e6  6008              STR      r0,[r1,#0]  ; canRecieveQ
;;;175    		canJ1939Q    = OSQCreate(&canJ1939Buf[0],CANJ1939BUF_SIZE); // ECU向卡路宝发送 J1939 消息队列
0000e8  2114              MOVS     r1,#0x14
0000ea  48e4              LDR      r0,|L3.1148|
0000ec  f7fffffe          BL       OSQCreate
0000f0  49e3              LDR      r1,|L3.1152|
0000f2  6008              STR      r0,[r1,#0]  ; canJ1939Q
;;;176    
;;;177    /*************************************        创建各任务         ************************************************/		
;;;178    
;;;179    		OSTaskCreate(PowerDeal,    (void *)0,(OS_STK*)&POWER_TASK_STK[POWER_STK_SIZE - 1],      POWER_TASK_PRIO);
0000f4  2313              MOVS     r3,#0x13
0000f6  4ae3              LDR      r2,|L3.1156|
0000f8  2100              MOVS     r1,#0
0000fa  48e3              LDR      r0,|L3.1160|
0000fc  f7fffffe          BL       OSTaskCreate
;;;180    		
;;;181    		OSTaskCreate(CDMATask,     (void *)0,(OS_STK*)&CDMA_TASK_STK[CDMA_STK_SIZE - 1],        CDMA_TASK_PRIO);
000100  230b              MOVS     r3,#0xb
000102  4ae2              LDR      r2,|L3.1164|
000104  2100              MOVS     r1,#0
000106  48e2              LDR      r0,|L3.1168|
000108  f7fffffe          BL       OSTaskCreate
;;;182    		
;;;183    		OSTaskCreate(CDMARecvTask, (void *)0,(OS_STK*)&CDMARecv_TASK_STK[CDMARecv_STK_SIZE - 1],CDMARevc_TASK_PRIO);	
00010c  230c              MOVS     r3,#0xc
00010e  4ae1              LDR      r2,|L3.1172|
000110  2100              MOVS     r1,#0
000112  48e1              LDR      r0,|L3.1176|
000114  f7fffffe          BL       OSTaskCreate
;;;184    
;;;185    		OSTaskCreate(GPSTask,      (void *)0,(OS_STK*)&GPS_TASK_STK[GPS_STK_SIZE - 1],          GPS_TASK_PRIO);	
000118  230e              MOVS     r3,#0xe
00011a  4ae0              LDR      r2,|L3.1180|
00011c  2100              MOVS     r1,#0
00011e  48e0              LDR      r0,|L3.1184|
000120  f7fffffe          BL       OSTaskCreate
;;;186    		
;;;187    		OSTaskCreate(OBD_ON_OFFDeal,(void *)0,(OS_STK*)&OBD_ONOFF_TASK_STK[OBD_ONOFF_STK_SIZE - 1],OBD_ON_OFF_PRIO);
000124  230d              MOVS     r3,#0xd
000126  4adf              LDR      r2,|L3.1188|
000128  2100              MOVS     r1,#0
00012a  48df              LDR      r0,|L3.1192|
00012c  f7fffffe          BL       OSTaskCreate
;;;188    
;;;189    		OSTaskCreate(OBDTask,      (void *)0,(OS_STK*)&OBD_TASK_STK[OBD_STK_SIZE - 1],          OBD_TASK_PRIO);
000130  230f              MOVS     r3,#0xf
000132  4ade              LDR      r2,|L3.1196|
000134  2100              MOVS     r1,#0
000136  48de              LDR      r0,|L3.1200|
000138  f7fffffe          BL       OSTaskCreate
;;;190    		OSTaskCreate(DealJ1939Date,(void *)0,(OS_STK*)&J1939_TASK_STK[J1939_STK_SIZE - 1],      J1939_TASK_PRIO);//创建J1939处理任务		
00013c  2310              MOVS     r3,#0x10
00013e  4add              LDR      r2,|L3.1204|
000140  2100              MOVS     r1,#0
000142  48dd              LDR      r0,|L3.1208|
000144  f7fffffe          BL       OSTaskCreate
;;;191    		OSTaskCreate(SaveFuleTask, (void *)0,(OS_STK*)&SAVEFULE_TASK_STK[SAVEFUEL_STK_SIZE - 1],SAVE_FUEL_PEIO); //创建节油任务		
000148  2311              MOVS     r3,#0x11
00014a  4adc              LDR      r2,|L3.1212|
00014c  2100              MOVS     r1,#0
00014e  48dc              LDR      r0,|L3.1216|
000150  f7fffffe          BL       OSTaskCreate
;;;192    
;;;193    		OSTaskCreate(CDMALEDTask,(void *)0,(OS_STK*)&CDMA_LED_STK[LED_STK_SIZE - 1],CDMA_LED_PRIO);
000154  2319              MOVS     r3,#0x19
000156  4adb              LDR      r2,|L3.1220|
000158  2100              MOVS     r1,#0
00015a  48db              LDR      r0,|L3.1224|
00015c  f7fffffe          BL       OSTaskCreate
;;;194    		OSTaskCreate(GPSLEDTask, (void *)0,(OS_STK*)&GPS_LED_STK[LED_STK_SIZE - 1], GPS_LED_PRIO);		
000160  231a              MOVS     r3,#0x1a
000162  4ada              LDR      r2,|L3.1228|
000164  2100              MOVS     r1,#0
000166  48da              LDR      r0,|L3.1232|
000168  f7fffffe          BL       OSTaskCreate
;;;195    		OSTaskCreate(OBDLEDTask, (void *)0,(OS_STK*)&OBD_LED_STK[LED_STK_SIZE - 1], OBD_LED_PRIO);	
00016c  231b              MOVS     r3,#0x1b
00016e  4ad9              LDR      r2,|L3.1236|
000170  2100              MOVS     r1,#0
000172  48d9              LDR      r0,|L3.1240|
000174  f7fffffe          BL       OSTaskCreate
;;;196    		OSTaskCreate(BeepTask,   (void *)0,(OS_STK*)&BEEP_STK[BEEP_STK_SIZE - 1],   BEEP_TASK_PRIO);
000178  231c              MOVS     r3,#0x1c
00017a  4ad8              LDR      r2,|L3.1244|
00017c  2100              MOVS     r1,#0
00017e  48d8              LDR      r0,|L3.1248|
000180  f7fffffe          BL       OSTaskCreate
;;;197    		
;;;198    /***************************************************************************************************************/		
;;;199    		
;;;200    		OS_EXIT_CRITICAL();				  //退出临界区(可以被中断打断)
000184  4648              MOV      r0,r9
000186  f7fffffe          BL       OS_CPU_SR_Restore
                  |L3.394|
;;;201    	}
;;;202    	while(1)
00018a  e25a              B        |L3.1602|
                  |L3.396|
;;;203    	{
;;;204    		OSTimeDlyHMSM(0,0,0,4);           //4ms扫描一次
00018c  2304              MOVS     r3,#4
00018e  2200              MOVS     r2,#0
000190  4611              MOV      r1,r2
000192  4610              MOV      r0,r2
000194  f7fffffe          BL       OSTimeDlyHMSM
;;;205    		if(varOperation.isDataFlow == 1)
000198  489f              LDR      r0,|L3.1048|
00019a  f890002d          LDRB     r0,[r0,#0x2d]  ; varOperation
00019e  2801              CMP      r0,#1
0001a0  d100              BNE      |L3.420|
;;;206    			continue;                     //数据流未流动
0001a2  e24e              B        |L3.1602|
                  |L3.420|
;;;207    		timeToSendLogin++;
0001a4  1c7f              ADDS     r7,r7,#1
;;;208    		if(timeToSendLogin % 45000 == 0)  //定期3分钟发送登录报文
0001a6  f64a70c8          MOV      r0,#0xafc8
0001aa  fbb7f1f0          UDIV     r1,r7,r0
0001ae  fb007011          MLS      r0,r0,r1,r7
0001b2  b908              CBNZ     r0,|L3.440|
;;;209    		{
;;;210    			LoginDataSend(); 
0001b4  f7fffffe          BL       LoginDataSend
                  |L3.440|
;;;211    		}
;;;212    		if(varOperation.pidRun == 1 && varOperation.canTest >0 && varOperation.pidTset == 0 && varOperation.strengthRun == 0)   //CAN的波特率和ID均已确定
0001b8  4897              LDR      r0,|L3.1048|
0001ba  f8900095          LDRB     r0,[r0,#0x95]  ; varOperation
0001be  2801              CMP      r0,#1
0001c0  d124              BNE      |L3.524|
0001c2  4895              LDR      r0,|L3.1048|
0001c4  f8b00091          LDRH     r0,[r0,#0x91]  ; varOperation
0001c8  2800              CMP      r0,#0
0001ca  dd1f              BLE      |L3.524|
0001cc  4892              LDR      r0,|L3.1048|
0001ce  f8900093          LDRB     r0,[r0,#0x93]  ; varOperation
0001d2  b9d8              CBNZ     r0,|L3.524|
0001d4  4890              LDR      r0,|L3.1048|
0001d6  f8900094          LDRB     r0,[r0,#0x94]  ; varOperation
0001da  b9b8              CBNZ     r0,|L3.524|
;;;213    		{
;;;214    			if(timeToSendLogin % 2500 == 2499 && varOperation.pidSendFlag == 3)//发送故障码读取指令
0001dc  f64010c4          MOV      r0,#0x9c4
0001e0  fbb7f1f0          UDIV     r1,r7,r0
0001e4  fb007011          MLS      r0,r0,r1,r7
0001e8  f64011c3          MOV      r1,#0x9c3
0001ec  4288              CMP      r0,r1
0001ee  d106              BNE      |L3.510|
0001f0  4889              LDR      r0,|L3.1048|
0001f2  f89000a3          LDRB     r0,[r0,#0xa3]  ; varOperation
0001f6  2803              CMP      r0,#3
0001f8  d101              BNE      |L3.510|
;;;215    			{
;;;216    				SendFaultCmd();
0001fa  f7fffffe          BL       SendFaultCmd
                  |L3.510|
;;;217    			}
;;;218    			if(varOperation.pidSendFlag == 1)
0001fe  4886              LDR      r0,|L3.1048|
000200  f89000a3          LDRB     r0,[r0,#0xa3]  ; varOperation
000204  2801              CMP      r0,#1
000206  d101              BNE      |L3.524|
;;;219    				SendPIDCmd();
000208  f7fffffe          BL       SendPIDCmd
                  |L3.524|
;;;220    		}
;;;221    		dataLength = cdmaDataToSend->datLength + cdmaLogData->top;
00020c  4880              LDR      r0,|L3.1040|
00020e  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
000210  8800              LDRH     r0,[r0,#0]
000212  4980              LDR      r1,|L3.1044|
000214  6809              LDR      r1,[r1,#0]  ; cdmaLogData
000216  8809              LDRH     r1,[r1,#0]
000218  4408              ADD      r0,r0,r1
00021a  fa1ff880          UXTH     r8,r0
;;;222    		if(dataLength > 36)                        //要发送的数据不为空
00021e  f1b80f24          CMP      r8,#0x24
000222  dd06              BLE      |L3.562|
;;;223    			cdmaDataToSend->timeCount += 4;
000224  487a              LDR      r0,|L3.1040|
000226  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
000228  8840              LDRH     r0,[r0,#2]
00022a  1d00              ADDS     r0,r0,#4
00022c  4978              LDR      r1,|L3.1040|
00022e  6809              LDR      r1,[r1,#0]  ; cdmaDataToSend
000230  8048              STRH     r0,[r1,#2]
                  |L3.562|
;;;224    		if((cdmaDataToSend->timeCount >= 2000) || (cdmaDataToSend->datLength >= 650) )//发送时间到或者要发送的数组长度超过850个字节
000232  4877              LDR      r0,|L3.1040|
000234  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
000236  8840              LDRH     r0,[r0,#2]
000238  f5b06ffa          CMP      r0,#0x7d0
00023c  da06              BGE      |L3.588|
00023e  4874              LDR      r0,|L3.1040|
000240  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
000242  8800              LDRH     r0,[r0,#0]
000244  f240218a          MOV      r1,#0x28a
000248  4288              CMP      r0,r1
00024a  db6e              BLT      |L3.810|
                  |L3.588|
;;;225    		{
;;;226    			cdmaDataToSend->datLength = FRAME_HEAD_LEN + varOperation.datOKLeng;
00024c  4872              LDR      r0,|L3.1048|
00024e  f8b00096          LDRH     r0,[r0,#0x96]  ; varOperation
000252  301b              ADDS     r0,r0,#0x1b
000254  496e              LDR      r1,|L3.1040|
000256  6809              LDR      r1,[r1,#0]  ; cdmaDataToSend
000258  8008              STRH     r0,[r1,#0]
;;;227    			varOperation.datOKLeng = 0;
00025a  2000              MOVS     r0,#0
00025c  496e              LDR      r1,|L3.1048|
00025e  f8a10096          STRH     r0,[r1,#0x96]
;;;228    			
;;;229    			MemLog(cdmaDataToSend);                //todo：这两行代码用于调试时监控，真正产品的时候可以注释掉
000262  486b              LDR      r0,|L3.1040|
000264  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
000266  f7fffffe          BL       MemLog
;;;230    			J1939DataLog();
00026a  f7fffffe          BL       J1939DataLog
;;;231    		
;;;232    			OSMutexPend(CDMASendMutex,0,&err);     //提高优先级，独占此包数据
00026e  466a              MOV      r2,sp
000270  2100              MOVS     r1,#0
000272  4873              LDR      r0,|L3.1088|
000274  6800              LDR      r0,[r0,#0]  ; CDMASendMutex
000276  f7fffffe          BL       OSMutexPend
;;;233    			//将日志报文打包
;;;234    			if(cdmaLogData->top <= 250)
00027a  4866              LDR      r0,|L3.1044|
00027c  6800              LDR      r0,[r0,#0]  ; cdmaLogData
00027e  8800              LDRH     r0,[r0,#0]
000280  28fa              CMP      r0,#0xfa
000282  dc53              BGT      |L3.812|
;;;235    			{
;;;236    				cdmaDataToSend->data[cdmaDataToSend->datLength++] = (uint8_t)cdmaLogData->top + 3;
000284  4863              LDR      r0,|L3.1044|
000286  6800              LDR      r0,[r0,#0]  ; cdmaLogData
000288  7800              LDRB     r0,[r0,#0]
00028a  1cc0              ADDS     r0,r0,#3
00028c  b2c1              UXTB     r1,r0
00028e  4860              LDR      r0,|L3.1040|
000290  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
000292  8802              LDRH     r2,[r0,#0]
000294  485e              LDR      r0,|L3.1040|
000296  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
000298  8800              LDRH     r0,[r0,#0]
00029a  1c40              ADDS     r0,r0,#1
00029c  4b5c              LDR      r3,|L3.1040|
00029e  681b              LDR      r3,[r3,#0]  ; cdmaDataToSend
0002a0  8018              STRH     r0,[r3,#0]
0002a2  485b              LDR      r0,|L3.1040|
0002a4  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
0002a6  6840              LDR      r0,[r0,#4]
0002a8  5481              STRB     r1,[r0,r2]
;;;237    				cdmaDataToSend->data[cdmaDataToSend->datLength++] = 0x50;
0002aa  2150              MOVS     r1,#0x50
0002ac  4858              LDR      r0,|L3.1040|
0002ae  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
0002b0  8802              LDRH     r2,[r0,#0]
0002b2  4857              LDR      r0,|L3.1040|
0002b4  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
0002b6  8800              LDRH     r0,[r0,#0]
0002b8  1c40              ADDS     r0,r0,#1
0002ba  4b55              LDR      r3,|L3.1040|
0002bc  681b              LDR      r3,[r3,#0]  ; cdmaDataToSend
0002be  8018              STRH     r0,[r3,#0]
0002c0  4853              LDR      r0,|L3.1040|
0002c2  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
0002c4  6840              LDR      r0,[r0,#4]
0002c6  5481              STRB     r1,[r0,r2]
;;;238    				cdmaDataToSend->data[cdmaDataToSend->datLength++] = 0x03;
0002c8  2203              MOVS     r2,#3
0002ca  4851              LDR      r0,|L3.1040|
0002cc  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
0002ce  8801              LDRH     r1,[r0,#0]
0002d0  484f              LDR      r0,|L3.1040|
0002d2  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
0002d4  8800              LDRH     r0,[r0,#0]
0002d6  1c40              ADDS     r0,r0,#1
0002d8  4b4d              LDR      r3,|L3.1040|
0002da  681b              LDR      r3,[r3,#0]  ; cdmaDataToSend
0002dc  8018              STRH     r0,[r3,#0]
0002de  484c              LDR      r0,|L3.1040|
0002e0  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
0002e2  6840              LDR      r0,[r0,#4]
0002e4  5442              STRB     r2,[r0,r1]
;;;239    				
;;;240    				memcpy(&cdmaDataToSend->data[cdmaDataToSend->datLength],cdmaLogData->base,cdmaLogData->top);
0002e6  4b4a              LDR      r3,|L3.1040|
0002e8  681b              LDR      r3,[r3,#0]  ; cdmaDataToSend
0002ea  685b              LDR      r3,[r3,#4]
0002ec  f8dfc120          LDR      r12,|L3.1040|
0002f0  f8dcc000          LDR      r12,[r12,#0]  ; cdmaDataToSend
0002f4  f8bcc000          LDRH     r12,[r12,#0]
0002f8  eb03000c          ADD      r0,r3,r12
0002fc  4b45              LDR      r3,|L3.1044|
0002fe  681b              LDR      r3,[r3,#0]  ; cdmaLogData
000300  881a              LDRH     r2,[r3,#0]
000302  4b44              LDR      r3,|L3.1044|
000304  681b              LDR      r3,[r3,#0]  ; cdmaLogData
000306  6859              LDR      r1,[r3,#4]
000308  f7fffffe          BL       __aeabi_memcpy
;;;241    				cdmaDataToSend->datLength += cdmaLogData->top;
00030c  4840              LDR      r0,|L3.1040|
00030e  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
000310  8800              LDRH     r0,[r0,#0]
000312  4940              LDR      r1,|L3.1044|
000314  6809              LDR      r1,[r1,#0]  ; cdmaLogData
000316  8809              LDRH     r1,[r1,#0]
000318  4408              ADD      r0,r0,r1
00031a  493d              LDR      r1,|L3.1040|
00031c  6809              LDR      r1,[r1,#0]  ; cdmaDataToSend
00031e  8008              STRH     r0,[r1,#0]
;;;242    				Store_Clear(cdmaLogData);
000320  483c              LDR      r0,|L3.1044|
000322  6800              LDR      r0,[r0,#0]  ; cdmaLogData
000324  f7fffffe          BL       Store_Clear
000328  e040              B        |L3.940|
                  |L3.810|
00032a  e189              B        |L3.1600|
                  |L3.812|
;;;243    			}
;;;244    			else
;;;245    			{
;;;246    				cdmaDataToSend->data[cdmaDataToSend->datLength++] = 253;
00032c  22fd              MOVS     r2,#0xfd
00032e  4838              LDR      r0,|L3.1040|
000330  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
000332  8801              LDRH     r1,[r0,#0]
000334  4836              LDR      r0,|L3.1040|
000336  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
000338  8800              LDRH     r0,[r0,#0]
00033a  1c40              ADDS     r0,r0,#1
00033c  4b34              LDR      r3,|L3.1040|
00033e  681b              LDR      r3,[r3,#0]  ; cdmaDataToSend
000340  8018              STRH     r0,[r3,#0]
000342  4833              LDR      r0,|L3.1040|
000344  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
000346  6840              LDR      r0,[r0,#4]
000348  5442              STRB     r2,[r0,r1]
;;;247    				cdmaDataToSend->data[cdmaDataToSend->datLength++] = 0x50;
00034a  2250              MOVS     r2,#0x50
00034c  4830              LDR      r0,|L3.1040|
00034e  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
000350  8801              LDRH     r1,[r0,#0]
000352  482f              LDR      r0,|L3.1040|
000354  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
000356  8800              LDRH     r0,[r0,#0]
000358  1c40              ADDS     r0,r0,#1
00035a  4b2d              LDR      r3,|L3.1040|
00035c  681b              LDR      r3,[r3,#0]  ; cdmaDataToSend
00035e  8018              STRH     r0,[r3,#0]
000360  482b              LDR      r0,|L3.1040|
000362  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
000364  6840              LDR      r0,[r0,#4]
000366  5442              STRB     r2,[r0,r1]
;;;248    				cdmaDataToSend->data[cdmaDataToSend->datLength++] = 0x03;
000368  2103              MOVS     r1,#3
00036a  4829              LDR      r0,|L3.1040|
00036c  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
00036e  8802              LDRH     r2,[r0,#0]
000370  4827              LDR      r0,|L3.1040|
000372  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
000374  8800              LDRH     r0,[r0,#0]
000376  1c40              ADDS     r0,r0,#1
000378  4b25              LDR      r3,|L3.1040|
00037a  681b              LDR      r3,[r3,#0]  ; cdmaDataToSend
00037c  8018              STRH     r0,[r3,#0]
00037e  4824              LDR      r0,|L3.1040|
000380  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
000382  6840              LDR      r0,[r0,#4]
000384  5481              STRB     r1,[r0,r2]
;;;249    				Store_Getdates(cdmaLogData,&cdmaDataToSend -> data[cdmaDataToSend->datLength],250);
000386  4822              LDR      r0,|L3.1040|
000388  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
00038a  6840              LDR      r0,[r0,#4]
00038c  4a20              LDR      r2,|L3.1040|
00038e  6812              LDR      r2,[r2,#0]  ; cdmaDataToSend
000390  8812              LDRH     r2,[r2,#0]
000392  1881              ADDS     r1,r0,r2
000394  22fa              MOVS     r2,#0xfa
000396  481f              LDR      r0,|L3.1044|
000398  6800              LDR      r0,[r0,#0]  ; cdmaLogData
00039a  f7fffffe          BL       Store_Getdates
;;;250    				cdmaDataToSend->datLength += 250;
00039e  481c              LDR      r0,|L3.1040|
0003a0  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
0003a2  8800              LDRH     r0,[r0,#0]
0003a4  30fa              ADDS     r0,r0,#0xfa
0003a6  491a              LDR      r1,|L3.1040|
0003a8  6809              LDR      r1,[r1,#0]  ; cdmaDataToSend
0003aa  8008              STRH     r0,[r1,#0]
                  |L3.940|
;;;251    			}
;;;252    			if(varOperation.pidSendFlag == 3)
0003ac  481a              LDR      r0,|L3.1048|
0003ae  f89000a3          LDRB     r0,[r0,#0xa3]  ; varOperation
0003b2  2803              CMP      r0,#3
0003b4  d12a              BNE      |L3.1036|
;;;253    			{
;;;254    				ptrPIDdate = Mem_malloc(200);
0003b6  20c8              MOVS     r0,#0xc8
0003b8  f7fffffe          BL       Mem_malloc
0003bc  4604              MOV      r4,r0
;;;255    				ptrPIDdate[0] = 3;
0003be  2103              MOVS     r1,#3
0003c0  7021              STRB     r1,[r4,#0]
;;;256    				ptrPIDdate[1] = 0x50;
0003c2  2150              MOVS     r1,#0x50
0003c4  7061              STRB     r1,[r4,#1]
;;;257    				ptrPIDdate[2] = 0x25;
0003c6  2125              MOVS     r1,#0x25
0003c8  70a1              STRB     r1,[r4,#2]
;;;258    				for(i = 0;i < varOperation.pidNum; i++)
0003ca  2500              MOVS     r5,#0
0003cc  e0a3              B        |L3.1302|
                  |L3.974|
;;;259    				{
;;;260    					memcpy(&ptrPIDdate[ptrPIDdate[0]],&pPid[i][1],pPid[i][1]);
0003ce  4b45              LDR      r3,|L3.1252|
0003d0  f8533025          LDR      r3,[r3,r5,LSL #2]
0003d4  785a              LDRB     r2,[r3,#1]
0003d6  4b43              LDR      r3,|L3.1252|
0003d8  f8533025          LDR      r3,[r3,r5,LSL #2]
0003dc  1c59              ADDS     r1,r3,#1
0003de  7823              LDRB     r3,[r4,#0]
0003e0  1918              ADDS     r0,r3,r4
0003e2  f7fffffe          BL       __aeabi_memcpy
;;;261    					ptrPIDdate[0] += pPid[i][1];
0003e6  7820              LDRB     r0,[r4,#0]
0003e8  493e              LDR      r1,|L3.1252|
0003ea  f8511025          LDR      r1,[r1,r5,LSL #2]
0003ee  7849              LDRB     r1,[r1,#1]
0003f0  4408              ADD      r0,r0,r1
0003f2  7020              STRB     r0,[r4,#0]
;;;262    					if(i == bag*30)
0003f4  ebc61006          RSB      r0,r6,r6,LSL #4
0003f8  ebb50f40          CMP      r5,r0,LSL #1
0003fc  d107              BNE      |L3.1038|
;;;263    					{
;;;264    						memcpy(&cdmaDataToSend->data[cdmaDataToSend->datLength],ptrPIDdate,ptrPIDdate[0]);
0003fe  4904              LDR      r1,|L3.1040|
000400  6809              LDR      r1,[r1,#0]  ; cdmaDataToSend
000402  6849              LDR      r1,[r1,#4]
000404  4b02              LDR      r3,|L3.1040|
000406  681b              LDR      r3,[r3,#0]  ; cdmaDataToSend
000408  881b              LDRH     r3,[r3,#0]
00040a  e06d              B        |L3.1256|
                  |L3.1036|
00040c  e0c7              B        |L3.1438|
                  |L3.1038|
00040e  e080              B        |L3.1298|
                  |L3.1040|
                          DCD      cdmaDataToSend
                  |L3.1044|
                          DCD      cdmaLogData
                  |L3.1048|
                          DCD      varOperation
                  |L3.1052|
                          DCD      usbRecBuf
                  |L3.1056|
                          DCD      USBRecieveQ
                  |L3.1060|
                          DCD      usbSendBuf
                  |L3.1064|
                          DCD      USBSendQ
                  |L3.1068|
                          DCD      USB_TASK_STK+0x1fc
                  |L3.1072|
                          DCD      USBUpdataTask
                  |L3.1076|
                          DCD      beepSem
                  |L3.1080|
                          DCD      LoginMes
                  |L3.1084|
                          DCD      sendMsg
                  |L3.1088|
                          DCD      CDMASendMutex
                  |L3.1092|
                          DCD      CDMAPowerMutex
                  |L3.1096|
                          DCD      CANSendMutex
                  |L3.1100|
                          DCD      cdmaRecBuf
                  |L3.1104|
                          DCD      CDMARecieveQ
                  |L3.1108|
                          DCD      cdmaSendBuf
                  |L3.1112|
                          DCD      CDMASendQ
                  |L3.1116|
                          DCD      ZIPRecBuf
                  |L3.1120|
                          DCD      ZIPRecv_Q
                  |L3.1124|
                          DCD      gpsRecBuf
                  |L3.1128|
                          DCD      receGPSQ
                  |L3.1132|
                          DCD      canSendBuf
                  |L3.1136|
                          DCD      canSendQ
                  |L3.1140|
                          DCD      canRecBuf
                  |L3.1144|
                          DCD      canRecieveQ
                  |L3.1148|
                          DCD      canJ1939Buf
                  |L3.1152|
                          DCD      canJ1939Q
                  |L3.1156|
                          DCD      POWER_TASK_STK+0x1fc
                  |L3.1160|
                          DCD      PowerDeal
                  |L3.1164|
                          DCD      CDMA_TASK_STK+0x1fc
                  |L3.1168|
                          DCD      CDMATask
                  |L3.1172|
                          DCD      CDMARecv_TASK_STK+0x2cc
                  |L3.1176|
                          DCD      CDMARecvTask
                  |L3.1180|
                          DCD      GPS_TASK_STK+0x1fc
                  |L3.1184|
                          DCD      GPSTask
                  |L3.1188|
                          DCD      OBD_ONOFF_TASK_STK+0x1fc
                  |L3.1192|
                          DCD      OBD_ON_OFFDeal
                  |L3.1196|
                          DCD      OBD_TASK_STK+0x1fc
                  |L3.1200|
                          DCD      OBDTask
                  |L3.1204|
                          DCD      J1939_TASK_STK+0x1fc
                  |L3.1208|
                          DCD      DealJ1939Date
                  |L3.1212|
                          DCD      SAVEFULE_TASK_STK+0x1fc
                  |L3.1216|
                          DCD      SaveFuleTask
                  |L3.1220|
                          DCD      CDMA_LED_STK+0x13c
                  |L3.1224|
                          DCD      CDMALEDTask
                  |L3.1228|
                          DCD      GPS_LED_STK+0x13c
                  |L3.1232|
                          DCD      GPSLEDTask
                  |L3.1236|
                          DCD      OBD_LED_STK+0x13c
                  |L3.1240|
                          DCD      OBDLEDTask
                  |L3.1244|
                          DCD      BEEP_STK+0x13c
                  |L3.1248|
                          DCD      BeepTask
                  |L3.1252|
                          DCD      pPid
                  |L3.1256|
0004e8  18c8              ADDS     r0,r1,r3
0004ea  7822              LDRB     r2,[r4,#0]
0004ec  4621              MOV      r1,r4
0004ee  f7fffffe          BL       __aeabi_memcpy
;;;265    						cdmaDataToSend->datLength += ptrPIDdate[0];
0004f2  4854              LDR      r0,|L3.1604|
0004f4  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
0004f6  8800              LDRH     r0,[r0,#0]
0004f8  7821              LDRB     r1,[r4,#0]
0004fa  4408              ADD      r0,r0,r1
0004fc  4951              LDR      r1,|L3.1604|
0004fe  6809              LDR      r1,[r1,#0]  ; cdmaDataToSend
000500  8008              STRH     r0,[r1,#0]
;;;266    						ptrPIDdate[0] = 3;
000502  2003              MOVS     r0,#3
000504  7020              STRB     r0,[r4,#0]
;;;267    						ptrPIDdate[1] = 0x50;
000506  2050              MOVS     r0,#0x50
000508  7060              STRB     r0,[r4,#1]
;;;268    						ptrPIDdate[2] = 0x25;
00050a  2025              MOVS     r0,#0x25
00050c  70a0              STRB     r0,[r4,#2]
;;;269    						bag++;
00050e  1c70              ADDS     r0,r6,#1
000510  b2c6              UXTB     r6,r0
                  |L3.1298|
000512  1c68              ADDS     r0,r5,#1              ;258
000514  b2c5              UXTB     r5,r0                 ;258
                  |L3.1302|
000516  484c              LDR      r0,|L3.1608|
000518  f8b00078          LDRH     r0,[r0,#0x78]         ;258  ; varOperation
00051c  42a8              CMP      r0,r5                 ;258
00051e  f73faf56          BGT      |L3.974|
;;;270    					}
;;;271    				}
;;;272    				if(i == varOperation.pidNum && i != bag*30)
000522  4849              LDR      r0,|L3.1608|
000524  f8b00078          LDRH     r0,[r0,#0x78]  ; varOperation
000528  42a8              CMP      r0,r5
00052a  d117              BNE      |L3.1372|
00052c  ebc61006          RSB      r0,r6,r6,LSL #4
000530  ebb50f40          CMP      r5,r0,LSL #1
000534  d012              BEQ      |L3.1372|
;;;273    				{
;;;274    					memcpy(&cdmaDataToSend->data[cdmaDataToSend->datLength],ptrPIDdate,ptrPIDdate[0]);
000536  4943              LDR      r1,|L3.1604|
000538  6809              LDR      r1,[r1,#0]  ; cdmaDataToSend
00053a  6849              LDR      r1,[r1,#4]
00053c  4b41              LDR      r3,|L3.1604|
00053e  681b              LDR      r3,[r3,#0]  ; cdmaDataToSend
000540  881b              LDRH     r3,[r3,#0]
000542  18c8              ADDS     r0,r1,r3
000544  7822              LDRB     r2,[r4,#0]
000546  4621              MOV      r1,r4
000548  f7fffffe          BL       __aeabi_memcpy
;;;275    					cdmaDataToSend->datLength += ptrPIDdate[0];
00054c  483d              LDR      r0,|L3.1604|
00054e  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
000550  8800              LDRH     r0,[r0,#0]
000552  7821              LDRB     r1,[r4,#0]
000554  4408              ADD      r0,r0,r1
000556  493b              LDR      r1,|L3.1604|
000558  6809              LDR      r1,[r1,#0]  ; cdmaDataToSend
00055a  8008              STRH     r0,[r1,#0]
                  |L3.1372|
;;;276    				}
;;;277    				ptrPIDdate[0] = 3;
00055c  2003              MOVS     r0,#3
00055e  7020              STRB     r0,[r4,#0]
;;;278    				ptrPIDdate[1] = 0x50;
000560  2050              MOVS     r0,#0x50
000562  7060              STRB     r0,[r4,#1]
;;;279    				ptrPIDdate[2] = 0x26;
000564  2026              MOVS     r0,#0x26
000566  70a0              STRB     r0,[r4,#2]
;;;280    				memcpy(&cdmaDataToSend->data[cdmaDataToSend->datLength],ptrPIDdate,ptrPIDdate[0]);
000568  4936              LDR      r1,|L3.1604|
00056a  6809              LDR      r1,[r1,#0]  ; cdmaDataToSend
00056c  6849              LDR      r1,[r1,#4]
00056e  4b35              LDR      r3,|L3.1604|
000570  681b              LDR      r3,[r3,#0]  ; cdmaDataToSend
000572  881b              LDRH     r3,[r3,#0]
000574  18c8              ADDS     r0,r1,r3
000576  7822              LDRB     r2,[r4,#0]
000578  4621              MOV      r1,r4
00057a  f7fffffe          BL       __aeabi_memcpy
;;;281    				cdmaDataToSend->datLength += ptrPIDdate[0];
00057e  4831              LDR      r0,|L3.1604|
000580  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
000582  8800              LDRH     r0,[r0,#0]
000584  7821              LDRB     r1,[r4,#0]
000586  4408              ADD      r0,r0,r1
000588  492e              LDR      r1,|L3.1604|
00058a  6809              LDR      r1,[r1,#0]  ; cdmaDataToSend
00058c  8008              STRH     r0,[r1,#0]
;;;282    				Mem_free(ptrPIDdate);
00058e  4620              MOV      r0,r4
000590  f7fffffe          BL       Mem_free
;;;283    				varOperation.pidSendFlag = 1;
000594  2001              MOVS     r0,#1
000596  492c              LDR      r1,|L3.1608|
000598  f88100a3          STRB     r0,[r1,#0xa3]
;;;284    				bag = 1;
00059c  2601              MOVS     r6,#1
                  |L3.1438|
;;;285    			}
;;;286    			for(i=100;i<102;i++)          //GPS 信息和 清故障码
00059e  2564              MOVS     r5,#0x64
0005a0  e02b              B        |L3.1530|
                  |L3.1442|
;;;287    			{
;;;288    				if(pPid[i][0] > 3)
0005a2  482a              LDR      r0,|L3.1612|
0005a4  f8500025          LDR      r0,[r0,r5,LSL #2]
0005a8  7800              LDRB     r0,[r0,#0]
0005aa  2803              CMP      r0,#3
0005ac  dd23              BLE      |L3.1526|
;;;289    				{
;;;290    					memcpy(&cdmaDataToSend->data[cdmaDataToSend->datLength],pPid[i],pPid[i][0]);
0005ae  4b25              LDR      r3,|L3.1604|
0005b0  681b              LDR      r3,[r3,#0]  ; cdmaDataToSend
0005b2  685b              LDR      r3,[r3,#4]
0005b4  f8dfc08c          LDR      r12,|L3.1604|
0005b8  f8dcc000          LDR      r12,[r12,#0]  ; cdmaDataToSend
0005bc  f8bcc000          LDRH     r12,[r12,#0]
0005c0  eb03000c          ADD      r0,r3,r12
0005c4  4b21              LDR      r3,|L3.1612|
0005c6  f8533025          LDR      r3,[r3,r5,LSL #2]
0005ca  781a              LDRB     r2,[r3,#0]
0005cc  4b1f              LDR      r3,|L3.1612|
0005ce  f8531025          LDR      r1,[r3,r5,LSL #2]
0005d2  f7fffffe          BL       __aeabi_memcpy
;;;291    					cdmaDataToSend->datLength += pPid[i][0];
0005d6  481b              LDR      r0,|L3.1604|
0005d8  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
0005da  8800              LDRH     r0,[r0,#0]
0005dc  491b              LDR      r1,|L3.1612|
0005de  f8511025          LDR      r1,[r1,r5,LSL #2]
0005e2  7809              LDRB     r1,[r1,#0]
0005e4  4408              ADD      r0,r0,r1
0005e6  4917              LDR      r1,|L3.1604|
0005e8  6809              LDR      r1,[r1,#0]  ; cdmaDataToSend
0005ea  8008              STRH     r0,[r1,#0]
;;;292    					pPid[i][0] = 3;
0005ec  2003              MOVS     r0,#3
0005ee  4917              LDR      r1,|L3.1612|
0005f0  f8511025          LDR      r1,[r1,r5,LSL #2]
0005f4  7008              STRB     r0,[r1,#0]
                  |L3.1526|
0005f6  1c68              ADDS     r0,r5,#1              ;286
0005f8  b2c5              UXTB     r5,r0                 ;286
                  |L3.1530|
0005fa  2d66              CMP      r5,#0x66              ;286
0005fc  dbd1              BLT      |L3.1442|
;;;293    				}
;;;294    			}
;;;295    			CDMASendDataPack(cdmaDataToSend);
0005fe  4811              LDR      r0,|L3.1604|
000600  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
000602  f7fffffe          BL       CDMASendDataPack
;;;296    			err = OSQPost(CDMASendQ,cdmaDataToSend);
000606  480f              LDR      r0,|L3.1604|
000608  6801              LDR      r1,[r0,#0]  ; cdmaDataToSend
00060a  4811              LDR      r0,|L3.1616|
00060c  6800              LDR      r0,[r0,#0]  ; CDMASendQ
00060e  f7fffffe          BL       OSQPost
000612  9000              STR      r0,[sp,#0]
;;;297    			if(err != OS_ERR_NONE)     //发送失败
000614  f89d0000          LDRB     r0,[sp,#0]
000618  b140              CBZ      r0,|L3.1580|
;;;298    			{
;;;299    				cdmaDataToSend->datLength = 27;
00061a  201b              MOVS     r0,#0x1b
00061c  4909              LDR      r1,|L3.1604|
00061e  6809              LDR      r1,[r1,#0]  ; cdmaDataToSend
000620  8008              STRH     r0,[r1,#0]
;;;300    				cdmaDataToSend->timeCount = 0;
000622  2000              MOVS     r0,#0
000624  4907              LDR      r1,|L3.1604|
000626  6809              LDR      r1,[r1,#0]  ; cdmaDataToSend
000628  8048              STRH     r0,[r1,#2]
00062a  e005              B        |L3.1592|
                  |L3.1580|
;;;301    			}
;;;302    			else
;;;303    				cdmaDataToSend = CDMNSendDataInit( 1000 );
00062c  f44f707a          MOV      r0,#0x3e8
000630  f7fffffe          BL       CDMNSendDataInit
000634  4903              LDR      r1,|L3.1604|
000636  6008              STR      r0,[r1,#0]  ; cdmaDataToSend
                  |L3.1592|
;;;304    			OSMutexPost( CDMASendMutex );
000638  4806              LDR      r0,|L3.1620|
00063a  6800              LDR      r0,[r0,#0]  ; CDMASendMutex
00063c  f7fffffe          BL       OSMutexPost
                  |L3.1600|
000640  bf00              NOP                            ;206
                  |L3.1602|
000642  e5a3              B        |L3.396|
;;;305    		}
;;;306    	}
;;;307    }
;;;308    void SendFaultCmd(void)
                          ENDP

                  |L3.1604|
                          DCD      cdmaDataToSend
                  |L3.1608|
                          DCD      varOperation
                  |L3.1612|
                          DCD      pPid
                  |L3.1616|
                          DCD      CDMASendQ
                  |L3.1620|
                          DCD      CDMASendMutex

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;104    ****************************************************************/
;;;105    int main(void )
000000  b510              PUSH     {r4,lr}
;;;106    {
;;;107    	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
000002  f44f60a0          MOV      r0,#0x500
000006  f7fffffe          BL       NVIC_PriorityGroupConfig
;;;108    	
;;;109    	OSInit(); 
00000a  f7fffffe          BL       OSInit
;;;110    	
;;;111    	MemBuf_Init();   //建立内存块
00000e  f7fffffe          BL       MemBuf_Init
;;;112    	
;;;113    	sendCDMA_Q = Cir_Queue_Init(1000);//CDMA 串口发送 循环队列 缓冲区
000012  f44f707a          MOV      r0,#0x3e8
000016  f7fffffe          BL       Cir_Queue_Init
00001a  490f              LDR      r1,|L4.88|
00001c  6008              STR      r0,[r1,#0]  ; sendCDMA_Q
;;;114    	receCDMA_S = Store_Init(1020);    //CDMA 串口接收 数据堆   缓冲区
00001e  f44f707f          MOV      r0,#0x3fc
000022  f7fffffe          BL       Store_Init
000026  490d              LDR      r1,|L4.92|
000028  6008              STR      r0,[r1,#0]  ; receCDMA_S
;;;115    	
;;;116    	sendGPS_Q = Cir_Queue_Init(230);  //GPS  串口发送 循环队列 缓冲区
00002a  20e6              MOVS     r0,#0xe6
00002c  f7fffffe          BL       Cir_Queue_Init
000030  490b              LDR      r1,|L4.96|
000032  6008              STR      r0,[r1,#0]  ; sendGPS_Q
;;;117    	receGPS_S = Store_Init(230);      //GPS  串口接收 数据堆   缓冲区
000034  20e6              MOVS     r0,#0xe6
000036  f7fffffe          BL       Store_Init
00003a  490a              LDR      r1,|L4.100|
00003c  6008              STR      r0,[r1,#0]  ; receGPS_S
;;;118    	
;;;119    	SystemBspInit();                  //硬件初始化 
00003e  f7fffffe          BL       SystemBspInit
;;;120    	
;;;121    	OSTaskCreate(StartTask,(void *)0,(OS_STK *)&START_TASK_STK[START_STK_SIZE-1],START_TASK_PRIO );
000042  230a              MOVS     r3,#0xa
000044  4a08              LDR      r2,|L4.104|
000046  2100              MOVS     r1,#0
000048  4808              LDR      r0,|L4.108|
00004a  f7fffffe          BL       OSTaskCreate
;;;122    	
;;;123    	OSStart();	 
00004e  f7fffffe          BL       OSStart
;;;124    }
000052  2000              MOVS     r0,#0
000054  bd10              POP      {r4,pc}
;;;125    
                          ENDP

000056  0000              DCW      0x0000
                  |L4.88|
                          DCD      sendCDMA_Q
                  |L4.92|
                          DCD      receCDMA_S
                  |L4.96|
                          DCD      sendGPS_Q
                  |L4.100|
                          DCD      receGPS_S
                  |L4.104|
                          DCD      START_TASK_STK+0x1fc
                  |L4.108|
                          DCD      StartTask

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  cdmaRecBuf
                          %        40
                  cdmaSendBuf
                          %        20
                  ZIPRecBuf
                          %        20
                  gpsRecBuf
                          %        40
                  canRecBuf
                          %        80
                  canSendBuf
                          %        800
                  canJ1939Buf
                          %        80
                  usbRecBuf
                          %        40
                  usbSendBuf
                          %        20
                  USB_TASK_STK
                          %        512
                  START_TASK_STK
                          %        512
                  CDMA_TASK_STK
                          %        512
                  CDMARecv_TASK_STK
                          %        720
                  GPS_TASK_STK
                          %        512
                  OBD_ONOFF_TASK_STK
                          %        512
                  OBD_TASK_STK
                          %        512
                  J1939_TASK_STK
                          %        512
                  SAVEFULE_TASK_STK
                          %        512
                  POWER_TASK_STK
                          %        512
                  CDMA_LED_STK
                          %        320
                  GPS_LED_STK
                          %        320
                  OBD_LED_STK
                          %        320
                  BEEP_STK
                          %        320
                  sysUpdateVar
                          %        16
                  varOperation
                          %        168
                  canDataConfig
                          %        27
                  carAllRecord
                          %        92
                  gpsMC
                          %        107
                  strengthFuel
                          %        83
                  strengthFuelFlash
                          %        83

                          AREA ||.data||, DATA, ALIGN=2

                  sendMsg
                          DCD      0x00000000
                  beepSem
                          DCD      0x00000000
                  LoginMes
                          DCD      0x00000000
                  CDMASendMutex
                          DCD      0x00000000
                  CDMAPowerMutex
                          DCD      0x00000000
                  CANSendMutex
                          DCD      0x00000000
                  CDMARecieveQ
                          DCD      0x00000000
                  CDMASendQ
                          DCD      0x00000000
                  ZIPRecv_Q
                          DCD      0x00000000
                  receGPSQ
                          DCD      0x00000000
                  canRecieveQ
                          DCD      0x00000000
                  canSendQ
                          DCD      0x00000000
                  canJ1939Q
                          DCD      0x00000000
                  USBSendQ
                          DCD      0x00000000
                  USBRecieveQ
                          DCD      0x00000000
                  sendCDMA_Q
                          DCD      0x00000000
                  receCDMA_S
                          DCD      0x00000000
                  sendGPS_Q
                          DCD      0x00000000
                  receGPS_S
                          DCD      0x00000000
                  cdmaDataToSend
                          DCD      0x00000000
                  cdmaLogData
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_4f4e89dc____REV16|
#line 465 "D:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.2.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_4f4e89dc____REV16| PROC
#line 466

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_4f4e89dc____REVSH|
#line 480
|__asm___6_main_c_4f4e89dc____REVSH| PROC
#line 481

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_4f4e89dc____RRX|
#line 667
|__asm___6_main_c_4f4e89dc____RRX| PROC
#line 668

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
