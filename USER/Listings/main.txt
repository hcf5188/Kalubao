; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\obj\main.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=..\obj\main.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\OBD -I..\SYSTEM -I..\USER -I..\LIB\inc -I..\UCOSII\CONFIG -I..\UCOSII\PORT -I..\UCOSII\CORE -I..\HAEDWARE -I..\GPS -I..\CDMA -I..\DEAL -I..\USB\CONFIG -I..\USB\STM32_USB-FS-Device_Driver\inc -I..\CORE -I.\RTE\_Project -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=524 -D_RTE_ -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\main.crf main.c]
                          THUMB

                          AREA ||i.StartTask||, CODE, READONLY, ALIGN=2

                  StartTask PROC
;;;120    
;;;121    void StartTask(void *pdata)
000000  b508              PUSH     {r3,lr}
;;;122    {
;;;123    	uint8_t err;
;;;124    	uint8_t i = 0;
000002  2400              MOVS     r4,#0
;;;125    	uint8_t *ptrOBDSend;
;;;126    	uint32_t timeToSendLogin  = 0;
000004  2600              MOVS     r6,#0
;;;127    	OS_CPU_SR cpu_sr=0;
000006  2700              MOVS     r7,#0
;;;128    	pdata = pdata; 
000008  bf00              NOP      
;;;129    	
;;;130    	cdmaDataToSend = CDMNSendDataInit(1000);//初始化获取发向CDMA的消息结构体
00000a  f44f707a          MOV      r0,#0x3e8
00000e  f7fffffe          BL       CDMNSendDataInit
000012  49ad              LDR      r1,|L1.712|
000014  6008              STR      r0,[r1,#0]  ; cdmaDataToSend
;;;131    	if(varOperation.USB_NormalMode == 1)//USB 升级模式
000016  48ad              LDR      r0,|L1.716|
000018  7a00              LDRB     r0,[r0,#8]  ; varOperation
00001a  2801              CMP      r0,#1
00001c  d115              BNE      |L1.74|
;;;132    	{
;;;133    		USBRecieveQ = OSQCreate(&usbRecBuf[0],USBRECBUF_SIZE);  //建立USB接收 消息队列
00001e  210a              MOVS     r1,#0xa
000020  48ab              LDR      r0,|L1.720|
000022  f7fffffe          BL       OSQCreate
000026  49ab              LDR      r1,|L1.724|
000028  6008              STR      r0,[r1,#0]  ; USBRecieveQ
;;;134    		USBSendQ    = OSQCreate(&usbSendBuf[0],USBSENDBUF_SIZE);//建立USB发送 消息队列
00002a  2105              MOVS     r1,#5
00002c  48aa              LDR      r0,|L1.728|
00002e  f7fffffe          BL       OSQCreate
000032  49aa              LDR      r1,|L1.732|
000034  6008              STR      r0,[r1,#0]  ; USBSendQ
;;;135    		
;;;136    		OSTaskCreate(USBUpdataTask,(void *)0,(OS_STK*)&USB_TASK_STK[USB_STK_SIZE-1],USB_TASK_PRIO);
000036  2309              MOVS     r3,#9
000038  4aa9              LDR      r2,|L1.736|
00003a  2100              MOVS     r1,#0
00003c  48a9              LDR      r0,|L1.740|
00003e  f7fffffe          BL       OSTaskCreate
;;;137    		OSTaskSuspend(OS_PRIO_SELF);//挂起起始任务
000042  20ff              MOVS     r0,#0xff
000044  f7fffffe          BL       OSTaskSuspend
000048  e086              B        |L1.344|
                  |L1.74|
;;;138    	}else
;;;139    	{
;;;140    		OS_ENTER_CRITICAL();			//进入临界区(无法被中断打断)    
00004a  f7fffffe          BL       OS_CPU_SR_Save
00004e  4607              MOV      r7,r0
;;;141    /***********************************  创建任务间通信的消息     ***************************************************/				
;;;142    		beepSem   = OSSemCreate(1);       //蜂鸣器信号量（目前没啥用，留着以后扩展蜂鸣器响的方式）
000050  2001              MOVS     r0,#1
000052  f7fffffe          BL       OSSemCreate
000056  49a4              LDR      r1,|L1.744|
000058  6008              STR      r0,[r1,#0]  ; beepSem
;;;143    		LoginMes  = OSSemCreate(0);       //登录报文信号量
00005a  2000              MOVS     r0,#0
00005c  f7fffffe          BL       OSSemCreate
000060  49a2              LDR      r1,|L1.748|
000062  6008              STR      r0,[r1,#0]  ; LoginMes
;;;144    		sendMsg   = OSSemCreate(0);       //创建CDMA是否正在发送消息的信号量
000064  2000              MOVS     r0,#0
000066  f7fffffe          BL       OSSemCreate
00006a  49a1              LDR      r1,|L1.752|
00006c  6008              STR      r0,[r1,#0]  ; sendMsg
;;;145    		
;;;146    		CDMASendMutex  = OSMutexCreate(CDMA_SEND_PRIO,&err);       //向CDMA发送缓冲区发送数据 独占 互斥型信号量
00006e  4669              MOV      r1,sp
000070  2008              MOVS     r0,#8
000072  f7fffffe          BL       OSMutexCreate
000076  499f              LDR      r1,|L1.756|
000078  6008              STR      r0,[r1,#0]  ; CDMASendMutex
;;;147    		CDMAPowerMutex = OSMutexCreate(CDMAPOWER_PRIO,&err);       //CDMA电源互斥信号量管理
00007a  4669              MOV      r1,sp
00007c  2007              MOVS     r0,#7
00007e  f7fffffe          BL       OSMutexCreate
000082  499d              LDR      r1,|L1.760|
000084  6008              STR      r0,[r1,#0]  ; CDMAPowerMutex
;;;148    		
;;;149    		CDMARecieveQ = OSQCreate(&cdmaRecBuf[0],CDMARECBUF_SIZE);  //建立CDMA接收 消息队列
000086  210a              MOVS     r1,#0xa
000088  489c              LDR      r0,|L1.764|
00008a  f7fffffe          BL       OSQCreate
00008e  499c              LDR      r1,|L1.768|
000090  6008              STR      r0,[r1,#0]  ; CDMARecieveQ
;;;150    		CDMASendQ    = OSQCreate(&cdmaSendBuf[0],CDMASENDBUF_SIZE);//建立CDMA发送 消息队列
000092  2105              MOVS     r1,#5
000094  489b              LDR      r0,|L1.772|
000096  f7fffffe          BL       OSQCreate
00009a  499b              LDR      r1,|L1.776|
00009c  6008              STR      r0,[r1,#0]  ; CDMASendQ
;;;151    		ZIPRecv_Q    = OSQCreate(&ZIPRecBuf[0],ZIPRECVBUF_SIZE);   //建立“ZIPRECV”处理消息队列
00009e  2105              MOVS     r1,#5
0000a0  489a              LDR      r0,|L1.780|
0000a2  f7fffffe          BL       OSQCreate
0000a6  499a              LDR      r1,|L1.784|
0000a8  6008              STR      r0,[r1,#0]  ; ZIPRecv_Q
;;;152    		
;;;153    		receGPSQ     = OSQCreate(&gpsRecBuf[0],GPSRECBUF_SIZE);    //建立GPS接收 消息队列
0000aa  210a              MOVS     r1,#0xa
0000ac  4899              LDR      r0,|L1.788|
0000ae  f7fffffe          BL       OSQCreate
0000b2  4999              LDR      r1,|L1.792|
0000b4  6008              STR      r0,[r1,#0]  ; receGPSQ
;;;154    		canSendQ    = OSQCreate(&canSendBuf[0],CANSENDBUF_SIZE);   //卡路宝向ECU发送指令的消息队列
0000b6  2150              MOVS     r1,#0x50
0000b8  4898              LDR      r0,|L1.796|
0000ba  f7fffffe          BL       OSQCreate
0000be  4998              LDR      r1,|L1.800|
0000c0  6008              STR      r0,[r1,#0]  ; canSendQ
;;;155    		canRecieveQ = OSQCreate(&canRecBuf[0],CANRECBUF_SIZE);     //卡路宝从ECU接收指令的循环队列
0000c2  2114              MOVS     r1,#0x14
0000c4  4897              LDR      r0,|L1.804|
0000c6  f7fffffe          BL       OSQCreate
0000ca  4997              LDR      r1,|L1.808|
0000cc  6008              STR      r0,[r1,#0]  ; canRecieveQ
;;;156    		canJ1939Q   = OSQCreate(&canJ1939Buf[0],CANJ1939BUF_SIZE); //ECU向卡路宝发送J1939消息队列
0000ce  2114              MOVS     r1,#0x14
0000d0  4896              LDR      r0,|L1.812|
0000d2  f7fffffe          BL       OSQCreate
0000d6  4996              LDR      r1,|L1.816|
0000d8  6008              STR      r0,[r1,#0]  ; canJ1939Q
;;;157    /*************************************      创建各任务           ********************************************************/		
;;;158    		OSTaskCreate(PowerDeal,(void *)0,(OS_STK*)&POWER_TASK_STK[POWER_STK_SIZE-1],POWER_TASK_PRIO);
0000da  2311              MOVS     r3,#0x11
0000dc  4a95              LDR      r2,|L1.820|
0000de  2100              MOVS     r1,#0
0000e0  4895              LDR      r0,|L1.824|
0000e2  f7fffffe          BL       OSTaskCreate
;;;159    		
;;;160    		OSTaskCreate(CDMATask,(void *)0,(OS_STK*)&CDMA_TASK_STK[CDMA_STK_SIZE-1],CDMA_TASK_PRIO);
0000e6  230b              MOVS     r3,#0xb
0000e8  4a94              LDR      r2,|L1.828|
0000ea  2100              MOVS     r1,#0
0000ec  4894              LDR      r0,|L1.832|
0000ee  f7fffffe          BL       OSTaskCreate
;;;161    		
;;;162    		OSTaskCreate(CDMARecvTask,(void *)0,(OS_STK*)&CDMARecv_TASK_STK[CDMARecv_STK_SIZE-1],CDMARevc_TASK_PRIO);	
0000f2  230c              MOVS     r3,#0xc
0000f4  4a93              LDR      r2,|L1.836|
0000f6  2100              MOVS     r1,#0
0000f8  4893              LDR      r0,|L1.840|
0000fa  f7fffffe          BL       OSTaskCreate
;;;163    		
;;;164    		OSTaskCreate(GPSTask, (void *)0,(OS_STK*)&GPS_TASK_STK[GPS_STK_SIZE-1],GPS_TASK_PRIO);	
0000fe  230e              MOVS     r3,#0xe
000100  4a92              LDR      r2,|L1.844|
000102  2100              MOVS     r1,#0
000104  4892              LDR      r0,|L1.848|
000106  f7fffffe          BL       OSTaskCreate
;;;165    		
;;;166    		OSTaskCreate(OBDTask, (void *)0,(OS_STK*)&OBD_TASK_STK[OBD_STK_SIZE-1],OBD_TASK_PRIO);
00010a  230f              MOVS     r3,#0xf
00010c  4a91              LDR      r2,|L1.852|
00010e  2100              MOVS     r1,#0
000110  4891              LDR      r0,|L1.856|
000112  f7fffffe          BL       OSTaskCreate
;;;167    		OSTaskCreate(DealJ1939Date, (void *)0,(OS_STK*)&J1939_TASK_STK[J1939_STK_SIZE-1],J1939_TASK_PRIO);//创建J1939处理任务		
000116  2310              MOVS     r3,#0x10
000118  4a90              LDR      r2,|L1.860|
00011a  2100              MOVS     r1,#0
00011c  4890              LDR      r0,|L1.864|
00011e  f7fffffe          BL       OSTaskCreate
;;;168    		
;;;169    		OSTaskCreate(CDMALEDTask,(void *)0,(OS_STK*)&CDMA_LED_STK[LED_STK_SIZE-1],CDMA_LED_PRIO);
000122  2314              MOVS     r3,#0x14
000124  4a8f              LDR      r2,|L1.868|
000126  2100              MOVS     r1,#0
000128  488f              LDR      r0,|L1.872|
00012a  f7fffffe          BL       OSTaskCreate
;;;170    		OSTaskCreate(GPSLEDTask, (void *)0,(OS_STK*)&GPS_LED_STK[LED_STK_SIZE-1], GPS_LED_PRIO);		
00012e  2315              MOVS     r3,#0x15
000130  4a8e              LDR      r2,|L1.876|
000132  2100              MOVS     r1,#0
000134  488e              LDR      r0,|L1.880|
000136  f7fffffe          BL       OSTaskCreate
;;;171    		OSTaskCreate(OBDLEDTask, (void *)0,(OS_STK*)&OBD_LED_STK[LED_STK_SIZE-1], OBD_LED_PRIO);	
00013a  2316              MOVS     r3,#0x16
00013c  4a8d              LDR      r2,|L1.884|
00013e  2100              MOVS     r1,#0
000140  488d              LDR      r0,|L1.888|
000142  f7fffffe          BL       OSTaskCreate
;;;172    		OSTaskCreate(BeepTask,   (void *)0,(OS_STK*)&BEEP_STK[BEEP_STK_SIZE-1],   BEEP_TASK_PRIO);
000146  2317              MOVS     r3,#0x17
000148  4a8c              LDR      r2,|L1.892|
00014a  2100              MOVS     r1,#0
00014c  488c              LDR      r0,|L1.896|
00014e  f7fffffe          BL       OSTaskCreate
;;;173    		
;;;174    		OS_EXIT_CRITICAL();				//退出临界区(可以被中断打断)
000152  4638              MOV      r0,r7
000154  f7fffffe          BL       OS_CPU_SR_Restore
                  |L1.344|
;;;175    	}
;;;176    	while(1)
000158  e0b5              B        |L1.710|
                  |L1.346|
;;;177    	{
;;;178    		OSTimeDlyHMSM(0,0,0,4);         //4ms扫描一次
00015a  2304              MOVS     r3,#4
00015c  2200              MOVS     r2,#0
00015e  4611              MOV      r1,r2
000160  4610              MOV      r0,r2
000162  f7fffffe          BL       OSTimeDlyHMSM
;;;179    		if(varOperation.isDataFlow == 1)
000166  4859              LDR      r0,|L1.716|
000168  f890002d          LDRB     r0,[r0,#0x2d]  ; varOperation
00016c  2801              CMP      r0,#1
00016e  d100              BNE      |L1.370|
;;;180    			continue;
000170  e0a9              B        |L1.710|
                  |L1.370|
;;;181    		timeToSendLogin++;
000172  1c76              ADDS     r6,r6,#1
;;;182    		if(timeToSendLogin % 45000 == 0)//定期3分钟发送登录报文
000174  f64a70c8          MOV      r0,#0xafc8
000178  fbb6f1f0          UDIV     r1,r6,r0
00017c  fb006011          MLS      r0,r0,r1,r6
000180  b908              CBNZ     r0,|L1.390|
;;;183    		{
;;;184    			LoginDataSend(); 
000182  f7fffffe          BL       LoginDataSend
                  |L1.390|
;;;185    		}
;;;186    		if(varOperation.canTest == 2)   //CAN的波特率和ID均已确定
000186  4851              LDR      r0,|L1.716|
000188  f8b00090          LDRH     r0,[r0,#0x90]  ; varOperation
00018c  2802              CMP      r0,#2
00018e  d154              BNE      |L1.570|
;;;187    		{
;;;188    			for(i=0;i<varOperation.pidNum;i++)//todo:PID指令的数目 后期需要配置
000190  2400              MOVS     r4,#0
000192  e04d              B        |L1.560|
                  |L1.404|
;;;189    			{
;;;190    				(ptrPIDAllDat + i)->timeCount += 4;
000194  eb040084          ADD      r0,r4,r4,LSL #2
000198  eb0000c4          ADD      r0,r0,r4,LSL #3
00019c  4979              LDR      r1,|L1.900|
00019e  6809              LDR      r1,[r1,#0]  ; ptrPIDAllDat
0001a0  4408              ADD      r0,r0,r1
0001a2  8840              LDRH     r0,[r0,#2]
0001a4  1d00              ADDS     r0,r0,#4
0001a6  b281              UXTH     r1,r0
0001a8  eb040084          ADD      r0,r4,r4,LSL #2
0001ac  eb0000c4          ADD      r0,r0,r4,LSL #3
0001b0  4a74              LDR      r2,|L1.900|
0001b2  6812              LDR      r2,[r2,#0]  ; ptrPIDAllDat
0001b4  4410              ADD      r0,r0,r2
0001b6  8041              STRH     r1,[r0,#2]
;;;191    				if((ptrPIDAllDat + i)->timeCount < (ptrPIDAllDat + i)->period)
0001b8  eb040084          ADD      r0,r4,r4,LSL #2
0001bc  eb0000c4          ADD      r0,r0,r4,LSL #3
0001c0  4970              LDR      r1,|L1.900|
0001c2  6809              LDR      r1,[r1,#0]  ; ptrPIDAllDat
0001c4  4408              ADD      r0,r0,r1
0001c6  8840              LDRH     r0,[r0,#2]
0001c8  eb040184          ADD      r1,r4,r4,LSL #2
0001cc  eb0101c4          ADD      r1,r1,r4,LSL #3
0001d0  4a6c              LDR      r2,|L1.900|
0001d2  6812              LDR      r2,[r2,#0]  ; ptrPIDAllDat
0001d4  4411              ADD      r1,r1,r2
0001d6  8809              LDRH     r1,[r1,#0]
0001d8  4288              CMP      r0,r1
0001da  da00              BGE      |L1.478|
;;;192    					continue;
0001dc  e026              B        |L1.556|
                  |L1.478|
;;;193    				(ptrPIDAllDat + i)->timeCount = 0;
0001de  2000              MOVS     r0,#0
0001e0  eb040184          ADD      r1,r4,r4,LSL #2
0001e4  eb0101c4          ADD      r1,r1,r4,LSL #3
0001e8  4a66              LDR      r2,|L1.900|
0001ea  6812              LDR      r2,[r2,#0]  ; ptrPIDAllDat
0001ec  4411              ADD      r1,r1,r2
0001ee  8048              STRH     r0,[r1,#2]
;;;194    				ptrOBDSend = Mem_malloc(9);
0001f0  2009              MOVS     r0,#9
0001f2  f7fffffe          BL       Mem_malloc
0001f6  4605              MOV      r5,r0
;;;195    				memcpy(ptrOBDSend,(ptrPIDAllDat + i)->data,9);
0001f8  eb040084          ADD      r0,r4,r4,LSL #2
0001fc  eb0000c4          ADD      r0,r0,r4,LSL #3
000200  4960              LDR      r1,|L1.900|
000202  6809              LDR      r1,[r1,#0]  ; ptrPIDAllDat
000204  4408              ADD      r0,r0,r1
000206  6841              LDR      r1,[r0,#4]
000208  6029              STR      r1,[r5,#0]
00020a  6881              LDR      r1,[r0,#8]
00020c  6069              STR      r1,[r5,#4]
00020e  7b00              LDRB     r0,[r0,#0xc]
000210  7228              STRB     r0,[r5,#8]
;;;196    				err = OSQPost(canSendQ,ptrOBDSend);//向OBD推送要发送的PID指令
000212  4629              MOV      r1,r5
000214  4842              LDR      r0,|L1.800|
000216  6800              LDR      r0,[r0,#0]  ; canSendQ
000218  f7fffffe          BL       OSQPost
00021c  9000              STR      r0,[sp,#0]
;;;197    				if(err != OS_ERR_NONE)
00021e  f89d0000          LDRB     r0,[sp,#0]
000222  b110              CBZ      r0,|L1.554|
;;;198    					Mem_free(ptrOBDSend);          //推送不成功，需要释放内存块
000224  4628              MOV      r0,r5
000226  f7fffffe          BL       Mem_free
                  |L1.554|
00022a  bf00              NOP                            ;192
                  |L1.556|
00022c  1c60              ADDS     r0,r4,#1              ;188
00022e  b2c4              UXTB     r4,r0                 ;188
                  |L1.560|
000230  4826              LDR      r0,|L1.716|
000232  f8b00078          LDRH     r0,[r0,#0x78]         ;188  ; varOperation
000236  42a0              CMP      r0,r4                 ;188
000238  dcac              BGT      |L1.404|
                  |L1.570|
;;;199    			}
;;;200    		}
;;;201    		if(cdmaDataToSend->datLength > 36)//要发送的数据不为空
00023a  4823              LDR      r0,|L1.712|
00023c  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
00023e  8800              LDRH     r0,[r0,#0]
000240  2824              CMP      r0,#0x24
000242  dd06              BLE      |L1.594|
;;;202    			cdmaDataToSend->timeCount += 4;
000244  4820              LDR      r0,|L1.712|
000246  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
000248  8840              LDRH     r0,[r0,#2]
00024a  1d00              ADDS     r0,r0,#4
00024c  491e              LDR      r1,|L1.712|
00024e  6809              LDR      r1,[r1,#0]  ; cdmaDataToSend
000250  8048              STRH     r0,[r1,#2]
                  |L1.594|
;;;203    		if((cdmaDataToSend->timeCount >= 3000) || (cdmaDataToSend->datLength >= 850))//发送时间到或者要发送的数组长度超过850个字节
000252  481d              LDR      r0,|L1.712|
000254  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
000256  8840              LDRH     r0,[r0,#2]
000258  f64031b8          MOV      r1,#0xbb8
00025c  4288              CMP      r0,r1
00025e  da06              BGE      |L1.622|
000260  4819              LDR      r0,|L1.712|
000262  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
000264  8800              LDRH     r0,[r0,#0]
000266  f2403152          MOV      r1,#0x352
00026a  4288              CMP      r0,r1
00026c  db2a              BLT      |L1.708|
                  |L1.622|
;;;204    		{
;;;205    			MemLog(cdmaDataToSend);//todo：调试时用，产品的时候要注释掉
00026e  4816              LDR      r0,|L1.712|
000270  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
000272  f7fffffe          BL       MemLog
;;;206    			
;;;207    			OSMutexPend(CDMASendMutex,0,&err);
000276  466a              MOV      r2,sp
000278  2100              MOVS     r1,#0
00027a  481e              LDR      r0,|L1.756|
00027c  6800              LDR      r0,[r0,#0]  ; CDMASendMutex
00027e  f7fffffe          BL       OSMutexPend
;;;208    			
;;;209    			CDMASendDataPack(cdmaDataToSend);
000282  4811              LDR      r0,|L1.712|
000284  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
000286  f7fffffe          BL       CDMASendDataPack
;;;210    			
;;;211    			err = OSQPost(CDMASendQ,cdmaDataToSend);
00028a  480f              LDR      r0,|L1.712|
00028c  6801              LDR      r1,[r0,#0]  ; cdmaDataToSend
00028e  481e              LDR      r0,|L1.776|
000290  6800              LDR      r0,[r0,#0]  ; CDMASendQ
000292  f7fffffe          BL       OSQPost
000296  9000              STR      r0,[sp,#0]
;;;212    			if(err != OS_ERR_NONE)
000298  f89d0000          LDRB     r0,[sp,#0]
00029c  b140              CBZ      r0,|L1.688|
;;;213    			{
;;;214    				cdmaDataToSend->datLength = 27;
00029e  201b              MOVS     r0,#0x1b
0002a0  4909              LDR      r1,|L1.712|
0002a2  6809              LDR      r1,[r1,#0]  ; cdmaDataToSend
0002a4  8008              STRH     r0,[r1,#0]
;;;215    				cdmaDataToSend->timeCount = 0;
0002a6  2000              MOVS     r0,#0
0002a8  4907              LDR      r1,|L1.712|
0002aa  6809              LDR      r1,[r1,#0]  ; cdmaDataToSend
0002ac  8048              STRH     r0,[r1,#2]
0002ae  e005              B        |L1.700|
                  |L1.688|
;;;216    			}
;;;217    			else
;;;218    			{
;;;219    				cdmaDataToSend = CDMNSendDataInit(1000);
0002b0  f44f707a          MOV      r0,#0x3e8
0002b4  f7fffffe          BL       CDMNSendDataInit
0002b8  4903              LDR      r1,|L1.712|
0002ba  6008              STR      r0,[r1,#0]  ; cdmaDataToSend
                  |L1.700|
;;;220    			}	
;;;221    			
;;;222    			OSMutexPost(CDMASendMutex);
0002bc  480d              LDR      r0,|L1.756|
0002be  6800              LDR      r0,[r0,#0]  ; CDMASendMutex
0002c0  f7fffffe          BL       OSMutexPost
                  |L1.708|
0002c4  bf00              NOP                            ;180
                  |L1.710|
0002c6  e748              B        |L1.346|
;;;223    		}
;;;224    	}
;;;225    }
;;;226    
                          ENDP

                  |L1.712|
                          DCD      cdmaDataToSend
                  |L1.716|
                          DCD      varOperation
                  |L1.720|
                          DCD      usbRecBuf
                  |L1.724|
                          DCD      USBRecieveQ
                  |L1.728|
                          DCD      usbSendBuf
                  |L1.732|
                          DCD      USBSendQ
                  |L1.736|
                          DCD      USB_TASK_STK+0x1fc
                  |L1.740|
                          DCD      USBUpdataTask
                  |L1.744|
                          DCD      beepSem
                  |L1.748|
                          DCD      LoginMes
                  |L1.752|
                          DCD      sendMsg
                  |L1.756|
                          DCD      CDMASendMutex
                  |L1.760|
                          DCD      CDMAPowerMutex
                  |L1.764|
                          DCD      cdmaRecBuf
                  |L1.768|
                          DCD      CDMARecieveQ
                  |L1.772|
                          DCD      cdmaSendBuf
                  |L1.776|
                          DCD      CDMASendQ
                  |L1.780|
                          DCD      ZIPRecBuf
                  |L1.784|
                          DCD      ZIPRecv_Q
                  |L1.788|
                          DCD      gpsRecBuf
                  |L1.792|
                          DCD      receGPSQ
                  |L1.796|
                          DCD      canSendBuf
                  |L1.800|
                          DCD      canSendQ
                  |L1.804|
                          DCD      canRecBuf
                  |L1.808|
                          DCD      canRecieveQ
                  |L1.812|
                          DCD      canJ1939Buf
                  |L1.816|
                          DCD      canJ1939Q
                  |L1.820|
                          DCD      POWER_TASK_STK+0x1fc
                  |L1.824|
                          DCD      PowerDeal
                  |L1.828|
                          DCD      CDMA_TASK_STK+0x1fc
                  |L1.832|
                          DCD      CDMATask
                  |L1.836|
                          DCD      CDMARecv_TASK_STK+0x2cc
                  |L1.840|
                          DCD      CDMARecvTask
                  |L1.844|
                          DCD      GPS_TASK_STK+0x1fc
                  |L1.848|
                          DCD      GPSTask
                  |L1.852|
                          DCD      OBD_TASK_STK+0x1fc
                  |L1.856|
                          DCD      OBDTask
                  |L1.860|
                          DCD      J1939_TASK_STK+0x1fc
                  |L1.864|
                          DCD      DealJ1939Date
                  |L1.868|
                          DCD      CDMA_LED_STK+0x13c
                  |L1.872|
                          DCD      CDMALEDTask
                  |L1.876|
                          DCD      GPS_LED_STK+0x13c
                  |L1.880|
                          DCD      GPSLEDTask
                  |L1.884|
                          DCD      OBD_LED_STK+0x13c
                  |L1.888|
                          DCD      OBDLEDTask
                  |L1.892|
                          DCD      BEEP_STK+0x13c
                  |L1.896|
                          DCD      BeepTask
                  |L1.900|
                          DCD      ptrPIDAllDat

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;90     ****************************************************************/
;;;91     int main(void )
000000  b510              PUSH     {r4,lr}
;;;92     {
;;;93     	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
000002  f44f60a0          MOV      r0,#0x500
000006  f7fffffe          BL       NVIC_PriorityGroupConfig
;;;94     	
;;;95     	OSInit(); 
00000a  f7fffffe          BL       OSInit
;;;96     	
;;;97     	MemBuf_Init();   //建立内存块
00000e  f7fffffe          BL       MemBuf_Init
;;;98     	
;;;99     	sendCDMA_Q = Cir_Queue_Init(1000);//CDMA 串口发送 循环队列 缓冲区
000012  f44f707a          MOV      r0,#0x3e8
000016  f7fffffe          BL       Cir_Queue_Init
00001a  4910              LDR      r1,|L2.92|
00001c  6008              STR      r0,[r1,#0]  ; sendCDMA_Q
;;;100    	receCDMA_S = Store_Init(1020);    //CDMA 串口接收 数据堆   缓冲区
00001e  f44f707f          MOV      r0,#0x3fc
000022  f7fffffe          BL       Store_Init
000026  490e              LDR      r1,|L2.96|
000028  6008              STR      r0,[r1,#0]  ; receCDMA_S
;;;101    	
;;;102    	sendGPS_Q = Cir_Queue_Init(230);  //GPS  串口发送 循环队列 缓冲区
00002a  20e6              MOVS     r0,#0xe6
00002c  f7fffffe          BL       Cir_Queue_Init
000030  490c              LDR      r1,|L2.100|
000032  6008              STR      r0,[r1,#0]  ; sendGPS_Q
;;;103    	receGPS_S = Store_Init(230);      //GPS  串口接收 数据堆   缓冲区
000034  20e6              MOVS     r0,#0xe6
000036  f7fffffe          BL       Store_Init
00003a  490b              LDR      r1,|L2.104|
00003c  6008              STR      r0,[r1,#0]  ; receGPS_S
;;;104    	
;;;105    	SystemBspInit();                  //硬件初始化 
00003e  f7fffffe          BL       SystemBspInit
;;;106    	CARVarInit();                     //与车辆行驶相关结构体的初始化
000042  f7fffffe          BL       CARVarInit
;;;107    	OSTaskCreate(StartTask,(void *)0,(OS_STK *)&START_TASK_STK[START_STK_SIZE-1],START_TASK_PRIO );
000046  230a              MOVS     r3,#0xa
000048  4a08              LDR      r2,|L2.108|
00004a  2100              MOVS     r1,#0
00004c  4808              LDR      r0,|L2.112|
00004e  f7fffffe          BL       OSTaskCreate
;;;108    	
;;;109    	OSStart();	 
000052  f7fffffe          BL       OSStart
;;;110    }
000056  2000              MOVS     r0,#0
000058  bd10              POP      {r4,pc}
;;;111    
                          ENDP

00005a  0000              DCW      0x0000
                  |L2.92|
                          DCD      sendCDMA_Q
                  |L2.96|
                          DCD      receCDMA_S
                  |L2.100|
                          DCD      sendGPS_Q
                  |L2.104|
                          DCD      receGPS_S
                  |L2.108|
                          DCD      START_TASK_STK+0x1fc
                  |L2.112|
                          DCD      StartTask

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  cdmaRecBuf
                          %        40
                  cdmaSendBuf
                          %        20
                  ZIPRecBuf
                          %        20
                  gpsRecBuf
                          %        40
                  canRecBuf
                          %        80
                  canSendBuf
                          %        320
                  canJ1939Buf
                          %        80
                  usbRecBuf
                          %        40
                  usbSendBuf
                          %        20
                  USB_TASK_STK
                          %        512
                  START_TASK_STK
                          %        512
                  CDMA_TASK_STK
                          %        512
                  CDMARecv_TASK_STK
                          %        720
                  GPS_TASK_STK
                          %        512
                  OBD_TASK_STK
                          %        512
                  J1939_TASK_STK
                          %        512
                  POWER_TASK_STK
                          %        512
                  CDMA_LED_STK
                          %        320
                  GPS_LED_STK
                          %        320
                  OBD_LED_STK
                          %        320
                  BEEP_STK
                          %        320
                  sysUpdateVar
                          %        28
                  varOperation
                          %        147
                  carAllRecord
                          %        89
                  gpsMC
                          %        107

                          AREA ||.data||, DATA, ALIGN=2

                  sendMsg
                          DCD      0x00000000
                  beepSem
                          DCD      0x00000000
                  LoginMes
                          DCD      0x00000000
                  CDMASendMutex
                          DCD      0x00000000
                  CDMAPowerMutex
                          DCD      0x00000000
                  CDMARecieveQ
                          DCD      0x00000000
                  CDMASendQ
                          DCD      0x00000000
                  ZIPRecv_Q
                          DCD      0x00000000
                  receGPSQ
                          DCD      0x00000000
                  canRecieveQ
                          DCD      0x00000000
                  canSendQ
                          DCD      0x00000000
                  canJ1939Q
                          DCD      0x00000000
                  USBSendQ
                          DCD      0x00000000
                  USBRecieveQ
                          DCD      0x00000000
                  sendCDMA_Q
                          DCD      0x00000000
                  receCDMA_S
                          DCD      0x00000000
                  sendGPS_Q
                          DCD      0x00000000
                  receGPS_S
                          DCD      0x00000000
                  cdmaDataToSend
                          DCD      0x00000000

                  __ARM_use_no_argv EQU 0
