; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\obj\main.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=..\obj\main.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\OBD -I..\SYSTEM -I..\USER -I..\LIB\inc -I..\UCOSII\CONFIG -I..\UCOSII\PORT -I..\UCOSII\CORE -I..\HAEDWARE -I..\GPS -I..\CDMA -I..\DEAL -I..\USB\CONFIG -I..\USB\STM32_USB-FS-Device_Driver\inc -I..\CORE -I.\RTE\_Project -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\5.2.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=524 -D_RTE_ -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\main.crf main.c]
                          THUMB

                          AREA ||i.StartTask||, CODE, READONLY, ALIGN=2

                  StartTask PROC
;;;124    
;;;125    void StartTask(void *pdata)
000000  b508              PUSH     {r3,lr}
;;;126    {
;;;127    	uint8_t err;
;;;128    	uint8_t i = 0;
000002  2400              MOVS     r4,#0
;;;129    	uint8_t *ptrOBDSend;
;;;130    	uint32_t timeToSendLogin  = 0;
000004  2600              MOVS     r6,#0
;;;131    	OS_CPU_SR cpu_sr=0;
000006  2700              MOVS     r7,#0
;;;132    	pdata = pdata; 
000008  bf00              NOP      
;;;133    	
;;;134    	cdmaDataToSend = CDMNSendDataInit(1000);//初始化获取发向CDMA的消息结构体
00000a  f44f707a          MOV      r0,#0x3e8
00000e  f7fffffe          BL       CDMNSendDataInit
000012  49a8              LDR      r1,|L1.692|
000014  6008              STR      r0,[r1,#0]  ; cdmaDataToSend
;;;135    	if(varOperation.USB_NormalMode == 1)//USB 升级模式
000016  48a8              LDR      r0,|L1.696|
000018  7a00              LDRB     r0,[r0,#8]  ; varOperation
00001a  2801              CMP      r0,#1
00001c  d115              BNE      |L1.74|
;;;136    	{
;;;137    		USBRecieveQ = OSQCreate(&usbRecBuf[0],USBRECBUF_SIZE);  //建立USB接收 消息队列
00001e  210a              MOVS     r1,#0xa
000020  48a6              LDR      r0,|L1.700|
000022  f7fffffe          BL       OSQCreate
000026  49a6              LDR      r1,|L1.704|
000028  6008              STR      r0,[r1,#0]  ; USBRecieveQ
;;;138    		USBSendQ    = OSQCreate(&usbSendBuf[0],USBSENDBUF_SIZE);//建立USB发送 消息队列
00002a  2105              MOVS     r1,#5
00002c  48a5              LDR      r0,|L1.708|
00002e  f7fffffe          BL       OSQCreate
000032  49a5              LDR      r1,|L1.712|
000034  6008              STR      r0,[r1,#0]  ; USBSendQ
;;;139    		
;;;140    		OSTaskCreate(USBUpdataTask,(void *)0,(OS_STK*)&USB_TASK_STK[USB_STK_SIZE-1],USB_TASK_PRIO);
000036  2309              MOVS     r3,#9
000038  4aa4              LDR      r2,|L1.716|
00003a  2100              MOVS     r1,#0
00003c  48a4              LDR      r0,|L1.720|
00003e  f7fffffe          BL       OSTaskCreate
;;;141    		OSTaskSuspend(OS_PRIO_SELF);//挂起起始任务
000042  20ff              MOVS     r0,#0xff
000044  f7fffffe          BL       OSTaskSuspend
000048  e086              B        |L1.344|
                  |L1.74|
;;;142    	}else
;;;143    	{
;;;144    		OS_ENTER_CRITICAL();			//进入临界区(无法被中断打断)    
00004a  f7fffffe          BL       OS_CPU_SR_Save
00004e  4607              MOV      r7,r0
;;;145    		
;;;146    /***********************************  创建任务间通信的消息     ***************************************************/				
;;;147    
;;;148    		beepSem   = OSSemCreate(1);       //蜂鸣器信号量（目前没啥用，留着以后扩展蜂鸣器响的方式）
000050  2001              MOVS     r0,#1
000052  f7fffffe          BL       OSSemCreate
000056  499f              LDR      r1,|L1.724|
000058  6008              STR      r0,[r1,#0]  ; beepSem
;;;149    		LoginMes  = OSSemCreate(0);       //登录报文信号量
00005a  2000              MOVS     r0,#0
00005c  f7fffffe          BL       OSSemCreate
000060  499d              LDR      r1,|L1.728|
000062  6008              STR      r0,[r1,#0]  ; LoginMes
;;;150    		sendMsg   = OSSemCreate(0);       //创建CDMA是否正在发送消息的信号量
000064  2000              MOVS     r0,#0
000066  f7fffffe          BL       OSSemCreate
00006a  499c              LDR      r1,|L1.732|
00006c  6008              STR      r0,[r1,#0]  ; sendMsg
;;;151    		
;;;152    		CDMASendMutex  = OSMutexCreate(CDMA_SEND_PRIO,&err);       //向CDMA发送缓冲区发送数据 独占 互斥型信号量
00006e  4669              MOV      r1,sp
000070  2008              MOVS     r0,#8
000072  f7fffffe          BL       OSMutexCreate
000076  499a              LDR      r1,|L1.736|
000078  6008              STR      r0,[r1,#0]  ; CDMASendMutex
;;;153    		CDMAPowerMutex = OSMutexCreate(CDMAPOWER_PRIO,&err);       //CDMA电源互斥信号量管理
00007a  4669              MOV      r1,sp
00007c  2007              MOVS     r0,#7
00007e  f7fffffe          BL       OSMutexCreate
000082  4998              LDR      r1,|L1.740|
000084  6008              STR      r0,[r1,#0]  ; CDMAPowerMutex
;;;154    		
;;;155    		CDMARecieveQ = OSQCreate(&cdmaRecBuf[0],CDMARECBUF_SIZE);  //建立CDMA接收 消息队列
000086  210a              MOVS     r1,#0xa
000088  4897              LDR      r0,|L1.744|
00008a  f7fffffe          BL       OSQCreate
00008e  4997              LDR      r1,|L1.748|
000090  6008              STR      r0,[r1,#0]  ; CDMARecieveQ
;;;156    		CDMASendQ    = OSQCreate(&cdmaSendBuf[0],CDMASENDBUF_SIZE);//建立CDMA发送 消息队列
000092  2105              MOVS     r1,#5
000094  4896              LDR      r0,|L1.752|
000096  f7fffffe          BL       OSQCreate
00009a  4996              LDR      r1,|L1.756|
00009c  6008              STR      r0,[r1,#0]  ; CDMASendQ
;;;157    		ZIPRecv_Q    = OSQCreate(&ZIPRecBuf[0],ZIPRECVBUF_SIZE);   //建立“ZIPRECV”处理消息队列
00009e  2105              MOVS     r1,#5
0000a0  4895              LDR      r0,|L1.760|
0000a2  f7fffffe          BL       OSQCreate
0000a6  4995              LDR      r1,|L1.764|
0000a8  6008              STR      r0,[r1,#0]  ; ZIPRecv_Q
;;;158    		
;;;159    		receGPSQ     = OSQCreate(&gpsRecBuf[0],GPSRECBUF_SIZE);    //建立GPS接收 消息队列
0000aa  210a              MOVS     r1,#0xa
0000ac  4894              LDR      r0,|L1.768|
0000ae  f7fffffe          BL       OSQCreate
0000b2  4994              LDR      r1,|L1.772|
0000b4  6008              STR      r0,[r1,#0]  ; receGPSQ
;;;160    		canSendQ    = OSQCreate(&canSendBuf[0],CANSENDBUF_SIZE);   //卡路宝向ECU发送指令的消息队列
0000b6  2150              MOVS     r1,#0x50
0000b8  4893              LDR      r0,|L1.776|
0000ba  f7fffffe          BL       OSQCreate
0000be  4993              LDR      r1,|L1.780|
0000c0  6008              STR      r0,[r1,#0]  ; canSendQ
;;;161    		canRecieveQ = OSQCreate(&canRecBuf[0],CANRECBUF_SIZE);     //卡路宝从ECU接收指令的循环队列
0000c2  2114              MOVS     r1,#0x14
0000c4  4892              LDR      r0,|L1.784|
0000c6  f7fffffe          BL       OSQCreate
0000ca  4992              LDR      r1,|L1.788|
0000cc  6008              STR      r0,[r1,#0]  ; canRecieveQ
;;;162    		canJ1939Q   = OSQCreate(&canJ1939Buf[0],CANJ1939BUF_SIZE); //ECU向卡路宝发送J1939消息队列
0000ce  2114              MOVS     r1,#0x14
0000d0  4891              LDR      r0,|L1.792|
0000d2  f7fffffe          BL       OSQCreate
0000d6  4991              LDR      r1,|L1.796|
0000d8  6008              STR      r0,[r1,#0]  ; canJ1939Q
;;;163    
;;;164    /*************************************      创建各任务           ********************************************************/		
;;;165    
;;;166    		OSTaskCreate(PowerDeal,(void *)0,(OS_STK*)&POWER_TASK_STK[POWER_STK_SIZE-1],POWER_TASK_PRIO);
0000da  2311              MOVS     r3,#0x11
0000dc  4a90              LDR      r2,|L1.800|
0000de  2100              MOVS     r1,#0
0000e0  4890              LDR      r0,|L1.804|
0000e2  f7fffffe          BL       OSTaskCreate
;;;167    		
;;;168    		OSTaskCreate(CDMATask,(void *)0,(OS_STK*)&CDMA_TASK_STK[CDMA_STK_SIZE-1],CDMA_TASK_PRIO);
0000e6  230b              MOVS     r3,#0xb
0000e8  4a8f              LDR      r2,|L1.808|
0000ea  2100              MOVS     r1,#0
0000ec  488f              LDR      r0,|L1.812|
0000ee  f7fffffe          BL       OSTaskCreate
;;;169    		
;;;170    		OSTaskCreate(CDMARecvTask,(void *)0,(OS_STK*)&CDMARecv_TASK_STK[CDMARecv_STK_SIZE-1],CDMARevc_TASK_PRIO);	
0000f2  230c              MOVS     r3,#0xc
0000f4  4a8e              LDR      r2,|L1.816|
0000f6  2100              MOVS     r1,#0
0000f8  488e              LDR      r0,|L1.820|
0000fa  f7fffffe          BL       OSTaskCreate
;;;171    
;;;172    		OSTaskCreate(GPSTask, (void *)0,(OS_STK*)&GPS_TASK_STK[GPS_STK_SIZE-1],GPS_TASK_PRIO);	
0000fe  230e              MOVS     r3,#0xe
000100  4a8d              LDR      r2,|L1.824|
000102  2100              MOVS     r1,#0
000104  488d              LDR      r0,|L1.828|
000106  f7fffffe          BL       OSTaskCreate
;;;173    
;;;174    		OSTaskCreate(OBDTask, (void *)0,(OS_STK*)&OBD_TASK_STK[OBD_STK_SIZE-1],OBD_TASK_PRIO);
00010a  230f              MOVS     r3,#0xf
00010c  4a8c              LDR      r2,|L1.832|
00010e  2100              MOVS     r1,#0
000110  488c              LDR      r0,|L1.836|
000112  f7fffffe          BL       OSTaskCreate
;;;175    		OSTaskCreate(DealJ1939Date, (void *)0,(OS_STK*)&J1939_TASK_STK[J1939_STK_SIZE-1],J1939_TASK_PRIO);//创建J1939处理任务		
000116  2310              MOVS     r3,#0x10
000118  4a8b              LDR      r2,|L1.840|
00011a  2100              MOVS     r1,#0
00011c  488b              LDR      r0,|L1.844|
00011e  f7fffffe          BL       OSTaskCreate
;;;176    		
;;;177    		OSTaskCreate(CDMALEDTask,(void *)0,(OS_STK*)&CDMA_LED_STK[LED_STK_SIZE-1],CDMA_LED_PRIO);
000122  2314              MOVS     r3,#0x14
000124  4a8a              LDR      r2,|L1.848|
000126  2100              MOVS     r1,#0
000128  488a              LDR      r0,|L1.852|
00012a  f7fffffe          BL       OSTaskCreate
;;;178    		OSTaskCreate(GPSLEDTask, (void *)0,(OS_STK*)&GPS_LED_STK[LED_STK_SIZE-1], GPS_LED_PRIO);		
00012e  2315              MOVS     r3,#0x15
000130  4a89              LDR      r2,|L1.856|
000132  2100              MOVS     r1,#0
000134  4889              LDR      r0,|L1.860|
000136  f7fffffe          BL       OSTaskCreate
;;;179    		OSTaskCreate(OBDLEDTask, (void *)0,(OS_STK*)&OBD_LED_STK[LED_STK_SIZE-1], OBD_LED_PRIO);	
00013a  2316              MOVS     r3,#0x16
00013c  4a88              LDR      r2,|L1.864|
00013e  2100              MOVS     r1,#0
000140  4888              LDR      r0,|L1.868|
000142  f7fffffe          BL       OSTaskCreate
;;;180    		OSTaskCreate(BeepTask,   (void *)0,(OS_STK*)&BEEP_STK[BEEP_STK_SIZE-1],   BEEP_TASK_PRIO);
000146  2317              MOVS     r3,#0x17
000148  4a87              LDR      r2,|L1.872|
00014a  2100              MOVS     r1,#0
00014c  4887              LDR      r0,|L1.876|
00014e  f7fffffe          BL       OSTaskCreate
;;;181    		
;;;182    		OS_EXIT_CRITICAL();				//退出临界区(可以被中断打断)
000152  4638              MOV      r0,r7
000154  f7fffffe          BL       OS_CPU_SR_Restore
                  |L1.344|
;;;183    	}
;;;184    	while(1)
000158  e0aa              B        |L1.688|
                  |L1.346|
;;;185    	{
;;;186    		OSTimeDlyHMSM(0,0,0,4);         //4ms扫描一次
00015a  2304              MOVS     r3,#4
00015c  2200              MOVS     r2,#0
00015e  4611              MOV      r1,r2
000160  4610              MOV      r0,r2
000162  f7fffffe          BL       OSTimeDlyHMSM
;;;187    		if(varOperation.isDataFlow == 1)
000166  4854              LDR      r0,|L1.696|
000168  f890002d          LDRB     r0,[r0,#0x2d]  ; varOperation
00016c  2801              CMP      r0,#1
00016e  d100              BNE      |L1.370|
;;;188    			continue;
000170  e09e              B        |L1.688|
                  |L1.370|
;;;189    		timeToSendLogin++;
000172  1c76              ADDS     r6,r6,#1
;;;190    		if(timeToSendLogin % 45000 == 0)//定期3分钟发送登录报文
000174  f64a70c8          MOV      r0,#0xafc8
000178  fbb6f1f0          UDIV     r1,r6,r0
00017c  fb006011          MLS      r0,r0,r1,r6
000180  b908              CBNZ     r0,|L1.390|
;;;191    		{
;;;192    			LoginDataSend(); 
000182  f7fffffe          BL       LoginDataSend
                  |L1.390|
;;;193    		}
;;;194    		if(varOperation.canTest == 2)   //CAN的波特率和ID均已确定
000186  484c              LDR      r0,|L1.696|
000188  f8b00090          LDRH     r0,[r0,#0x90]  ; varOperation
00018c  2802              CMP      r0,#2
00018e  d147              BNE      |L1.544|
;;;195    		{
;;;196    			for(i=0;i<varOperation.pidNum;i++)//todo:PID指令的数目 后期需要配置 varOperation.pidNum
000190  2400              MOVS     r4,#0
000192  e040              B        |L1.534|
                  |L1.404|
;;;197    			{
;;;198    				(ptrPIDAllDat + i)->timeCount += 4;
000194  eb041004          ADD      r0,r4,r4,LSL #4
000198  4975              LDR      r1,|L1.880|
00019a  6809              LDR      r1,[r1,#0]  ; ptrPIDAllDat
00019c  4408              ADD      r0,r0,r1
00019e  6840              LDR      r0,[r0,#4]
0001a0  1d00              ADDS     r0,r0,#4
0001a2  eb041104          ADD      r1,r4,r4,LSL #4
0001a6  4a72              LDR      r2,|L1.880|
0001a8  6812              LDR      r2,[r2,#0]  ; ptrPIDAllDat
0001aa  4411              ADD      r1,r1,r2
0001ac  6048              STR      r0,[r1,#4]
;;;199    				if((ptrPIDAllDat + i)->timeCount < (ptrPIDAllDat + i)->period)
0001ae  eb041004          ADD      r0,r4,r4,LSL #4
0001b2  496f              LDR      r1,|L1.880|
0001b4  6809              LDR      r1,[r1,#0]  ; ptrPIDAllDat
0001b6  4408              ADD      r0,r0,r1
0001b8  6840              LDR      r0,[r0,#4]
0001ba  eb041104          ADD      r1,r4,r4,LSL #4
0001be  4a6c              LDR      r2,|L1.880|
0001c0  6812              LDR      r2,[r2,#0]  ; ptrPIDAllDat
0001c2  4411              ADD      r1,r1,r2
0001c4  6809              LDR      r1,[r1,#0]
0001c6  4288              CMP      r0,r1
0001c8  d200              BCS      |L1.460|
;;;200    					continue;
0001ca  e022              B        |L1.530|
                  |L1.460|
;;;201    				(ptrPIDAllDat + i)->timeCount = 0;
0001cc  2100              MOVS     r1,#0
0001ce  eb041004          ADD      r0,r4,r4,LSL #4
0001d2  4a67              LDR      r2,|L1.880|
0001d4  6812              LDR      r2,[r2,#0]  ; ptrPIDAllDat
0001d6  4410              ADD      r0,r0,r2
0001d8  6041              STR      r1,[r0,#4]
;;;202    				ptrOBDSend = Mem_malloc(9);
0001da  2009              MOVS     r0,#9
0001dc  f7fffffe          BL       Mem_malloc
0001e0  4605              MOV      r5,r0
;;;203    				memcpy(ptrOBDSend,(ptrPIDAllDat + i)->data,9);
0001e2  eb041004          ADD      r0,r4,r4,LSL #4
0001e6  4962              LDR      r1,|L1.880|
0001e8  6809              LDR      r1,[r1,#0]  ; ptrPIDAllDat
0001ea  4408              ADD      r0,r0,r1
0001ec  6881              LDR      r1,[r0,#8]
0001ee  6029              STR      r1,[r5,#0]
0001f0  68c1              LDR      r1,[r0,#0xc]
0001f2  6069              STR      r1,[r5,#4]
0001f4  7c00              LDRB     r0,[r0,#0x10]
0001f6  7228              STRB     r0,[r5,#8]
;;;204    				err = OSQPost(canSendQ,ptrOBDSend);//向OBD推送要发送的PID指令
0001f8  4629              MOV      r1,r5
0001fa  4844              LDR      r0,|L1.780|
0001fc  6800              LDR      r0,[r0,#0]  ; canSendQ
0001fe  f7fffffe          BL       OSQPost
000202  9000              STR      r0,[sp,#0]
;;;205    				if(err != OS_ERR_NONE)
000204  f89d0000          LDRB     r0,[sp,#0]
000208  b110              CBZ      r0,|L1.528|
;;;206    					Mem_free(ptrOBDSend);          //推送不成功，需要释放内存块
00020a  4628              MOV      r0,r5
00020c  f7fffffe          BL       Mem_free
                  |L1.528|
000210  bf00              NOP                            ;200
                  |L1.530|
000212  1c60              ADDS     r0,r4,#1              ;196
000214  b2c4              UXTB     r4,r0                 ;196
                  |L1.534|
000216  4828              LDR      r0,|L1.696|
000218  f8b00078          LDRH     r0,[r0,#0x78]         ;196  ; varOperation
00021c  42a0              CMP      r0,r4                 ;196
00021e  dcb9              BGT      |L1.404|
                  |L1.544|
;;;207    			}
;;;208    		}
;;;209    		if(cdmaDataToSend->datLength > 36)         //要发送的数据不为空
000220  4824              LDR      r0,|L1.692|
000222  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
000224  8800              LDRH     r0,[r0,#0]
000226  2824              CMP      r0,#0x24
000228  dd06              BLE      |L1.568|
;;;210    			cdmaDataToSend->timeCount += 4;
00022a  4822              LDR      r0,|L1.692|
00022c  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
00022e  8840              LDRH     r0,[r0,#2]
000230  1d00              ADDS     r0,r0,#4
000232  4920              LDR      r1,|L1.692|
000234  6809              LDR      r1,[r1,#0]  ; cdmaDataToSend
000236  8048              STRH     r0,[r1,#2]
                  |L1.568|
;;;211    		if((cdmaDataToSend->timeCount >= 3000) || (cdmaDataToSend->datLength >= 850))//发送时间到或者要发送的数组长度超过850个字节
000238  481e              LDR      r0,|L1.692|
00023a  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
00023c  8840              LDRH     r0,[r0,#2]
00023e  f64031b8          MOV      r1,#0xbb8
000242  4288              CMP      r0,r1
000244  da06              BGE      |L1.596|
000246  481b              LDR      r0,|L1.692|
000248  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
00024a  8800              LDRH     r0,[r0,#0]
00024c  f2403152          MOV      r1,#0x352
000250  4288              CMP      r0,r1
000252  db2c              BLT      |L1.686|
                  |L1.596|
;;;212    		{
;;;213    			MemLog(cdmaDataToSend);                //todo：调试时用，产品的时候要注释掉
000254  4817              LDR      r0,|L1.692|
000256  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
000258  f7fffffe          BL       MemLog
;;;214    			J1939DataLog();                        
00025c  f7fffffe          BL       J1939DataLog
;;;215    			
;;;216    			OSMutexPend(CDMASendMutex,0,&err);
000260  466a              MOV      r2,sp
000262  2100              MOVS     r1,#0
000264  481e              LDR      r0,|L1.736|
000266  6800              LDR      r0,[r0,#0]  ; CDMASendMutex
000268  f7fffffe          BL       OSMutexPend
;;;217    			
;;;218    			CDMASendDataPack(cdmaDataToSend);
00026c  4811              LDR      r0,|L1.692|
00026e  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
000270  f7fffffe          BL       CDMASendDataPack
;;;219    			
;;;220    			err = OSQPost(CDMASendQ,cdmaDataToSend);
000274  480f              LDR      r0,|L1.692|
000276  6801              LDR      r1,[r0,#0]  ; cdmaDataToSend
000278  481e              LDR      r0,|L1.756|
00027a  6800              LDR      r0,[r0,#0]  ; CDMASendQ
00027c  f7fffffe          BL       OSQPost
000280  9000              STR      r0,[sp,#0]
;;;221    			if(err != OS_ERR_NONE)//发送失败
000282  f89d0000          LDRB     r0,[sp,#0]
000286  b140              CBZ      r0,|L1.666|
;;;222    			{
;;;223    				cdmaDataToSend->datLength = 27;
000288  201b              MOVS     r0,#0x1b
00028a  490a              LDR      r1,|L1.692|
00028c  6809              LDR      r1,[r1,#0]  ; cdmaDataToSend
00028e  8008              STRH     r0,[r1,#0]
;;;224    				cdmaDataToSend->timeCount = 0;
000290  2000              MOVS     r0,#0
000292  4908              LDR      r1,|L1.692|
000294  6809              LDR      r1,[r1,#0]  ; cdmaDataToSend
000296  8048              STRH     r0,[r1,#2]
000298  e005              B        |L1.678|
                  |L1.666|
;;;225    			}
;;;226    			else
;;;227    			{
;;;228    				cdmaDataToSend = CDMNSendDataInit(1000);
00029a  f44f707a          MOV      r0,#0x3e8
00029e  f7fffffe          BL       CDMNSendDataInit
0002a2  4904              LDR      r1,|L1.692|
0002a4  6008              STR      r0,[r1,#0]  ; cdmaDataToSend
                  |L1.678|
;;;229    			}	
;;;230    			
;;;231    			OSMutexPost(CDMASendMutex);
0002a6  480e              LDR      r0,|L1.736|
0002a8  6800              LDR      r0,[r0,#0]  ; CDMASendMutex
0002aa  f7fffffe          BL       OSMutexPost
                  |L1.686|
0002ae  bf00              NOP                            ;188
                  |L1.688|
0002b0  e753              B        |L1.346|
;;;232    		}
;;;233    	}
;;;234    }
;;;235    
                          ENDP

0002b2  0000              DCW      0x0000
                  |L1.692|
                          DCD      cdmaDataToSend
                  |L1.696|
                          DCD      varOperation
                  |L1.700|
                          DCD      usbRecBuf
                  |L1.704|
                          DCD      USBRecieveQ
                  |L1.708|
                          DCD      usbSendBuf
                  |L1.712|
                          DCD      USBSendQ
                  |L1.716|
                          DCD      USB_TASK_STK+0x1fc
                  |L1.720|
                          DCD      USBUpdataTask
                  |L1.724|
                          DCD      beepSem
                  |L1.728|
                          DCD      LoginMes
                  |L1.732|
                          DCD      sendMsg
                  |L1.736|
                          DCD      CDMASendMutex
                  |L1.740|
                          DCD      CDMAPowerMutex
                  |L1.744|
                          DCD      cdmaRecBuf
                  |L1.748|
                          DCD      CDMARecieveQ
                  |L1.752|
                          DCD      cdmaSendBuf
                  |L1.756|
                          DCD      CDMASendQ
                  |L1.760|
                          DCD      ZIPRecBuf
                  |L1.764|
                          DCD      ZIPRecv_Q
                  |L1.768|
                          DCD      gpsRecBuf
                  |L1.772|
                          DCD      receGPSQ
                  |L1.776|
                          DCD      canSendBuf
                  |L1.780|
                          DCD      canSendQ
                  |L1.784|
                          DCD      canRecBuf
                  |L1.788|
                          DCD      canRecieveQ
                  |L1.792|
                          DCD      canJ1939Buf
                  |L1.796|
                          DCD      canJ1939Q
                  |L1.800|
                          DCD      POWER_TASK_STK+0x1fc
                  |L1.804|
                          DCD      PowerDeal
                  |L1.808|
                          DCD      CDMA_TASK_STK+0x1fc
                  |L1.812|
                          DCD      CDMATask
                  |L1.816|
                          DCD      CDMARecv_TASK_STK+0x2cc
                  |L1.820|
                          DCD      CDMARecvTask
                  |L1.824|
                          DCD      GPS_TASK_STK+0x1fc
                  |L1.828|
                          DCD      GPSTask
                  |L1.832|
                          DCD      OBD_TASK_STK+0x1fc
                  |L1.836|
                          DCD      OBDTask
                  |L1.840|
                          DCD      J1939_TASK_STK+0x1fc
                  |L1.844|
                          DCD      DealJ1939Date
                  |L1.848|
                          DCD      CDMA_LED_STK+0x13c
                  |L1.852|
                          DCD      CDMALEDTask
                  |L1.856|
                          DCD      GPS_LED_STK+0x13c
                  |L1.860|
                          DCD      GPSLEDTask
                  |L1.864|
                          DCD      OBD_LED_STK+0x13c
                  |L1.868|
                          DCD      OBDLEDTask
                  |L1.872|
                          DCD      BEEP_STK+0x13c
                  |L1.876|
                          DCD      BeepTask
                  |L1.880|
                          DCD      ptrPIDAllDat

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;94     ****************************************************************/
;;;95     int main(void )
000000  b510              PUSH     {r4,lr}
;;;96     {
;;;97     	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
000002  f44f60a0          MOV      r0,#0x500
000006  f7fffffe          BL       NVIC_PriorityGroupConfig
;;;98     	
;;;99     	OSInit(); 
00000a  f7fffffe          BL       OSInit
;;;100    	
;;;101    	MemBuf_Init();   //建立内存块
00000e  f7fffffe          BL       MemBuf_Init
;;;102    	
;;;103    	sendCDMA_Q = Cir_Queue_Init(1000);//CDMA 串口发送 循环队列 缓冲区
000012  f44f707a          MOV      r0,#0x3e8
000016  f7fffffe          BL       Cir_Queue_Init
00001a  490f              LDR      r1,|L2.88|
00001c  6008              STR      r0,[r1,#0]  ; sendCDMA_Q
;;;104    	receCDMA_S = Store_Init(1020);    //CDMA 串口接收 数据堆   缓冲区
00001e  f44f707f          MOV      r0,#0x3fc
000022  f7fffffe          BL       Store_Init
000026  490d              LDR      r1,|L2.92|
000028  6008              STR      r0,[r1,#0]  ; receCDMA_S
;;;105    	
;;;106    	sendGPS_Q = Cir_Queue_Init(230);  //GPS  串口发送 循环队列 缓冲区
00002a  20e6              MOVS     r0,#0xe6
00002c  f7fffffe          BL       Cir_Queue_Init
000030  490b              LDR      r1,|L2.96|
000032  6008              STR      r0,[r1,#0]  ; sendGPS_Q
;;;107    	receGPS_S = Store_Init(230);      //GPS  串口接收 数据堆   缓冲区
000034  20e6              MOVS     r0,#0xe6
000036  f7fffffe          BL       Store_Init
00003a  490a              LDR      r1,|L2.100|
00003c  6008              STR      r0,[r1,#0]  ; receGPS_S
;;;108    	
;;;109    	SystemBspInit();                  //硬件初始化 
00003e  f7fffffe          BL       SystemBspInit
;;;110    	
;;;111    	OSTaskCreate(StartTask,(void *)0,(OS_STK *)&START_TASK_STK[START_STK_SIZE-1],START_TASK_PRIO );
000042  230a              MOVS     r3,#0xa
000044  4a08              LDR      r2,|L2.104|
000046  2100              MOVS     r1,#0
000048  4808              LDR      r0,|L2.108|
00004a  f7fffffe          BL       OSTaskCreate
;;;112    	
;;;113    	OSStart();	 
00004e  f7fffffe          BL       OSStart
;;;114    }
000052  2000              MOVS     r0,#0
000054  bd10              POP      {r4,pc}
;;;115    
                          ENDP

000056  0000              DCW      0x0000
                  |L2.88|
                          DCD      sendCDMA_Q
                  |L2.92|
                          DCD      receCDMA_S
                  |L2.96|
                          DCD      sendGPS_Q
                  |L2.100|
                          DCD      receGPS_S
                  |L2.104|
                          DCD      START_TASK_STK+0x1fc
                  |L2.108|
                          DCD      StartTask

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  cdmaRecBuf
                          %        40
                  cdmaSendBuf
                          %        20
                  ZIPRecBuf
                          %        20
                  gpsRecBuf
                          %        40
                  canRecBuf
                          %        80
                  canSendBuf
                          %        320
                  canJ1939Buf
                          %        80
                  usbRecBuf
                          %        40
                  usbSendBuf
                          %        20
                  USB_TASK_STK
                          %        512
                  START_TASK_STK
                          %        512
                  CDMA_TASK_STK
                          %        512
                  CDMARecv_TASK_STK
                          %        720
                  GPS_TASK_STK
                          %        512
                  OBD_TASK_STK
                          %        512
                  J1939_TASK_STK
                          %        512
                  POWER_TASK_STK
                          %        512
                  CDMA_LED_STK
                          %        320
                  GPS_LED_STK
                          %        320
                  OBD_LED_STK
                          %        320
                  BEEP_STK
                          %        320
                  sysUpdateVar
                          %        16
                  varOperation
                          %        147
                  canDataConfig
                          %        19
                  carAllRecord
                          %        90
                  gpsMC
                          %        107

                          AREA ||.data||, DATA, ALIGN=2

                  sendMsg
                          DCD      0x00000000
                  beepSem
                          DCD      0x00000000
                  LoginMes
                          DCD      0x00000000
                  CDMASendMutex
                          DCD      0x00000000
                  CDMAPowerMutex
                          DCD      0x00000000
                  CDMARecieveQ
                          DCD      0x00000000
                  CDMASendQ
                          DCD      0x00000000
                  ZIPRecv_Q
                          DCD      0x00000000
                  receGPSQ
                          DCD      0x00000000
                  canRecieveQ
                          DCD      0x00000000
                  canSendQ
                          DCD      0x00000000
                  canJ1939Q
                          DCD      0x00000000
                  USBSendQ
                          DCD      0x00000000
                  USBRecieveQ
                          DCD      0x00000000
                  sendCDMA_Q
                          DCD      0x00000000
                  receCDMA_S
                          DCD      0x00000000
                  sendGPS_Q
                          DCD      0x00000000
                  receGPS_S
                          DCD      0x00000000
                  cdmaDataToSend
                          DCD      0x00000000

                  __ARM_use_no_argv EQU 0
