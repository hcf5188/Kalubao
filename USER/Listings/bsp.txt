; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\obj\bsp.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=..\obj\bsp.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\OBD -I..\SYSTEM -I..\USER -I..\LIB\inc -I..\UCOSII\CONFIG -I..\UCOSII\PORT -I..\UCOSII\CORE -I..\HAEDWARE -I..\GPS -I..\CDMA -I..\DEAL -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\bsp.crf ..\HAEDWARE\bsp.c]
                          THUMB

                          AREA ||i.BspClockInit||, CODE, READONLY, ALIGN=2

                  BspClockInit PROC
;;;24     //使能外设时钟
;;;25     void BspClockInit(void)
000000  b510              PUSH     {r4,lr}
;;;26     {
;;;27     	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
000002  2101              MOVS     r1,#1
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;28     	
;;;29     	//RCC_APB1Periph_CAN1	
;;;30     	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2   \
00000a  2101              MOVS     r1,#1
00000c  4804              LDR      r0,|L1.32|
00000e  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;31     							|RCC_APB1Periph_USART3 \
;;;32     							|RCC_APB1Periph_UART4  \
;;;33     							|RCC_APB1Periph_I2C1   \
;;;34     							|RCC_APB1Periph_TIM2   \
;;;35     							|RCC_APB1Periph_TIM3, ENABLE);
;;;36     
;;;37       	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1
000012  2101              MOVS     r1,#1
000014  f245201d          MOV      r0,#0x521d
000018  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;38     							|RCC_APB2Periph_GPIOA 
;;;39     							|RCC_APB2Periph_GPIOB 
;;;40     							|RCC_APB2Periph_GPIOC
;;;41     							|RCC_APB2Periph_AFIO
;;;42     							|RCC_APB2Periph_SPI1
;;;43     							|RCC_APB2Periph_ADC1, ENABLE);
;;;44     }
00001c  bd10              POP      {r4,pc}
;;;45     
                          ENDP

00001e  0000              DCW      0x0000
                  |L1.32|
                          DCD      0x002e0003

                          AREA ||i.CDMAUart2Init||, CODE, READONLY, ALIGN=2

                  CDMAUart2Init PROC
;;;64     
;;;65     void CDMAUart2Init(void)
000000  b500              PUSH     {lr}
;;;66     {
000002  b087              SUB      sp,sp,#0x1c
;;;67     	GPIO_InitTypeDef GPIO_InitStructure;
;;;68     	NVIC_InitTypeDef NVIC_InitStructure;
;;;69     	USART_InitTypeDef USART_InitStructure;
;;;70     	
;;;71     	//GPRS 模块复位按钮默认L
;;;72     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;//GPIOB_12
000004  f44f5080          MOV      r0,#0x1000
000008  f8ad0018          STRH     r0,[sp,#0x18]
;;;73     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
00000c  2010              MOVS     r0,#0x10
00000e  f88d001b          STRB     r0,[sp,#0x1b]
;;;74     	GPIO_Init(GPIOB, &GPIO_InitStructure);
000012  a906              ADD      r1,sp,#0x18
000014  4836              LDR      r0,|L2.240|
000016  f7fffffe          BL       GPIO_Init
;;;75     	GPIO_SetBits(GPIOB, GPIO_Pin_12);
00001a  f44f5180          MOV      r1,#0x1000
00001e  4834              LDR      r0,|L2.240|
000020  f7fffffe          BL       GPIO_SetBits
;;;76     
;;;77     	
;;;78     	//GPRS 电源
;;;79     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
000024  f44f4000          MOV      r0,#0x8000
000028  f8ad0018          STRH     r0,[sp,#0x18]
;;;80     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
00002c  2010              MOVS     r0,#0x10
00002e  f88d001b          STRB     r0,[sp,#0x1b]
;;;81     	GPIO_Init(GPIOB, &GPIO_InitStructure);
000032  a906              ADD      r1,sp,#0x18
000034  482e              LDR      r0,|L2.240|
000036  f7fffffe          BL       GPIO_Init
;;;82     	GPIO_SetBits(GPIOB, GPIO_Pin_15);
00003a  f44f4100          MOV      r1,#0x8000
00003e  482c              LDR      r0,|L2.240|
000040  f7fffffe          BL       GPIO_SetBits
;;;83     
;;;84     
;;;85     	//GPRS Status 状态
;;;86     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
000044  f44f5000          MOV      r0,#0x2000
000048  f8ad0018          STRH     r0,[sp,#0x18]
;;;87     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00004c  2003              MOVS     r0,#3
00004e  f88d001a          STRB     r0,[sp,#0x1a]
;;;88     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000052  2004              MOVS     r0,#4
000054  f88d001b          STRB     r0,[sp,#0x1b]
;;;89     	GPIO_Init(GPIOB, &GPIO_InitStructure);
000058  a906              ADD      r1,sp,#0x18
00005a  4825              LDR      r0,|L2.240|
00005c  f7fffffe          BL       GPIO_Init
;;;90     	
;;;91     	//USART2 RX
;;;92     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
000060  2008              MOVS     r0,#8
000062  f8ad0018          STRH     r0,[sp,#0x18]
;;;93     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000066  2004              MOVS     r0,#4
000068  f88d001b          STRB     r0,[sp,#0x1b]
;;;94     	GPIO_Init(GPIOA, &GPIO_InitStructure);
00006c  a906              ADD      r1,sp,#0x18
00006e  4821              LDR      r0,|L2.244|
000070  f7fffffe          BL       GPIO_Init
;;;95     
;;;96     	//USART2 TX
;;;97     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
000074  2004              MOVS     r0,#4
000076  f8ad0018          STRH     r0,[sp,#0x18]
;;;98     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
00007a  2018              MOVS     r0,#0x18
00007c  f88d001b          STRB     r0,[sp,#0x1b]
;;;99     	GPIO_Init(GPIOA, &GPIO_InitStructure);
000080  a906              ADD      r1,sp,#0x18
000082  481c              LDR      r0,|L2.244|
000084  f7fffffe          BL       GPIO_Init
;;;100    	
;;;101    	USART_InitStructure.USART_BaudRate            = 115200  ;
000088  f44f30e1          MOV      r0,#0x1c200
00008c  9001              STR      r0,[sp,#4]
;;;102    	USART_InitStructure.USART_WordLength          = USART_WordLength_8b;
00008e  2000              MOVS     r0,#0
000090  f8ad0008          STRH     r0,[sp,#8]
;;;103    	USART_InitStructure.USART_StopBits            = USART_StopBits_1;
000094  f8ad000a          STRH     r0,[sp,#0xa]
;;;104    	USART_InitStructure.USART_Parity              = USART_Parity_No ;
000098  f8ad000c          STRH     r0,[sp,#0xc]
;;;105    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
00009c  f8ad0010          STRH     r0,[sp,#0x10]
;;;106    	USART_InitStructure.USART_Mode                = USART_Mode_Rx | USART_Mode_Tx;	
0000a0  200c              MOVS     r0,#0xc
0000a2  f8ad000e          STRH     r0,[sp,#0xe]
;;;107    	USART_Init(USART2, &USART_InitStructure);
0000a6  a901              ADD      r1,sp,#4
0000a8  4813              LDR      r0,|L2.248|
0000aa  f7fffffe          BL       USART_Init
;;;108    	
;;;109    	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
0000ae  2201              MOVS     r2,#1
0000b0  f2405125          MOV      r1,#0x525
0000b4  4810              LDR      r0,|L2.248|
0000b6  f7fffffe          BL       USART_ITConfig
;;;110    	USART_ITConfig(USART2, USART_IT_TC, ENABLE);
0000ba  2201              MOVS     r2,#1
0000bc  f2406126          MOV      r1,#0x626
0000c0  480d              LDR      r0,|L2.248|
0000c2  f7fffffe          BL       USART_ITConfig
;;;111    	USART_Cmd(USART2, ENABLE); 
0000c6  2101              MOVS     r1,#1
0000c8  480b              LDR      r0,|L2.248|
0000ca  f7fffffe          BL       USART_Cmd
;;;112    	
;;;113    	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
0000ce  2026              MOVS     r0,#0x26
0000d0  f88d0014          STRB     r0,[sp,#0x14]
;;;114    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
0000d4  2002              MOVS     r0,#2
0000d6  f88d0015          STRB     r0,[sp,#0x15]
;;;115    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 4;
0000da  2004              MOVS     r0,#4
0000dc  f88d0016          STRB     r0,[sp,#0x16]
;;;116    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
0000e0  2001              MOVS     r0,#1
0000e2  f88d0017          STRB     r0,[sp,#0x17]
;;;117    	NVIC_Init(&NVIC_InitStructure);
0000e6  a805              ADD      r0,sp,#0x14
0000e8  f7fffffe          BL       NVIC_Init
;;;118    }
0000ec  b007              ADD      sp,sp,#0x1c
0000ee  bd00              POP      {pc}
;;;119    
                          ENDP

                  |L2.240|
                          DCD      0x40010c00
                  |L2.244|
                          DCD      0x40010800
                  |L2.248|
                          DCD      0x40004400

                          AREA ||i.GPIOLEDInit||, CODE, READONLY, ALIGN=2

                  GPIOLEDInit PROC
;;;45     
;;;46     void GPIOLEDInit(void)
000000  b508              PUSH     {r3,lr}
;;;47     {
;;;48     	GPIO_InitTypeDef  GPIO_InitStructure;
;;;49     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);	 //使能PB端口时钟
000002  2101              MOVS     r1,#1
000004  2008              MOVS     r0,#8
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;50     	
;;;51     //  禁用JTAG接口，采用SWD接口进行调试（恢复PB3、PB4的IO功能）
;;;52     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
00000a  2101              MOVS     r1,#1
00000c  4608              MOV      r0,r1
00000e  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;53     	GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable , ENABLE);
000012  2101              MOVS     r1,#1
000014  480a              LDR      r0,|L3.64|
000016  f7fffffe          BL       GPIO_PinRemapConfig
;;;54     //	GPIO_PinRemapConfig(GPIO_Remap_SWJ_Disable, ENABLE);
;;;55     
;;;56     	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5; //LED 端口配置
00001a  2038              MOVS     r0,#0x38
00001c  f8ad0000          STRH     r0,[sp,#0]
;;;57     	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_Out_PP; 		 //推挽输出
000020  2010              MOVS     r0,#0x10
000022  f88d0003          STRB     r0,[sp,#3]
;;;58     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;		 //IO口速度为50MHz
000026  2003              MOVS     r0,#3
000028  f88d0002          STRB     r0,[sp,#2]
;;;59     	GPIO_Init(GPIOB, &GPIO_InitStructure);					 //根据设定参数初始化GPIOB.5
00002c  4669              MOV      r1,sp
00002e  4805              LDR      r0,|L3.68|
000030  f7fffffe          BL       GPIO_Init
;;;60     
;;;61     	GPIO_ResetBits(GPIOB,GPIO_Pin_3 | GPIO_Pin_5|GPIO_Pin_4);		     //复位，双灯亮
000034  2138              MOVS     r1,#0x38
000036  4803              LDR      r0,|L3.68|
000038  f7fffffe          BL       GPIO_ResetBits
;;;62     }
00003c  bd08              POP      {r3,pc}
;;;63     
                          ENDP

00003e  0000              DCW      0x0000
                  |L3.64|
                          DCD      0x00300200
                  |L3.68|
                          DCD      0x40010c00

                          AREA ||i.KLineInit||, CODE, READONLY, ALIGN=2

                  KLineInit PROC
;;;119    
;;;120    void KLineInit(void )
000000  b500              PUSH     {lr}
;;;121    {
000002  b087              SUB      sp,sp,#0x1c
;;;122    	GPIO_InitTypeDef  GPIO_InitStructure;
;;;123    	NVIC_InitTypeDef NVIC_InitStructure;
;;;124    	USART_InitTypeDef USART_InitStructure;
;;;125    	
;;;126    	
;;;127    	//USART3 RX
;;;128    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_KWP_RX;
000004  f44f6000          MOV      r0,#0x800
000008  f8ad0018          STRH     r0,[sp,#0x18]
;;;129      	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
00000c  2004              MOVS     r0,#4
00000e  f88d001b          STRB     r0,[sp,#0x1b]
;;;130      	GPIO_Init(GPIOB, &GPIO_InitStructure);
000012  a906              ADD      r1,sp,#0x18
000014  4820              LDR      r0,|L4.152|
000016  f7fffffe          BL       GPIO_Init
;;;131    	//USART3 TX
;;;132    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_KWP_TX;
00001a  f44f6080          MOV      r0,#0x400
00001e  f8ad0018          STRH     r0,[sp,#0x18]
;;;133      	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
000022  2018              MOVS     r0,#0x18
000024  f88d001b          STRB     r0,[sp,#0x1b]
;;;134      	GPIO_Init(GPIOB, &GPIO_InitStructure);
000028  a906              ADD      r1,sp,#0x18
00002a  481b              LDR      r0,|L4.152|
00002c  f7fffffe          BL       GPIO_Init
;;;135    	
;;;136    	USART_InitStructure.USART_BaudRate            = 10400  ;		  //KWP2000 波特率10400
000030  f64200a0          MOV      r0,#0x28a0
000034  9001              STR      r0,[sp,#4]
;;;137    	USART_InitStructure.USART_WordLength          = USART_WordLength_8b;
000036  2000              MOVS     r0,#0
000038  f8ad0008          STRH     r0,[sp,#8]
;;;138    	USART_InitStructure.USART_StopBits            = USART_StopBits_1;
00003c  f8ad000a          STRH     r0,[sp,#0xa]
;;;139    	USART_InitStructure.USART_Parity              = USART_Parity_No ;
000040  f8ad000c          STRH     r0,[sp,#0xc]
;;;140    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000044  f8ad0010          STRH     r0,[sp,#0x10]
;;;141    	USART_InitStructure.USART_Mode                = USART_Mode_Rx | USART_Mode_Tx;
000048  200c              MOVS     r0,#0xc
00004a  f8ad000e          STRH     r0,[sp,#0xe]
;;;142    
;;;143    	USART_Init(USART3, &USART_InitStructure);
00004e  a901              ADD      r1,sp,#4
000050  4812              LDR      r0,|L4.156|
000052  f7fffffe          BL       USART_Init
;;;144    	USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
000056  2201              MOVS     r2,#1
000058  f2405125          MOV      r1,#0x525
00005c  480f              LDR      r0,|L4.156|
00005e  f7fffffe          BL       USART_ITConfig
;;;145    	USART_ITConfig(USART3, USART_IT_TC, ENABLE);
000062  2201              MOVS     r2,#1
000064  f2406126          MOV      r1,#0x626
000068  480c              LDR      r0,|L4.156|
00006a  f7fffffe          BL       USART_ITConfig
;;;146    	USART_Cmd(USART3, ENABLE); 
00006e  2101              MOVS     r1,#1
000070  480a              LDR      r0,|L4.156|
000072  f7fffffe          BL       USART_Cmd
;;;147    	
;;;148    	NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
000076  2027              MOVS     r0,#0x27
000078  f88d0014          STRB     r0,[sp,#0x14]
;;;149    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
00007c  2002              MOVS     r0,#2
00007e  f88d0015          STRB     r0,[sp,#0x15]
;;;150    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
000082  2001              MOVS     r0,#1
000084  f88d0016          STRB     r0,[sp,#0x16]
;;;151    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000088  f88d0017          STRB     r0,[sp,#0x17]
;;;152    	NVIC_Init(&NVIC_InitStructure);
00008c  a805              ADD      r0,sp,#0x14
00008e  f7fffffe          BL       NVIC_Init
;;;153    }
000092  b007              ADD      sp,sp,#0x1c
000094  bd00              POP      {pc}
;;;154    
                          ENDP

000096  0000              DCW      0x0000
                  |L4.152|
                          DCD      0x40010c00
                  |L4.156|
                          DCD      0x40004800

                          AREA ||i.SysTickInit||, CODE, READONLY, ALIGN=2

                  SysTickInit PROC
;;;17     //系统时钟滴答初始化
;;;18     void SysTickInit(void)
000000  b570              PUSH     {r4-r6,lr}
;;;19     {
;;;20     	SystemCoreClockUpdate();
000002  f7fffffe          BL       SystemCoreClockUpdate
;;;21     	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK);
000006  2004              MOVS     r0,#4
000008  f7fffffe          BL       SysTick_CLKSourceConfig
;;;22     	SysTick_Config(SystemCoreClock / OS_TICKS_PER_SEC);
00000c  4813              LDR      r0,|L5.92|
00000e  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000010  f44f72fa          MOV      r2,#0x1f4
000014  fbb0f1f2          UDIV     r1,r0,r2
000018  1e48              SUBS     r0,r1,#1
00001a  f1b07f80          CMP      r0,#0x1000000
00001e  d300              BCC      |L5.34|
000020  e01b              B        |L5.90|
                  |L5.34|
000022  1e48              SUBS     r0,r1,#1
000024  f04f22e0          MOV      r2,#0xe000e000
000028  6150              STR      r0,[r2,#0x14]
00002a  1750              ASRS     r0,r2,#29
00002c  220f              MOVS     r2,#0xf
00002e  2800              CMP      r0,#0
000030  da07              BGE      |L5.66|
000032  0713              LSLS     r3,r2,#28
000034  0e1d              LSRS     r5,r3,#24
000036  4b0a              LDR      r3,|L5.96|
000038  f000040f          AND      r4,r0,#0xf
00003c  1f24              SUBS     r4,r4,#4
00003e  551d              STRB     r5,[r3,r4]
000040  e003              B        |L5.74|
                  |L5.66|
000042  0713              LSLS     r3,r2,#28
000044  0e1c              LSRS     r4,r3,#24
000046  4b07              LDR      r3,|L5.100|
000048  541c              STRB     r4,[r3,r0]
                  |L5.74|
00004a  bf00              NOP      
00004c  2000              MOVS     r0,#0
00004e  f04f22e0          MOV      r2,#0xe000e000
000052  6190              STR      r0,[r2,#0x18]
000054  2007              MOVS     r0,#7
000056  6110              STR      r0,[r2,#0x10]
000058  bf00              NOP      
                  |L5.90|
;;;23     }
00005a  bd70              POP      {r4-r6,pc}
;;;24     //使能外设时钟
                          ENDP

                  |L5.92|
                          DCD      SystemCoreClock
                  |L5.96|
                          DCD      0xe000ed18
                  |L5.100|
                          DCD      0xe000e400

                          AREA ||i.SystemBspInit||, CODE, READONLY, ALIGN=1

                  SystemBspInit PROC
;;;6      //芯片初始化，包括系统时钟、芯片外设、时钟滴答等等
;;;7      void SystemBspInit(void )
000000  b510              PUSH     {r4,lr}
;;;8      {
;;;9      	SysTickInit();
000002  f7fffffe          BL       SysTickInit
;;;10     	BspClockInit();
000006  f7fffffe          BL       BspClockInit
;;;11     	GPIOLEDInit();
00000a  f7fffffe          BL       GPIOLEDInit
;;;12     	CDMAUart2Init();
00000e  f7fffffe          BL       CDMAUart2Init
;;;13     
;;;14     //	
;;;15     	
;;;16     }
000012  bd10              POP      {r4,pc}
;;;17     //系统时钟滴答初始化
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\HAEDWARE\\bsp.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_bsp_c_275da96f____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___5_bsp_c_275da96f____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_bsp_c_275da96f____REVSH|
#line 144
|__asm___5_bsp_c_275da96f____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
