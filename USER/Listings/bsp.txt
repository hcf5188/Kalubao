; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\obj\bsp.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=..\obj\bsp.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\OBD -I..\SYSTEM -I..\USER -I..\LIB\inc -I..\UCOSII\CONFIG -I..\UCOSII\PORT -I..\UCOSII\CORE -I..\HAEDWARE -I..\GPS -I..\CDMA -I..\DEAL -I..\USB\CONFIG -I..\USB\STM32_USB-FS-Device_Driver\inc -I..\CORE -I.\RTE\_Project -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\5.2.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=524 -D_RTE_ -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\bsp.crf ..\HAEDWARE\bsp.c]
                          THUMB

                          AREA ||i.ADC1Init||, CODE, READONLY, ALIGN=2

                  ADC1Init PROC
;;;130    }
;;;131    void ADC1Init(void)
000000  b500              PUSH     {lr}
;;;132    {
000002  b085              SUB      sp,sp,#0x14
;;;133    	ADC_InitTypeDef  ADC_InitStructure;
;;;134    
;;;135    	ADC_Cmd(ADC1, DISABLE);
000004  2100              MOVS     r1,#0
000006  4824              LDR      r0,|L1.152|
000008  f7fffffe          BL       ADC_Cmd
;;;136    	ADC_DMACmd(ADC1, DISABLE);
00000c  2100              MOVS     r1,#0
00000e  4822              LDR      r0,|L1.152|
000010  f7fffffe          BL       ADC_DMACmd
;;;137    
;;;138    	
;;;139    	//BSP_ADC_DMA_Init();
;;;140    	
;;;141    	ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
000014  2000              MOVS     r0,#0
000016  9000              STR      r0,[sp,#0]
;;;142    	ADC_InitStructure.ADC_ScanConvMode = ENABLE;
000018  2001              MOVS     r0,#1
00001a  f88d0004          STRB     r0,[sp,#4]
;;;143    	ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
00001e  f88d0005          STRB     r0,[sp,#5]
;;;144    	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
000022  f44f2060          MOV      r0,#0xe0000
000026  9002              STR      r0,[sp,#8]
;;;145    	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
000028  2000              MOVS     r0,#0
00002a  9003              STR      r0,[sp,#0xc]
;;;146    	ADC_InitStructure.ADC_NbrOfChannel = 2;
00002c  2002              MOVS     r0,#2
00002e  f88d0010          STRB     r0,[sp,#0x10]
;;;147    	ADC_Init(ADC1, &ADC_InitStructure);
000032  4669              MOV      r1,sp
000034  4818              LDR      r0,|L1.152|
000036  f7fffffe          BL       ADC_Init
;;;148    
;;;149    	ADC_TempSensorVrefintCmd(ENABLE);
00003a  2001              MOVS     r0,#1
00003c  f7fffffe          BL       ADC_TempSensorVrefintCmd
;;;150    
;;;151    	/* ADC1 regular channel8 configuration */ 
;;;152    	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 1, ADC_SampleTime_28Cycles5);//ADC_SampleTime_239Cycles5
000040  2303              MOVS     r3,#3
000042  2201              MOVS     r2,#1
000044  4611              MOV      r1,r2
000046  4814              LDR      r0,|L1.152|
000048  f7fffffe          BL       ADC_RegularChannelConfig
;;;153    	ADC_RegularChannelConfig(ADC1, ADC_Channel_16, 2, ADC_SampleTime_28Cycles5);//ADC_SampleTime_239Cycles5
00004c  2303              MOVS     r3,#3
00004e  2202              MOVS     r2,#2
000050  2110              MOVS     r1,#0x10
000052  4811              LDR      r0,|L1.152|
000054  f7fffffe          BL       ADC_RegularChannelConfig
;;;154    
;;;155    	/* Enable ADC1 */
;;;156    	ADC_Cmd(ADC1, ENABLE);
000058  2101              MOVS     r1,#1
00005a  480f              LDR      r0,|L1.152|
00005c  f7fffffe          BL       ADC_Cmd
;;;157    
;;;158    	ADC_DMACmd(ADC1, ENABLE);
000060  2101              MOVS     r1,#1
000062  480d              LDR      r0,|L1.152|
000064  f7fffffe          BL       ADC_DMACmd
;;;159    
;;;160    	/* Enable ADC1 reset calibaration register */   
;;;161    	ADC_ResetCalibration(ADC1);
000068  480b              LDR      r0,|L1.152|
00006a  f7fffffe          BL       ADC_ResetCalibration
;;;162    	/* Check the end of ADC1 reset calibration register */
;;;163    	while(ADC_GetResetCalibrationStatus(ADC1));
00006e  bf00              NOP      
                  |L1.112|
000070  4809              LDR      r0,|L1.152|
000072  f7fffffe          BL       ADC_GetResetCalibrationStatus
000076  2800              CMP      r0,#0
000078  d1fa              BNE      |L1.112|
;;;164    
;;;165    	/* Start ADC1 calibaration */
;;;166    	ADC_StartCalibration(ADC1);
00007a  4807              LDR      r0,|L1.152|
00007c  f7fffffe          BL       ADC_StartCalibration
;;;167    	/* Check the end of ADC1 calibration */
;;;168    	while(ADC_GetCalibrationStatus(ADC1));
000080  bf00              NOP      
                  |L1.130|
000082  4805              LDR      r0,|L1.152|
000084  f7fffffe          BL       ADC_GetCalibrationStatus
000088  2800              CMP      r0,#0
00008a  d1fa              BNE      |L1.130|
;;;169    
;;;170    	/* Start ADC1 Software Conversion */ 
;;;171    	ADC_SoftwareStartConvCmd(ADC1, ENABLE);
00008c  2101              MOVS     r1,#1
00008e  4802              LDR      r0,|L1.152|
000090  f7fffffe          BL       ADC_SoftwareStartConvCmd
;;;172    
;;;173    //#ifdef ADC_USE_AWD
;;;174    //	
;;;175    //	/*zx 设置ADC模拟看门狗*/
;;;176    //	ADC_AnalogWatchdogSingleChannelConfig(ADC1,ADC_Channel_1);
;;;177    //	ADC_AnalogWatchdogThresholdsConfig(ADC1,1300,900);
;;;178    //	ADC_AnalogWatchdogCmd(ADC1,ADC_AnalogWatchdog_SingleRegEnable);
;;;179    //	ADC_ITConfig(ADC1,ADC_IT_AWD,ENABLE);
;;;180    //#endif
;;;181    
;;;182    }
000094  b005              ADD      sp,sp,#0x14
000096  bd00              POP      {pc}
;;;183    
                          ENDP

                  |L1.152|
                          DCD      0x40012400

                          AREA ||i.BspClockInit||, CODE, READONLY, ALIGN=2

                  BspClockInit PROC
;;;56     //使能外设时钟
;;;57     void BspClockInit(void)
000000  b510              PUSH     {r4,lr}
;;;58     {
;;;59     	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
000002  2101              MOVS     r1,#1
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;60     	
;;;61     	//RCC_APB1Periph_CAN1	
;;;62     	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2|RCC_APB1Periph_USART3|RCC_APB1Periph_UART4|RCC_APB1Periph_I2C1|RCC_APB1Periph_TIM2|RCC_APB1Periph_TIM3, ENABLE);
00000a  2101              MOVS     r1,#1
00000c  4806              LDR      r0,|L2.40|
00000e  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;63     
;;;64       	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1|RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB |RCC_APB2Periph_GPIOC|
000012  2101              MOVS     r1,#1
000014  f245201d          MOV      r0,#0x521d
000018  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;65     								   RCC_APB2Periph_AFIO|RCC_APB2Periph_SPI1|RCC_APB2Periph_ADC1, ENABLE);
;;;66     
;;;67     	GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable,ENABLE);
00001c  2101              MOVS     r1,#1
00001e  4803              LDR      r0,|L2.44|
000020  f7fffffe          BL       GPIO_PinRemapConfig
;;;68     //	GPIO_PinRemapConfig(GPIO_Remap_SWJ_Disable, ENABLE);
;;;69     }
000024  bd10              POP      {r4,pc}
;;;70     
                          ENDP

000026  0000              DCW      0x0000
                  |L2.40|
                          DCD      0x002e0003
                  |L2.44|
                          DCD      0x00300200

                          AREA ||i.CDMAUart2Init||, CODE, READONLY, ALIGN=2

                  CDMAUart2Init PROC
;;;183    
;;;184    void CDMAUart2Init(void)
000000  b500              PUSH     {lr}
;;;185    {
000002  b085              SUB      sp,sp,#0x14
;;;186    	GPIO_InitTypeDef GPIO_InitStructure;
;;;187    	
;;;188    	USART_InitTypeDef USART_InitStructure;
;;;189    	
;;;190    	//USART2 RX
;;;191    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
000004  2008              MOVS     r0,#8
000006  f8ad0010          STRH     r0,[sp,#0x10]
;;;192    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
00000a  2004              MOVS     r0,#4
00000c  f88d0013          STRB     r0,[sp,#0x13]
;;;193    	GPIO_Init(GPIOA, &GPIO_InitStructure);
000010  a904              ADD      r1,sp,#0x10
000012  4839              LDR      r0,|L3.248|
000014  f7fffffe          BL       GPIO_Init
;;;194    
;;;195    	//USART2 TX
;;;196    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
000018  2004              MOVS     r0,#4
00001a  f8ad0010          STRH     r0,[sp,#0x10]
;;;197    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
00001e  2018              MOVS     r0,#0x18
000020  f88d0013          STRB     r0,[sp,#0x13]
;;;198    	GPIO_Init(GPIOA, &GPIO_InitStructure);
000024  a904              ADD      r1,sp,#0x10
000026  4834              LDR      r0,|L3.248|
000028  f7fffffe          BL       GPIO_Init
;;;199    	
;;;200    	//GPRS 模块复位按钮默认L
;;;201    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;//GPIOB_12
00002c  f44f5080          MOV      r0,#0x1000
000030  f8ad0010          STRH     r0,[sp,#0x10]
;;;202    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
000034  2010              MOVS     r0,#0x10
000036  f88d0013          STRB     r0,[sp,#0x13]
;;;203    	GPIO_Init(GPIOB, &GPIO_InitStructure);
00003a  a904              ADD      r1,sp,#0x10
00003c  482f              LDR      r0,|L3.252|
00003e  f7fffffe          BL       GPIO_Init
;;;204    	GPIO_SetBits(GPIOB, GPIO_Pin_12);
000042  f44f5180          MOV      r1,#0x1000
000046  482d              LDR      r0,|L3.252|
000048  f7fffffe          BL       GPIO_SetBits
;;;205    
;;;206    	//GPRS 电源
;;;207    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
00004c  f44f4000          MOV      r0,#0x8000
000050  f8ad0010          STRH     r0,[sp,#0x10]
;;;208    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
000054  2010              MOVS     r0,#0x10
000056  f88d0013          STRB     r0,[sp,#0x13]
;;;209    	GPIO_Init(GPIOB, &GPIO_InitStructure);
00005a  a904              ADD      r1,sp,#0x10
00005c  4827              LDR      r0,|L3.252|
00005e  f7fffffe          BL       GPIO_Init
;;;210    	GPIO_SetBits(GPIOB, GPIO_Pin_15);
000062  f44f4100          MOV      r1,#0x8000
000066  4825              LDR      r0,|L3.252|
000068  f7fffffe          BL       GPIO_SetBits
;;;211    	
;;;212    	
;;;213    	//GPS 电源
;;;214    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
00006c  f44f7080          MOV      r0,#0x100
000070  f8ad0010          STRH     r0,[sp,#0x10]
;;;215      	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000074  2003              MOVS     r0,#3
000076  f88d0012          STRB     r0,[sp,#0x12]
;;;216      	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
00007a  2010              MOVS     r0,#0x10
00007c  f88d0013          STRB     r0,[sp,#0x13]
;;;217      	GPIO_Init(GPIOC, &GPIO_InitStructure);
000080  a904              ADD      r1,sp,#0x10
000082  481f              LDR      r0,|L3.256|
000084  f7fffffe          BL       GPIO_Init
;;;218    	GPIO_ResetBits(GPIOC,GPIO_Pin_8);//默认上电开启GPS电源
000088  f44f7180          MOV      r1,#0x100
00008c  481c              LDR      r0,|L3.256|
00008e  f7fffffe          BL       GPIO_ResetBits
;;;219    
;;;220    	//GPRS Status 状态
;;;221    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
000092  f44f5000          MOV      r0,#0x2000
000096  f8ad0010          STRH     r0,[sp,#0x10]
;;;222    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00009a  2003              MOVS     r0,#3
00009c  f88d0012          STRB     r0,[sp,#0x12]
;;;223    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
0000a0  2004              MOVS     r0,#4
0000a2  f88d0013          STRB     r0,[sp,#0x13]
;;;224    	GPIO_Init(GPIOB, &GPIO_InitStructure);
0000a6  a904              ADD      r1,sp,#0x10
0000a8  4814              LDR      r0,|L3.252|
0000aa  f7fffffe          BL       GPIO_Init
;;;225    	
;;;226    	
;;;227    	
;;;228    	USART_InitStructure.USART_BaudRate            = 115200  ; //波特率为115200
0000ae  f44f30e1          MOV      r0,#0x1c200
0000b2  9000              STR      r0,[sp,#0]
;;;229    	USART_InitStructure.USART_WordLength          = USART_WordLength_8b;
0000b4  2000              MOVS     r0,#0
0000b6  f8ad0004          STRH     r0,[sp,#4]
;;;230    	USART_InitStructure.USART_StopBits            = USART_StopBits_1;
0000ba  f8ad0006          STRH     r0,[sp,#6]
;;;231    	USART_InitStructure.USART_Parity              = USART_Parity_No ;
0000be  f8ad0008          STRH     r0,[sp,#8]
;;;232    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
0000c2  f8ad000c          STRH     r0,[sp,#0xc]
;;;233    	USART_InitStructure.USART_Mode                = USART_Mode_Rx | USART_Mode_Tx;	
0000c6  200c              MOVS     r0,#0xc
0000c8  f8ad000a          STRH     r0,[sp,#0xa]
;;;234    	USART_Init(USART2, &USART_InitStructure);
0000cc  4669              MOV      r1,sp
0000ce  480d              LDR      r0,|L3.260|
0000d0  f7fffffe          BL       USART_Init
;;;235    	
;;;236    	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);//使能串口接收中断
0000d4  2201              MOVS     r2,#1
0000d6  f2405125          MOV      r1,#0x525
0000da  480a              LDR      r0,|L3.260|
0000dc  f7fffffe          BL       USART_ITConfig
;;;237    	USART_ITConfig(USART2, USART_IT_TC, ENABLE);  //使能串口发送中断
0000e0  2201              MOVS     r2,#1
0000e2  f2406126          MOV      r1,#0x626
0000e6  4807              LDR      r0,|L3.260|
0000e8  f7fffffe          BL       USART_ITConfig
;;;238    	USART_Cmd(USART2, ENABLE);                    //使能串口2
0000ec  2101              MOVS     r1,#1
0000ee  4805              LDR      r0,|L3.260|
0000f0  f7fffffe          BL       USART_Cmd
;;;239    }
0000f4  b005              ADD      sp,sp,#0x14
0000f6  bd00              POP      {pc}
;;;240    
                          ENDP

                  |L3.248|
                          DCD      0x40010800
                  |L3.252|
                          DCD      0x40010c00
                  |L3.256|
                          DCD      0x40011000
                  |L3.260|
                          DCD      0x40004400

                          AREA ||i.GPIOLEDInit||, CODE, READONLY, ALIGN=2

                  GPIOLEDInit PROC
;;;100    
;;;101    void GPIOLEDInit(void)
000000  b508              PUSH     {r3,lr}
;;;102    {
;;;103    	GPIO_InitTypeDef  GPIO_InitStructure;
;;;104    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);	 //使能PB端口时钟
000002  2101              MOVS     r1,#1
000004  2008              MOVS     r0,#8
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;105    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
00000a  2101              MOVS     r1,#1
00000c  2002              MOVS     r0,#2
00000e  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;106    
;;;107    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
000012  2001              MOVS     r0,#1
000014  f8ad0000          STRH     r0,[sp,#0]
;;;108      	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
000018  2018              MOVS     r0,#0x18
00001a  f88d0003          STRB     r0,[sp,#3]
;;;109      	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00001e  2003              MOVS     r0,#3
000020  f88d0002          STRB     r0,[sp,#2]
;;;110      	GPIO_Init(GPIOB,&GPIO_InitStructure);
000024  4669              MOV      r1,sp
000026  4819              LDR      r0,|L4.140|
000028  f7fffffe          BL       GPIO_Init
;;;111    									
;;;112    	GPIO_InitStructure.GPIO_Pin   =  GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5; //LED 端口配置
00002c  2038              MOVS     r0,#0x38
00002e  f8ad0000          STRH     r0,[sp,#0]
;;;113    	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_Out_PP; 		 //推挽输出
000032  2010              MOVS     r0,#0x10
000034  f88d0003          STRB     r0,[sp,#3]
;;;114    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;		 //IO口速度为50MHz
000038  2003              MOVS     r0,#3
00003a  f88d0002          STRB     r0,[sp,#2]
;;;115    	GPIO_Init(GPIOB, &GPIO_InitStructure);					 //根据设定参数初始化GPIOB.5
00003e  4669              MOV      r1,sp
000040  4812              LDR      r0,|L4.140|
000042  f7fffffe          BL       GPIO_Init
;;;116        
;;;117    	GPIO_ResetBits(GPIOB,GPIO_Pin_0 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_4);		     //复位，双灯亮
000046  2139              MOVS     r1,#0x39
000048  4810              LDR      r0,|L4.140|
00004a  f7fffffe          BL       GPIO_ResetBits
;;;118    	
;;;119    	//USB EN
;;;120    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
00004e  f44f4000          MOV      r0,#0x8000
000052  f8ad0000          STRH     r0,[sp,#0]
;;;121      	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000056  2003              MOVS     r0,#3
000058  f88d0002          STRB     r0,[sp,#2]
;;;122      	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
00005c  2010              MOVS     r0,#0x10
00005e  f88d0003          STRB     r0,[sp,#3]
;;;123      	GPIO_Init(GPIOA, &GPIO_InitStructure);
000062  4669              MOV      r1,sp
000064  480a              LDR      r0,|L4.144|
000066  f7fffffe          BL       GPIO_Init
;;;124    
;;;125    	GPIO_ResetBits(GPIOA,GPIO_Pin_15);
00006a  f44f4100          MOV      r1,#0x8000
00006e  4808              LDR      r0,|L4.144|
000070  f7fffffe          BL       GPIO_ResetBits
;;;126    	//USB STATUS
;;;127    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
000074  2001              MOVS     r0,#1
000076  f8ad0000          STRH     r0,[sp,#0]
;;;128    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
00007a  2028              MOVS     r0,#0x28
00007c  f88d0003          STRB     r0,[sp,#3]
;;;129    	GPIO_Init(GPIOC, &GPIO_InitStructure);
000080  4669              MOV      r1,sp
000082  4804              LDR      r0,|L4.148|
000084  f7fffffe          BL       GPIO_Init
;;;130    }
000088  bd08              POP      {r3,pc}
;;;131    void ADC1Init(void)
                          ENDP

00008a  0000              DCW      0x0000
                  |L4.140|
                          DCD      0x40010c00
                  |L4.144|
                          DCD      0x40010800
                  |L4.148|
                          DCD      0x40011000

                          AREA ||i.GPIO_ALL_IN||, CODE, READONLY, ALIGN=2

                  GPIO_ALL_IN PROC
;;;70     
;;;71     void GPIO_ALL_IN(void)
000000  b508              PUSH     {r3,lr}
;;;72     {
;;;73     	GPIO_InitTypeDef GPIO_InitStructure;
;;;74     
;;;75     	/* Enable GPIOD and GPIOE clock */
;;;76     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB 
000002  2101              MOVS     r1,#1
000004  207d              MOVS     r0,#0x7d
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;77     	                     | RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOD 
;;;78     	                     | RCC_APB2Periph_GPIOE| RCC_APB2Periph_AFIO, ENABLE);
;;;79     	/* PA  */
;;;80     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_All;
00000a  f64f70ff          MOV      r0,#0xffff
00000e  f8ad0000          STRH     r0,[sp,#0]
;;;81     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
000012  2000              MOVS     r0,#0
000014  f88d0003          STRB     r0,[sp,#3]
;;;82     	GPIO_Init(GPIOA, &GPIO_InitStructure);
000018  4669              MOV      r1,sp
00001a  4818              LDR      r0,|L5.124|
00001c  f7fffffe          BL       GPIO_Init
;;;83     	  /* PB  */
;;;84     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_All;
000020  f64f70ff          MOV      r0,#0xffff
000024  f8ad0000          STRH     r0,[sp,#0]
;;;85     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
000028  2000              MOVS     r0,#0
00002a  f88d0003          STRB     r0,[sp,#3]
;;;86     	GPIO_Init(GPIOB, &GPIO_InitStructure);
00002e  4669              MOV      r1,sp
000030  4813              LDR      r0,|L5.128|
000032  f7fffffe          BL       GPIO_Init
;;;87     	  /* PC  */
;;;88     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_All&(~GPIO_Pin_8);//GPS EN Keep Output
000036  f64f60ff          MOV      r0,#0xfeff
00003a  f8ad0000          STRH     r0,[sp,#0]
;;;89     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
00003e  2000              MOVS     r0,#0
000040  f88d0003          STRB     r0,[sp,#3]
;;;90     	GPIO_Init(GPIOC, &GPIO_InitStructure);
000044  4669              MOV      r1,sp
000046  480f              LDR      r0,|L5.132|
000048  f7fffffe          BL       GPIO_Init
;;;91     	    /* PD  */
;;;92     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_All;
00004c  f64f70ff          MOV      r0,#0xffff
000050  f8ad0000          STRH     r0,[sp,#0]
;;;93     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
000054  2000              MOVS     r0,#0
000056  f88d0003          STRB     r0,[sp,#3]
;;;94     	GPIO_Init(GPIOD, &GPIO_InitStructure);
00005a  4669              MOV      r1,sp
00005c  480a              LDR      r0,|L5.136|
00005e  f7fffffe          BL       GPIO_Init
;;;95     
;;;96     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_All;
000062  f64f70ff          MOV      r0,#0xffff
000066  f8ad0000          STRH     r0,[sp,#0]
;;;97     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
00006a  2000              MOVS     r0,#0
00006c  f88d0003          STRB     r0,[sp,#3]
;;;98     	GPIO_Init(GPIOE, &GPIO_InitStructure);
000070  4669              MOV      r1,sp
000072  4806              LDR      r0,|L5.140|
000074  f7fffffe          BL       GPIO_Init
;;;99     }
000078  bd08              POP      {r3,pc}
;;;100    
                          ENDP

00007a  0000              DCW      0x0000
                  |L5.124|
                          DCD      0x40010800
                  |L5.128|
                          DCD      0x40010c00
                  |L5.132|
                          DCD      0x40011000
                  |L5.136|
                          DCD      0x40011400
                  |L5.140|
                          DCD      0x40011800

                          AREA ||i.KLineInit||, CODE, READONLY, ALIGN=2

                  KLineInit PROC
;;;240    
;;;241    void KLineInit(void )
000000  b500              PUSH     {lr}
;;;242    {
000002  b085              SUB      sp,sp,#0x14
;;;243    	GPIO_InitTypeDef  GPIO_InitStructure;
;;;244    	USART_InitTypeDef USART_InitStructure;
;;;245    	
;;;246    	
;;;247    	//USART3 RX
;;;248    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_KWP_RX;
000004  f44f6000          MOV      r0,#0x800
000008  f8ad0010          STRH     r0,[sp,#0x10]
;;;249      	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
00000c  2004              MOVS     r0,#4
00000e  f88d0013          STRB     r0,[sp,#0x13]
;;;250      	GPIO_Init(GPIOB, &GPIO_InitStructure);
000012  a904              ADD      r1,sp,#0x10
000014  4819              LDR      r0,|L6.124|
000016  f7fffffe          BL       GPIO_Init
;;;251    	//USART3 TX
;;;252    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_KWP_TX;
00001a  f44f6080          MOV      r0,#0x400
00001e  f8ad0010          STRH     r0,[sp,#0x10]
;;;253      	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
000022  2018              MOVS     r0,#0x18
000024  f88d0013          STRB     r0,[sp,#0x13]
;;;254      	GPIO_Init(GPIOB, &GPIO_InitStructure);
000028  a904              ADD      r1,sp,#0x10
00002a  4814              LDR      r0,|L6.124|
00002c  f7fffffe          BL       GPIO_Init
;;;255    	
;;;256    	USART_InitStructure.USART_BaudRate            = 10400  ;		  //KWP2000 波特率10400
000030  f64200a0          MOV      r0,#0x28a0
000034  9000              STR      r0,[sp,#0]
;;;257    	USART_InitStructure.USART_WordLength          = USART_WordLength_8b;
000036  2000              MOVS     r0,#0
000038  f8ad0004          STRH     r0,[sp,#4]
;;;258    	USART_InitStructure.USART_StopBits            = USART_StopBits_1;
00003c  f8ad0006          STRH     r0,[sp,#6]
;;;259    	USART_InitStructure.USART_Parity              = USART_Parity_No ;
000040  f8ad0008          STRH     r0,[sp,#8]
;;;260    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000044  f8ad000c          STRH     r0,[sp,#0xc]
;;;261    	USART_InitStructure.USART_Mode                = USART_Mode_Rx | USART_Mode_Tx;
000048  200c              MOVS     r0,#0xc
00004a  f8ad000a          STRH     r0,[sp,#0xa]
;;;262    
;;;263    	USART_Init(USART3, &USART_InitStructure);
00004e  4669              MOV      r1,sp
000050  480b              LDR      r0,|L6.128|
000052  f7fffffe          BL       USART_Init
;;;264    	USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
000056  2201              MOVS     r2,#1
000058  f2405125          MOV      r1,#0x525
00005c  4808              LDR      r0,|L6.128|
00005e  f7fffffe          BL       USART_ITConfig
;;;265    	USART_ITConfig(USART3, USART_IT_TC, ENABLE);
000062  2201              MOVS     r2,#1
000064  f2406126          MOV      r1,#0x626
000068  4805              LDR      r0,|L6.128|
00006a  f7fffffe          BL       USART_ITConfig
;;;266    	USART_Cmd(USART3, ENABLE); 
00006e  2101              MOVS     r1,#1
000070  4803              LDR      r0,|L6.128|
000072  f7fffffe          BL       USART_Cmd
;;;267    }
000076  b005              ADD      sp,sp,#0x14
000078  bd00              POP      {pc}
;;;268    
                          ENDP

00007a  0000              DCW      0x0000
                  |L6.124|
                          DCD      0x40010c00
                  |L6.128|
                          DCD      0x40004800

                          AREA ||i.NVIC_AllConfig||, CODE, READONLY, ALIGN=1

                  NVIC_AllConfig PROC
;;;385    
;;;386    void NVIC_AllConfig(void )
000000  b508              PUSH     {r3,lr}
;;;387    {
;;;388    	NVIC_InitTypeDef NVIC_InitStructure; 
;;;389    	NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x8000);
000002  f44f4100          MOV      r1,#0x8000
000006  0308              LSLS     r0,r1,#12
000008  f7fffffe          BL       NVIC_SetVectorTable
;;;390    	
;;;391    	/* Enable the RTC Interrupt */
;;;392    	NVIC_InitStructure.NVIC_IRQChannel = RTCAlarm_IRQn;  
00000c  2029              MOVS     r0,#0x29
00000e  f88d0000          STRB     r0,[sp,#0]
;;;393    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;  
000012  2000              MOVS     r0,#0
000014  f88d0001          STRB     r0,[sp,#1]
;;;394    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;  
000018  f88d0002          STRB     r0,[sp,#2]
;;;395    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;  
00001c  2001              MOVS     r0,#1
00001e  f88d0003          STRB     r0,[sp,#3]
;;;396    	NVIC_Init(&NVIC_InitStructure);  
000022  4668              MOV      r0,sp
000024  f7fffffe          BL       NVIC_Init
;;;397    	
;;;398    	//定时器4 中断优先级NVIC设置
;;;399    	NVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn; //TIM4中断
000028  201e              MOVS     r0,#0x1e
00002a  f88d0000          STRB     r0,[sp,#0]
;;;400    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;//先占优先级0级
00002e  2000              MOVS     r0,#0
000030  f88d0001          STRB     r0,[sp,#1]
;;;401    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;       //从优先级3级
000034  2003              MOVS     r0,#3
000036  f88d0002          STRB     r0,[sp,#2]
;;;402    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; //IRQ通道被使能
00003a  2001              MOVS     r0,#1
00003c  f88d0003          STRB     r0,[sp,#3]
;;;403    	NVIC_Init(&NVIC_InitStructure);                 //初始化NVIC寄存器
000040  4668              MOV      r0,sp
000042  f7fffffe          BL       NVIC_Init
;;;404    	
;;;405    	//串口3 中断初始化
;;;406    	NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
000046  2027              MOVS     r0,#0x27
000048  f88d0000          STRB     r0,[sp,#0]
;;;407    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
00004c  2002              MOVS     r0,#2
00004e  f88d0001          STRB     r0,[sp,#1]
;;;408    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
000052  2001              MOVS     r0,#1
000054  f88d0002          STRB     r0,[sp,#2]
;;;409    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000058  f88d0003          STRB     r0,[sp,#3]
;;;410    	NVIC_Init(&NVIC_InitStructure);
00005c  4668              MOV      r0,sp
00005e  f7fffffe          BL       NVIC_Init
;;;411    	
;;;412    	//串口2 中断初始化
;;;413    	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;  //为串口2中断配置中断优先级
000062  2026              MOVS     r0,#0x26
000064  f88d0000          STRB     r0,[sp,#0]
;;;414    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
000068  2002              MOVS     r0,#2
00006a  f88d0001          STRB     r0,[sp,#1]
;;;415    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 4;
00006e  2004              MOVS     r0,#4
000070  f88d0002          STRB     r0,[sp,#2]
;;;416    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000074  2001              MOVS     r0,#1
000076  f88d0003          STRB     r0,[sp,#3]
;;;417    	NVIC_Init(&NVIC_InitStructure);
00007a  4668              MOV      r0,sp
00007c  f7fffffe          BL       NVIC_Init
;;;418    	
;;;419    	NVIC_InitStructure.NVIC_IRQChannel = CAN1_RX1_IRQn;
000080  2015              MOVS     r0,#0x15
000082  f88d0000          STRB     r0,[sp,#0]
;;;420    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
000086  2002              MOVS     r0,#2
000088  f88d0001          STRB     r0,[sp,#1]
;;;421    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 5;
00008c  2005              MOVS     r0,#5
00008e  f88d0002          STRB     r0,[sp,#2]
;;;422    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000092  2001              MOVS     r0,#1
000094  f88d0003          STRB     r0,[sp,#3]
;;;423    	NVIC_Init(&NVIC_InitStructure);	
000098  4668              MOV      r0,sp
00009a  f7fffffe          BL       NVIC_Init
;;;424    	
;;;425    	//GPS 串口初始化
;;;426    	NVIC_InitStructure.NVIC_IRQChannel = UART4_IRQn;
00009e  2034              MOVS     r0,#0x34
0000a0  f88d0000          STRB     r0,[sp,#0]
;;;427    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
0000a4  2002              MOVS     r0,#2
0000a6  f88d0001          STRB     r0,[sp,#1]
;;;428    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 6;
0000aa  2006              MOVS     r0,#6
0000ac  f88d0002          STRB     r0,[sp,#2]
;;;429    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
0000b0  2001              MOVS     r0,#1
0000b2  f88d0003          STRB     r0,[sp,#3]
;;;430    	NVIC_Init(&NVIC_InitStructure);
0000b6  4668              MOV      r0,sp
0000b8  f7fffffe          BL       NVIC_Init
;;;431    	
;;;432    	//定时器2 辅助GPS接收 中断初始化
;;;433    	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn; //TIM2中断
0000bc  201c              MOVS     r0,#0x1c
0000be  f88d0000          STRB     r0,[sp,#0]
;;;434    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;//先占优先级2级
0000c2  2002              MOVS     r0,#2
0000c4  f88d0001          STRB     r0,[sp,#1]
;;;435    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;       //从优先级1级
0000c8  2001              MOVS     r0,#1
0000ca  f88d0002          STRB     r0,[sp,#2]
;;;436    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; //IRQ通道被使能
0000ce  f88d0003          STRB     r0,[sp,#3]
;;;437    	NVIC_Init(&NVIC_InitStructure);                 //初始化NVIC寄存器
0000d2  4668              MOV      r0,sp
0000d4  f7fffffe          BL       NVIC_Init
;;;438    	//定时器5 辅助USB接收 中断初始化
;;;439    	NVIC_InitStructure.NVIC_IRQChannel = TIM5_IRQn; //TIM2中断
0000d8  2032              MOVS     r0,#0x32
0000da  f88d0000          STRB     r0,[sp,#0]
;;;440    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;//先占优先级2级
0000de  2002              MOVS     r0,#2
0000e0  f88d0001          STRB     r0,[sp,#1]
;;;441    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;       //从优先级1级
0000e4  2001              MOVS     r0,#1
0000e6  f88d0002          STRB     r0,[sp,#2]
;;;442    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; //IRQ通道被使能
0000ea  f88d0003          STRB     r0,[sp,#3]
;;;443    	NVIC_Init(&NVIC_InitStructure);                 //初始化NVIC寄存器
0000ee  4668              MOV      r0,sp
0000f0  f7fffffe          BL       NVIC_Init
;;;444    }
0000f4  bd08              POP      {r3,pc}
;;;445    
                          ENDP


                          AREA ||i.RTCConfigureInit||, CODE, READONLY, ALIGN=1

                  RTCConfigureInit PROC
;;;300    }
;;;301    void RTCConfigureInit(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;302    {
;;;303    	EXTI_InitTypeDef EXTI_InitStructure;  
;;;304     
;;;305    	/* Enable PWR and BKP clocks */
;;;306    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR | RCC_APB1Periph_BKP, ENABLE);
000002  2101              MOVS     r1,#1
000004  f04f50c0          MOV      r0,#0x18000000
000008  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;307    
;;;308    	/* Allow access to BKP Domain */
;;;309    	PWR_BackupAccessCmd(ENABLE);
00000c  2001              MOVS     r0,#1
00000e  f7fffffe          BL       PWR_BackupAccessCmd
;;;310    
;;;311    	/* Reset Backup Domain */
;;;312    	//BKP_DeInit();
;;;313    
;;;314    	//BKP_ClearFlag();
;;;315    	//RCC_LSEConfig(RCC_LSE_ON);
;;;316    	RCC_LSICmd(ENABLE);
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       RCC_LSICmd
;;;317    
;;;318    	//while(RCC_GetFlagStatus(RCC_FLAG_LSERDY)==RESET);//等待LSE就绪，如果谐振不对，就会死在这里
;;;319    
;;;320    	BKP_TamperPinCmd(DISABLE);
000018  2000              MOVS     r0,#0
00001a  f7fffffe          BL       BKP_TamperPinCmd
;;;321    
;;;322    	/* Select LSE as RTC Clock Source */
;;;323    	//RCC_RTCCLKConfig(RCC_RTCCLKSource_LSE);
;;;324    	//RCC_RTCCLKConfig(RCC_RTCCLKSource_HSE_Div128); //			  RCC_RTCCLKSource_LSE RCC_RTCCLKSource_HSE_Div128
;;;325    	RCC_RTCCLKConfig(RCC_RTCCLKSource_LSI);
00001e  f44f7000          MOV      r0,#0x200
000022  f7fffffe          BL       RCC_RTCCLKConfig
;;;326    
;;;327    	/* Enable RTC Clock */
;;;328    	RCC_RTCCLKCmd(ENABLE);
000026  2001              MOVS     r0,#1
000028  f7fffffe          BL       RCC_RTCCLKCmd
;;;329    
;;;330    	/* Wait for RTC registers synchronization */
;;;331    	RTC_WaitForSynchro();
00002c  f7fffffe          BL       RTC_WaitForSynchro
;;;332    
;;;333    
;;;334    	/* Wait until last write operation on RTC registers has finished */
;;;335    	RTC_WaitForLastTask();
000030  f7fffffe          BL       RTC_WaitForLastTask
;;;336    
;;;337    	/* Enable the RTC Second */
;;;338    	//RTC_ITConfig(RTC_IT_SEC, ENABLE);
;;;339    
;;;340    	RTC_ITConfig(RTC_IT_ALR, ENABLE);
000034  2101              MOVS     r1,#1
000036  2002              MOVS     r0,#2
000038  f7fffffe          BL       RTC_ITConfig
;;;341    
;;;342    	/* Wait until last write operation on RTC registers has finished */
;;;343    	RTC_WaitForLastTask();
00003c  f7fffffe          BL       RTC_WaitForLastTask
;;;344    
;;;345    	/* Set RTC prescaler: set RTC period to 1sec */
;;;346    	//RTC_SetPrescaler(32767); /* RTC period = RTCCLK/RTC_PR = (32.768 KHz)/(32767+1) */
;;;347    	RTC_SetPrescaler(39999);	  //8M/128=62500 //40k
000040  f649403f          MOV      r0,#0x9c3f
000044  f7fffffe          BL       RTC_SetPrescaler
;;;348    	//RTC_SetPrescaler(93749);	  //12M/128=93750
;;;349    	/* Wait until last write operation on RTC registers has finished */
;;;350    	RTC_WaitForLastTask();
000048  f7fffffe          BL       RTC_WaitForLastTask
;;;351    	
;;;352    	EXTI_ClearITPendingBit(EXTI_Line17);  
00004c  f44f3000          MOV      r0,#0x20000
000050  f7fffffe          BL       EXTI_ClearITPendingBit
;;;353    	EXTI_InitStructure.EXTI_Line = EXTI_Line17;  
000054  f44f3000          MOV      r0,#0x20000
000058  9000              STR      r0,[sp,#0]
;;;354    	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;  
00005a  2000              MOVS     r0,#0
00005c  f88d0004          STRB     r0,[sp,#4]
;;;355    	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
000060  2008              MOVS     r0,#8
000062  f88d0005          STRB     r0,[sp,#5]
;;;356    	EXTI_InitStructure.EXTI_LineCmd = ENABLE;  
000066  2001              MOVS     r0,#1
000068  f88d0006          STRB     r0,[sp,#6]
;;;357    	EXTI_Init(&EXTI_InitStructure);  
00006c  4668              MOV      r0,sp
00006e  f7fffffe          BL       EXTI_Init
;;;358    }
000072  bd1c              POP      {r2-r4,pc}
;;;359    void RTC_Time_Adjust(uint32_t value)//RTC实时时钟校正
                          ENDP


                          AREA ||i.RTC_Time_Adjust||, CODE, READONLY, ALIGN=1

                  RTC_Time_Adjust PROC
;;;358    }
;;;359    void RTC_Time_Adjust(uint32_t value)//RTC实时时钟校正
000000  b510              PUSH     {r4,lr}
;;;360    {
000002  4604              MOV      r4,r0
;;;361      /* Wait until last write operation on RTC registers has finished */
;;;362      RTC_WaitForLastTask();
000004  f7fffffe          BL       RTC_WaitForLastTask
;;;363      /* Change the current time */
;;;364      RTC_SetCounter(value);
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       RTC_SetCounter
;;;365      /* Wait until last write operation on RTC registers has finished */
;;;366      RTC_WaitForLastTask();
00000e  f7fffffe          BL       RTC_WaitForLastTask
;;;367    }
000012  bd10              POP      {r4,pc}
;;;368    //初始化独立看门狗
                          ENDP


                          AREA ||i.SysTickInit||, CODE, READONLY, ALIGN=2

                  SysTickInit PROC
;;;49     //系统时钟滴答初始化
;;;50     void SysTickInit(void)
000000  b570              PUSH     {r4-r6,lr}
;;;51     {
;;;52     	SystemCoreClockUpdate();
000002  f7fffffe          BL       SystemCoreClockUpdate
;;;53     	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK);
000006  2004              MOVS     r0,#4
000008  f7fffffe          BL       SysTick_CLKSourceConfig
;;;54     	SysTick_Config(SystemCoreClock / OS_TICKS_PER_SEC);
00000c  4814              LDR      r0,|L10.96|
00000e  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000010  f44f72fa          MOV      r2,#0x1f4
000014  fbb0f1f2          UDIV     r1,r0,r2
000018  f1b17f80          CMP      r1,#0x1000000
00001c  d300              BCC      |L10.32|
00001e  e01d              B        |L10.92|
                  |L10.32|
000020  f021407f          BIC      r0,r1,#0xff000000
000024  1e40              SUBS     r0,r0,#1
000026  f04f22e0          MOV      r2,#0xe000e000
00002a  6150              STR      r0,[r2,#0x14]
00002c  1750              ASRS     r0,r2,#29
00002e  220f              MOVS     r2,#0xf
000030  2800              CMP      r0,#0
000032  da07              BGE      |L10.68|
000034  0713              LSLS     r3,r2,#28
000036  0e1d              LSRS     r5,r3,#24
000038  4b0a              LDR      r3,|L10.100|
00003a  f000040f          AND      r4,r0,#0xf
00003e  1f24              SUBS     r4,r4,#4
000040  551d              STRB     r5,[r3,r4]
000042  e003              B        |L10.76|
                  |L10.68|
000044  0713              LSLS     r3,r2,#28
000046  0e1c              LSRS     r4,r3,#24
000048  4b07              LDR      r3,|L10.104|
00004a  541c              STRB     r4,[r3,r0]
                  |L10.76|
00004c  bf00              NOP      
00004e  2000              MOVS     r0,#0
000050  f04f22e0          MOV      r2,#0xe000e000
000054  6190              STR      r0,[r2,#0x18]
000056  2007              MOVS     r0,#7
000058  6110              STR      r0,[r2,#0x10]
00005a  bf00              NOP      
                  |L10.92|
;;;55     }
00005c  bd70              POP      {r4-r6,pc}
;;;56     //使能外设时钟
                          ENDP

00005e  0000              DCW      0x0000
                  |L10.96|
                          DCD      SystemCoreClock
                  |L10.100|
                          DCD      0xe000ed18
                  |L10.104|
                          DCD      0xe000e400

                          AREA ||i.SystemBspInit||, CODE, READONLY, ALIGN=2

                  SystemBspInit PROC
;;;5      //芯片初始化，包括系统时钟、芯片外设、时钟滴答等等
;;;6      void SystemBspInit(void )
000000  b510              PUSH     {r4,lr}
;;;7      {
;;;8      	uint8_t bitValue;
;;;9      	BspClockInit();
000002  f7fffffe          BL       BspClockInit
;;;10     	SysTickInit();
000006  f7fffffe          BL       SysTickInit
;;;11     	
;;;12     	GlobalVarInit();//全局变量初始化
00000a  f7fffffe          BL       GlobalVarInit
;;;13     	CARVarInit();   //与车辆行驶相关结构体的初始化
00000e  f7fffffe          BL       CARVarInit
;;;14     	
;;;15     	GPIO_ALL_IN();  //IO口设置为输入
000012  f7fffffe          BL       GPIO_ALL_IN
;;;16     	
;;;17     	GPIOLEDInit();
000016  f7fffffe          BL       GPIOLEDInit
;;;18     	NVIC_AllConfig();
00001a  f7fffffe          BL       NVIC_AllConfig
;;;19     	
;;;20     	CDMAUart2Init();
00001e  f7fffffe          BL       CDMAUart2Init
;;;21     	GPSConfigInit(9600);
000022  f44f5016          MOV      r0,#0x2580
000026  f7fffffe          BL       GPSConfigInit
;;;22     
;;;23     	TIM4ConfigInit();
00002a  f7fffffe          BL       TIM4ConfigInit
;;;24     	TIM2ConfigInit();
00002e  f7fffffe          BL       TIM2ConfigInit
;;;25     	RTCConfigureInit();
000032  f7fffffe          BL       RTCConfigureInit
;;;26     	
;;;27     	
;;;28     	bitValue = GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_0);
000036  2101              MOVS     r1,#1
000038  480a              LDR      r0,|L11.100|
00003a  f7fffffe          BL       GPIO_ReadInputDataBit
00003e  4604              MOV      r4,r0
;;;29     	if(bitValue == 1)
000040  2c01              CMP      r4,#1
000042  d106              BNE      |L11.82|
;;;30     	{
;;;31     		varOperation.USB_NormalMode = 1;
000044  4908              LDR      r1,|L11.104|
000046  7208              STRB     r0,[r1,#8]
;;;32     		GPIO_SetBits(GPIOA,GPIO_Pin_15);//使能USB接口
000048  03c1              LSLS     r1,r0,#15
00004a  4808              LDR      r0,|L11.108|
00004c  f7fffffe          BL       GPIO_SetBits
000050  e007              B        |L11.98|
                  |L11.82|
;;;33     	}else
;;;34     	{
;;;35     		varOperation.USB_NormalMode = 0;
000052  2000              MOVS     r0,#0
000054  4904              LDR      r1,|L11.104|
000056  7208              STRB     r0,[r1,#8]
;;;36     		WatchDogInit(7,2000);//看门狗初始化，系统卡死大概12s后重启 		
000058  f44f61fa          MOV      r1,#0x7d0
00005c  2007              MOVS     r0,#7
00005e  f7fffffe          BL       WatchDogInit
                  |L11.98|
;;;37     	}
;;;38     //	CDMAUart2Init();
;;;39     //	GPSConfigInit(9600);
;;;40     //	
;;;41     //	TIM4ConfigInit();
;;;42     //	TIM2ConfigInit();
;;;43     //	RTCConfigureInit();
;;;44     	
;;;45     	
;;;46     	
;;;47     	
;;;48     }
000062  bd10              POP      {r4,pc}
;;;49     //系统时钟滴答初始化
                          ENDP

                  |L11.100|
                          DCD      0x40011000
                  |L11.104|
                          DCD      varOperation
                  |L11.108|
                          DCD      0x40010800

                          AREA ||i.TIM4ConfigInit||, CODE, READONLY, ALIGN=2

                  TIM4ConfigInit PROC
;;;268    
;;;269    void TIM4ConfigInit(void )
000000  b50e              PUSH     {r1-r3,lr}
;;;270    {
;;;271    	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;272    	
;;;273    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE); //时钟使能
000002  2101              MOVS     r1,#1
000004  2004              MOVS     r0,#4
000006  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;274    	
;;;275    	//定时器TIM4初始化
;;;276    	TIM_TimeBaseStructure.TIM_Period = 10;          //设置在下一个更新事件装入活动的自动重装载寄存器周期的值	
00000a  200a              MOVS     r0,#0xa
00000c  f8ad0004          STRH     r0,[sp,#4]
;;;277    	TIM_TimeBaseStructure.TIM_Prescaler =7199;      //设置用来作为TIMx时钟频率除数的预分频值
000010  f641401f          MOV      r0,#0x1c1f
000014  f8ad0000          STRH     r0,[sp,#0]
;;;278    	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;      //设置时钟分割:TDTS = Tck_tim
000018  2000              MOVS     r0,#0
00001a  f8ad0006          STRH     r0,[sp,#6]
;;;279    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  //TIM向上计数模式
00001e  f8ad0002          STRH     r0,[sp,#2]
;;;280    	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure); //根据指定的参数初始化TIMx的时间基数单位
000022  4669              MOV      r1,sp
000024  4804              LDR      r0,|L12.56|
000026  f7fffffe          BL       TIM_TimeBaseInit
;;;281     
;;;282    	TIM_ITConfig(TIM4,TIM_IT_Update,ENABLE );       //使能指定的TIM4中断,允许更新中断	
00002a  2201              MOVS     r2,#1
00002c  4611              MOV      r1,r2
00002e  4802              LDR      r0,|L12.56|
000030  f7fffffe          BL       TIM_ITConfig
;;;283    //	TIM_Cmd(TIM4, ENABLE);  //使能TIMx		
;;;284    }
000034  bd0e              POP      {r1-r3,pc}
;;;285    void TIM5ConfigInit(void )
                          ENDP

000036  0000              DCW      0x0000
                  |L12.56|
                          DCD      0x40000800

                          AREA ||i.TIM5ConfigInit||, CODE, READONLY, ALIGN=2

                  TIM5ConfigInit PROC
;;;284    }
;;;285    void TIM5ConfigInit(void )
000000  b50e              PUSH     {r1-r3,lr}
;;;286    {
;;;287    	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;288    	
;;;289    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE); //时钟使能
000002  2101              MOVS     r1,#1
000004  2008              MOVS     r0,#8
000006  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;290    	
;;;291    	//定时器TIM5初始化
;;;292    	TIM_TimeBaseStructure.TIM_Period = 10;          //设置在下一个更新事件装入活动的自动重装载寄存器周期的值	
00000a  200a              MOVS     r0,#0xa
00000c  f8ad0004          STRH     r0,[sp,#4]
;;;293    	TIM_TimeBaseStructure.TIM_Prescaler =7199;      //设置用来作为TIMx时钟频率除数的预分频值
000010  f641401f          MOV      r0,#0x1c1f
000014  f8ad0000          STRH     r0,[sp,#0]
;;;294    	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;      //设置时钟分割:TDTS = Tck_tim
000018  2000              MOVS     r0,#0
00001a  f8ad0006          STRH     r0,[sp,#6]
;;;295    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  //TIM向上计数模式
00001e  f8ad0002          STRH     r0,[sp,#2]
;;;296    	TIM_TimeBaseInit(TIM5, &TIM_TimeBaseStructure); //根据指定的参数初始化TIMx的时间基数单位
000022  4669              MOV      r1,sp
000024  4804              LDR      r0,|L13.56|
000026  f7fffffe          BL       TIM_TimeBaseInit
;;;297     
;;;298    	TIM_ITConfig(TIM5,TIM_IT_Update,ENABLE );       //使能指定的TIM4中断,允许更新中断	
00002a  2201              MOVS     r2,#1
00002c  4611              MOV      r1,r2
00002e  4802              LDR      r0,|L13.56|
000030  f7fffffe          BL       TIM_ITConfig
;;;299    //	TIM_Cmd(TIM5, ENABLE);  //使能TIMx		
;;;300    }
000034  bd0e              POP      {r1-r3,pc}
;;;301    void RTCConfigureInit(void)
                          ENDP

000036  0000              DCW      0x0000
                  |L13.56|
                          DCD      0x40000c00

                          AREA ||i.WatchDogInit||, CODE, READONLY, ALIGN=1

                  WatchDogInit PROC
;;;372    //时间计算(大概):Tout=((4*2^prer)*rlr)/40 (ms).
;;;373    void WatchDogInit(uint8_t prer,uint16_t rlr )
000000  b570              PUSH     {r4-r6,lr}
;;;374    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;375    	IWDG_WriteAccessCmd(IWDG_WriteAccess_Enable);  //使能对寄存器IWDG_PR和IWDG_RLR的写操作
000006  f2455055          MOV      r0,#0x5555
00000a  f7fffffe          BL       IWDG_WriteAccessCmd
;;;376    	
;;;377    	IWDG_SetPrescaler(prer);  //设置IWDG预分频值:设置IWDG预分频值为64
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       IWDG_SetPrescaler
;;;378    	
;;;379    	IWDG_SetReload(rlr);  //设置IWDG重装载值
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       IWDG_SetReload
;;;380    	
;;;381    	IWDG_ReloadCounter();  //按照IWDG重装载寄存器的值重装载IWDG计数器
00001a  f7fffffe          BL       IWDG_ReloadCounter
;;;382    	
;;;383    	IWDG_Enable();  //使能IWDG
00001e  f7fffffe          BL       IWDG_Enable
;;;384    }
000022  bd70              POP      {r4-r6,pc}
;;;385    
                          ENDP

