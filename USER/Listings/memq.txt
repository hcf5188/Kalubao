; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\obj\memq.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=..\obj\memq.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\OBD -I..\SYSTEM -I..\USER -I..\LIB\inc -I..\UCOSII\CONFIG -I..\UCOSII\PORT -I..\UCOSII\CORE -I..\HAEDWARE -I..\GPS -I..\CDMA -I..\DEAL -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\memq.crf ..\DEAL\memQ.c]
                          THUMB

                          AREA ||i.CirQ_Clear||, CODE, READONLY, ALIGN=1

                  CirQ_Clear PROC
;;;61     ****************************************************************/
;;;62     NORMAL_STATE  CirQ_Clear(pCIR_QUEUE ptr_Q)
000000  4601              MOV      r1,r0
;;;63     {
;;;64     	if(ptr_Q->data == NULL)  return FAULT;
000002  6888              LDR      r0,[r1,#8]
000004  b908              CBNZ     r0,|L1.10|
000006  2001              MOVS     r0,#1
                  |L1.8|
;;;65     	
;;;66     	ptr_Q->front  = 0;
;;;67     	ptr_Q->rear   = 0;
;;;68     	ptr_Q->count  = 0;
;;;69     	
;;;70     	return OK;
;;;71     }
000008  4770              BX       lr
                  |L1.10|
00000a  2000              MOVS     r0,#0                 ;66
00000c  8008              STRH     r0,[r1,#0]            ;66
00000e  8048              STRH     r0,[r1,#2]            ;67
000010  80c8              STRH     r0,[r1,#6]            ;68
000012  bf00              NOP                            ;70
000014  e7f8              B        |L1.8|
;;;72     /****************************************************************
                          ENDP


                          AREA ||i.CirQ_Delete||, CODE, READONLY, ALIGN=1

                  CirQ_Delete PROC
;;;43     ****************************************************************/
;;;44     NORMAL_STATE  CirQ_Delete(pCIR_QUEUE ptr_Q)
000000  b510              PUSH     {r4,lr}
;;;45     {
000002  4604              MOV      r4,r0
;;;46     	if(ptr_Q->data == NULL)
000004  68a0              LDR      r0,[r4,#8]
000006  b908              CBNZ     r0,|L2.12|
;;;47     		return FAULT;
000008  2001              MOVS     r0,#1
                  |L2.10|
;;;48     	
;;;49     	if(Mem_free(ptr_Q->data) != 0)
;;;50     		return FAULT;
;;;51     	
;;;52     	if(Mem_free(ptr_Q) != 0)
;;;53     		return FAULT;
;;;54     	return OK;
;;;55     }
00000a  bd10              POP      {r4,pc}
                  |L2.12|
00000c  68a0              LDR      r0,[r4,#8]            ;49
00000e  f7fffffe          BL       Mem_free
000012  b108              CBZ      r0,|L2.24|
000014  2001              MOVS     r0,#1                 ;50
000016  e7f8              B        |L2.10|
                  |L2.24|
000018  4620              MOV      r0,r4                 ;52
00001a  f7fffffe          BL       Mem_free
00001e  b108              CBZ      r0,|L2.36|
000020  2001              MOVS     r0,#1                 ;53
000022  e7f2              B        |L2.10|
                  |L2.36|
000024  2000              MOVS     r0,#0                 ;54
000026  e7f0              B        |L2.10|
;;;56     /****************************************************************
                          ENDP


                          AREA ||i.CirQ_GetLength||, CODE, READONLY, ALIGN=1

                  CirQ_GetLength PROC
;;;77     ****************************************************************/
;;;78     uint16_t CirQ_GetLength(pCIR_QUEUE ptr_Q)
000000  4601              MOV      r1,r0
;;;79     {
;;;80     	if(ptr_Q->data == NULL) return 0;
000002  6888              LDR      r0,[r1,#8]
000004  b908              CBNZ     r0,|L3.10|
000006  2000              MOVS     r0,#0
                  |L3.8|
;;;81     	
;;;82     	return ptr_Q->count;
;;;83     }
000008  4770              BX       lr
                  |L3.10|
00000a  88c8              LDRH     r0,[r1,#6]            ;82
00000c  e7fc              B        |L3.8|
;;;84     /****************************************************************
                          ENDP


                          AREA ||i.CirQ_OnePush||, CODE, READONLY, ALIGN=1

                  CirQ_OnePush PROC
;;;107    ****************************************************************/
;;;108    NORMAL_STATE CirQ_OnePush(pCIR_QUEUE ptr_Q,uint8_t dat)
000000  4602              MOV      r2,r0
;;;109    {
;;;110    	if(ptr_Q->data == NULL)           return FAULT;
000002  6890              LDR      r0,[r2,#8]
000004  b908              CBNZ     r0,|L4.10|
000006  2001              MOVS     r0,#1
                  |L4.8|
;;;111    	if(ptr_Q->count == ptr_Q->length) return OVERFLOW;
;;;112    	
;;;113    	ptr_Q->data[ptr_Q->rear] = dat;
;;;114    	ptr_Q->rear ++;
;;;115    	if(ptr_Q->rear == ptr_Q->length)
;;;116    		ptr_Q->rear = 0;
;;;117    	
;;;118    	ptr_Q->count ++;
;;;119    	
;;;120    	return OK;
;;;121    }
000008  4770              BX       lr
                  |L4.10|
00000a  88d0              LDRH     r0,[r2,#6]            ;111
00000c  8893              LDRH     r3,[r2,#4]            ;111
00000e  4298              CMP      r0,r3                 ;111
000010  d101              BNE      |L4.22|
000012  2002              MOVS     r0,#2                 ;111
000014  e7f8              B        |L4.8|
                  |L4.22|
000016  8853              LDRH     r3,[r2,#2]            ;113
000018  6890              LDR      r0,[r2,#8]            ;113
00001a  54c1              STRB     r1,[r0,r3]            ;113
00001c  8850              LDRH     r0,[r2,#2]            ;114
00001e  1c40              ADDS     r0,r0,#1              ;114
000020  8050              STRH     r0,[r2,#2]            ;114
000022  8850              LDRH     r0,[r2,#2]            ;115
000024  8893              LDRH     r3,[r2,#4]            ;115
000026  4298              CMP      r0,r3                 ;115
000028  d101              BNE      |L4.46|
00002a  2000              MOVS     r0,#0                 ;116
00002c  8050              STRH     r0,[r2,#2]            ;116
                  |L4.46|
00002e  88d0              LDRH     r0,[r2,#6]            ;118
000030  1c40              ADDS     r0,r0,#1              ;118
000032  80d0              STRH     r0,[r2,#6]            ;118
000034  2000              MOVS     r0,#0                 ;120
000036  e7e7              B        |L4.8|
;;;122    /****************************************************************
                          ENDP


                          AREA ||i.CirQ_Pop||, CODE, READONLY, ALIGN=1

                  CirQ_Pop PROC
;;;89     ****************************************************************/
;;;90     NORMAL_STATE CirQ_Pop(pCIR_QUEUE ptr_Q,unsigned char *phead)
000000  4602              MOV      r2,r0
;;;91     {
;;;92     	if(ptr_Q->data == NULL)  return FAULT;
000002  6890              LDR      r0,[r2,#8]
000004  b908              CBNZ     r0,|L5.10|
000006  2001              MOVS     r0,#1
                  |L5.8|
;;;93     	if(ptr_Q->count == 0)    return EMPTY;
;;;94     	
;;;95     	*phead = ptr_Q->data[ptr_Q->front];
;;;96     	ptr_Q->front ++;
;;;97     	if(ptr_Q->front == ptr_Q->length)
;;;98     		ptr_Q->front = 0;
;;;99     	ptr_Q->count --;
;;;100    	return OK;
;;;101    }
000008  4770              BX       lr
                  |L5.10|
00000a  88d0              LDRH     r0,[r2,#6]            ;93
00000c  b908              CBNZ     r0,|L5.18|
00000e  2003              MOVS     r0,#3                 ;93
000010  e7fa              B        |L5.8|
                  |L5.18|
000012  8813              LDRH     r3,[r2,#0]            ;95
000014  6890              LDR      r0,[r2,#8]            ;95
000016  5cc0              LDRB     r0,[r0,r3]            ;95
000018  7008              STRB     r0,[r1,#0]            ;95
00001a  8810              LDRH     r0,[r2,#0]            ;96
00001c  1c40              ADDS     r0,r0,#1              ;96
00001e  8010              STRH     r0,[r2,#0]            ;96
000020  8810              LDRH     r0,[r2,#0]            ;97
000022  8893              LDRH     r3,[r2,#4]            ;97
000024  4298              CMP      r0,r3                 ;97
000026  d101              BNE      |L5.44|
000028  2000              MOVS     r0,#0                 ;98
00002a  8010              STRH     r0,[r2,#0]            ;98
                  |L5.44|
00002c  88d0              LDRH     r0,[r2,#6]            ;99
00002e  1e40              SUBS     r0,r0,#1              ;99
000030  80d0              STRH     r0,[r2,#6]            ;99
000032  2000              MOVS     r0,#0                 ;100
000034  e7e8              B        |L5.8|
;;;102    /****************************************************************
                          ENDP


                          AREA ||i.CirQ_Pushs||, CODE, READONLY, ALIGN=1

                  CirQ_Pushs PROC
;;;127    ****************************************************************/
;;;128    NORMAL_STATE CirQ_Pushs(pCIR_QUEUE ptr_Q,const uint8_t *pdata,uint16_t length)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;129    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;130    	if(ptr_Q->data == NULL) return FAULT;
00000a  68a0              LDR      r0,[r4,#8]
00000c  b910              CBNZ     r0,|L6.20|
00000e  2001              MOVS     r0,#1
                  |L6.16|
;;;131    	if(length == 0)         return FAULT;
;;;132    	else if(length == 1)         
;;;133    		return CirQ_OnePush(ptr_Q,*pdata);
;;;134    	if(ptr_Q->count + length > ptr_Q->length)
;;;135    		return OVERFLOW;
;;;136    	if(ptr_Q->rear + length > ptr_Q->length)
;;;137    	{
;;;138    		memcpy(ptr_Q->data + ptr_Q->rear,pdata,ptr_Q->length - ptr_Q->rear);
;;;139    		memcpy(ptr_Q->data,pdata + ptr_Q->length - ptr_Q->rear,length + ptr_Q->rear - ptr_Q->length);
;;;140    		ptr_Q->rear = length + ptr_Q->rear - ptr_Q->length;
;;;141    	}
;;;142    	else
;;;143    	{
;;;144    		memcpy(ptr_Q->data + ptr_Q->rear,pdata,length);
;;;145    		ptr_Q->rear = length + ptr_Q->rear;
;;;146    	}
;;;147    	ptr_Q->count = ptr_Q->count + length;
;;;148    	
;;;149    	return OK;
;;;150    }
000010  e8bd81f0          POP      {r4-r8,pc}
                  |L6.20|
000014  b90d              CBNZ     r5,|L6.26|
000016  2001              MOVS     r0,#1                 ;131
000018  e7fa              B        |L6.16|
                  |L6.26|
00001a  2d01              CMP      r5,#1                 ;132
00001c  d104              BNE      |L6.40|
00001e  7831              LDRB     r1,[r6,#0]            ;133
000020  4620              MOV      r0,r4                 ;133
000022  f7fffffe          BL       CirQ_OnePush
000026  e7f3              B        |L6.16|
                  |L6.40|
000028  88e0              LDRH     r0,[r4,#6]            ;134
00002a  4428              ADD      r0,r0,r5              ;134
00002c  88a1              LDRH     r1,[r4,#4]            ;134
00002e  4288              CMP      r0,r1                 ;134
000030  dd01              BLE      |L6.54|
000032  2002              MOVS     r0,#2                 ;135
000034  e7ec              B        |L6.16|
                  |L6.54|
000036  8860              LDRH     r0,[r4,#2]            ;136
000038  4428              ADD      r0,r0,r5              ;136
00003a  88a1              LDRH     r1,[r4,#4]            ;136
00003c  4288              CMP      r0,r1                 ;136
00003e  dd17              BLE      |L6.112|
000040  88a1              LDRH     r1,[r4,#4]            ;138
000042  8863              LDRH     r3,[r4,#2]            ;138
000044  1aca              SUBS     r2,r1,r3              ;138
000046  68a1              LDR      r1,[r4,#8]            ;138
000048  18c8              ADDS     r0,r1,r3              ;138
00004a  4631              MOV      r1,r6                 ;138
00004c  f7fffffe          BL       __aeabi_memcpy
000050  8863              LDRH     r3,[r4,#2]            ;139
000052  442b              ADD      r3,r3,r5              ;139
000054  88a7              LDRH     r7,[r4,#4]            ;139
000056  1bda              SUBS     r2,r3,r7              ;139
000058  19bb              ADDS     r3,r7,r6              ;139
00005a  8867              LDRH     r7,[r4,#2]            ;139
00005c  1bd9              SUBS     r1,r3,r7              ;139
00005e  68a0              LDR      r0,[r4,#8]            ;139
000060  f7fffffe          BL       __aeabi_memcpy
000064  8860              LDRH     r0,[r4,#2]            ;140
000066  4428              ADD      r0,r0,r5              ;140
000068  88a1              LDRH     r1,[r4,#4]            ;140
00006a  1a40              SUBS     r0,r0,r1              ;140
00006c  8060              STRH     r0,[r4,#2]            ;140
00006e  e009              B        |L6.132|
                  |L6.112|
000070  8862              LDRH     r2,[r4,#2]            ;144
000072  68a1              LDR      r1,[r4,#8]            ;144
000074  1888              ADDS     r0,r1,r2              ;144
000076  462a              MOV      r2,r5                 ;144
000078  4631              MOV      r1,r6                 ;144
00007a  f7fffffe          BL       __aeabi_memcpy
00007e  8860              LDRH     r0,[r4,#2]            ;145
000080  4428              ADD      r0,r0,r5              ;145
000082  8060              STRH     r0,[r4,#2]            ;145
                  |L6.132|
000084  88e0              LDRH     r0,[r4,#6]            ;147
000086  4428              ADD      r0,r0,r5              ;147
000088  80e0              STRH     r0,[r4,#6]            ;147
00008a  2000              MOVS     r0,#0                 ;149
00008c  e7c0              B        |L6.16|
;;;151    
                          ENDP


                          AREA ||i.Cir_Queue_Init||, CODE, READONLY, ALIGN=1

                  Cir_Queue_Init PROC
;;;17     ****************************************************************/
;;;18     pCIR_QUEUE Cir_Queue_Init(uint16_t length)
000000  b570              PUSH     {r4-r6,lr}
;;;19     {
000002  4605              MOV      r5,r0
;;;20     	pCIR_QUEUE ptr_Q = NULL;
000004  2400              MOVS     r4,#0
;;;21     	
;;;22     	if(length < 2)
000006  2d02              CMP      r5,#2
000008  da01              BGE      |L7.14|
;;;23     		return NULL;
00000a  2000              MOVS     r0,#0
                  |L7.12|
;;;24     	if((ptr_Q = (pCIR_QUEUE)Mem_malloc(sizeof(CIR_QUEUE))) != NULL)
;;;25     	{
;;;26     		if((ptr_Q->data = (uint8_t *)Mem_malloc(length)) != NULL)
;;;27     		{
;;;28     			ptr_Q->front  = 0;
;;;29     			ptr_Q->rear   = 0;
;;;30     			ptr_Q->length = length;
;;;31     			return ptr_Q;
;;;32     		}
;;;33     		else 
;;;34     			Mem_free(ptr_Q);
;;;35     	}
;;;36     	return NULL;
;;;37     }
00000c  bd70              POP      {r4-r6,pc}
                  |L7.14|
00000e  200c              MOVS     r0,#0xc               ;24
000010  f7fffffe          BL       Mem_malloc
000014  0004              MOVS     r4,r0                 ;24
000016  d00d              BEQ      |L7.52|
000018  4628              MOV      r0,r5                 ;26
00001a  f7fffffe          BL       Mem_malloc
00001e  60a0              STR      r0,[r4,#8]            ;26
000020  b128              CBZ      r0,|L7.46|
000022  2000              MOVS     r0,#0                 ;28
000024  8020              STRH     r0,[r4,#0]            ;28
000026  8060              STRH     r0,[r4,#2]            ;29
000028  80a5              STRH     r5,[r4,#4]            ;30
00002a  4620              MOV      r0,r4                 ;31
00002c  e7ee              B        |L7.12|
                  |L7.46|
00002e  4620              MOV      r0,r4                 ;34
000030  f7fffffe          BL       Mem_free
                  |L7.52|
000034  2000              MOVS     r0,#0                 ;36
000036  e7e9              B        |L7.12|
;;;38     /****************************************************************
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\DEAL\\memQ.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_memQ_c_29f325c8____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_memQ_c_29f325c8____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_memQ_c_29f325c8____REVSH|
#line 144
|__asm___6_memQ_c_29f325c8____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
