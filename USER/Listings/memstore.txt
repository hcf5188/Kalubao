; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\obj\memstore.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=..\obj\memstore.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\OBD -I..\SYSTEM -I..\USER -I..\LIB\inc -I..\UCOSII\CONFIG -I..\UCOSII\PORT -I..\UCOSII\CORE -I..\HAEDWARE -I..\GPS -I..\CDMA -I..\DEAL -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\memstore.crf ..\DEAL\memStore.c]
                          THUMB

                          AREA ||i.Store_Clear||, CODE, READONLY, ALIGN=1

                  Store_Clear PROC
;;;58     ****************************************************************/
;;;59     NORMAL_STATE Store_Clear(pSTORE S)
000000  4601              MOV      r1,r0
;;;60     {
;;;61     	if(S->base == NULL)	return FAULT;
000002  6848              LDR      r0,[r1,#4]
000004  b908              CBNZ     r0,|L1.10|
000006  2001              MOVS     r0,#1
                  |L1.8|
;;;62     	S->top = 0;
;;;63     	return OK;
;;;64     }
000008  4770              BX       lr
                  |L1.10|
00000a  2000              MOVS     r0,#0                 ;62
00000c  8008              STRH     r0,[r1,#0]            ;62
00000e  bf00              NOP                            ;63
000010  e7fa              B        |L1.8|
;;;65     /****************************************************************
                          ENDP


                          AREA ||i.Store_Delete||, CODE, READONLY, ALIGN=1

                  Store_Delete PROC
;;;39     ****************************************************************/
;;;40     NORMAL_STATE Store_Delete(pSTORE S)
000000  b510              PUSH     {r4,lr}
;;;41     {
000002  4604              MOV      r4,r0
;;;42     	if(S->base == NULL)         
000004  6860              LDR      r0,[r4,#4]
000006  b908              CBNZ     r0,|L2.12|
;;;43     		return FAULT;
000008  2001              MOVS     r0,#1
                  |L2.10|
;;;44     	
;;;45     	if(Mem_free(S->base) != 0)  
;;;46     		return FAULT;
;;;47     	
;;;48     	if(Mem_free(S) != 0)        
;;;49     		return FAULT;
;;;50     	
;;;51     	return OK;
;;;52     }
00000a  bd10              POP      {r4,pc}
                  |L2.12|
00000c  6860              LDR      r0,[r4,#4]            ;45
00000e  f7fffffe          BL       Mem_free
000012  b108              CBZ      r0,|L2.24|
000014  2001              MOVS     r0,#1                 ;46
000016  e7f8              B        |L2.10|
                  |L2.24|
000018  4620              MOV      r0,r4                 ;48
00001a  f7fffffe          BL       Mem_free
00001e  b108              CBZ      r0,|L2.36|
000020  2001              MOVS     r0,#1                 ;49
000022  e7f2              B        |L2.10|
                  |L2.36|
000024  2000              MOVS     r0,#0                 ;51
000026  e7f0              B        |L2.10|
;;;53     /****************************************************************
                          ENDP


                          AREA ||i.Store_Getdates||, CODE, READONLY, ALIGN=1

                  Store_Getdates PROC
;;;114    ****************************************************************/
;;;115    NORMAL_STATE Store_Getdates(pSTORE S,uint8_t *pdate,uint8_t num)
000000  b570              PUSH     {r4-r6,lr}
;;;116    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;117    	if(S->base == NULL) return FAULT;
000008  6860              LDR      r0,[r4,#4]
00000a  b908              CBNZ     r0,|L3.16|
00000c  2001              MOVS     r0,#1
                  |L3.14|
;;;118    	if(num > S->top)    return FAULT;
;;;119    	if(pdate == NULL)   return FAULT;
;;;120    	
;;;121    	memcpy(pdate,S->base,num);
;;;122    	S->top = S->top - num;
;;;123    	memcpy(S->base,S->base + num,S->top);
;;;124    	
;;;125    	return OK;
;;;126    }
00000e  bd70              POP      {r4-r6,pc}
                  |L3.16|
000010  8820              LDRH     r0,[r4,#0]            ;118
000012  42a8              CMP      r0,r5                 ;118
000014  da01              BGE      |L3.26|
000016  2001              MOVS     r0,#1                 ;118
000018  e7f9              B        |L3.14|
                  |L3.26|
00001a  b90e              CBNZ     r6,|L3.32|
00001c  2001              MOVS     r0,#1                 ;119
00001e  e7f6              B        |L3.14|
                  |L3.32|
000020  462a              MOV      r2,r5                 ;121
000022  4630              MOV      r0,r6                 ;121
000024  6861              LDR      r1,[r4,#4]            ;121
000026  f7fffffe          BL       __aeabi_memcpy
00002a  8820              LDRH     r0,[r4,#0]            ;122
00002c  1b40              SUBS     r0,r0,r5              ;122
00002e  8020              STRH     r0,[r4,#0]            ;122
000030  8822              LDRH     r2,[r4,#0]            ;123
000032  6863              LDR      r3,[r4,#4]            ;123
000034  1959              ADDS     r1,r3,r5              ;123
000036  4618              MOV      r0,r3                 ;123
000038  f7fffffe          BL       __aeabi_memcpy
00003c  2000              MOVS     r0,#0                 ;125
00003e  e7e6              B        |L3.14|
;;;127    
                          ENDP


                          AREA ||i.Store_Getlength||, CODE, READONLY, ALIGN=1

                  Store_Getlength PROC
;;;102    ****************************************************************/
;;;103    uint16_t Store_Getlength(pSTORE S)
000000  4601              MOV      r1,r0
;;;104    {
;;;105    	if(S->base == NULL) return 0;
000002  6848              LDR      r0,[r1,#4]
000004  b908              CBNZ     r0,|L4.10|
000006  2000              MOVS     r0,#0
                  |L4.8|
;;;106    	
;;;107    	return S->top;
;;;108    }
000008  4770              BX       lr
                  |L4.10|
00000a  8808              LDRH     r0,[r1,#0]            ;107
00000c  e7fc              B        |L4.8|
;;;109    /****************************************************************
                          ENDP


                          AREA ||i.Store_Init||, CODE, READONLY, ALIGN=1

                  Store_Init PROC
;;;16     ****************************************************************/
;;;17     pSTORE Store_Init(uint16_t length)
000000  b570              PUSH     {r4-r6,lr}
;;;18     {
000002  4605              MOV      r5,r0
;;;19     	pSTORE S = NULL;
000004  2400              MOVS     r4,#0
;;;20     	if(length < 2)  return NULL;
000006  2d02              CMP      r5,#2
000008  da01              BGE      |L5.14|
00000a  2000              MOVS     r0,#0
                  |L5.12|
;;;21     	if((S = (pSTORE)Mem_malloc(sizeof(STORE))) != NULL)
;;;22     	{
;;;23     		if((S->base = (unsigned char *)Mem_malloc(length)) != NULL)
;;;24     		{
;;;25     			S->length = length;
;;;26     			S->top    = 0;
;;;27     			return S;
;;;28     		}
;;;29     		else
;;;30     			Mem_free(S);
;;;31     	}
;;;32     	return NULL;
;;;33     }
00000c  bd70              POP      {r4-r6,pc}
                  |L5.14|
00000e  2008              MOVS     r0,#8                 ;21
000010  f7fffffe          BL       Mem_malloc
000014  0004              MOVS     r4,r0                 ;21
000016  d00c              BEQ      |L5.50|
000018  4628              MOV      r0,r5                 ;23
00001a  f7fffffe          BL       Mem_malloc
00001e  6060              STR      r0,[r4,#4]            ;23
000020  b120              CBZ      r0,|L5.44|
000022  8065              STRH     r5,[r4,#2]            ;25
000024  2000              MOVS     r0,#0                 ;26
000026  8020              STRH     r0,[r4,#0]            ;26
000028  4620              MOV      r0,r4                 ;27
00002a  e7ef              B        |L5.12|
                  |L5.44|
00002c  4620              MOV      r0,r4                 ;30
00002e  f7fffffe          BL       Mem_free
                  |L5.50|
000032  2000              MOVS     r0,#0                 ;32
000034  e7ea              B        |L5.12|
;;;34     /****************************************************************
                          ENDP


                          AREA ||i.Store_Pop||, CODE, READONLY, ALIGN=1

                  Store_Pop PROC
;;;86     ****************************************************************/
;;;87     NORMAL_STATE Store_Pop(pSTORE S,uint8_t *pdat)
000000  4602              MOV      r2,r0
;;;88     {
;;;89     	if(S->base == NULL) return FAULT;
000002  6850              LDR      r0,[r2,#4]
000004  b908              CBNZ     r0,|L6.10|
000006  2001              MOVS     r0,#1
                  |L6.8|
;;;90     	if(S->top == 0)    return EMPTY;
;;;91     	
;;;92     	S->top --;
;;;93     	*pdat = S->base[S->top];
;;;94     	
;;;95     	return OK;
;;;96     }
000008  4770              BX       lr
                  |L6.10|
00000a  8810              LDRH     r0,[r2,#0]            ;90
00000c  b908              CBNZ     r0,|L6.18|
00000e  2003              MOVS     r0,#3                 ;90
000010  e7fa              B        |L6.8|
                  |L6.18|
000012  8810              LDRH     r0,[r2,#0]            ;92
000014  1e40              SUBS     r0,r0,#1              ;92
000016  8010              STRH     r0,[r2,#0]            ;92
000018  8813              LDRH     r3,[r2,#0]            ;93
00001a  6850              LDR      r0,[r2,#4]            ;93
00001c  5cc0              LDRB     r0,[r0,r3]            ;93
00001e  7008              STRB     r0,[r1,#0]            ;93
000020  2000              MOVS     r0,#0                 ;95
000022  e7f1              B        |L6.8|
;;;97     /****************************************************************
                          ENDP


                          AREA ||i.Store_Push||, CODE, READONLY, ALIGN=1

                  Store_Push PROC
;;;70     ****************************************************************/
;;;71     NORMAL_STATE Store_Push(pSTORE S,uint8_t dat)
000000  4602              MOV      r2,r0
;;;72     {
;;;73     	if(S->base == NULL) return FAULT;
000002  6850              LDR      r0,[r2,#4]
000004  b908              CBNZ     r0,|L7.10|
000006  2001              MOVS     r0,#1
                  |L7.8|
;;;74     	if(S->top  == S->length) return OVERFLOW;
;;;75     	
;;;76     	S->base[S->top] = dat;
;;;77     	S->top ++;
;;;78     	
;;;79     	return OK;
;;;80     }
000008  4770              BX       lr
                  |L7.10|
00000a  8810              LDRH     r0,[r2,#0]            ;74
00000c  8853              LDRH     r3,[r2,#2]            ;74
00000e  4298              CMP      r0,r3                 ;74
000010  d101              BNE      |L7.22|
000012  2002              MOVS     r0,#2                 ;74
000014  e7f8              B        |L7.8|
                  |L7.22|
000016  8813              LDRH     r3,[r2,#0]            ;76
000018  6850              LDR      r0,[r2,#4]            ;76
00001a  54c1              STRB     r1,[r0,r3]            ;76
00001c  8810              LDRH     r0,[r2,#0]            ;77
00001e  1c40              ADDS     r0,r0,#1              ;77
000020  8010              STRH     r0,[r2,#0]            ;77
000022  2000              MOVS     r0,#0                 ;79
000024  e7f0              B        |L7.8|
;;;81     /****************************************************************
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\DEAL\\memStore.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_memStore_c_cba2e654____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_memStore_c_cba2e654____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_memStore_c_cba2e654____REVSH|
#line 144
|__asm___10_memStore_c_cba2e654____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
