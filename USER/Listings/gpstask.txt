; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\obj\gpstask.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=..\obj\gpstask.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\OBD -I..\SYSTEM -I..\USER -I..\LIB\inc -I..\UCOSII\CONFIG -I..\UCOSII\PORT -I..\UCOSII\CORE -I..\HAEDWARE -I..\GPS -I..\CDMA -I..\DEAL -I..\USB\CONFIG -I..\USB\STM32_USB-FS-Device_Driver\inc -I.\RTE\_Project -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\5.2.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=524 -D_RTE_ -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\gpstask.crf ..\GPS\GPSTask.c]
                          THUMB

                          AREA ||i.GPSStartInit||, CODE, READONLY, ALIGN=2

                  GPSStartInit PROC
;;;115    //初始化配置GPS
;;;116    void GPSStartInit(void )
000000  b510              PUSH     {r4,lr}
;;;117    {
;;;118    	u8 key=0XFF;
000002  24ff              MOVS     r4,#0xff
;;;119    //	OSTimeDlyHMSM(0,0,8,0);          
;;;120    	if(Ublox_Cfg_Rate(1000,1)!=0)          //1s采集一次 MC数据
000004  2101              MOVS     r1,#1
000006  f44f707a          MOV      r0,#0x3e8
00000a  f7fffffe          BL       Ublox_Cfg_Rate
00000e  b1c0              CBZ      r0,|L1.66|
;;;121    	{
;;;122    		while((Ublox_Cfg_Rate(1000,1)!=0)&&key)	//持续判断,直到可以检查到NEO-6M,且数据保存成功
000010  e00f              B        |L1.50|
                  |L1.18|
;;;123    		{
;;;124    	  		Ublox_Cfg_Prt(9600);	        //重新设置模块的波特率为9600
000012  f44f5016          MOV      r0,#0x2580
000016  f7fffffe          BL       Ublox_Cfg_Prt
;;;125    			Ublox_Cfg_Tp(1000000,100000,1);	//设置PPS为1秒钟输出1次,脉冲宽度为100ms	
00001a  2201              MOVS     r2,#1
00001c  4909              LDR      r1,|L1.68|
00001e  480a              LDR      r0,|L1.72|
000020  f7fffffe          BL       Ublox_Cfg_Tp
;;;126    			Ublox_Cfg_Msg(4,1);		        //MC
000024  2101              MOVS     r1,#1
000026  2004              MOVS     r0,#4
000028  f7fffffe          BL       Ublox_Cfg_Msg
;;;127    //			Ublox_Cfg_Msg(2,1);		        //SA
;;;128    			key=Ublox_Cfg_Cfg_Save();		//保存配置  
00002c  f7fffffe          BL       Ublox_Cfg_Cfg_Save
000030  4604              MOV      r4,r0
                  |L1.50|
000032  2101              MOVS     r1,#1                 ;122
000034  f44f707a          MOV      r0,#0x3e8             ;122
000038  f7fffffe          BL       Ublox_Cfg_Rate
00003c  b108              CBZ      r0,|L1.66|
00003e  2c00              CMP      r4,#0                 ;122
000040  d1e7              BNE      |L1.18|
                  |L1.66|
;;;129    		}
;;;130    	}
;;;131    }
000042  bd10              POP      {r4,pc}
;;;132    //从buf里面得到第cx个逗号所在的位置
                          ENDP

                  |L1.68|
                          DCD      0x000186a0
                  |L1.72|
                          DCD      0x000f4240

                          AREA ||i.GPSTask||, CODE, READONLY, ALIGN=2

                  GPSTask PROC
;;;7      
;;;8      void GPSTask(void *pdata)
000000  b51f              PUSH     {r0-r4,lr}
;;;9      {
;;;10     	
;;;11     	uint8_t err;
;;;12     	static uint8_t locatemp = 0;
;;;13     //	uint8_t i = 0;
;;;14     	uint8_t* ptrGPSRece;
;;;15     	uint8_t* ptrGPSPack = NULL;
000002  2400              MOVS     r4,#0
;;;16     	uint16_t speed;
;;;17     	uint32_t timeStamp;//时间戳
;;;18     	uint32_t osTime;
;;;19     	uint32_t sendNum = 0;
000004  46a0              MOV      r8,r4
;;;20     	
;;;21     	GPSStartInit();//初始化配置GPS
000006  f7fffffe          BL       GPSStartInit
;;;22     	
;;;23     	while(1)
00000a  e0be              B        |L2.394|
                  |L2.12|
;;;24     	{
;;;25     		ptrGPSRece = OSQPend(receGPSQ,0,&err);//等待接收到应答
00000c  aa03              ADD      r2,sp,#0xc
00000e  2100              MOVS     r1,#0
000010  485e              LDR      r0,|L2.396|
000012  6800              LDR      r0,[r0,#0]  ; receGPSQ
000014  f7fffffe          BL       OSQPend
000018  4607              MOV      r7,r0
;;;26     			
;;;27     		GPS_Analysis(&gpsMC,&ptrGPSRece[2]);
00001a  1cb9              ADDS     r1,r7,#2
00001c  485c              LDR      r0,|L2.400|
00001e  f7fffffe          BL       GPS_Analysis
;;;28     		Mem_free(ptrGPSRece);
000022  4638              MOV      r0,r7
000024  f7fffffe          BL       Mem_free
;;;29     		
;;;30     		//todo：要根据有效无效判断位来解析， 此时若解析的经度为0  视为无效定位
;;;31     		if(gpsMC.longitude == 0) 
000028  4859              LDR      r0,|L2.400|
00002a  f8d00049          LDR      r0,[r0,#0x49]  ; gpsMC
00002e  b918              CBNZ     r0,|L2.56|
;;;32     		{
;;;33     			freGPSLed =  LEDFAST; ;//GPS 绿灯快闪，GPS定位不成功
000030  20c8              MOVS     r0,#0xc8
000032  4958              LDR      r1,|L2.404|
000034  8008              STRH     r0,[r1,#0]
;;;34     			continue;
000036  e0a8              B        |L2.394|
                  |L2.56|
;;;35     		}	
;;;36     		
;;;37     		timeStamp = TimeCompare(gpsMC.utc.year,gpsMC.utc.month,gpsMC.utc.date,gpsMC.utc.hour,gpsMC.utc.min,gpsMC.utc.sec);
000038  4855              LDR      r0,|L2.400|
00003a  f8900043          LDRB     r0,[r0,#0x43]
00003e  4954              LDR      r1,|L2.400|
000040  f8911042          LDRB     r1,[r1,#0x42]
000044  f8dfc148          LDR      r12,|L2.400|
000048  e9cd1000          STRD     r1,r0,[sp,#0]
00004c  f89c3041          LDRB     r3,[r12,#0x41]
000050  f89c2040          LDRB     r2,[r12,#0x40]
000054  f89c103f          LDRB     r1,[r12,#0x3f]
000058  f8bc003d          LDRH     r0,[r12,#0x3d]  ; gpsMC
00005c  f7fffffe          BL       TimeCompare
000060  4606              MOV      r6,r0
;;;38     		varOperation.currentTime = timeStamp;
000062  484d              LDR      r0,|L2.408|
000064  6606              STR      r6,[r0,#0x60]  ; varOperation
;;;39     		locatemp ++;
000066  484d              LDR      r0,|L2.412|
000068  7800              LDRB     r0,[r0,#0]  ; locatemp
00006a  1c40              ADDS     r0,r0,#1
00006c  494b              LDR      r1,|L2.412|
00006e  7008              STRB     r0,[r1,#0]
;;;40     		if(locatemp == 3)
000070  4608              MOV      r0,r1
000072  7800              LDRB     r0,[r0,#0]  ; locatemp
000074  2803              CMP      r0,#3
000076  d10b              BNE      |L2.144|
;;;41     		{
;;;42     			carAllRecord.startlongitude = gpsMC.longitude;
000078  4845              LDR      r0,|L2.400|
00007a  f8d00049          LDR      r0,[r0,#0x49]  ; gpsMC
00007e  4948              LDR      r1,|L2.416|
000080  6108              STR      r0,[r1,#0x10]  ; carAllRecord
;;;43     			carAllRecord.startlatitude  = gpsMC.latitude;
000082  4843              LDR      r0,|L2.400|
000084  6c40              LDR      r0,[r0,#0x44]  ; gpsMC
000086  6148              STR      r0,[r1,#0x14]  ; carAllRecord
;;;44     			locatemp = 20;
000088  2014              MOVS     r0,#0x14
00008a  4944              LDR      r1,|L2.412|
00008c  7008              STRB     r0,[r1,#0]
00008e  e006              B        |L2.158|
                  |L2.144|
;;;45     		}else if(locatemp >= 20)
000090  4842              LDR      r0,|L2.412|
000092  7800              LDRB     r0,[r0,#0]  ; locatemp
000094  2814              CMP      r0,#0x14
000096  db02              BLT      |L2.158|
;;;46     		{
;;;47     			locatemp = 20;
000098  2014              MOVS     r0,#0x14
00009a  4940              LDR      r1,|L2.412|
00009c  7008              STRB     r0,[r1,#0]
                  |L2.158|
;;;48     		}
;;;49     		ptrGPSPack = Mem_malloc(50);
00009e  2032              MOVS     r0,#0x32
0000a0  f7fffffe          BL       Mem_malloc
0000a4  4604              MOV      r4,r0
;;;50     		if(ptrGPSPack != NULL)
0000a6  2c00              CMP      r4,#0
0000a8  d055              BEQ      |L2.342|
;;;51     		{
;;;52     			ptrGPSPack[0] = 19;
0000aa  2013              MOVS     r0,#0x13
0000ac  7020              STRB     r0,[r4,#0]
;;;53     			ptrGPSPack[1] = 0x50;
0000ae  2050              MOVS     r0,#0x50
0000b0  7060              STRB     r0,[r4,#1]
;;;54     			ptrGPSPack[2] = 0x02;
0000b2  2002              MOVS     r0,#2
0000b4  70a0              STRB     r0,[r4,#2]
;;;55     			timeStamp = t_htonl(timeStamp);	
0000b6  4630              MOV      r0,r6
0000b8  f7fffffe          BL       t_htonl
0000bc  4606              MOV      r6,r0
;;;56     			memcpy(&ptrGPSPack[3],&timeStamp,sizeof(timeStamp));//UTC时间戳
0000be  f8c46003          STR      r6,[r4,#3]
;;;57     			
;;;58     			timeStamp = t_htonl(gpsMC.longitude);
0000c2  4933              LDR      r1,|L2.400|
0000c4  f8d10049          LDR      r0,[r1,#0x49]  ; gpsMC
0000c8  f7fffffe          BL       t_htonl
0000cc  4606              MOV      r6,r0
;;;59     			memcpy(&ptrGPSPack[7],&timeStamp,sizeof(timeStamp));//经度
0000ce  f8c46007          STR      r6,[r4,#7]
;;;60     			
;;;61     			timeStamp = t_htonl(gpsMC.latitude);
0000d2  492f              LDR      r1,|L2.400|
0000d4  6c48              LDR      r0,[r1,#0x44]  ; gpsMC
0000d6  f7fffffe          BL       t_htonl
0000da  4606              MOV      r6,r0
;;;62     			memcpy(&ptrGPSPack[11],&timeStamp,sizeof(timeStamp));//维度
0000dc  f8c4600b          STR      r6,[r4,#0xb]
;;;63     			
;;;64     			speed = t_htons(gpsMC.direction);
0000e0  492b              LDR      r1,|L2.400|
0000e2  f8b10063          LDRH     r0,[r1,#0x63]  ; gpsMC
0000e6  f7fffffe          BL       t_htons
0000ea  9002              STR      r0,[sp,#8]
;;;65     			memcpy(&ptrGPSPack[15],&speed,2);        //GPS方向
0000ec  f8bd0008          LDRH     r0,[sp,#8]
0000f0  f8a4000f          STRH     r0,[r4,#0xf]
;;;66     			
;;;67     			speed = t_htons(gpsMC.speed);
0000f4  4926              LDR      r1,|L2.400|
0000f6  f8b10069          LDRH     r0,[r1,#0x69]  ; gpsMC
0000fa  f7fffffe          BL       t_htons
0000fe  9002              STR      r0,[sp,#8]
;;;68     			memcpy(&ptrGPSPack[17],&speed,2);        //GPS 车速 
000100  f8bd0008          LDRH     r0,[sp,#8]
000104  f8a40011          STRH     r0,[r4,#0x11]
;;;69     			
;;;70     			if((varOperation.isDataFlow == 0)&&(sendNum != osTime))     //数据流已经流动起来了  确保1秒发送一次
000108  4823              LDR      r0,|L2.408|
00010a  f890002d          LDRB     r0,[r0,#0x2d]  ; varOperation
00010e  b9f8              CBNZ     r0,|L2.336|
000110  45a8              CMP      r8,r5
000112  d01d              BEQ      |L2.336|
;;;71     			{	
;;;72     				sendNum = osTime;
000114  46a8              MOV      r8,r5
;;;73     				
;;;74     				OSMutexPend(CDMASendMutex,0,&err);
000116  aa03              ADD      r2,sp,#0xc
000118  2100              MOVS     r1,#0
00011a  4822              LDR      r0,|L2.420|
00011c  6800              LDR      r0,[r0,#0]  ; CDMASendMutex
00011e  f7fffffe          BL       OSMutexPend
;;;75     			
;;;76     				memcpy(&cdmaDataToSend->data[cdmaDataToSend->datLength],ptrGPSPack,ptrGPSPack[0]);
000122  4921              LDR      r1,|L2.424|
000124  6809              LDR      r1,[r1,#0]  ; cdmaDataToSend
000126  6849              LDR      r1,[r1,#4]
000128  4b1f              LDR      r3,|L2.424|
00012a  681b              LDR      r3,[r3,#0]  ; cdmaDataToSend
00012c  881b              LDRH     r3,[r3,#0]
00012e  18c8              ADDS     r0,r1,r3
000130  7822              LDRB     r2,[r4,#0]
000132  4621              MOV      r1,r4
000134  f7fffffe          BL       __aeabi_memcpy
;;;77     				cdmaDataToSend->datLength += ptrGPSPack[0];
000138  481b              LDR      r0,|L2.424|
00013a  6800              LDR      r0,[r0,#0]  ; cdmaDataToSend
00013c  8800              LDRH     r0,[r0,#0]
00013e  7821              LDRB     r1,[r4,#0]
000140  4408              ADD      r0,r0,r1
000142  4919              LDR      r1,|L2.424|
000144  6809              LDR      r1,[r1,#0]  ; cdmaDataToSend
000146  8008              STRH     r0,[r1,#0]
;;;78     				
;;;79     				OSMutexPost(CDMASendMutex);
000148  4816              LDR      r0,|L2.420|
00014a  6800              LDR      r0,[r0,#0]  ; CDMASendMutex
00014c  f7fffffe          BL       OSMutexPost
                  |L2.336|
;;;80     			}
;;;81     			
;;;82     			Mem_free(ptrGPSPack);
000150  4620              MOV      r0,r4
000152  f7fffffe          BL       Mem_free
                  |L2.342|
;;;83     		}
;;;84     		osTime = RTC_GetCounter();
000156  f7fffffe          BL       RTC_GetCounter
00015a  4605              MOV      r5,r0
;;;85     		timeStamp = varOperation.currentTime > osTime? (varOperation.currentTime - osTime):(osTime - varOperation.currentTime);
00015c  480e              LDR      r0,|L2.408|
00015e  6e01              LDR      r1,[r0,#0x60]  ; varOperation
000160  42a9              CMP      r1,r5
000162  d902              BLS      |L2.362|
000164  6e00              LDR      r0,[r0,#0x60]  ; varOperation
000166  1b40              SUBS     r0,r0,r5
000168  e002              B        |L2.368|
                  |L2.362|
00016a  480b              LDR      r0,|L2.408|
00016c  6e00              LDR      r0,[r0,#0x60]  ; varOperation
00016e  1a28              SUBS     r0,r5,r0
                  |L2.368|
000170  4606              MOV      r6,r0
;;;86     		if(timeStamp > 300)//时间相差5分钟后，校时（以GPS时间为准）
000172  f5b67f96          CMP      r6,#0x12c
000176  d903              BLS      |L2.384|
;;;87     			RTC_Time_Adjust(varOperation.currentTime);
000178  4907              LDR      r1,|L2.408|
00017a  6e08              LDR      r0,[r1,#0x60]  ; varOperation
00017c  f7fffffe          BL       RTC_Time_Adjust
                  |L2.384|
;;;88     		freGPSLed = LEDSLOW; ;          //LED  指示，GPS定位正常
000180  f44f707a          MOV      r0,#0x3e8
000184  4903              LDR      r1,|L2.404|
000186  8008              STRH     r0,[r1,#0]
000188  bf00              NOP                            ;34
                  |L2.394|
00018a  e73f              B        |L2.12|
;;;89     	}
;;;90     }
;;;91     
                          ENDP

                  |L2.396|
                          DCD      receGPSQ
                  |L2.400|
                          DCD      gpsMC
                  |L2.404|
                          DCD      freGPSLed
                  |L2.408|
                          DCD      varOperation
                  |L2.412|
                          DCD      locatemp
                  |L2.416|
                          DCD      carAllRecord
                  |L2.420|
                          DCD      CDMASendMutex
                  |L2.424|
                          DCD      cdmaDataToSend

                          AREA ||i.GPS_Analysis||, CODE, READONLY, ALIGN=1

                  GPS_Analysis PROC
;;;263    //buf:接收到的GPS数据缓冲区首地址
;;;264    void GPS_Analysis(nmea_msg *gpsx,u8 *buf)
000000  b570              PUSH     {r4-r6,lr}
;;;265    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;266    	NMEA_GPRMC_Analysis(gpsx,buf);	//GPRMC解析  只解析这一个就行了，下面的不需要啦
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       NMEA_GPRMC_Analysis
;;;267    }
00000e  bd70              POP      {r4-r6,pc}
;;;268    
                          ENDP


                          AREA ||i.NMEA_Comma_Pos||, CODE, READONLY, ALIGN=1

                  NMEA_Comma_Pos PROC
;;;134    //       0XFF,代表不存在第cx个逗号	
;;;135    u8 NMEA_Comma_Pos(u8 *buf,u8 cx)
000000  4602              MOV      r2,r0
;;;136    {	 		    
;;;137    	u8 *p=buf;
000002  4613              MOV      r3,r2
;;;138    	while(cx)
000004  e010              B        |L4.40|
                  |L4.6|
;;;139    	{		 
;;;140    		if(*buf=='*'||*buf<' '||*buf>'z')return 0XFF;//遇到'*'或者非法字符,则不存在第cx个逗号
000006  7810              LDRB     r0,[r2,#0]
000008  282a              CMP      r0,#0x2a
00000a  d005              BEQ      |L4.24|
00000c  7810              LDRB     r0,[r2,#0]
00000e  2820              CMP      r0,#0x20
000010  db02              BLT      |L4.24|
000012  7810              LDRB     r0,[r2,#0]
000014  287a              CMP      r0,#0x7a
000016  dd01              BLE      |L4.28|
                  |L4.24|
000018  20ff              MOVS     r0,#0xff
                  |L4.26|
;;;141    		if(*buf==',')cx--;
;;;142    		buf++;
;;;143    	}
;;;144    	return buf-p;	 
;;;145    }
00001a  4770              BX       lr
                  |L4.28|
00001c  7810              LDRB     r0,[r2,#0]            ;141
00001e  282c              CMP      r0,#0x2c              ;141
000020  d101              BNE      |L4.38|
000022  1e48              SUBS     r0,r1,#1              ;141
000024  b2c1              UXTB     r1,r0                 ;141
                  |L4.38|
000026  1c52              ADDS     r2,r2,#1              ;142
                  |L4.40|
000028  2900              CMP      r1,#0                 ;138
00002a  d1ec              BNE      |L4.6|
00002c  1ad0              SUBS     r0,r2,r3              ;144
00002e  b2c0              UXTB     r0,r0                 ;144
000030  e7f3              B        |L4.26|
;;;146    //m^n函数
                          ENDP


                          AREA ||i.NMEA_GPRMC_Analysis||, CODE, READONLY, ALIGN=2

                  NMEA_GPRMC_Analysis PROC
;;;198    //buf:接收到的GPS数据缓冲区首地址
;;;199    void NMEA_GPRMC_Analysis(nmea_msg *gpsx,u8 *buf)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;200    {
000004  b085              SUB      sp,sp,#0x14
000006  4604              MOV      r4,r0
000008  4688              MOV      r8,r1
;;;201    	u8 *p1,dx;	//dx小数点位数	p1指向 GPRMC 的开始位置		 
;;;202    	u8 posx;     
;;;203    	u32 temp;	   
;;;204    	float rs;  
;;;205    	p1=(u8*)strstr((const char *)buf,"GPRMC");//"$GPRMC",经常有&和GPRMC分开的情况,故只判断GPRMC.
00000a  a19c              ADR      r1,|L5.636|
00000c  4640              MOV      r0,r8
00000e  f7fffffe          BL       strstr
000012  4607              MOV      r7,r0
;;;206    	
;;;207    	posx=NMEA_Comma_Pos(p1,1);								//得到UTC时间
000014  2101              MOVS     r1,#1
000016  4638              MOV      r0,r7
000018  f7fffffe          BL       NMEA_Comma_Pos
00001c  4605              MOV      r5,r0
;;;208    	if(posx!=0XFF)
00001e  2dff              CMP      r5,#0xff
000020  d023              BEQ      |L5.106|
;;;209    	{
;;;210    		temp=NMEA_Str2num(p1+posx,&dx)/NMEA_Pow(10,dx);	 	//得到UTC时间,去掉ms
000022  1978              ADDS     r0,r7,r5
000024  a904              ADD      r1,sp,#0x10
000026  f7fffffe          BL       NMEA_Str2num
00002a  4682              MOV      r10,r0
00002c  f89d1010          LDRB     r1,[sp,#0x10]
000030  200a              MOVS     r0,#0xa
000032  f7fffffe          BL       NMEA_Pow
000036  fbbaf6f0          UDIV     r6,r10,r0
;;;211    		gpsx->utc.hour=temp/10000;
00003a  f2427010          MOV      r0,#0x2710
00003e  fbb6f0f0          UDIV     r0,r6,r0
000042  b2c1              UXTB     r1,r0
000044  2041              MOVS     r0,#0x41
000046  5501              STRB     r1,[r0,r4]
;;;212    		gpsx->utc.min=(temp/100)%100;
000048  2064              MOVS     r0,#0x64
00004a  fbb6f0f0          UDIV     r0,r6,r0
00004e  2164              MOVS     r1,#0x64
000050  fbb0f2f1          UDIV     r2,r0,r1
000054  fb010112          MLS      r1,r1,r2,r0
000058  2042              MOVS     r0,#0x42
00005a  5501              STRB     r1,[r0,r4]
;;;213    		gpsx->utc.sec=temp%100;	 	 
00005c  2064              MOVS     r0,#0x64
00005e  fbb6f1f0          UDIV     r1,r6,r0
000062  fb006111          MLS      r1,r0,r1,r6
000066  2043              MOVS     r0,#0x43
000068  5501              STRB     r1,[r0,r4]
                  |L5.106|
;;;214    	}	
;;;215    	posx=NMEA_Comma_Pos(p1,3);								//得到纬度
00006a  2103              MOVS     r1,#3
00006c  4638              MOV      r0,r7
00006e  f7fffffe          BL       NMEA_Comma_Pos
000072  4605              MOV      r5,r0
;;;216    	if(posx!=0XFF)
000074  2dff              CMP      r5,#0xff
000076  d043              BEQ      |L5.256|
;;;217    	{
;;;218    		temp=NMEA_Str2num(p1+posx,&dx);		 	 
000078  1978              ADDS     r0,r7,r5
00007a  a904              ADD      r1,sp,#0x10
00007c  f7fffffe          BL       NMEA_Str2num
000080  4606              MOV      r6,r0
;;;219    		gpsx->latitude=temp/NMEA_Pow(10,dx+2);	//得到°
000082  f89d0010          LDRB     r0,[sp,#0x10]
000086  1c80              ADDS     r0,r0,#2
000088  b2c1              UXTB     r1,r0
00008a  200a              MOVS     r0,#0xa
00008c  f7fffffe          BL       NMEA_Pow
000090  fbb6f0f0          UDIV     r0,r6,r0
000094  6460              STR      r0,[r4,#0x44]
;;;220    		rs=temp%NMEA_Pow(10,dx+2);				//得到'		 
000096  f89d0010          LDRB     r0,[sp,#0x10]
00009a  1c80              ADDS     r0,r0,#2
00009c  b2c1              UXTB     r1,r0
00009e  200a              MOVS     r0,#0xa
0000a0  f7fffffe          BL       NMEA_Pow
0000a4  fbb6f1f0          UDIV     r1,r6,r0
0000a8  fb006a11          MLS      r10,r0,r1,r6
0000ac  4650              MOV      r0,r10
0000ae  f7fffffe          BL       __aeabi_ui2f
0000b2  4681              MOV      r9,r0
;;;221    		gpsx->latitude=gpsx->latitude*NMEA_Pow(10,5)+(rs*NMEA_Pow(10,5-dx))/60;//转换为° 
0000b4  f89d0010          LDRB     r0,[sp,#0x10]
0000b8  f1c00005          RSB      r0,r0,#5
0000bc  b2c1              UXTB     r1,r0
0000be  200a              MOVS     r0,#0xa
0000c0  f7fffffe          BL       NMEA_Pow
0000c4  9000              STR      r0,[sp,#0]
0000c6  f7fffffe          BL       __aeabi_ui2f
0000ca  4683              MOV      r11,r0
0000cc  4649              MOV      r1,r9
0000ce  f7fffffe          BL       __aeabi_fmul
0000d2  4682              MOV      r10,r0
0000d4  496b              LDR      r1,|L5.644|
0000d6  f7fffffe          BL       __aeabi_fdiv
0000da  2105              MOVS     r1,#5
0000dc  9002              STR      r0,[sp,#8]
0000de  200a              MOVS     r0,#0xa
0000e0  f7fffffe          BL       NMEA_Pow
0000e4  6c61              LDR      r1,[r4,#0x44]
0000e6  fb00fa01          MUL      r10,r0,r1
0000ea  4650              MOV      r0,r10
0000ec  f7fffffe          BL       __aeabi_ui2f
0000f0  9001              STR      r0,[sp,#4]
0000f2  9902              LDR      r1,[sp,#8]
0000f4  f7fffffe          BL       __aeabi_fadd
0000f8  9003              STR      r0,[sp,#0xc]
0000fa  f7fffffe          BL       __aeabi_f2uiz
0000fe  6460              STR      r0,[r4,#0x44]
                  |L5.256|
;;;222    	}
;;;223    	posx=NMEA_Comma_Pos(p1,4);								//南纬还是北纬 
000100  2104              MOVS     r1,#4
000102  4638              MOV      r0,r7
000104  f7fffffe          BL       NMEA_Comma_Pos
000108  4605              MOV      r5,r0
;;;224    	if(posx!=0XFF)gpsx->nshemi=*(p1+posx);					 
00010a  2dff              CMP      r5,#0xff
00010c  d002              BEQ      |L5.276|
00010e  5d78              LDRB     r0,[r7,r5]
000110  f8840048          STRB     r0,[r4,#0x48]
                  |L5.276|
;;;225     	posx=NMEA_Comma_Pos(p1,5);								//得到经度
000114  2105              MOVS     r1,#5
000116  4638              MOV      r0,r7
000118  f7fffffe          BL       NMEA_Comma_Pos
00011c  4605              MOV      r5,r0
;;;226    	if(posx!=0XFF)
00011e  2dff              CMP      r5,#0xff
000120  d045              BEQ      |L5.430|
;;;227    	{												  
;;;228    		temp=NMEA_Str2num(p1+posx,&dx);		 	 
000122  1978              ADDS     r0,r7,r5
000124  a904              ADD      r1,sp,#0x10
000126  f7fffffe          BL       NMEA_Str2num
00012a  4606              MOV      r6,r0
;;;229    		gpsx->longitude=temp/NMEA_Pow(10,dx+2);	//得到°
00012c  f89d0010          LDRB     r0,[sp,#0x10]
000130  1c80              ADDS     r0,r0,#2
000132  b2c1              UXTB     r1,r0
000134  200a              MOVS     r0,#0xa
000136  f7fffffe          BL       NMEA_Pow
00013a  fbb6f0f0          UDIV     r0,r6,r0
00013e  f8440f49          STR      r0,[r4,#0x49]!
;;;230    		rs=temp%NMEA_Pow(10,dx+2);				//得到'		 
000142  f89d0010          LDRB     r0,[sp,#0x10]
000146  1c80              ADDS     r0,r0,#2
000148  b2c1              UXTB     r1,r0
00014a  200a              MOVS     r0,#0xa
00014c  f7fffffe          BL       NMEA_Pow
000150  fbb6f1f0          UDIV     r1,r6,r0
000154  fb006a11          MLS      r10,r0,r1,r6
000158  4650              MOV      r0,r10
00015a  f7fffffe          BL       __aeabi_ui2f
00015e  4681              MOV      r9,r0
;;;231    		gpsx->longitude=gpsx->longitude*NMEA_Pow(10,5)+(rs*NMEA_Pow(10,5-dx))/60;//转换为° 
000160  f89d0010          LDRB     r0,[sp,#0x10]
000164  f1c00005          RSB      r0,r0,#5
000168  b2c1              UXTB     r1,r0
00016a  200a              MOVS     r0,#0xa
00016c  f7fffffe          BL       NMEA_Pow
000170  9000              STR      r0,[sp,#0]
000172  f7fffffe          BL       __aeabi_ui2f
000176  4683              MOV      r11,r0
000178  4649              MOV      r1,r9
00017a  f7fffffe          BL       __aeabi_fmul
00017e  4682              MOV      r10,r0
000180  4940              LDR      r1,|L5.644|
000182  f7fffffe          BL       __aeabi_fdiv
000186  2105              MOVS     r1,#5
000188  9002              STR      r0,[sp,#8]
00018a  200a              MOVS     r0,#0xa
00018c  f7fffffe          BL       NMEA_Pow
000190  6821              LDR      r1,[r4,#0]
000192  fb00fa01          MUL      r10,r0,r1
000196  4650              MOV      r0,r10
000198  f7fffffe          BL       __aeabi_ui2f
00019c  9001              STR      r0,[sp,#4]
00019e  9902              LDR      r1,[sp,#8]
0001a0  f7fffffe          BL       __aeabi_fadd
0001a4  9003              STR      r0,[sp,#0xc]
0001a6  f7fffffe          BL       __aeabi_f2uiz
0001aa  f8440949          STR      r0,[r4],#-0x49
                  |L5.430|
;;;232    	}
;;;233    	posx=NMEA_Comma_Pos(p1,6);								//东经还是西经
0001ae  2106              MOVS     r1,#6
0001b0  4638              MOV      r0,r7
0001b2  f7fffffe          BL       NMEA_Comma_Pos
0001b6  4605              MOV      r5,r0
;;;234    	if(posx!=0XFF)gpsx->ewhemi=*(p1+posx);		 
0001b8  2dff              CMP      r5,#0xff
0001ba  d002              BEQ      |L5.450|
0001bc  5d78              LDRB     r0,[r7,r5]
0001be  f884004d          STRB     r0,[r4,#0x4d]
                  |L5.450|
;;;235    	
;;;236    	posx=NMEA_Comma_Pos(p1,7);	                            //地面速率  节 
0001c2  2107              MOVS     r1,#7
0001c4  4638              MOV      r0,r7
0001c6  f7fffffe          BL       NMEA_Comma_Pos
0001ca  4605              MOV      r5,r0
;;;237    	if(posx!=0XFF)                                          //1节 = 1.852 公里   1节 = 1.150英里
0001cc  2dff              CMP      r5,#0xff
0001ce  d015              BEQ      |L5.508|
;;;238    	{
;;;239    		temp=NMEA_Str2num(p1+posx,&dx);		                //得到整型值，此值比原始值大10的dx次方 	 
0001d0  1978              ADDS     r0,r7,r5
0001d2  a904              ADD      r1,sp,#0x10
0001d4  f7fffffe          BL       NMEA_Str2num
0001d8  4606              MOV      r6,r0
;;;240    		temp=(temp*1852)/36;
0001da  f240703c          MOV      r0,#0x73c
0001de  4370              MULS     r0,r6,r0
0001e0  2124              MOVS     r1,#0x24
0001e2  fbb0f6f1          UDIV     r6,r0,r1
;;;241    		temp/=NMEA_Pow(10,dx+1);	
0001e6  f89d0010          LDRB     r0,[sp,#0x10]
0001ea  1c40              ADDS     r0,r0,#1
0001ec  b2c1              UXTB     r1,r0
0001ee  200a              MOVS     r0,#0xa
0001f0  f7fffffe          BL       NMEA_Pow
0001f4  fbb6f6f0          UDIV     r6,r6,r0
;;;242    		gpsx->speed = (uint16_t) temp;
0001f8  f8a46069          STRH     r6,[r4,#0x69]
                  |L5.508|
;;;243    	}
;;;244    	
;;;245    	posx=NMEA_Comma_Pos(p1,8);                              //行驶方向
0001fc  2108              MOVS     r1,#8
0001fe  4638              MOV      r0,r7
000200  f7fffffe          BL       NMEA_Comma_Pos
000204  4605              MOV      r5,r0
;;;246    	if(posx!=0XFF)
000206  2dff              CMP      r5,#0xff
000208  d00e              BEQ      |L5.552|
;;;247    	{
;;;248    		temp=NMEA_Str2num(p1+posx,&dx);
00020a  1978              ADDS     r0,r7,r5
00020c  a904              ADD      r1,sp,#0x10
00020e  f7fffffe          BL       NMEA_Str2num
000212  4606              MOV      r6,r0
;;;249    		gpsx->direction =(u16)temp/NMEA_Pow(10,dx);
000214  f89d1010          LDRB     r1,[sp,#0x10]
000218  200a              MOVS     r0,#0xa
00021a  f7fffffe          BL       NMEA_Pow
00021e  b2b1              UXTH     r1,r6
000220  fbb1f0f0          UDIV     r0,r1,r0
000224  f8a40063          STRH     r0,[r4,#0x63]
                  |L5.552|
;;;250    	}
;;;251    	posx=NMEA_Comma_Pos(p1,9);								//得到UTC日期
000228  2109              MOVS     r1,#9
00022a  4638              MOV      r0,r7
00022c  f7fffffe          BL       NMEA_Comma_Pos
000230  4605              MOV      r5,r0
;;;252    	if(posx!=0XFF)
000232  2dff              CMP      r5,#0xff
000234  d01e              BEQ      |L5.628|
;;;253    	{
;;;254    		temp=NMEA_Str2num(p1+posx,&dx);		 				//得到UTC日期
000236  1978              ADDS     r0,r7,r5
000238  a904              ADD      r1,sp,#0x10
00023a  f7fffffe          BL       NMEA_Str2num
00023e  4606              MOV      r6,r0
;;;255    		gpsx->utc.date=temp/10000;
000240  f2427010          MOV      r0,#0x2710
000244  fbb6f0f0          UDIV     r0,r6,r0
000248  b2c1              UXTB     r1,r0
00024a  2040              MOVS     r0,#0x40
00024c  5501              STRB     r1,[r0,r4]
;;;256    		gpsx->utc.month=(temp/100)%100;
00024e  2064              MOVS     r0,#0x64
000250  fbb6f0f0          UDIV     r0,r6,r0
000254  2164              MOVS     r1,#0x64
000256  fbb0f2f1          UDIV     r2,r0,r1
00025a  fb010112          MLS      r1,r1,r2,r0
00025e  203f              MOVS     r0,#0x3f
000260  5501              STRB     r1,[r0,r4]
;;;257    		gpsx->utc.year=2000+temp%100;	 	 
000262  2064              MOVS     r0,#0x64
000264  fbb6f1f0          UDIV     r1,r6,r0
000268  fb006011          MLS      r0,r0,r1,r6
00026c  f50060fa          ADD      r0,r0,#0x7d0
000270  f8a4003d          STRH     r0,[r4,#0x3d]
                  |L5.628|
;;;258    	} 
;;;259    }
000274  b005              ADD      sp,sp,#0x14
000276  e8bd8ff0          POP      {r4-r11,pc}
;;;260    
                          ENDP

00027a  0000              DCW      0x0000
                  |L5.636|
00027c  4750524d          DCB      "GPRMC",0
000280  4300    
000282  00                DCB      0
000283  00                DCB      0
                  |L5.644|
                          DCD      0x42700000

                          AREA ||i.NMEA_Pow||, CODE, READONLY, ALIGN=1

                  NMEA_Pow PROC
;;;147    //返回值:m^n次方.
;;;148    u32 NMEA_Pow(u8 m,u8 n)
000000  b510              PUSH     {r4,lr}
;;;149    {
000002  4602              MOV      r2,r0
;;;150    	u32 result=1;	 
000004  2001              MOVS     r0,#1
;;;151    	while(n--)result*=m;    
000006  e000              B        |L6.10|
                  |L6.8|
000008  4350              MULS     r0,r2,r0
                  |L6.10|
00000a  1e0b              SUBS     r3,r1,#0
00000c  f1a10401          SUB      r4,r1,#1
000010  b2e1              UXTB     r1,r4
000012  d1f9              BNE      |L6.8|
;;;152    	return result;
;;;153    }
000014  bd10              POP      {r4,pc}
;;;154    //str转换为数字,以','或者'*'结束
                          ENDP


                          AREA ||i.NMEA_Str2num||, CODE, READONLY, ALIGN=1

                  NMEA_Str2num PROC
;;;157    //返回值:转换后的数值
;;;158    int NMEA_Str2num(u8 *buf,u8*dx)
000000  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;159    {
000004  b081              SUB      sp,sp,#4
000006  4607              MOV      r7,r0
;;;160    	u8 *p=buf;
000008  463c              MOV      r4,r7
;;;161    	u32 ires=0,fres=0;
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
00000e  4683              MOV      r11,r0
;;;162    	u8 ilen=0,flen=0,i;
000010  4681              MOV      r9,r0
000012  2600              MOVS     r6,#0
;;;163    	u8 mask=0;
000014  4680              MOV      r8,r0
;;;164    	int res;
;;;165    	while(1) //得到整数和小数的长度
000016  e028              B        |L7.106|
                  |L7.24|
;;;166    	{
;;;167    		if(*p=='-'){mask|=0X02;p++;}//是负数
000018  7820              LDRB     r0,[r4,#0]
00001a  282d              CMP      r0,#0x2d
00001c  d102              BNE      |L7.36|
00001e  f0480802          ORR      r8,r8,#2
000022  1c64              ADDS     r4,r4,#1
                  |L7.36|
;;;168    		if(*p==','||(*p=='*'))break;//遇到结束了
000024  7820              LDRB     r0,[r4,#0]
000026  282c              CMP      r0,#0x2c
000028  d002              BEQ      |L7.48|
00002a  7820              LDRB     r0,[r4,#0]
00002c  282a              CMP      r0,#0x2a
00002e  d100              BNE      |L7.50|
                  |L7.48|
000030  e01c              B        |L7.108|
                  |L7.50|
;;;169    		if(*p=='.'){mask|=0X01;p++;}//遇到小数点了
000032  7820              LDRB     r0,[r4,#0]
000034  282e              CMP      r0,#0x2e
000036  d103              BNE      |L7.64|
000038  f0480801          ORR      r8,r8,#1
00003c  1c64              ADDS     r4,r4,#1
00003e  e009              B        |L7.84|
                  |L7.64|
;;;170    		else if(*p>'9'||(*p<'0'))	//有非法字符
000040  7820              LDRB     r0,[r4,#0]
000042  2839              CMP      r0,#0x39
000044  dc02              BGT      |L7.76|
000046  7820              LDRB     r0,[r4,#0]
000048  2830              CMP      r0,#0x30
00004a  da03              BGE      |L7.84|
                  |L7.76|
;;;171    		{	
;;;172    			ilen=0;
00004c  f04f0900          MOV      r9,#0
;;;173    			flen=0;
000050  2600              MOVS     r6,#0
;;;174    			break;
000052  e00b              B        |L7.108|
                  |L7.84|
;;;175    		}	
;;;176    		if(mask&0X01)flen++;
000054  f0080001          AND      r0,r8,#1
000058  b110              CBZ      r0,|L7.96|
00005a  1c70              ADDS     r0,r6,#1
00005c  b2c6              UXTB     r6,r0
00005e  e003              B        |L7.104|
                  |L7.96|
;;;177    		else ilen++;
000060  f1090001          ADD      r0,r9,#1
000064  f00009ff          AND      r9,r0,#0xff
                  |L7.104|
;;;178    		p++;
000068  1c64              ADDS     r4,r4,#1
                  |L7.106|
00006a  e7d5              B        |L7.24|
                  |L7.108|
00006c  bf00              NOP                            ;168
;;;179    	}
;;;180    	if(mask&0X02)buf++;	//去掉负号
00006e  f0080002          AND      r0,r8,#2
000072  b100              CBZ      r0,|L7.118|
000074  1c7f              ADDS     r7,r7,#1
                  |L7.118|
;;;181    	for(i=0;i<ilen;i++)	//得到整数部分数据
000076  2500              MOVS     r5,#0
000078  e00e              B        |L7.152|
                  |L7.122|
;;;182    	{  
;;;183    		ires+=NMEA_Pow(10,ilen-1-i)*(buf[i]-'0');
00007a  f1a90001          SUB      r0,r9,#1
00007e  1b40              SUBS     r0,r0,r5
000080  b2c1              UXTB     r1,r0
000082  200a              MOVS     r0,#0xa
000084  f7fffffe          BL       NMEA_Pow
000088  5d79              LDRB     r1,[r7,r5]
00008a  3930              SUBS     r1,r1,#0x30
00008c  9a00              LDR      r2,[sp,#0]
00008e  fb002001          MLA      r0,r0,r1,r2
000092  9000              STR      r0,[sp,#0]
000094  1c68              ADDS     r0,r5,#1              ;181
000096  b2c5              UXTB     r5,r0                 ;181
                  |L7.152|
000098  454d              CMP      r5,r9                 ;181
00009a  dbee              BLT      |L7.122|
;;;184    	}
;;;185    	if(flen>5)flen=5;	//最多取5位小数
00009c  2e05              CMP      r6,#5
00009e  dd00              BLE      |L7.162|
0000a0  2605              MOVS     r6,#5
                  |L7.162|
;;;186    	*dx=flen;	 		//小数点位数
0000a2  9802              LDR      r0,[sp,#8]
0000a4  7006              STRB     r6,[r0,#0]
;;;187    	for(i=0;i<flen;i++)	//得到小数部分数据
0000a6  2500              MOVS     r5,#0
0000a8  e00e              B        |L7.200|
                  |L7.170|
;;;188    	{  
;;;189    		fres+=NMEA_Pow(10,flen-1-i)*(buf[ilen+1+i]-'0');
0000aa  1e70              SUBS     r0,r6,#1
0000ac  1b40              SUBS     r0,r0,r5
0000ae  b2c1              UXTB     r1,r0
0000b0  200a              MOVS     r0,#0xa
0000b2  f7fffffe          BL       NMEA_Pow
0000b6  f1090101          ADD      r1,r9,#1
0000ba  4429              ADD      r1,r1,r5
0000bc  5c79              LDRB     r1,[r7,r1]
0000be  3930              SUBS     r1,r1,#0x30
0000c0  fb00bb01          MLA      r11,r0,r1,r11
0000c4  1c68              ADDS     r0,r5,#1              ;187
0000c6  b2c5              UXTB     r5,r0                 ;187
                  |L7.200|
0000c8  42b5              CMP      r5,r6                 ;187
0000ca  dbee              BLT      |L7.170|
;;;190    	} 
;;;191    	res=ires*NMEA_Pow(10,flen)+fres;
0000cc  4631              MOV      r1,r6
0000ce  200a              MOVS     r0,#0xa
0000d0  f7fffffe          BL       NMEA_Pow
0000d4  9900              LDR      r1,[sp,#0]
0000d6  fb01ba00          MLA      r10,r1,r0,r11
;;;192    	if(mask&0X02)res=-res;		   
0000da  f0080002          AND      r0,r8,#2
0000de  b108              CBZ      r0,|L7.228|
0000e0  f1ca0a00          RSB      r10,r10,#0
                  |L7.228|
;;;193    	return res;
0000e4  4650              MOV      r0,r10
;;;194    }	  							 
0000e6  e8bd8ffe          POP      {r1-r11,pc}
;;;195    
                          ENDP


                          AREA ||i.TimeCompare||, CODE, READONLY, ALIGN=2

                  TimeCompare PROC
;;;95     const uint32_t Month_Days_Accu_L[13] = {0,31,60,91,121,152,182,213,244,274,305,335,366};
;;;96     uint32_t TimeCompare(uint32_t TYY,uint32_t TMO,uint32_t TDD,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;97     					uint32_t THH,uint32_t TMM,uint32_t TSS)
;;;98     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  461f              MOV      r7,r3
00000a  e9ddc809          LDRD     r12,r8,[sp,#0x24]
;;;99     	uint32_t LeapY, ComY, TotSeconds, TotDays;
;;;100    	if(TYY==1970)
00000e  f24079b2          MOV      r9,#0x7b2
000012  454c              CMP      r4,r9
000014  d101              BNE      |L8.26|
;;;101          LeapY = 0;
000016  2100              MOVS     r1,#0
000018  e003              B        |L8.34|
                  |L8.26|
;;;102        else
;;;103          LeapY = (TYY - 1968 -1)/4 ;//+1
00001a  f2a479b1          SUB      r9,r4,#0x7b1
00001e  ea4f0199          LSR      r1,r9,#2
                  |L8.34|
;;;104        ComY = (TYY - 1970)-(LeapY);
000022  f2a479b2          SUB      r9,r4,#0x7b2
000026  eba90301          SUB      r3,r9,r1
;;;105        if (TYY%4)
00002a  f0040903          AND      r9,r4,#3
00002e  f1b90f00          CMP      r9,#0
000032  d015              BEQ      |L8.96|
;;;106        //common year
;;;107        	TotDays = LeapY*366 + ComY*365 + Month_Days_Accu_C[TMO-1] + (TDD-1); 
000034  f240196d          MOV      r9,#0x16d
000038  fb03f909          MUL      r9,r3,r9
00003c  f04f0ab7          MOV      r10,#0xb7
000040  fb01fa0a          MUL      r10,r1,r10
000044  eb090a4a          ADD      r10,r9,r10,LSL #1
000048  f1a50901          SUB      r9,r5,#1
00004c  f8dfb060          LDR      r11,|L8.176|
000050  f85b9029          LDR      r9,[r11,r9,LSL #2]
000054  44ca              ADD      r10,r10,r9
000056  f1a20901          SUB      r9,r2,#1
00005a  eb0a0609          ADD      r6,r10,r9
00005e  e014              B        |L8.138|
                  |L8.96|
;;;108      	else
;;;109        //leap year
;;;110        TotDays = LeapY*366 + ComY*365 + Month_Days_Accu_L[TMO-1] + (TDD-1); 
000060  f240196d          MOV      r9,#0x16d
000064  fb03f909          MUL      r9,r3,r9
000068  f04f0ab7          MOV      r10,#0xb7
00006c  fb01fa0a          MUL      r10,r1,r10
000070  eb090a4a          ADD      r10,r9,r10,LSL #1
000074  f1a50901          SUB      r9,r5,#1
000078  f8dfb038          LDR      r11,|L8.180|
00007c  f85b9029          LDR      r9,[r11,r9,LSL #2]
000080  44ca              ADD      r10,r10,r9
000082  f1a20901          SUB      r9,r2,#1
000086  eb0a0609          ADD      r6,r10,r9
                  |L8.138|
;;;111      	TotSeconds = TotDays*SecsPerDay + (THH*3600 + TMM*60 + TSS);
00008a  f44f6961          MOV      r9,#0xe10
00008e  fb07f909          MUL      r9,r7,r9
000092  ebcc1a0c          RSB      r10,r12,r12,LSL #4
000096  eb09098a          ADD      r9,r9,r10,LSL #2
00009a  eb090a08          ADD      r10,r9,r8
00009e  f24029a3          MOV      r9,#0x2a3
0000a2  fb06f909          MUL      r9,r6,r9
0000a6  eb0a10c9          ADD      r0,r10,r9,LSL #7
;;;112    	return 	TotSeconds;
;;;113    }
0000aa  e8bd8ff0          POP      {r4-r11,pc}
;;;114    
                          ENDP

0000ae  0000              DCW      0x0000
                  |L8.176|
                          DCD      Month_Days_Accu_C
                  |L8.180|
                          DCD      Month_Days_Accu_L

                          AREA ||i.Ublox_Cfg_Ack_Check||, CODE, READONLY, ALIGN=2

                  Ublox_Cfg_Ack_Check PROC
;;;288    //       3,接收到NACK应答
;;;289    u8 Ublox_Cfg_Ack_Check(void)//todo:判断应答
000000  b5f8              PUSH     {r3-r7,lr}
;;;290    {			 
;;;291    	uint16_t length = 0;
000002  2600              MOVS     r6,#0
;;;292    	uint8_t err,i;
;;;293    	uint8_t *ptrGPSRece = NULL;
000004  2500              MOVS     r5,#0
;;;294    	ptrGPSRece = OSQPend(receGPSQ,250,&err);//等待接收到应答   
000006  466a              MOV      r2,sp
000008  21fa              MOVS     r1,#0xfa
00000a  481a              LDR      r0,|L9.116|
00000c  6800              LDR      r0,[r0,#0]  ; receGPSQ
00000e  f7fffffe          BL       OSQPend
000012  4605              MOV      r5,r0
;;;295    	if(err == OS_ERR_TIMEOUT)
000014  f89d0000          LDRB     r0,[sp,#0]
000018  280a              CMP      r0,#0xa
00001a  d101              BNE      |L9.32|
;;;296    		return 1;
00001c  2001              MOVS     r0,#1
                  |L9.30|
;;;297    	length = ptrGPSRece[0];         //此次接收到的数据长度 
;;;298    	length <<= 8;
;;;299    	length += ptrGPSRece[1];
;;;300    	
;;;301    	for(i=2;i<(length+2);i++)
;;;302    		if(ptrGPSRece[i+2]==0XB5)
;;;303    				break;              //查找同步字符 0XB5
;;;304    	if(i == (length+2))             //没有找到同步字符
;;;305    		err = 2;
;;;306    	else if(ptrGPSRece[i + 3] == 0) //接收到NACK应答
;;;307    		err = 3;
;;;308    	else
;;;309    		err = 0;                    //收到ACK应答
;;;310    	Mem_free(ptrGPSRece);           //释放接收到的内存块
;;;311    	return err;
;;;312    
;;;313    }
00001e  bdf8              POP      {r3-r7,pc}
                  |L9.32|
000020  782e              LDRB     r6,[r5,#0]            ;297
000022  f64f70ff          MOV      r0,#0xffff            ;298
000026  ea002606          AND      r6,r0,r6,LSL #8       ;298
00002a  7868              LDRB     r0,[r5,#1]            ;299
00002c  4430              ADD      r0,r0,r6              ;299
00002e  b286              UXTH     r6,r0                 ;299
000030  2402              MOVS     r4,#2                 ;301
000032  e006              B        |L9.66|
                  |L9.52|
000034  1ca0              ADDS     r0,r4,#2              ;302
000036  5c28              LDRB     r0,[r5,r0]            ;302
000038  28b5              CMP      r0,#0xb5              ;302
00003a  d100              BNE      |L9.62|
00003c  e004              B        |L9.72|
                  |L9.62|
00003e  1c60              ADDS     r0,r4,#1              ;301
000040  b2c4              UXTB     r4,r0                 ;301
                  |L9.66|
000042  1cb0              ADDS     r0,r6,#2              ;301
000044  4284              CMP      r4,r0                 ;301
000046  dbf5              BLT      |L9.52|
                  |L9.72|
000048  bf00              NOP                            ;303
00004a  1cb0              ADDS     r0,r6,#2              ;304
00004c  4284              CMP      r4,r0                 ;304
00004e  d102              BNE      |L9.86|
000050  2002              MOVS     r0,#2                 ;305
000052  9000              STR      r0,[sp,#0]            ;305
000054  e007              B        |L9.102|
                  |L9.86|
000056  1ce0              ADDS     r0,r4,#3              ;306
000058  5c28              LDRB     r0,[r5,r0]            ;306
00005a  b910              CBNZ     r0,|L9.98|
00005c  2003              MOVS     r0,#3                 ;307
00005e  9000              STR      r0,[sp,#0]            ;307
000060  e001              B        |L9.102|
                  |L9.98|
000062  2000              MOVS     r0,#0                 ;309
000064  9000              STR      r0,[sp,#0]            ;309
                  |L9.102|
000066  4628              MOV      r0,r5                 ;310
000068  f7fffffe          BL       Mem_free
00006c  f89d0000          LDRB     r0,[sp,#0]            ;311
000070  e7d5              B        |L9.30|
;;;314    //配置保存
                          ENDP

000072  0000              DCW      0x0000
                  |L9.116|
                          DCD      receGPSQ

                          AREA ||i.Ublox_Cfg_Cfg_Save||, CODE, READONLY, ALIGN=1

                  Ublox_Cfg_Cfg_Save PROC
;;;316    //返回值:0,执行成功;1,执行失败.
;;;317    u8 Ublox_Cfg_Cfg_Save(void)
000000  b570              PUSH     {r4-r6,lr}
;;;318    {
;;;319    	u8 i;
;;;320    	_ublox_cfg_cfg *cfg_cfg=Mem_malloc(sizeof(_ublox_cfg_cfg));
000002  2015              MOVS     r0,#0x15
000004  f7fffffe          BL       Mem_malloc
000008  4604              MOV      r4,r0
;;;321    	cfg_cfg->header=0X62B5;		//cfg header
00000a  f24620b5          MOV      r0,#0x62b5
00000e  8020              STRH     r0,[r4,#0]
;;;322    	cfg_cfg->id=0X0906;			//cfg cfg id
000010  f6401006          MOV      r0,#0x906
000014  8060              STRH     r0,[r4,#2]
;;;323    	cfg_cfg->dlength=13;		//数据区长度为13个字节.		 
000016  200d              MOVS     r0,#0xd
000018  80a0              STRH     r0,[r4,#4]
;;;324    	cfg_cfg->clearmask=0;		//清除掩码为0
00001a  2000              MOVS     r0,#0
00001c  f8c40006          STR      r0,[r4,#6]
;;;325    	cfg_cfg->savemask=0XFFFF; 	//保存掩码为0XFFFF
000020  f64f70ff          MOV      r0,#0xffff
000024  f8c4000a          STR      r0,[r4,#0xa]
;;;326    	cfg_cfg->loadmask=0; 		//加载掩码为0 
000028  2000              MOVS     r0,#0
00002a  f8c4000e          STR      r0,[r4,#0xe]
;;;327    	cfg_cfg->devicemask=4; 		//保存在EEPROM里面		 
00002e  2004              MOVS     r0,#4
000030  74a0              STRB     r0,[r4,#0x12]
;;;328    	Ublox_CheckSum((u8*)(&cfg_cfg->id),sizeof(_ublox_cfg_cfg)-4,&cfg_cfg->cka,&cfg_cfg->ckb);
000032  f1040314          ADD      r3,r4,#0x14
000036  1e5a              SUBS     r2,r3,#1
000038  2111              MOVS     r1,#0x11
00003a  1ca0              ADDS     r0,r4,#2
00003c  f7fffffe          BL       Ublox_CheckSum
;;;329    	GPSSendDatas((u8*)cfg_cfg,sizeof(_ublox_cfg_cfg));//发送数据给NEO-6M     
000040  2115              MOVS     r1,#0x15
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       GPSSendDatas
;;;330    	for(i=0;i<6;i++)
000048  2500              MOVS     r5,#0
00004a  e005              B        |L10.88|
                  |L10.76|
;;;331    		if(Ublox_Cfg_Ack_Check()==0)
00004c  f7fffffe          BL       Ublox_Cfg_Ack_Check
000050  b900              CBNZ     r0,|L10.84|
;;;332    			break;		//EEPROM写入需要比较久时间,所以连续判断多次
000052  e003              B        |L10.92|
                  |L10.84|
000054  1c68              ADDS     r0,r5,#1              ;330
000056  b2c5              UXTB     r5,r0                 ;330
                  |L10.88|
000058  2d06              CMP      r5,#6                 ;330
00005a  dbf7              BLT      |L10.76|
                  |L10.92|
00005c  bf00              NOP      
;;;333    	Mem_free(cfg_cfg);
00005e  4620              MOV      r0,r4
000060  f7fffffe          BL       Mem_free
;;;334    	return i==6?1:0;
000064  2d06              CMP      r5,#6
000066  d101              BNE      |L10.108|
000068  2001              MOVS     r0,#1
                  |L10.106|
;;;335    }
00006a  bd70              POP      {r4-r6,pc}
                  |L10.108|
00006c  2000              MOVS     r0,#0                 ;334
00006e  e7fc              B        |L10.106|
;;;336    //配置NMEA输出信息格式
                          ENDP


                          AREA ||i.Ublox_Cfg_Msg||, CODE, READONLY, ALIGN=1

                  Ublox_Cfg_Msg PROC
;;;343    //返回值:0,执行成功;其他,执行失败.
;;;344    u8 Ublox_Cfg_Msg(u8 msgid,u8 uart1set)
000000  b570              PUSH     {r4-r6,lr}
;;;345    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;346    	_ublox_cfg_msg *cfg_msg = Mem_malloc(sizeof(_ublox_cfg_msg));
000006  2010              MOVS     r0,#0x10
000008  f7fffffe          BL       Mem_malloc
00000c  4604              MOV      r4,r0
;;;347    	cfg_msg->header=0X62B5;		//cfg header
00000e  f24620b5          MOV      r0,#0x62b5
000012  8020              STRH     r0,[r4,#0]
;;;348    	cfg_msg->id=0X0106;			//cfg msg id
000014  f44f7083          MOV      r0,#0x106
000018  8060              STRH     r0,[r4,#2]
;;;349    	cfg_msg->dlength=8;			//数据区长度为8个字节.	
00001a  2008              MOVS     r0,#8
00001c  80a0              STRH     r0,[r4,#4]
;;;350    	cfg_msg->msgclass=0XF0;  	//NMEA消息
00001e  20f0              MOVS     r0,#0xf0
000020  71a0              STRB     r0,[r4,#6]
;;;351    	cfg_msg->msgid=msgid; 		//要操作的NMEA消息条目
000022  71e5              STRB     r5,[r4,#7]
;;;352    	cfg_msg->iicset=1; 			//默认开启
000024  2001              MOVS     r0,#1
000026  7220              STRB     r0,[r4,#8]
;;;353    	cfg_msg->uart1set=uart1set; //开关设置
000028  7266              STRB     r6,[r4,#9]
;;;354    	cfg_msg->uart2set=1; 	 	//默认开启
00002a  72a0              STRB     r0,[r4,#0xa]
;;;355    	cfg_msg->usbset=1; 			//默认开启
00002c  72e0              STRB     r0,[r4,#0xb]
;;;356    	cfg_msg->spiset=1; 			//默认开启
00002e  7320              STRB     r0,[r4,#0xc]
;;;357    	cfg_msg->ncset=1; 			//默认开启	  
000030  7360              STRB     r0,[r4,#0xd]
;;;358    	Ublox_CheckSum((u8*)(&cfg_msg->id),sizeof(_ublox_cfg_msg)-4,&cfg_msg->cka,&cfg_msg->ckb);
000032  f104030f          ADD      r3,r4,#0xf
000036  1e5a              SUBS     r2,r3,#1
000038  210c              MOVS     r1,#0xc
00003a  1ca0              ADDS     r0,r4,#2
00003c  f7fffffe          BL       Ublox_CheckSum
;;;359    	GPSSendDatas((u8*)cfg_msg,sizeof(_ublox_cfg_msg));//发送数据给NEO-6M   
000040  2110              MOVS     r1,#0x10
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       GPSSendDatas
;;;360    	Mem_free(cfg_msg);
000048  4620              MOV      r0,r4
00004a  f7fffffe          BL       Mem_free
;;;361    	return Ublox_Cfg_Ack_Check();
00004e  f7fffffe          BL       Ublox_Cfg_Ack_Check
;;;362    }
000052  bd70              POP      {r4-r6,pc}
;;;363    //配置NMEA输出信息格式
                          ENDP


                          AREA ||i.Ublox_Cfg_Prt||, CODE, READONLY, ALIGN=1

                  Ublox_Cfg_Prt PROC
;;;365    //返回值:0,执行成功;其他,执行失败(这里不会返回0了)
;;;366    u8 Ublox_Cfg_Prt(u32 baudrate)
000000  b570              PUSH     {r4-r6,lr}
;;;367    {
000002  4605              MOV      r5,r0
;;;368    	_ublox_cfg_prt *cfg_prt=Mem_malloc(sizeof(_ublox_cfg_prt));
000004  201c              MOVS     r0,#0x1c
000006  f7fffffe          BL       Mem_malloc
00000a  4604              MOV      r4,r0
;;;369    	cfg_prt->header=0X62B5;		//cfg header
00000c  f24620b5          MOV      r0,#0x62b5
000010  8020              STRH     r0,[r4,#0]
;;;370    	cfg_prt->id=0X0006;			//cfg prt id
000012  2006              MOVS     r0,#6
000014  8060              STRH     r0,[r4,#2]
;;;371    	cfg_prt->dlength=20;		//数据区长度为20个字节.	
000016  2014              MOVS     r0,#0x14
000018  80a0              STRH     r0,[r4,#4]
;;;372    	cfg_prt->portid=1;			//操作串口1
00001a  2001              MOVS     r0,#1
00001c  71a0              STRB     r0,[r4,#6]
;;;373    	cfg_prt->reserved=0;	 	//保留字节,设置为0
00001e  2000              MOVS     r0,#0
000020  71e0              STRB     r0,[r4,#7]
;;;374    	cfg_prt->txready=0;	 		//TX Ready设置为0
000022  8120              STRH     r0,[r4,#8]
;;;375    	cfg_prt->mode=0X08D0; 		//8位,1个停止位,无校验位
000024  f44f600d          MOV      r0,#0x8d0
000028  f8c4000a          STR      r0,[r4,#0xa]
;;;376    	cfg_prt->baudrate=baudrate; //波特率设置
00002c  f8c4500e          STR      r5,[r4,#0xe]
;;;377    	cfg_prt->inprotomask=0X0007;//0+1+2
000030  2007              MOVS     r0,#7
000032  8260              STRH     r0,[r4,#0x12]
;;;378    	cfg_prt->outprotomask=0X0007;//0+1+2
000034  82a0              STRH     r0,[r4,#0x14]
;;;379     	cfg_prt->reserved4=0; 		//保留字节,设置为0
000036  2000              MOVS     r0,#0
000038  82e0              STRH     r0,[r4,#0x16]
;;;380     	cfg_prt->reserved5=0; 		//保留字节,设置为0 
00003a  8320              STRH     r0,[r4,#0x18]
;;;381    	Ublox_CheckSum((u8*)(&cfg_prt->id),sizeof(_ublox_cfg_prt)-4,&cfg_prt->cka,&cfg_prt->ckb);
00003c  f104031b          ADD      r3,r4,#0x1b
000040  1e5a              SUBS     r2,r3,#1
000042  2118              MOVS     r1,#0x18
000044  1ca0              ADDS     r0,r4,#2
000046  f7fffffe          BL       Ublox_CheckSum
;;;382    	GPSSendDatas((u8*)cfg_prt,sizeof(_ublox_cfg_prt));//发送数据给NEO-6M   
00004a  211c              MOVS     r1,#0x1c
00004c  4620              MOV      r0,r4
00004e  f7fffffe          BL       GPSSendDatas
;;;383    	OSTimeDlyHMSM(0,0,0,200);				//等待发送完成 
000052  23c8              MOVS     r3,#0xc8
000054  2200              MOVS     r2,#0
000056  4611              MOV      r1,r2
000058  4610              MOV      r0,r2
00005a  f7fffffe          BL       OSTimeDlyHMSM
;;;384    //	usart3_init(baudrate);	//重新初始化串口3  
;;;385    	Mem_free(cfg_prt);
00005e  4620              MOV      r0,r4
000060  f7fffffe          BL       Mem_free
;;;386    	return Ublox_Cfg_Ack_Check();//这里不会反回0,因为UBLOX发回来的应答在串口重新初始化的时候已经被丢弃了.
000064  f7fffffe          BL       Ublox_Cfg_Ack_Check
;;;387    } 
000068  bd70              POP      {r4-r6,pc}
;;;388    //配置UBLOX NEO-6的时钟脉冲输出
                          ENDP


                          AREA ||i.Ublox_Cfg_Rate||, CODE, READONLY, ALIGN=1

                  Ublox_Cfg_Rate PROC
;;;416    //返回值:0,发送成功;其他,发送失败.
;;;417    u8 Ublox_Cfg_Rate(u16 measrate,u8 reftime)
000000  b570              PUSH     {r4-r6,lr}
;;;418    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;419    	_ublox_cfg_rate *cfg_rate=Mem_malloc(sizeof(_ublox_cfg_rate));
000006  200e              MOVS     r0,#0xe
000008  f7fffffe          BL       Mem_malloc
00000c  4604              MOV      r4,r0
;;;420     	if(measrate<200)return 1;	//小于200ms，直接退出
00000e  2dc8              CMP      r5,#0xc8
000010  da01              BGE      |L13.22|
000012  2001              MOVS     r0,#1
                  |L13.20|
;;;421     	cfg_rate->header=0X62B5;	//cfg header
;;;422    	cfg_rate->id=0X0806;	 	//cfg rate id
;;;423    	cfg_rate->dlength=6;	 	//数据区长度为6个字节.
;;;424    	cfg_rate->measrate=measrate;//脉冲间隔,us
;;;425    	cfg_rate->navrate=1;		//导航速率（周期），固定为1
;;;426    	cfg_rate->timeref=reftime; 	//参考时间为GPS时间
;;;427    	Ublox_CheckSum((u8*)(&cfg_rate->id),sizeof(_ublox_cfg_rate)-4,&cfg_rate->cka,&cfg_rate->ckb);
;;;428    	GPSSendDatas((u8*)cfg_rate,sizeof(_ublox_cfg_rate));//发送数据给NEO-6M 
;;;429    	Mem_free(cfg_rate);
;;;430    	return Ublox_Cfg_Ack_Check();
;;;431    }
000014  bd70              POP      {r4-r6,pc}
                  |L13.22|
000016  f24620b5          MOV      r0,#0x62b5            ;421
00001a  8020              STRH     r0,[r4,#0]            ;421
00001c  f6400006          MOV      r0,#0x806             ;422
000020  8060              STRH     r0,[r4,#2]            ;422
000022  2006              MOVS     r0,#6                 ;423
000024  80a0              STRH     r0,[r4,#4]            ;423
000026  80e5              STRH     r5,[r4,#6]            ;424
000028  2001              MOVS     r0,#1                 ;425
00002a  8120              STRH     r0,[r4,#8]            ;425
00002c  8166              STRH     r6,[r4,#0xa]          ;426
00002e  f104030d          ADD      r3,r4,#0xd            ;427
000032  1e5a              SUBS     r2,r3,#1              ;427
000034  210a              MOVS     r1,#0xa               ;427
000036  1ca0              ADDS     r0,r4,#2              ;427
000038  f7fffffe          BL       Ublox_CheckSum
00003c  210e              MOVS     r1,#0xe               ;428
00003e  4620              MOV      r0,r4                 ;428
000040  f7fffffe          BL       GPSSendDatas
000044  4620              MOV      r0,r4                 ;429
000046  f7fffffe          BL       Mem_free
00004a  f7fffffe          BL       Ublox_Cfg_Ack_Check
00004e  e7e1              B        |L13.20|
;;;432    
                          ENDP


                          AREA ||i.Ublox_Cfg_Tp||, CODE, READONLY, ALIGN=1

                  Ublox_Cfg_Tp PROC
;;;392    //返回值:0,发送成功;其他,发送失败.
;;;393    u8 Ublox_Cfg_Tp(u32 interval,u32 length,signed char status)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;394    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;395    	_ublox_cfg_tp *cfg_tp=Mem_malloc(sizeof(_ublox_cfg_tp));
00000a  201c              MOVS     r0,#0x1c
00000c  f7fffffe          BL       Mem_malloc
000010  4604              MOV      r4,r0
;;;396    	cfg_tp->header=0X62B5;		//cfg header
000012  f24620b5          MOV      r0,#0x62b5
000016  8020              STRH     r0,[r4,#0]
;;;397    	cfg_tp->id=0X0706;			//cfg tp id
000018  f2407006          MOV      r0,#0x706
00001c  8060              STRH     r0,[r4,#2]
;;;398    	cfg_tp->dlength=20;			//数据区长度为20个字节.
00001e  2014              MOVS     r0,#0x14
000020  80a0              STRH     r0,[r4,#4]
;;;399    	cfg_tp->interval=interval;	//脉冲间隔,us
000022  f8c45006          STR      r5,[r4,#6]
;;;400    	cfg_tp->length=length;		//脉冲宽度,us
000026  f8c4600a          STR      r6,[r4,#0xa]
;;;401    	cfg_tp->status=status;	   	//时钟脉冲配置
00002a  73a7              STRB     r7,[r4,#0xe]
;;;402    	cfg_tp->timeref=0;			//参考UTC 时间
00002c  2000              MOVS     r0,#0
00002e  73e0              STRB     r0,[r4,#0xf]
;;;403    	cfg_tp->flags=0;			//flags为0
000030  7420              STRB     r0,[r4,#0x10]
;;;404    	cfg_tp->reserved=0;		 	//保留位为0
000032  7460              STRB     r0,[r4,#0x11]
;;;405    	cfg_tp->antdelay=820;    	//天线延时为820ns
000034  f44f704d          MOV      r0,#0x334
000038  8260              STRH     r0,[r4,#0x12]
;;;406    	cfg_tp->rfdelay=0;    		//RF延时为0ns
00003a  2000              MOVS     r0,#0
00003c  82a0              STRH     r0,[r4,#0x14]
;;;407    	cfg_tp->userdelay=0;    	//用户延时为0ns
00003e  f8c40016          STR      r0,[r4,#0x16]
;;;408    	Ublox_CheckSum((u8*)(&cfg_tp->id),sizeof(_ublox_cfg_tp)-4,&cfg_tp->cka,&cfg_tp->ckb);
000042  f104031b          ADD      r3,r4,#0x1b
000046  1e5a              SUBS     r2,r3,#1
000048  2118              MOVS     r1,#0x18
00004a  1ca0              ADDS     r0,r4,#2
00004c  f7fffffe          BL       Ublox_CheckSum
;;;409    	GPSSendDatas((u8*)cfg_tp,sizeof(_ublox_cfg_tp));//发送数据给NEO-6M  
000050  211c              MOVS     r1,#0x1c
000052  4620              MOV      r0,r4
000054  f7fffffe          BL       GPSSendDatas
;;;410    	Mem_free(cfg_tp);
000058  4620              MOV      r0,r4
00005a  f7fffffe          BL       Mem_free
;;;411    	return Ublox_Cfg_Ack_Check();
00005e  f7fffffe          BL       Ublox_Cfg_Ack_Check
;;;412    }
000062  e8bd81f0          POP      {r4-r8,pc}
;;;413    //配置UBLOX NEO-6的更新速率	    
                          ENDP


                          AREA ||i.Ublox_CheckSum||, CODE, READONLY, ALIGN=1

                  Ublox_CheckSum PROC
;;;272    //cka,ckb:两个校验结果.
;;;273    void Ublox_CheckSum(u8 *buf,u16 len,u8* cka,u8*ckb)
000000  b570              PUSH     {r4-r6,lr}
;;;274    {
000002  4604              MOV      r4,r0
;;;275    	u16 i;
;;;276    	*cka=0;*ckb=0;
000004  2500              MOVS     r5,#0
000006  7015              STRB     r5,[r2,#0]
000008  701d              STRB     r5,[r3,#0]
;;;277    	for(i=0;i<len;i++)
00000a  2000              MOVS     r0,#0
00000c  e009              B        |L15.34|
                  |L15.14|
;;;278    	{
;;;279    		*cka = *cka+buf[i];
00000e  7815              LDRB     r5,[r2,#0]
000010  5c26              LDRB     r6,[r4,r0]
000012  4435              ADD      r5,r5,r6
000014  7015              STRB     r5,[r2,#0]
;;;280    		*ckb = *ckb+*cka;
000016  781d              LDRB     r5,[r3,#0]
000018  7816              LDRB     r6,[r2,#0]
00001a  4435              ADD      r5,r5,r6
00001c  701d              STRB     r5,[r3,#0]
00001e  1c45              ADDS     r5,r0,#1              ;277
000020  b2a8              UXTH     r0,r5                 ;277
                  |L15.34|
000022  4288              CMP      r0,r1                 ;277
000024  dbf3              BLT      |L15.14|
;;;281    	}
;;;282    }
000026  bd70              POP      {r4-r6,pc}
;;;283    /////////////////////////////////////////UBLOX 配置代码/////////////////////////////////////
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  Month_Days_Accu_C
                          DCD      0x00000000
                          DCD      0x0000001f
                          DCD      0x0000003b
                          DCD      0x0000005a
                          DCD      0x00000078
                          DCD      0x00000097
                          DCD      0x000000b5
                          DCD      0x000000d4
                          DCD      0x000000f3
                          DCD      0x00000111
                          DCD      0x00000130
                          DCD      0x0000014e
                          DCD      0x0000016d
                  Month_Days_Accu_L
                          DCD      0x00000000
                          DCD      0x0000001f
                          DCD      0x0000003c
                          DCD      0x0000005b
                          DCD      0x00000079
                          DCD      0x00000098
                          DCD      0x000000b6
                          DCD      0x000000d5
                          DCD      0x000000f4
                          DCD      0x00000112
                          DCD      0x00000131
                          DCD      0x0000014f
                          DCD      0x0000016e

                          AREA ||.data||, DATA, ALIGN=0

                  locatemp
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\GPS\\GPSTask.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_GPSTask_c_GPSTask____REV16|
#line 465 "D:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.2.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___9_GPSTask_c_GPSTask____REV16| PROC
#line 466

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_GPSTask_c_GPSTask____REVSH|
#line 480
|__asm___9_GPSTask_c_GPSTask____REVSH| PROC
#line 481

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___9_GPSTask_c_GPSTask____RRX|
#line 667
|__asm___9_GPSTask_c_GPSTask____RRX| PROC
#line 668

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
