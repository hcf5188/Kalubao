; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\obj\datasavetoflash.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=..\obj\datasavetoflash.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\OBD -I..\SYSTEM -I..\USER -I..\LIB\inc -I..\UCOSII\CONFIG -I..\UCOSII\PORT -I..\UCOSII\CORE -I..\HAEDWARE -I..\GPS -I..\CDMA -I..\DEAL -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\datasavetoflash.crf ..\CDMA\DataSaveToFlash.c]
                          THUMB

                          AREA ||i.Flash_Read||, CODE, READONLY, ALIGN=1

                  Flash_Read PROC
;;;119    
;;;120    int Flash_Read(uint32_t iAddress, uint8_t *buf, int32_t readLength) 
000000  b510              PUSH     {r4,lr}
;;;121    {
000002  4603              MOV      r3,r0
;;;122    	int i = 0;
000004  2000              MOVS     r0,#0
;;;123    	while(i < readLength ) 
000006  e003              B        |L1.16|
                  |L1.8|
;;;124    	{
;;;125    		*(buf + i) = *(__IO uint8_t*) iAddress++;
000008  f8134b01          LDRB     r4,[r3],#1
00000c  540c              STRB     r4,[r1,r0]
;;;126    		i++;
00000e  1c40              ADDS     r0,r0,#1
                  |L1.16|
000010  4290              CMP      r0,r2                 ;123
000012  dbf9              BLT      |L1.8|
;;;127    	}
;;;128    	return i;
;;;129    }
000014  bd10              POP      {r4,pc}
;;;130    
                          ENDP


                          AREA ||i.SaveConfigToFlash||, CODE, READONLY, ALIGN=2

                  SaveConfigToFlash PROC
;;;91     //新程序的数据更新
;;;92     void SaveConfigToFlash(uint8_t* ptrBuff,uint16_t datLength)
000000  e92d43fe          PUSH     {r1-r9,lr}
;;;93     {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;94     	OS_CPU_SR  cpu_sr = 0u;
000008  f04f0800          MOV      r8,#0
;;;95     	uint16_t i = 0;
00000c  2700              MOVS     r7,#0
;;;96     	
;;;97     	FLASH_Unlock();
00000e  f7fffffe          BL       FLASH_Unlock
;;;98     	FLASH_ClearFlag(FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR);
000012  2035              MOVS     r0,#0x35
000014  f7fffffe          BL       FLASH_ClearFlag
;;;99     	FLASH_ErasePage(PIDConfig_ADDR);
000018  4815              LDR      r0,|L2.112|
00001a  f7fffffe          BL       FLASH_ErasePage
;;;100    	
;;;101    	OS_ENTER_CRITICAL();//禁止中断
00001e  f7fffffe          BL       OS_CPU_SR_Save
000022  4680              MOV      r8,r0
;;;102    	{
;;;103    		volatile FLASH_Status FLASHStatus = FLASH_COMPLETE;
000024  2004              MOVS     r0,#4
000026  9002              STR      r0,[sp,#8]
;;;104    		volatile uint32_t     w_addr      = PIDConfig_ADDR;
000028  4811              LDR      r0,|L2.112|
00002a  9001              STR      r0,[sp,#4]
;;;105    		volatile uint32_t*    p_w_data    = (uint32_t*)ptrBuff;	//4字节指针
00002c  462e              MOV      r6,r5
;;;106    		volatile uint32_t     w_data      = (uint32_t)(*p_w_data);//取得相应数据
00002e  6830              LDR      r0,[r6,#0]
000030  9000              STR      r0,[sp,#0]
;;;107    
;;;108    		for(i=0;(i<(datLength/4))&&(FLASHStatus == FLASH_COMPLETE);i++) 
000032  bf00              NOP      
000034  e00c              B        |L2.80|
                  |L2.54|
;;;109    		{
;;;110    			FLASHStatus = FLASH_ProgramWord(w_addr, w_data);
000036  e9dd1000          LDRD     r1,r0,[sp,#0]
00003a  f7fffffe          BL       FLASH_ProgramWord
00003e  9002              STR      r0,[sp,#8]
;;;111    			w_addr = w_addr + 4;
000040  9801              LDR      r0,[sp,#4]
000042  1d00              ADDS     r0,r0,#4
000044  9001              STR      r0,[sp,#4]
;;;112    			p_w_data++;
000046  1d36              ADDS     r6,r6,#4
;;;113    			w_data=(uint32_t)(*p_w_data)  ;	
000048  6830              LDR      r0,[r6,#0]
00004a  9000              STR      r0,[sp,#0]
00004c  1c78              ADDS     r0,r7,#1              ;108
00004e  b287              UXTH     r7,r0                 ;108
                  |L2.80|
000050  17e1              ASRS     r1,r4,#31             ;108
000052  eb047191          ADD      r1,r4,r1,LSR #30      ;108
000056  1089              ASRS     r1,r1,#2              ;108
000058  42b9              CMP      r1,r7                 ;108
00005a  dd03              BLE      |L2.100|
00005c  f89d1008          LDRB     r1,[sp,#8]            ;108
000060  2904              CMP      r1,#4                 ;108
000062  d0e8              BEQ      |L2.54|
                  |L2.100|
;;;114    		}
;;;115    	}
;;;116    	OS_EXIT_CRITICAL(); //打开中断
000064  4640              MOV      r0,r8
000066  f7fffffe          BL       OS_CPU_SR_Restore
;;;117    }
00006a  e8bd83fe          POP      {r1-r9,pc}
;;;118    //程序启动的时候，从Flash中读取全局参数用
                          ENDP

00006e  0000              DCW      0x0000
                  |L2.112|
                          DCD      0x0802e000

                          AREA ||i.SbootParameterSaveToFlash||, CODE, READONLY, ALIGN=2

                  SbootParameterSaveToFlash PROC
;;;49     
;;;50     void SbootParameterSaveToFlash(_SystemInformation* parameter)
000000  b5fe              PUSH     {r1-r7,lr}
;;;51     {
000002  4604              MOV      r4,r0
;;;52     	OS_CPU_SR  cpu_sr = 0u;
000004  2700              MOVS     r7,#0
;;;53     	uint16_t i = 0;
000006  2600              MOVS     r6,#0
;;;54     	OS_ENTER_CRITICAL();//禁止中断
000008  f7fffffe          BL       OS_CPU_SR_Save
00000c  4607              MOV      r7,r0
;;;55     	{
;;;56     		volatile FLASH_Status FLASHStatus = FLASH_COMPLETE;
00000e  2004              MOVS     r0,#4
000010  9002              STR      r0,[sp,#8]
;;;57     		volatile uint32_t w_addr = 0x00;
000012  2000              MOVS     r0,#0
000014  9001              STR      r0,[sp,#4]
;;;58     		volatile uint32_t w_data=0x00;
000016  9000              STR      r0,[sp,#0]
;;;59     		volatile uint32_t* p_w_data=0x00;
000018  2500              MOVS     r5,#0
;;;60     		//int i=0;
;;;61     		FLASH_Unlock();
00001a  f7fffffe          BL       FLASH_Unlock
;;;62     		FLASH_ClearFlag(FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR);
00001e  2035              MOVS     r0,#0x35
000020  f7fffffe          BL       FLASH_ClearFlag
;;;63     
;;;64     		//擦去相应页
;;;65     		if(FLASHStatus==FLASH_COMPLETE)
000024  f89d0008          LDRB     r0,[sp,#8]
000028  2804              CMP      r0,#4
00002a  d103              BNE      |L3.52|
;;;66     		FLASHStatus = FLASH_ErasePage(SBOOT_UPGREAD_ADDR);
00002c  4815              LDR      r0,|L3.132|
00002e  f7fffffe          BL       FLASH_ErasePage
000032  9002              STR      r0,[sp,#8]
                  |L3.52|
;;;67     		//写入
;;;68     		if(FLASHStatus==FLASH_COMPLETE)
000034  f89d0008          LDRB     r0,[sp,#8]
000038  2804              CMP      r0,#4
00003a  d11e              BNE      |L3.122|
;;;69     		{
;;;70     			w_addr = (uint32_t)(SBOOT_UPGREAD_ADDR);	
00003c  4811              LDR      r0,|L3.132|
00003e  9001              STR      r0,[sp,#4]
;;;71     					
;;;72     			p_w_data=(uint32_t*)(parameter);
000040  4625              MOV      r5,r4
;;;73     
;;;74     			w_data=(uint32_t)(*p_w_data);//取得相应数据
000042  6828              LDR      r0,[r5,#0]
000044  9000              STR      r0,[sp,#0]
;;;75     
;;;76     			for(i=0;(i<(sizeof(200)/4))&&(FLASHStatus == FLASH_COMPLETE);i++) //
000046  2600              MOVS     r6,#0
000048  e011              B        |L3.110|
                  |L3.74|
;;;77     			{
;;;78     				FLASHStatus = FLASH_ProgramWord(w_addr, w_data);
00004a  e9dd1000          LDRD     r1,r0,[sp,#0]
00004e  f7fffffe          BL       FLASH_ProgramWord
000052  9002              STR      r0,[sp,#8]
;;;79     
;;;80     				if(FLASHStatus!=FLASH_COMPLETE)
000054  f89d0008          LDRB     r0,[sp,#8]
000058  2804              CMP      r0,#4
00005a  d000              BEQ      |L3.94|
;;;81     					break;
00005c  e00c              B        |L3.120|
                  |L3.94|
;;;82     		 		w_addr = w_addr + 4;
00005e  9801              LDR      r0,[sp,#4]
000060  1d00              ADDS     r0,r0,#4
000062  9001              STR      r0,[sp,#4]
;;;83     		 		p_w_data++;
000064  1d2d              ADDS     r5,r5,#4
;;;84     		 		w_data=(uint32_t)(*p_w_data) ;	//取得数据
000066  6828              LDR      r0,[r5,#0]
000068  9000              STR      r0,[sp,#0]
00006a  1c70              ADDS     r0,r6,#1              ;76
00006c  b286              UXTH     r6,r0                 ;76
                  |L3.110|
00006e  b91e              CBNZ     r6,|L3.120|
000070  f89d0008          LDRB     r0,[sp,#8]            ;76
000074  2804              CMP      r0,#4                 ;76
000076  d0e8              BEQ      |L3.74|
                  |L3.120|
000078  bf00              NOP                            ;81
                  |L3.122|
;;;85     			}
;;;86     		}
;;;87     	}	
;;;88     	OS_EXIT_CRITICAL(); //打开中断
00007a  4638              MOV      r0,r7
00007c  f7fffffe          BL       OS_CPU_SR_Restore
;;;89     }
000080  bdfe              POP      {r1-r7,pc}
;;;90     
                          ENDP

000082  0000              DCW      0x0000
                  |L3.132|
                          DCD      0x08007800

                          AREA ||i.SoftErasePage||, CODE, READONLY, ALIGN=2

                  SoftErasePage PROC
;;;31     
;;;32     void SoftErasePage(uint32_t addr)
000000  b538              PUSH     {r3-r5,lr}
;;;33     {
000002  4604              MOV      r4,r0
;;;34     	OS_CPU_SR  cpu_sr = 0u;
000004  2500              MOVS     r5,#0
;;;35     	OS_ENTER_CRITICAL();//禁止中断
000006  f7fffffe          BL       OS_CPU_SR_Save
00000a  4605              MOV      r5,r0
;;;36     	{
;;;37     		volatile FLASH_Status FLASHStatus = FLASH_COMPLETE;
00000c  2004              MOVS     r0,#4
00000e  9000              STR      r0,[sp,#0]
;;;38     		
;;;39     		if(addr<0x80000)//偏移地址加上起始地址
000010  f5b42f00          CMP      r4,#0x80000
000014  d201              BCS      |L4.26|
;;;40     			addr += NEW_SOFT_ADDR;
000016  4809              LDR      r0,|L4.60|
000018  4404              ADD      r4,r4,r0
                  |L4.26|
;;;41     		FLASH_Unlock();
00001a  f7fffffe          BL       FLASH_Unlock
;;;42     		FLASH_ClearFlag(FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR);
00001e  2035              MOVS     r0,#0x35
000020  f7fffffe          BL       FLASH_ClearFlag
;;;43     
;;;44     		if(FLASHStatus==FLASH_COMPLETE)
000024  f89d0000          LDRB     r0,[sp,#0]
000028  2804              CMP      r0,#4
00002a  d103              BNE      |L4.52|
;;;45     			FLASHStatus = FLASH_ErasePage(addr);
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       FLASH_ErasePage
000032  9000              STR      r0,[sp,#0]
                  |L4.52|
;;;46     	}
;;;47     	OS_EXIT_CRITICAL(); //打开中断
000034  4628              MOV      r0,r5
000036  f7fffffe          BL       OS_CPU_SR_Restore
;;;48     }
00003a  bd38              POP      {r3-r5,pc}
;;;49     
                          ENDP

                  |L4.60|
                          DCD      0x08030000

                          AREA ||i.SoftProgramUpdate||, CODE, READONLY, ALIGN=2

                  SoftProgramUpdate PROC
;;;5      //新程序的数据更新
;;;6      void SoftProgramUpdate(uint32_t wAddr,uint8_t* ptrBuff,uint16_t datLength)
000000  e92d43fe          PUSH     {r1-r9,lr}
;;;7      {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;8      	OS_CPU_SR  cpu_sr = 0u;
00000a  f04f0900          MOV      r9,#0
;;;9      	uint16_t i = 0;
00000e  46c8              MOV      r8,r9
;;;10     	if(wAddr > 0x80000)
000010  f5b42f00          CMP      r4,#0x80000
000014  d901              BLS      |L5.26|
                  |L5.22|
;;;11     		return ;
;;;12     	wAddr += NEW_SOFT_ADDR;
;;;13     	
;;;14     	OS_ENTER_CRITICAL();//禁止中断
;;;15     	{
;;;16     		volatile FLASH_Status FLASHStatus = FLASH_COMPLETE;
;;;17     		volatile uint32_t     w_addr      = wAddr;
;;;18     		volatile uint32_t*    p_w_data    = (uint32_t*)ptrBuff;	//4字节指针
;;;19     		volatile uint32_t     w_data      = (uint32_t)(*p_w_data);//取得相应数据
;;;20     
;;;21     		for(i=0;(i<(datLength/4))&&(FLASHStatus == FLASH_COMPLETE);i++) 
;;;22     		{
;;;23     			FLASHStatus = FLASH_ProgramWord(w_addr, w_data);
;;;24     			w_addr = w_addr + 4;
;;;25     			p_w_data++;
;;;26     			w_data=(uint32_t)(*p_w_data)  ;	
;;;27     		}
;;;28     	}
;;;29     	OS_EXIT_CRITICAL(); //打开中断
;;;30     }
000016  e8bd83fe          POP      {r1-r9,pc}
                  |L5.26|
00001a  4816              LDR      r0,|L5.116|
00001c  4404              ADD      r4,r4,r0              ;12
00001e  f7fffffe          BL       OS_CPU_SR_Save
000022  4681              MOV      r9,r0                 ;14
000024  2004              MOVS     r0,#4                 ;16
000026  9002              STR      r0,[sp,#8]            ;16
000028  9401              STR      r4,[sp,#4]            ;17
00002a  4637              MOV      r7,r6                 ;18
00002c  6838              LDR      r0,[r7,#0]            ;19
00002e  9000              STR      r0,[sp,#0]            ;19
000030  f04f0800          MOV      r8,#0                 ;21
000034  e00e              B        |L5.84|
                  |L5.54|
000036  e9dd1000          LDRD     r1,r0,[sp,#0]         ;23
00003a  f7fffffe          BL       FLASH_ProgramWord
00003e  9002              STR      r0,[sp,#8]            ;23
000040  9801              LDR      r0,[sp,#4]            ;24
000042  1d00              ADDS     r0,r0,#4              ;24
000044  9001              STR      r0,[sp,#4]            ;24
000046  1d3f              ADDS     r7,r7,#4              ;25
000048  6838              LDR      r0,[r7,#0]            ;26
00004a  9000              STR      r0,[sp,#0]            ;26
00004c  f1080001          ADD      r0,r8,#1              ;21
000050  fa1ff880          UXTH     r8,r0                 ;21
                  |L5.84|
000054  17e9              ASRS     r1,r5,#31             ;21
000056  eb057191          ADD      r1,r5,r1,LSR #30      ;21
00005a  1089              ASRS     r1,r1,#2              ;21
00005c  4541              CMP      r1,r8                 ;21
00005e  dd03              BLE      |L5.104|
000060  f89d1008          LDRB     r1,[sp,#8]            ;21
000064  2904              CMP      r1,#4                 ;21
000066  d0e6              BEQ      |L5.54|
                  |L5.104|
000068  4648              MOV      r0,r9                 ;29
00006a  f7fffffe          BL       OS_CPU_SR_Restore
00006e  bf00              NOP      
000070  e7d1              B        |L5.22|
;;;31     
                          ENDP

000072  0000              DCW      0x0000
                  |L5.116|
                          DCD      0x08030000

;*** Start embedded assembler ***

#line 1 "..\\CDMA\\DataSaveToFlash.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_DataSaveToFlash_c_c31cb311____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___17_DataSaveToFlash_c_c31cb311____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_DataSaveToFlash_c_c31cb311____REVSH|
#line 144
|__asm___17_DataSaveToFlash_c_c31cb311____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
