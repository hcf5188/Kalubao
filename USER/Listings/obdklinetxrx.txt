; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\obj\obdklinetxrx.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=..\obj\obdklinetxrx.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\OBD -I..\SYSTEM -I..\USER -I..\LIB\inc -I..\UCOSII\CONFIG -I..\UCOSII\PORT -I..\UCOSII\CORE -I..\HAEDWARE -I..\GPS -I..\CDMA -I..\DEAL -I..\USB\CONFIG -I..\USB\STM32_USB-FS-Device_Driver\inc -I..\CORE -I.\RTE\_Project -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\5.2.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=524 -D_RTE_ -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\obdklinetxrx.crf ..\OBD\OBDKLineTxRx.c]
                          THUMB

                          AREA ||i.KLineFastInit||, CODE, READONLY, ALIGN=2

                  KLineFastInit PROC
;;;3      
;;;4      void KLineFastInit(void)
000000  b508              PUSH     {r3,lr}
;;;5      {
;;;6      	GPIO_InitTypeDef GPIO_InitStructure;
;;;7      	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000002  2003              MOVS     r0,#3
000004  f88d0002          STRB     r0,[sp,#2]
;;;8      	
;;;9      	//TX IO Output
;;;10     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_KWP_TX;
000008  f44f6080          MOV      r0,#0x400
00000c  f8ad0000          STRH     r0,[sp,#0]
;;;11       	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
000010  2010              MOVS     r0,#0x10
000012  f88d0003          STRB     r0,[sp,#3]
;;;12       	GPIO_Init(GPIOB, &GPIO_InitStructure);
000016  4669              MOV      r1,sp
000018  4818              LDR      r0,|L1.124|
00001a  f7fffffe          BL       GPIO_Init
;;;13     
;;;14     	//T Idle 拉高300ms
;;;15     	GPIO_SetBits(GPIOB,GPIO_Pin_KWP_TX);
00001e  f44f6180          MOV      r1,#0x400
000022  4816              LDR      r0,|L1.124|
000024  f7fffffe          BL       GPIO_SetBits
;;;16     	OSTimeDlyHMSM(0,0,0,500);
000028  f44f73fa          MOV      r3,#0x1f4
00002c  2200              MOVS     r2,#0
00002e  4611              MOV      r1,r2
000030  4610              MOV      r0,r2
000032  f7fffffe          BL       OSTimeDlyHMSM
;;;17     
;;;18     	// 拉低25ms
;;;19     	GPIO_ResetBits(GPIOB,GPIO_Pin_KWP_TX);
000036  f44f6180          MOV      r1,#0x400
00003a  4810              LDR      r0,|L1.124|
00003c  f7fffffe          BL       GPIO_ResetBits
;;;20     	OSTimeDlyHMSM(0,0,0,25);
000040  2319              MOVS     r3,#0x19
000042  2200              MOVS     r2,#0
000044  4611              MOV      r1,r2
000046  4610              MOV      r0,r2
000048  f7fffffe          BL       OSTimeDlyHMSM
;;;21     
;;;22     	//拉高25ms
;;;23     	GPIO_SetBits(GPIOB,GPIO_Pin_KWP_TX);
00004c  f44f6180          MOV      r1,#0x400
000050  480a              LDR      r0,|L1.124|
000052  f7fffffe          BL       GPIO_SetBits
;;;24     	OSTimeDlyHMSM(0,0,0,25);
000056  2319              MOVS     r3,#0x19
000058  2200              MOVS     r2,#0
00005a  4611              MOV      r1,r2
00005c  4610              MOV      r0,r2
00005e  f7fffffe          BL       OSTimeDlyHMSM
;;;25     	//USART3  TX 转为收发器
;;;26     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_KWP_TX;
000062  f44f6080          MOV      r0,#0x400
000066  f8ad0000          STRH     r0,[sp,#0]
;;;27       	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
00006a  2018              MOVS     r0,#0x18
00006c  f88d0003          STRB     r0,[sp,#3]
;;;28       	GPIO_Init(GPIOB, &GPIO_InitStructure);
000070  4669              MOV      r1,sp
000072  4802              LDR      r0,|L1.124|
000074  f7fffffe          BL       GPIO_Init
;;;29     }
000078  bd08              POP      {r3,pc}
;;;30     
                          ENDP

00007a  0000              DCW      0x0000
                  |L1.124|
                          DCD      0x40010c00

                          AREA ||i.USART3_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART3_IRQHandler PROC
;;;30     
;;;31     void USART3_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;32     {
;;;33     	uint8_t tmp;
;;;34     	if(USART_GetITStatus(USART3, USART_IT_RXNE) != RESET)//接收到数据
000002  f2405125          MOV      r1,#0x525
000006  481a              LDR      r0,|L2.112|
000008  f7fffffe          BL       USART_GetITStatus
00000c  b148              CBZ      r0,|L2.34|
;;;35       	{
;;;36     		/* Read one byte from the receive data register */
;;;37     		tmp=USART_ReceiveData(USART3);
00000e  4818              LDR      r0,|L2.112|
000010  f7fffffe          BL       USART_ReceiveData
000014  b2c4              UXTB     r4,r0
;;;38     
;;;39     		//接收后的数据待处理----代码重构
;;;40     
;;;41     		USART_ClearITPendingBit(USART3, USART_IT_RXNE) ;
000016  f2405125          MOV      r1,#0x525
00001a  4815              LDR      r0,|L2.112|
00001c  f7fffffe          BL       USART_ClearITPendingBit
000020  e024              B        |L2.108|
                  |L2.34|
;;;42     
;;;43     	}
;;;44     	else if(USART_GetITStatus(USART3, USART_IT_TC) != RESET)//发送完毕
000022  f2406126          MOV      r1,#0x626
000026  4812              LDR      r0,|L2.112|
000028  f7fffffe          BL       USART_GetITStatus
00002c  b148              CBZ      r0,|L2.66|
;;;45     	{
;;;46     //		if(g_usart_data[u_index].tx_last!=g_usart_data[u_index].tx_used)
;;;47     //		{
;;;48     //			tmp=g_usart_data[u_index].tx_buf[g_usart_data[u_index].tx_used++];
;;;49     //			g_usart_data[u_index].tx_used&=0x01ff;
;;;50     			USART_SendData(USART3, tmp);
00002e  4621              MOV      r1,r4
000030  480f              LDR      r0,|L2.112|
000032  f7fffffe          BL       USART_SendData
;;;51     //		}else
;;;52     //		{
;;;53     //			 g_usart_data[u_index].flag_txstop=1;
;;;54     //		}
;;;55     
;;;56     		USART_ClearITPendingBit(USART3, USART_IT_TC) ;
000036  f2406126          MOV      r1,#0x626
00003a  480d              LDR      r0,|L2.112|
00003c  f7fffffe          BL       USART_ClearITPendingBit
000040  e014              B        |L2.108|
                  |L2.66|
;;;57     	}
;;;58     	else if(USART_GetITStatus(USART3, USART_IT_TXE) != RESET)//空
000042  f2407127          MOV      r1,#0x727
000046  480a              LDR      r0,|L2.112|
000048  f7fffffe          BL       USART_GetITStatus
00004c  b170              CBZ      r0,|L2.108|
;;;59     	{
;;;60     //		if(g_usart_data[u_index].tx_last!=g_usart_data[u_index].tx_used)
;;;61     //		{
;;;62     //			tmp=g_usart_data[u_index].tx_buf[g_usart_data[u_index].tx_used++];
;;;63     //			g_usart_data[u_index].tx_used&=0x01ff;
;;;64     			USART_SendData(USART3, tmp);
00004e  4621              MOV      r1,r4
000050  4807              LDR      r0,|L2.112|
000052  f7fffffe          BL       USART_SendData
;;;65     //		}
;;;66     //		else
;;;67     //		{
;;;68     //			 g_usart_data[u_index].flag_txstop=1;
;;;69     //		}
;;;70     		USART_ITConfig(USART3, USART_IT_TXE, DISABLE);
000056  2200              MOVS     r2,#0
000058  f2407127          MOV      r1,#0x727
00005c  4804              LDR      r0,|L2.112|
00005e  f7fffffe          BL       USART_ITConfig
;;;71     		USART_ClearITPendingBit(USART3, USART_IT_TXE) ;
000062  f2407127          MOV      r1,#0x727
000066  4802              LDR      r0,|L2.112|
000068  f7fffffe          BL       USART_ClearITPendingBit
                  |L2.108|
;;;72     	}
;;;73     }
00006c  bd10              POP      {r4,pc}
;;;74     
                          ENDP

00006e  0000              DCW      0x0000
                  |L2.112|
                          DCD      0x40004800
