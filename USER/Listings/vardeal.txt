; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\obj\vardeal.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=..\obj\vardeal.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\OBD -I..\SYSTEM -I..\USER -I..\LIB\inc -I..\UCOSII\CONFIG -I..\UCOSII\PORT -I..\UCOSII\CORE -I..\HAEDWARE -I..\GPS -I..\CDMA -I..\DEAL -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\vardeal.crf ..\DEAL\varDeal.c]
                          THUMB

                          AREA ||i.CDMASendDataPack||, CODE, READONLY, ALIGN=2

                  CDMASendDataPack PROC
;;;21     uint16_t crc = 0;
;;;22     void CDMASendDataPack(_CDMADataToSend* ptr)//对上传的数据包进行帧头封装、CRC校验等
000000  b570              PUSH     {r4-r6,lr}
;;;23     {
000002  4604              MOV      r4,r0
;;;24     	_PROTOCOL_HEAD *pHead = NULL;
000004  2500              MOVS     r5,#0
;;;25     	
;;;26     	realTime = RTC_GetCounter();
000006  f7fffffe          BL       RTC_GetCounter
00000a  4928              LDR      r1,|L1.172|
00000c  6008              STR      r0,[r1,#0]  ; realTime
;;;27     	
;;;28     	pHead = Mem_malloc(sizeof(_PROTOCOL_HEAD));
00000e  201b              MOVS     r0,#0x1b
000010  f7fffffe          BL       Mem_malloc
000014  4605              MOV      r5,r0
;;;29     	
;;;30     	pHead->magic    = 0x7E;
000016  207e              MOVS     r0,#0x7e
000018  7028              STRB     r0,[r5,#0]
;;;31     	pHead->len      = t_htons(ptr->datLength - 3);  //MAP层数据长度
00001a  8821              LDRH     r1,[r4,#0]
00001c  1ec9              SUBS     r1,r1,#3
00001e  b288              UXTH     r0,r1
000020  f7fffffe          BL       t_htons
000024  f8a50001          STRH     r0,[r5,#1]
;;;32     	memcpy(pHead->device,sysAllData->imei,16);       //拷贝设备唯一标识码 IMEI
000028  2210              MOVS     r2,#0x10
00002a  4821              LDR      r0,|L1.176|
00002c  6801              LDR      r1,[r0,#0]  ; sysAllData
00002e  3112              ADDS     r1,r1,#0x12
000030  1ce8              ADDS     r0,r5,#3
000032  f7fffffe          BL       __aeabi_memcpy
;;;33     	pHead->msgid    = t_htonl(sysAllData->sendId);   //发送帧流水号 
000036  491e              LDR      r1,|L1.176|
000038  6809              LDR      r1,[r1,#0]  ; sysAllData
00003a  6e48              LDR      r0,[r1,#0x64]
00003c  f7fffffe          BL       t_htonl
000040  f8c50013          STR      r0,[r5,#0x13]
;;;34     	pHead->time_cli = t_htonl(realTime);            //todo: 记录当前包要发送的时间    RTC_GetCounter();
000044  4819              LDR      r0,|L1.172|
000046  6800              LDR      r0,[r0,#0]  ; realTime
000048  f7fffffe          BL       t_htonl
00004c  f8c50017          STR      r0,[r5,#0x17]
;;;35     	
;;;36     	sysAllData->sendId++;
000050  4817              LDR      r0,|L1.176|
000052  6800              LDR      r0,[r0,#0]  ; sysAllData
000054  6e40              LDR      r0,[r0,#0x64]
000056  1c40              ADDS     r0,r0,#1
000058  4915              LDR      r1,|L1.176|
00005a  6809              LDR      r1,[r1,#0]  ; sysAllData
00005c  6648              STR      r0,[r1,#0x64]
;;;37     	
;;;38     	memcpy(ptr->data,pHead,sizeof(_PROTOCOL_HEAD));
00005e  6860              LDR      r0,[r4,#4]
000060  221b              MOVS     r2,#0x1b
000062  4629              MOV      r1,r5
000064  f7fffffe          BL       __aeabi_memcpy
;;;39     	Mem_free(pHead);                              //申请的内存块，用完一定要释放啊
000068  4628              MOV      r0,r5
00006a  f7fffffe          BL       Mem_free
;;;40     	
;;;41     	crc = CRC_Compute16(&ptr->data[1],ptr->datLength-1);
00006e  8822              LDRH     r2,[r4,#0]
000070  1e51              SUBS     r1,r2,#1
000072  6862              LDR      r2,[r4,#4]
000074  1c50              ADDS     r0,r2,#1
000076  f7fffffe          BL       CRC_Compute16
00007a  490e              LDR      r1,|L1.180|
00007c  8008              STRH     r0,[r1,#0]
;;;42     	
;;;43     	ptr->data[ptr->datLength++] = (crc>>8)&0xff;
00007e  4608              MOV      r0,r1
000080  8800              LDRH     r0,[r0,#0]  ; crc
000082  0a01              LSRS     r1,r0,#8
000084  8822              LDRH     r2,[r4,#0]
000086  1c50              ADDS     r0,r2,#1
000088  8020              STRH     r0,[r4,#0]
00008a  6860              LDR      r0,[r4,#4]
00008c  5481              STRB     r1,[r0,r2]
;;;44     	ptr->data[ptr->datLength++] = crc&0xff;
00008e  4809              LDR      r0,|L1.180|
000090  7801              LDRB     r1,[r0,#0]  ; crc
000092  8822              LDRH     r2,[r4,#0]
000094  1c50              ADDS     r0,r2,#1
000096  8020              STRH     r0,[r4,#0]
000098  6860              LDR      r0,[r4,#4]
00009a  5481              STRB     r1,[r0,r2]
;;;45     	ptr->data[ptr->datLength++] = 0x7E;
00009c  217e              MOVS     r1,#0x7e
00009e  8822              LDRH     r2,[r4,#0]
0000a0  1c50              ADDS     r0,r2,#1
0000a2  8020              STRH     r0,[r4,#0]
0000a4  6860              LDR      r0,[r4,#4]
0000a6  5481              STRB     r1,[r0,r2]
;;;46     }
0000a8  bd70              POP      {r4-r6,pc}
;;;47     
                          ENDP

0000aa  0000              DCW      0x0000
                  |L1.172|
                          DCD      realTime
                  |L1.176|
                          DCD      sysAllData
                  |L1.180|
                          DCD      ||crc||

                          AREA ||i.CDMNSendDataInit||, CODE, READONLY, ALIGN=1

                  CDMNSendDataInit PROC
;;;8      
;;;9      _CDMADataToSend* CDMNSendDataInit(uint16_t length)//要发送的数据，进行初始化
000000  b570              PUSH     {r4-r6,lr}
;;;10     {
000002  4605              MOV      r5,r0
;;;11     	_CDMADataToSend* ptr = NULL;
000004  2400              MOVS     r4,#0
;;;12     	ptr = Mem_malloc(sizeof(_CDMADataToSend));
000006  2008              MOVS     r0,#8
000008  f7fffffe          BL       Mem_malloc
00000c  4604              MOV      r4,r0
;;;13     	
;;;14     	ptr->timeCount = 0;
00000e  2000              MOVS     r0,#0
000010  8060              STRH     r0,[r4,#2]
;;;15     	ptr->datLength = FRAME_HEAD_LEN;
000012  201b              MOVS     r0,#0x1b
000014  8020              STRH     r0,[r4,#0]
;;;16     	ptr->data = Mem_malloc(length);
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       Mem_malloc
00001c  6060              STR      r0,[r4,#4]
;;;17     	
;;;18     	return ptr;
00001e  4620              MOV      r0,r4
;;;19     }
000020  bd70              POP      {r4-r6,pc}
;;;20     uint32_t realTime = 0;
                          ENDP


                          AREA ||i.GlobalVarInit||, CODE, READONLY, ALIGN=2

                  GlobalVarInit PROC
;;;53     
;;;54     void GlobalVarInit(void )//todo：全局变量初始化  不断补充，从Flash中读取需不需要更新等 (ECU版本)
000000  b510              PUSH     {r4,lr}
;;;55     {           
;;;56     	sysAllData = Mem_malloc(256);
000002  f44f7080          MOV      r0,#0x100
000006  f7fffffe          BL       Mem_malloc
00000a  4913              LDR      r1,|L3.88|
00000c  6008              STR      r0,[r1,#0]  ; sysAllData
;;;57     	
;;;58     	sysAllData->isDataFlow = 1;              //设备启动的时候，数据流未流动
00000e  2001              MOVS     r0,#1
000010  6809              LDR      r1,[r1,#0]  ; sysAllData
000012  f8810062          STRB     r0,[r1,#0x62]
;;;59     	sysAllData->sendId = 0x80000000;         //发送的帧流水号
000016  07c0              LSLS     r0,r0,#31
000018  490f              LDR      r1,|L3.88|
00001a  6809              LDR      r1,[r1,#0]  ; sysAllData
00001c  6648              STR      r0,[r1,#0x64]
;;;60     	sysAllData->pidNum = 27;                 //PID指令个数
00001e  201b              MOVS     r0,#0x1b
000020  490d              LDR      r1,|L3.88|
000022  6809              LDR      r1,[r1,#0]  ; sysAllData
000024  f8a10070          STRH     r0,[r1,#0x70]
;;;61     	sysAllData->softVersion = SOFTVersion;   //软件版本号
000028  480c              LDR      r0,|L3.92|
00002a  490b              LDR      r1,|L3.88|
00002c  6809              LDR      r1,[r1,#0]  ; sysAllData
00002e  6008              STR      r0,[r1,#0]
;;;62     	sysAllData->ipPotr = IP_Port;            
000030  f2425037          MOV      r0,#0x2537
000034  4908              LDR      r1,|L3.88|
000036  6809              LDR      r1,[r1,#0]  ; sysAllData
000038  f8a10048          STRH     r0,[r1,#0x48]
;;;63     	memset(sysAllData->ipAddr,0,18);
00003c  2112              MOVS     r1,#0x12
00003e  4806              LDR      r0,|L3.88|
000040  6800              LDR      r0,[r0,#0]  ; sysAllData
000042  3036              ADDS     r0,r0,#0x36
000044  f7fffffe          BL       __aeabi_memclr
;;;64     	memcpy(sysAllData->ipAddr,ipAddr,sizeof(ipAddr));//todo：IP地址，程序升级后用flash中的IP及端口号
000048  220e              MOVS     r2,#0xe
00004a  4905              LDR      r1,|L3.96|
00004c  4802              LDR      r0,|L3.88|
00004e  6800              LDR      r0,[r0,#0]  ; sysAllData
000050  3036              ADDS     r0,r0,#0x36
000052  f7fffffe          BL       __aeabi_memcpy
;;;65     	
;;;66     }
000056  bd10              POP      {r4,pc}
;;;67     
                          ENDP

                  |L3.88|
                          DCD      sysAllData
                  |L3.92|
                          DCD      0x10001001
                  |L3.96|
                          DCD      ipAddr

                          AREA ||i.RecvDataAnalysis||, CODE, READONLY, ALIGN=1

                  RecvDataAnalysis PROC
;;;67     
;;;68      uint8_t* RecvDataAnalysis(uint8_t* ptrDataToDeal)//解析接收到的数据包
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;69     {
000004  4605              MOV      r5,r0
;;;70     	uint8_t  i = 0;
000006  2600              MOVS     r6,#0
;;;71     	uint16_t datLen   = 0;
000008  2400              MOVS     r4,#0
;;;72     	uint16_t crcDat   = 0;
00000a  46a0              MOV      r8,r4
;;;73     	uint16_t crcCheck = 0;
00000c  46a1              MOV      r9,r4
;;;74     	uint8_t* ptr = NULL;
00000e  2700              MOVS     r7,#0
;;;75     	while(1)
000010  e00e              B        |L4.48|
                  |L4.18|
;;;76     	{
;;;77     		if(ptrDataToDeal[i++] == 0x7E)
000012  4630              MOV      r0,r6
000014  1c71              ADDS     r1,r6,#1
000016  b2ce              UXTB     r6,r1
000018  5c28              LDRB     r0,[r5,r0]
00001a  287e              CMP      r0,#0x7e
00001c  d100              BNE      |L4.32|
;;;78     			break;
00001e  e008              B        |L4.50|
                  |L4.32|
;;;79     		if(i >= 20)
000020  2e14              CMP      r6,#0x14
000022  db05              BLT      |L4.48|
;;;80     		{
;;;81     			Mem_free(ptrDataToDeal);
000024  4628              MOV      r0,r5
000026  f7fffffe          BL       Mem_free
;;;82     			return NULL;
00002a  2000              MOVS     r0,#0
                  |L4.44|
;;;83     		}
;;;84     	}
;;;85     	datLen   = ptrDataToDeal[i++];
;;;86     	datLen   = (datLen << 8) + ptrDataToDeal[i--];
;;;87     	crcCheck = CRC_Compute16(&ptrDataToDeal[i],datLen);
;;;88     	
;;;89     	crcDat   = ptrDataToDeal[i + datLen +2];
;;;90     	crcDat   = (crcDat << 8) + ptrDataToDeal[i + datLen +3];
;;;91     	if(crcCheck != crcDat)
;;;92     	{
;;;93     		Mem_free(ptrDataToDeal);
;;;94     		return NULL;
;;;95     	}
;;;96     	ptr = Mem_malloc(datLen);
;;;97     	datLen = datLen - 24;
;;;98     	ptr[0] = (datLen >> 8)  & 0x00FF;
;;;99     	ptr[1] = datLen & 0x00FF;
;;;100    	memcpy(&ptr[2],&ptrDataToDeal[i + 26],datLen);
;;;101    	
;;;102    	Mem_free(ptrDataToDeal);
;;;103    	return ptr;
;;;104    }
00002c  e8bd87f0          POP      {r4-r10,pc}
                  |L4.48|
000030  e7ef              B        |L4.18|
                  |L4.50|
000032  bf00              NOP                            ;78
000034  4630              MOV      r0,r6                 ;85
000036  1c71              ADDS     r1,r6,#1              ;85
000038  b2ce              UXTB     r6,r1                 ;85
00003a  5c2c              LDRB     r4,[r5,r0]            ;85
00003c  4630              MOV      r0,r6                 ;86
00003e  1e71              SUBS     r1,r6,#1              ;86
000040  b2ce              UXTB     r6,r1                 ;86
000042  5c28              LDRB     r0,[r5,r0]            ;86
000044  eb002004          ADD      r0,r0,r4,LSL #8       ;86
000048  b284              UXTH     r4,r0                 ;86
00004a  19a8              ADDS     r0,r5,r6              ;87
00004c  4621              MOV      r1,r4                 ;87
00004e  f7fffffe          BL       CRC_Compute16
000052  4681              MOV      r9,r0                 ;87
000054  1930              ADDS     r0,r6,r4              ;89
000056  1c80              ADDS     r0,r0,#2              ;89
000058  f8158000          LDRB     r8,[r5,r0]            ;89
00005c  1930              ADDS     r0,r6,r4              ;90
00005e  1cc0              ADDS     r0,r0,#3              ;90
000060  5c28              LDRB     r0,[r5,r0]            ;90
000062  eb002008          ADD      r0,r0,r8,LSL #8       ;90
000066  fa1ff880          UXTH     r8,r0                 ;90
00006a  45c1              CMP      r9,r8                 ;91
00006c  d004              BEQ      |L4.120|
00006e  4628              MOV      r0,r5                 ;93
000070  f7fffffe          BL       Mem_free
000074  2000              MOVS     r0,#0                 ;94
000076  e7d9              B        |L4.44|
                  |L4.120|
000078  4620              MOV      r0,r4                 ;96
00007a  f7fffffe          BL       Mem_malloc
00007e  4607              MOV      r7,r0                 ;96
000080  f1a40018          SUB      r0,r4,#0x18           ;97
000084  b284              UXTH     r4,r0                 ;97
000086  0a20              LSRS     r0,r4,#8              ;98
000088  7038              STRB     r0,[r7,#0]            ;98
00008a  707c              STRB     r4,[r7,#1]            ;99
00008c  f106001a          ADD      r0,r6,#0x1a           ;100
000090  1829              ADDS     r1,r5,r0              ;100
000092  4622              MOV      r2,r4                 ;100
000094  1cb8              ADDS     r0,r7,#2              ;100
000096  f7fffffe          BL       __aeabi_memcpy
00009a  4628              MOV      r0,r5                 ;102
00009c  f7fffffe          BL       Mem_free
0000a0  4638              MOV      r0,r7                 ;103
0000a2  e7c3              B        |L4.44|
;;;105    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  ipAddr
000000  3131362e          DCB      0x31,0x31,0x36,0x2e
000004  36322e31          DCB      0x36,0x32,0x2e,0x31
000008  39352e39          DCB      0x39,0x35,0x2e,0x39
00000c  3900              DCB      0x39,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  realTime
                          DCD      0x00000000
                  ||crc||
000004  0000              DCW      0x0000

;*** Start embedded assembler ***

#line 1 "..\\DEAL\\varDeal.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_varDeal_c_4d905525____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_varDeal_c_4d905525____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_varDeal_c_4d905525____REVSH|
#line 144
|__asm___9_varDeal_c_4d905525____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
