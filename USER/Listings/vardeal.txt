; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\obj\vardeal.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=..\obj\vardeal.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\OBD -I..\SYSTEM -I..\USER -I..\LIB\inc -I..\UCOSII\CONFIG -I..\UCOSII\PORT -I..\UCOSII\CORE -I..\HAEDWARE -I..\GPS -I..\CDMA -I..\DEAL -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\vardeal.crf ..\DEAL\varDeal.c]
                          THUMB

                          AREA ||i.CDMASendDataPack||, CODE, READONLY, ALIGN=2

                  CDMASendDataPack PROC
;;;15     
;;;16     void CDMASendDataPack(_CDMADataToSend* ptr)
000000  b570              PUSH     {r4-r6,lr}
;;;17     {
000002  4604              MOV      r4,r0
;;;18     	_PROTOCOL_HEAD *pHead = NULL;
000004  2500              MOVS     r5,#0
;;;19     	uint16_t crc = 0;
000006  2600              MOVS     r6,#0
;;;20     
;;;21     	pHead = Mem_malloc(sizeof(_PROTOCOL_HEAD));
000008  201b              MOVS     r0,#0x1b
00000a  f7fffffe          BL       Mem_malloc
00000e  4605              MOV      r5,r0
;;;22     	
;;;23     	pHead->magic    = 0x7E;
000010  207e              MOVS     r0,#0x7e
000012  7028              STRB     r0,[r5,#0]
;;;24     	pHead->len      = t_htons(ptr->datLength - 3);     //MAP层数据长度
000014  8821              LDRH     r1,[r4,#0]
000016  1ec9              SUBS     r1,r1,#3
000018  b288              UXTH     r0,r1
00001a  f7fffffe          BL       t_htons
00001e  f8a50001          STRH     r0,[r5,#1]
;;;25     	memcpy(pHead->device,sysAllData.imei,16);          //拷贝设备唯一标识码 IMEI
000022  2210              MOVS     r2,#0x10
000024  491c              LDR      r1,|L1.152|
000026  1ce8              ADDS     r0,r5,#3
000028  f7fffffe          BL       __aeabi_memcpy
;;;26     	pHead->msgid    = t_htonl(sysAllData.sendId);      //发送帧流水号 
00002c  491a              LDR      r1,|L1.152|
00002e  3918              SUBS     r1,r1,#0x18
000030  6ac8              LDR      r0,[r1,#0x2c]  ; sysAllData
000032  f7fffffe          BL       t_htonl
000036  f8c50013          STR      r0,[r5,#0x13]
;;;27     	pHead->time_cli = t_htonl(sysAllData.currentTime); //todo: 记录当前包要发送的时间    RTC_GetCounter();
00003a  4917              LDR      r1,|L1.152|
00003c  3918              SUBS     r1,r1,#0x18
00003e  6b08              LDR      r0,[r1,#0x30]  ; sysAllData
000040  f7fffffe          BL       t_htonl
000044  f8c50017          STR      r0,[r5,#0x17]
;;;28     	
;;;29     	sysAllData.sendId++;
000048  4813              LDR      r0,|L1.152|
00004a  3818              SUBS     r0,r0,#0x18
00004c  6ac0              LDR      r0,[r0,#0x2c]  ; sysAllData
00004e  1c40              ADDS     r0,r0,#1
000050  4911              LDR      r1,|L1.152|
000052  3918              SUBS     r1,r1,#0x18
000054  62c8              STR      r0,[r1,#0x2c]  ; sysAllData
;;;30     	
;;;31     	memcpy(ptr->data,pHead,sizeof(_PROTOCOL_HEAD));
000056  221b              MOVS     r2,#0x1b
000058  4629              MOV      r1,r5
00005a  1d20              ADDS     r0,r4,#4
00005c  f7fffffe          BL       __aeabi_memcpy
;;;32     	Mem_free(pHead);                              //申请的内存块，用完一定要释放啊
000060  4628              MOV      r0,r5
000062  f7fffffe          BL       Mem_free
;;;33     	
;;;34     	crc = CRC_Compute16(&ptr->data[1],ptr->datLength-1);
000066  8820              LDRH     r0,[r4,#0]
000068  1e41              SUBS     r1,r0,#1
00006a  1d60              ADDS     r0,r4,#5
00006c  f7fffffe          BL       CRC_Compute16
000070  4606              MOV      r6,r0
;;;35     	
;;;36     	ptr->data[ptr->datLength++] = (crc>>8)&0xff;
000072  0a31              LSRS     r1,r6,#8
000074  8822              LDRH     r2,[r4,#0]
000076  1c50              ADDS     r0,r2,#1
000078  8020              STRH     r0,[r4,#0]
00007a  1d20              ADDS     r0,r4,#4
00007c  5481              STRB     r1,[r0,r2]
;;;37     	ptr->data[ptr->datLength++] = crc&0xff;
00007e  8822              LDRH     r2,[r4,#0]
000080  1c50              ADDS     r0,r2,#1
000082  8020              STRH     r0,[r4,#0]
000084  1d20              ADDS     r0,r4,#4
000086  5486              STRB     r6,[r0,r2]
;;;38     	ptr->data[ptr->datLength++] = 0x7E;
000088  217e              MOVS     r1,#0x7e
00008a  8822              LDRH     r2,[r4,#0]
00008c  1c50              ADDS     r0,r2,#1
00008e  8020              STRH     r0,[r4,#0]
000090  1d20              ADDS     r0,r4,#4
000092  5481              STRB     r1,[r0,r2]
;;;39     }
000094  bd70              POP      {r4-r6,pc}
                          ENDP

000096  0000              DCW      0x0000
                  |L1.152|
                          DCD      sysAllData+0x18

                          AREA ||i.CDMNSendDataInit||, CODE, READONLY, ALIGN=1

                  CDMNSendDataInit PROC
;;;4      #define  FRAME_HEAD_LEN    27     //与指令数据无关的属于帧头的数据长度
;;;5      _CDMADataToSend* CDMNSendDataInit(void)
000000  b510              PUSH     {r4,lr}
;;;6      {
;;;7      	_CDMADataToSend* ptr = NULL;
000002  2400              MOVS     r4,#0
;;;8      	ptr = Mem_malloc(sizeof(_CDMADataToSend));
000004  f24030ba          MOV      r0,#0x3ba
000008  f7fffffe          BL       Mem_malloc
00000c  4604              MOV      r4,r0
;;;9      	
;;;10     	ptr->timeCount = 0;
00000e  2000              MOVS     r0,#0
000010  8060              STRH     r0,[r4,#2]
;;;11     	ptr->datLength = FRAME_HEAD_LEN;
000012  201b              MOVS     r0,#0x1b
000014  8020              STRH     r0,[r4,#0]
;;;12     	
;;;13     	return ptr;
000016  4620              MOV      r0,r4
;;;14     }
000018  bd10              POP      {r4,pc}
;;;15     
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\DEAL\\varDeal.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_varDeal_c_4d905525____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_varDeal_c_4d905525____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_varDeal_c_4d905525____REVSH|
#line 144
|__asm___9_varDeal_c_4d905525____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
