; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\obj\vardeal.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=..\obj\vardeal.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\OBD -I..\SYSTEM -I..\USER -I..\LIB\inc -I..\UCOSII\CONFIG -I..\UCOSII\PORT -I..\UCOSII\CORE -I..\HAEDWARE -I..\GPS -I..\CDMA -I..\DEAL -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\vardeal.crf ..\DEAL\varDeal.c]
                          THUMB

                          AREA ||i.CDMASendDataPack||, CODE, READONLY, ALIGN=2

                  CDMASendDataPack PROC
;;;31     uint16_t crc = 0;
;;;32     void CDMASendDataPack(_CDMADataToSend* ptr)//对上传的数据包进行帧头封装、CRC校验等
000000  b570              PUSH     {r4-r6,lr}
;;;33     {
000002  4604              MOV      r4,r0
;;;34     	_PROTOCOL_HEAD *pHead = NULL;
000004  2500              MOVS     r5,#0
;;;35     	
;;;36     	realTime = RTC_GetCounter();//得到系统运行的RTC时间
000006  f7fffffe          BL       RTC_GetCounter
00000a  4928              LDR      r1,|L1.172|
00000c  6008              STR      r0,[r1,#0]  ; realTime
;;;37     	
;;;38     	pHead = Mem_malloc(sizeof(_PROTOCOL_HEAD));
00000e  201b              MOVS     r0,#0x1b
000010  f7fffffe          BL       Mem_malloc
000014  4605              MOV      r5,r0
;;;39     	
;;;40     	pHead->magic    = 0x7E;
000016  207e              MOVS     r0,#0x7e
000018  7028              STRB     r0,[r5,#0]
;;;41     	pHead->len      = t_htons(ptr->datLength - 3);   //MAP层数据长度
00001a  8821              LDRH     r1,[r4,#0]
00001c  1ec9              SUBS     r1,r1,#3
00001e  b288              UXTH     r0,r1
000020  f7fffffe          BL       t_htons
000024  f8a50001          STRH     r0,[r5,#1]
;;;42     	memcpy(pHead->device,varOperation.imei,16);      //拷贝设备唯一标识码 IMEI
000028  2210              MOVS     r2,#0x10
00002a  4921              LDR      r1,|L1.176|
00002c  1ce8              ADDS     r0,r5,#3
00002e  f7fffffe          BL       __aeabi_memcpy
;;;43     	pHead->msgid    = t_htonl(varOperation.sendId);  //发送帧流水号 
000032  491f              LDR      r1,|L1.176|
000034  3908              SUBS     r1,r1,#8
000036  f8d10059          LDR      r0,[r1,#0x59]  ; varOperation
00003a  f7fffffe          BL       t_htonl
00003e  f8c50013          STR      r0,[r5,#0x13]
;;;44     	pHead->time_cli = t_htonl(realTime);             //记录当前包要发送的时间 
000042  481a              LDR      r0,|L1.172|
000044  6800              LDR      r0,[r0,#0]  ; realTime
000046  f7fffffe          BL       t_htonl
00004a  f8c50017          STR      r0,[r5,#0x17]
;;;45     	
;;;46     	varOperation.sendId++;
00004e  4818              LDR      r0,|L1.176|
000050  3808              SUBS     r0,r0,#8
000052  f8d00059          LDR      r0,[r0,#0x59]  ; varOperation
000056  1c40              ADDS     r0,r0,#1
000058  4915              LDR      r1,|L1.176|
00005a  3908              SUBS     r1,r1,#8
00005c  f8c10059          STR      r0,[r1,#0x59]  ; varOperation
;;;47     	
;;;48     	memcpy(ptr->data,pHead,sizeof(_PROTOCOL_HEAD));
000060  6860              LDR      r0,[r4,#4]
000062  221b              MOVS     r2,#0x1b
000064  4629              MOV      r1,r5
000066  f7fffffe          BL       __aeabi_memcpy
;;;49     	Mem_free(pHead);                              //申请的内存块，用完一定要释放啊
00006a  4628              MOV      r0,r5
00006c  f7fffffe          BL       Mem_free
;;;50     	
;;;51     	crc = CRC_Compute16(&ptr->data[1],ptr->datLength-1);
000070  8822              LDRH     r2,[r4,#0]
000072  1e51              SUBS     r1,r2,#1
000074  6862              LDR      r2,[r4,#4]
000076  1c50              ADDS     r0,r2,#1
000078  f7fffffe          BL       CRC_Compute16
00007c  490d              LDR      r1,|L1.180|
00007e  8008              STRH     r0,[r1,#0]
;;;52     	
;;;53     	ptr->data[ptr->datLength++] = (crc>>8)&0xff;
000080  4608              MOV      r0,r1
000082  8800              LDRH     r0,[r0,#0]  ; crc
000084  0a01              LSRS     r1,r0,#8
000086  8822              LDRH     r2,[r4,#0]
000088  1c50              ADDS     r0,r2,#1
00008a  8020              STRH     r0,[r4,#0]
00008c  6860              LDR      r0,[r4,#4]
00008e  5481              STRB     r1,[r0,r2]
;;;54     	ptr->data[ptr->datLength++] = crc&0xff;
000090  4808              LDR      r0,|L1.180|
000092  7801              LDRB     r1,[r0,#0]  ; crc
000094  8822              LDRH     r2,[r4,#0]
000096  1c50              ADDS     r0,r2,#1
000098  8020              STRH     r0,[r4,#0]
00009a  6860              LDR      r0,[r4,#4]
00009c  5481              STRB     r1,[r0,r2]
;;;55     	ptr->data[ptr->datLength++] = 0x7E;
00009e  217e              MOVS     r1,#0x7e
0000a0  8822              LDRH     r2,[r4,#0]
0000a2  1c50              ADDS     r0,r2,#1
0000a4  8020              STRH     r0,[r4,#0]
0000a6  6860              LDR      r0,[r4,#4]
0000a8  5481              STRB     r1,[r0,r2]
;;;56     }
0000aa  bd70              POP      {r4-r6,pc}
;;;57     
                          ENDP

                  |L1.172|
                          DCD      realTime
                  |L1.176|
                          DCD      varOperation+0x8
                  |L1.180|
                          DCD      ||crc||

                          AREA ||i.CDMNSendDataInit||, CODE, READONLY, ALIGN=2

                  CDMNSendDataInit PROC
;;;9      
;;;10     _CDMADataToSend* CDMNSendDataInit(uint16_t length)//要发送的数据，进行初始化
000000  b570              PUSH     {r4-r6,lr}
;;;11     {
000002  4605              MOV      r5,r0
;;;12     	_CDMADataToSend* ptr = NULL;
000004  2400              MOVS     r4,#0
;;;13     	ptr = Mem_malloc(sizeof(_CDMADataToSend));
000006  2008              MOVS     r0,#8
000008  f7fffffe          BL       Mem_malloc
00000c  4604              MOV      r4,r0
;;;14     	
;;;15     	ptr->timeCount = 0;
00000e  2000              MOVS     r0,#0
000010  8060              STRH     r0,[r4,#2]
;;;16     	ptr->datLength = FRAME_HEAD_LEN;
000012  201b              MOVS     r0,#0x1b
000014  8020              STRH     r0,[r4,#0]
;;;17     	ptr->data = Mem_malloc(length);
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       Mem_malloc
00001c  6060              STR      r0,[r4,#4]
;;;18     	
;;;19     	ptr->data[ptr->datLength ++] = 7;
00001e  2107              MOVS     r1,#7
000020  8822              LDRH     r2,[r4,#0]
000022  1c50              ADDS     r0,r2,#1
000024  8020              STRH     r0,[r4,#0]
000026  6860              LDR      r0,[r4,#4]
000028  5481              STRB     r1,[r0,r2]
;;;20     	ptr->data[ptr->datLength ++] = 0x60;
00002a  2160              MOVS     r1,#0x60
00002c  8822              LDRH     r2,[r4,#0]
00002e  1c50              ADDS     r0,r2,#1
000030  8020              STRH     r0,[r4,#0]
000032  6860              LDR      r0,[r4,#4]
000034  5481              STRB     r1,[r0,r2]
;;;21     	ptr->data[ptr->datLength ++] = 0x00;
000036  2100              MOVS     r1,#0
000038  8822              LDRH     r2,[r4,#0]
00003a  1c50              ADDS     r0,r2,#1
00003c  8020              STRH     r0,[r4,#0]
00003e  6860              LDR      r0,[r4,#4]
000040  5481              STRB     r1,[r0,r2]
;;;22     	
;;;23     	ptr->data[ptr->datLength ++] = (sysUpdateVar.ecuVersion >> 24) &0x000000FF;
000042  4813              LDR      r0,|L2.144|
000044  f8d00009          LDR      r0,[r0,#9]  ; sysUpdateVar
000048  0e00              LSRS     r0,r0,#24
00004a  8822              LDRH     r2,[r4,#0]
00004c  1c51              ADDS     r1,r2,#1
00004e  8021              STRH     r1,[r4,#0]
000050  6861              LDR      r1,[r4,#4]
000052  5488              STRB     r0,[r1,r2]
;;;24     	ptr->data[ptr->datLength ++] = (sysUpdateVar.ecuVersion >> 16) &0x000000FF;
000054  480e              LDR      r0,|L2.144|
000056  f8d00009          LDR      r0,[r0,#9]  ; sysUpdateVar
00005a  f3c04107          UBFX     r1,r0,#16,#8
00005e  8822              LDRH     r2,[r4,#0]
000060  1c50              ADDS     r0,r2,#1
000062  8020              STRH     r0,[r4,#0]
000064  6860              LDR      r0,[r4,#4]
000066  5481              STRB     r1,[r0,r2]
;;;25     	ptr->data[ptr->datLength ++] = (sysUpdateVar.ecuVersion >>  8) &0x000000FF;
000068  4809              LDR      r0,|L2.144|
00006a  f8b00009          LDRH     r0,[r0,#9]  ; sysUpdateVar
00006e  f3c02107          UBFX     r1,r0,#8,#8
000072  8822              LDRH     r2,[r4,#0]
000074  1c50              ADDS     r0,r2,#1
000076  8020              STRH     r0,[r4,#0]
000078  6860              LDR      r0,[r4,#4]
00007a  5481              STRB     r1,[r0,r2]
;;;26     	ptr->data[ptr->datLength ++] =  sysUpdateVar.ecuVersion & 0x000000FF;
00007c  4804              LDR      r0,|L2.144|
00007e  7a41              LDRB     r1,[r0,#9]  ; sysUpdateVar
000080  8822              LDRH     r2,[r4,#0]
000082  1c50              ADDS     r0,r2,#1
000084  8020              STRH     r0,[r4,#0]
000086  6860              LDR      r0,[r4,#4]
000088  5481              STRB     r1,[r0,r2]
;;;27     
;;;28     	return ptr;
00008a  4620              MOV      r0,r4
;;;29     }
00008c  bd70              POP      {r4-r6,pc}
;;;30     uint32_t realTime = 0;
                          ENDP

00008e  0000              DCW      0x0000
                  |L2.144|
                          DCD      sysUpdateVar

                          AREA ||i.GlobalVarInit||, CODE, READONLY, ALIGN=2

                  GlobalVarInit PROC
;;;68     
;;;69     void GlobalVarInit(void )//todo：全局变量初始化  不断补充，从Flash中读取需不需要更新等 (ECU版本)
000000  b510              PUSH     {r4,lr}
;;;70     {           
;;;71     	//从Flash中载入数据进全局变量
;;;72     	Flash_ReadDat(SBOOT_UPGREAD_ADDR,(uint8_t *)&sysUpdateVar,sizeof(_SystemInformation));
000002  221a              MOVS     r2,#0x1a
000004  4916              LDR      r1,|L3.96|
000006  4817              LDR      r0,|L3.100|
000008  f7fffffe          BL       Flash_ReadDat
;;;73     	//从Flash中读取PID参数
;;;74     	Flash_ReadDat(PIDConfig_ADDR,configData,2048);
00000c  f44f6200          MOV      r2,#0x800
000010  4915              LDR      r1,|L3.104|
000012  4816              LDR      r0,|L3.108|
000014  f7fffffe          BL       Flash_ReadDat
;;;75     	ptrPIDAllDat = (_OBD_PID_Cmd *)configData;
000018  4813              LDR      r0,|L3.104|
00001a  4915              LDR      r1,|L3.112|
00001c  6008              STR      r0,[r1,#0]  ; ptrPIDAllDat
;;;76     		
;;;77     	varOperation.pidNum = sysUpdateVar.pidNum;//得到PID指令的个数
00001e  4810              LDR      r0,|L3.96|
000020  f8b0000d          LDRH     r0,[r0,#0xd]  ; sysUpdateVar
000024  4913              LDR      r1,|L3.116|
000026  f8a10061          STRH     r0,[r1,#0x61]
;;;78     	varOperation.isDataFlow   = 1;             //设备启动的时候，数据流未流动
00002a  2001              MOVS     r0,#1
00002c  f881002c          STRB     r0,[r1,#0x2c]
;;;79     	varOperation.isEngineRun  = 0;             //初始认为发动机是启动了的
000030  2000              MOVS     r0,#0
000032  f881002d          STRB     r0,[r1,#0x2d]
;;;80     	varOperation.sendId = 0x80000000;          //发送的帧流水号
000036  f04f4000          MOV      r0,#0x80000000
00003a  f8c10059          STR      r0,[r1,#0x59]  ; varOperation
;;;81     	
;;;82     	varOperation.ipPotr = IP_Port;             //初始化端口号
00003e  f247502f          MOV      r0,#0x752f
000042  f8a10041          STRH     r0,[r1,#0x41]
;;;83     	memset(varOperation.ipAddr,0,18);
000046  2112              MOVS     r1,#0x12
000048  480a              LDR      r0,|L3.116|
00004a  302f              ADDS     r0,r0,#0x2f
00004c  f7fffffe          BL       __aeabi_memclr
;;;84     	memcpy(varOperation.ipAddr,ipAddr,sizeof(ipAddr));//todo：IP地址，程序升级后用flash中的IP及端口号
000050  220f              MOVS     r2,#0xf
000052  4909              LDR      r1,|L3.120|
000054  4807              LDR      r0,|L3.116|
000056  302f              ADDS     r0,r0,#0x2f
000058  f7fffffe          BL       __aeabi_memcpy
;;;85     }
00005c  bd10              POP      {r4,pc}
;;;86     
                          ENDP

00005e  0000              DCW      0x0000
                  |L3.96|
                          DCD      sysUpdateVar
                  |L3.100|
                          DCD      0x08007800
                  |L3.104|
                          DCD      configData
                  |L3.108|
                          DCD      0x0802e000
                  |L3.112|
                          DCD      ptrPIDAllDat
                  |L3.116|
                          DCD      varOperation
                  |L3.120|
                          DCD      ipAddr

                          AREA ||i.RecvDataAnalysis||, CODE, READONLY, ALIGN=1

                  RecvDataAnalysis PROC
;;;86     
;;;87      uint8_t* RecvDataAnalysis(uint8_t* ptrDataToDeal)//解析接收到的数据包
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;88     {
000004  4605              MOV      r5,r0
;;;89     	uint16_t  i = 0;
000006  2600              MOVS     r6,#0
;;;90     	uint16_t datLen   = 0;
000008  2400              MOVS     r4,#0
;;;91     	uint16_t crcDat   = 0;
00000a  46a0              MOV      r8,r4
;;;92     	uint16_t crcCheck = 0;
00000c  46a1              MOV      r9,r4
;;;93     	uint8_t* ptr = NULL;
00000e  2700              MOVS     r7,#0
;;;94     	while(1)
000010  e00e              B        |L4.48|
                  |L4.18|
;;;95     	{
;;;96     		if(ptrDataToDeal[i++] == 0x7E)
000012  4630              MOV      r0,r6
000014  1c71              ADDS     r1,r6,#1
000016  b28e              UXTH     r6,r1
000018  5c28              LDRB     r0,[r5,r0]
00001a  287e              CMP      r0,#0x7e
00001c  d100              BNE      |L4.32|
;;;97     			break;
00001e  e008              B        |L4.50|
                  |L4.32|
;;;98     		if(i >= 60)
000020  2e3c              CMP      r6,#0x3c
000022  db05              BLT      |L4.48|
;;;99     		{
;;;100    			Mem_free(ptrDataToDeal);
000024  4628              MOV      r0,r5
000026  f7fffffe          BL       Mem_free
;;;101    			return NULL;
00002a  2000              MOVS     r0,#0
                  |L4.44|
;;;102    		}
;;;103    	}
;;;104    	datLen   = ptrDataToDeal[i++];
;;;105    	datLen   = (datLen << 8) + ptrDataToDeal[i--];
;;;106    	crcCheck = CRC_Compute16(&ptrDataToDeal[i],datLen + 2);
;;;107    	
;;;108    	crcDat   = ptrDataToDeal[i + datLen +2];
;;;109    	crcDat   = (crcDat << 8) + ptrDataToDeal[i + datLen +3];
;;;110    	if(crcCheck != crcDat)
;;;111    	{
;;;112    		Mem_free(ptrDataToDeal);
;;;113    		return NULL;
;;;114    	}
;;;115    	ptr = Mem_malloc(datLen);
;;;116    	datLen = datLen - 24;
;;;117    	ptr[0] = (datLen >> 8)  & 0x00FF;
;;;118    	ptr[1] = datLen & 0x00FF;
;;;119    	memcpy(&ptr[2],&ptrDataToDeal[i + 26],datLen);
;;;120    	
;;;121    	Mem_free(ptrDataToDeal);
;;;122    	return ptr;
;;;123    }
00002c  e8bd87f0          POP      {r4-r10,pc}
                  |L4.48|
000030  e7ef              B        |L4.18|
                  |L4.50|
000032  bf00              NOP                            ;97
000034  4630              MOV      r0,r6                 ;104
000036  1c71              ADDS     r1,r6,#1              ;104
000038  b28e              UXTH     r6,r1                 ;104
00003a  5c2c              LDRB     r4,[r5,r0]            ;104
00003c  4630              MOV      r0,r6                 ;105
00003e  1e71              SUBS     r1,r6,#1              ;105
000040  b28e              UXTH     r6,r1                 ;105
000042  5c28              LDRB     r0,[r5,r0]            ;105
000044  eb002004          ADD      r0,r0,r4,LSL #8       ;105
000048  b284              UXTH     r4,r0                 ;105
00004a  19a8              ADDS     r0,r5,r6              ;106
00004c  1ca1              ADDS     r1,r4,#2              ;106
00004e  f7fffffe          BL       CRC_Compute16
000052  4681              MOV      r9,r0                 ;106
000054  1930              ADDS     r0,r6,r4              ;108
000056  1c80              ADDS     r0,r0,#2              ;108
000058  f8158000          LDRB     r8,[r5,r0]            ;108
00005c  1930              ADDS     r0,r6,r4              ;109
00005e  1cc0              ADDS     r0,r0,#3              ;109
000060  5c28              LDRB     r0,[r5,r0]            ;109
000062  eb002008          ADD      r0,r0,r8,LSL #8       ;109
000066  fa1ff880          UXTH     r8,r0                 ;109
00006a  45c1              CMP      r9,r8                 ;110
00006c  d004              BEQ      |L4.120|
00006e  4628              MOV      r0,r5                 ;112
000070  f7fffffe          BL       Mem_free
000074  2000              MOVS     r0,#0                 ;113
000076  e7d9              B        |L4.44|
                  |L4.120|
000078  4620              MOV      r0,r4                 ;115
00007a  f7fffffe          BL       Mem_malloc
00007e  4607              MOV      r7,r0                 ;115
000080  f1a40018          SUB      r0,r4,#0x18           ;116
000084  b284              UXTH     r4,r0                 ;116
000086  0a20              LSRS     r0,r4,#8              ;117
000088  7038              STRB     r0,[r7,#0]            ;117
00008a  707c              STRB     r4,[r7,#1]            ;118
00008c  f106001a          ADD      r0,r6,#0x1a           ;119
000090  1829              ADDS     r1,r5,r0              ;119
000092  4622              MOV      r2,r4                 ;119
000094  1cb8              ADDS     r0,r7,#2              ;119
000096  f7fffffe          BL       __aeabi_memcpy
00009a  4628              MOV      r0,r5                 ;121
00009c  f7fffffe          BL       Mem_free
0000a0  4638              MOV      r0,r7                 ;122
0000a2  e7c3              B        |L4.44|
;;;124    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  sysUpdateVar
                          %        26
                  varOperation
                          %        104
                  configData
                          %        2048

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  ipAddr
000000  3131362e          DCB      0x31,0x31,0x36,0x2e
000004  3232382e          DCB      0x32,0x32,0x38,0x2e
000008  38382e31          DCB      0x38,0x38,0x2e,0x31
00000c  303100            DCB      0x30,0x31,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  realTime
                          DCD      0x00000000
                  ||crc||
000004  0000              DCW      0x0000
000006  0000              DCB      0x00,0x00
                  ptrPIDAllDat
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\DEAL\\varDeal.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_varDeal_c_4d905525____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_varDeal_c_4d905525____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_varDeal_c_4d905525____REVSH|
#line 144
|__asm___9_varDeal_c_4d905525____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
