; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\obj\normaltask.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=..\obj\normaltask.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\OBD -I..\SYSTEM -I..\USER -I..\LIB\inc -I..\UCOSII\CONFIG -I..\UCOSII\PORT -I..\UCOSII\CORE -I..\HAEDWARE -I..\GPS -I..\CDMA -I..\DEAL -I..\USB\CONFIG -I..\USB\STM32_USB-FS-Device_Driver\inc -I.\RTE\_Project -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\5.2.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=524 -D_RTE_ -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\normaltask.crf normalTask.c]
                          THUMB

                          AREA ||i.BSP_BeeperTimerInit||, CODE, READONLY, ALIGN=2

                  BSP_BeeperTimerInit PROC
;;;55     
;;;56     static void BSP_BeeperTimerInit(uint16_t ck_value)
000000  b5f0              PUSH     {r4-r7,lr}
;;;57     {
000002  b089              SUB      sp,sp,#0x24
000004  4605              MOV      r5,r0
;;;58     	TIM_TimeBaseInitTypeDef TIM_BaseInitStructure;
;;;59         TIM_OCInitTypeDef TIM_OCInitStructure;
;;;60     
;;;61     	GPIO_InitTypeDef GPIO_InitStructure;
;;;62     
;;;63     	uint16_t period=(18000000/ck_value);
000006  482a              LDR      r0,|L1.176|
000008  fb90f0f5          SDIV     r0,r0,r5
00000c  b284              UXTH     r4,r0
;;;64     	uint16_t period_set=period-1;
00000e  1e60              SUBS     r0,r4,#1
000010  b286              UXTH     r6,r0
;;;65     	uint16_t pluse=period/2-1;
000012  4620              MOV      r0,r4
000014  eb0471d0          ADD      r1,r4,r0,LSR #31
000018  1049              ASRS     r1,r1,#1
00001a  1e49              SUBS     r1,r1,#1
00001c  b28f              UXTH     r7,r1
;;;66     		
;;;67     	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
00001e  2101              MOVS     r1,#1
000020  2002              MOVS     r0,#2
000022  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;68     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB  | RCC_APB2Periph_AFIO, ENABLE); 
000026  2101              MOVS     r1,#1
000028  2009              MOVS     r0,#9
00002a  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;69     	GPIO_PinRemapConfig(GPIO_PartialRemap_TIM3, ENABLE);
00002e  2101              MOVS     r1,#1
000030  4820              LDR      r0,|L1.180|
000032  f7fffffe          BL       GPIO_PinRemapConfig
;;;70     
;;;71     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
000036  2001              MOVS     r0,#1
000038  f8ad0004          STRH     r0,[sp,#4]
;;;72       	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
00003c  2018              MOVS     r0,#0x18
00003e  f88d0007          STRB     r0,[sp,#7]
;;;73       	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000042  2003              MOVS     r0,#3
000044  f88d0006          STRB     r0,[sp,#6]
;;;74       	GPIO_Init(GPIOB,&GPIO_InitStructure);
000048  a901              ADD      r1,sp,#4
00004a  481b              LDR      r0,|L1.184|
00004c  f7fffffe          BL       GPIO_Init
;;;75     
;;;76     	//Timer3CH2 Beeper
;;;77     	TIM_InternalClockConfig(TIM3);
000050  481a              LDR      r0,|L1.188|
000052  f7fffffe          BL       TIM_InternalClockConfig
;;;78     
;;;79     	TIM_BaseInitStructure.TIM_Prescaler         = 3;//4分频，18M
000056  2003              MOVS     r0,#3
000058  f8ad0018          STRH     r0,[sp,#0x18]
;;;80     	TIM_BaseInitStructure.TIM_CounterMode       = TIM_CounterMode_Up;
00005c  2000              MOVS     r0,#0
00005e  f8ad001a          STRH     r0,[sp,#0x1a]
;;;81     	TIM_BaseInitStructure.TIM_Period            = period_set;
000062  f8ad601c          STRH     r6,[sp,#0x1c]
;;;82     	TIM_BaseInitStructure.TIM_ClockDivision     = TIM_CKD_DIV1;
000066  f8ad001e          STRH     r0,[sp,#0x1e]
;;;83     	TIM_BaseInitStructure.TIM_RepetitionCounter = 0;
00006a  f88d0020          STRB     r0,[sp,#0x20]
;;;84     	TIM_TimeBaseInit(TIM3,&TIM_BaseInitStructure);
00006e  a906              ADD      r1,sp,#0x18
000070  4812              LDR      r0,|L1.188|
000072  f7fffffe          BL       TIM_TimeBaseInit
;;;85     	TIM_ARRPreloadConfig(TIM3, DISABLE);
000076  2100              MOVS     r1,#0
000078  4810              LDR      r0,|L1.188|
00007a  f7fffffe          BL       TIM_ARRPreloadConfig
;;;86     
;;;87     	TIM_Cmd(TIM3, ENABLE);  //使能TIMx外设
00007e  2101              MOVS     r1,#1
000080  480e              LDR      r0,|L1.188|
000082  f7fffffe          BL       TIM_Cmd
;;;88     	
;;;89     	TIM_OCInitStructure.TIM_OCMode=TIM_OCMode_PWM1;
000086  2060              MOVS     r0,#0x60
000088  f8ad0008          STRH     r0,[sp,#8]
;;;90     	TIM_OCInitStructure.TIM_OutputState=TIM_OutputState_Enable;
00008c  2001              MOVS     r0,#1
00008e  f8ad000a          STRH     r0,[sp,#0xa]
;;;91     	TIM_OCInitStructure.TIM_Pulse=pluse;
000092  f8ad700e          STRH     r7,[sp,#0xe]
;;;92     	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
000096  2000              MOVS     r0,#0
000098  f8ad0010          STRH     r0,[sp,#0x10]
;;;93     	TIM_OC3Init(TIM3,&TIM_OCInitStructure);
00009c  a902              ADD      r1,sp,#8
00009e  4807              LDR      r0,|L1.188|
0000a0  f7fffffe          BL       TIM_OC3Init
;;;94     	TIM_CtrlPWMOutputs(TIM3,ENABLE);
0000a4  2101              MOVS     r1,#1
0000a6  4805              LDR      r0,|L1.188|
0000a8  f7fffffe          BL       TIM_CtrlPWMOutputs
;;;95     }
0000ac  b009              ADD      sp,sp,#0x24
0000ae  bdf0              POP      {r4-r7,pc}
;;;96     /* 关闭蜂鸣器 */
                          ENDP

                  |L1.176|
                          DCD      0x0112a880
                  |L1.180|
                          DCD      0x001a0800
                  |L1.184|
                          DCD      0x40010c00
                  |L1.188|
                          DCD      0x40000400

                          AREA ||i.BSP_BeeperTimer_Off||, CODE, READONLY, ALIGN=2

                  BSP_BeeperTimer_Off PROC
;;;96     /* 关闭蜂鸣器 */
;;;97     void BSP_BeeperTimer_Off(void)
000000  b508              PUSH     {r3,lr}
;;;98     {
;;;99     	GPIO_InitTypeDef GPIO_InitStructure;
;;;100    	TIM_CtrlPWMOutputs(TIM3,DISABLE);
000002  2100              MOVS     r1,#0
000004  480e              LDR      r0,|L2.64|
000006  f7fffffe          BL       TIM_CtrlPWMOutputs
;;;101    	TIM_Cmd(TIM3,DISABLE);  //使能TIMx外设
00000a  2100              MOVS     r1,#0
00000c  480c              LDR      r0,|L2.64|
00000e  f7fffffe          BL       TIM_Cmd
;;;102    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, DISABLE);
000012  2100              MOVS     r1,#0
000014  2002              MOVS     r0,#2
000016  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;103    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00001a  2003              MOVS     r0,#3
00001c  f88d0002          STRB     r0,[sp,#2]
;;;104    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
000020  2001              MOVS     r0,#1
000022  f8ad0000          STRH     r0,[sp,#0]
;;;105      	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
000026  2010              MOVS     r0,#0x10
000028  f88d0003          STRB     r0,[sp,#3]
;;;106      	GPIO_Init(GPIOB,&GPIO_InitStructure);
00002c  4669              MOV      r1,sp
00002e  4805              LDR      r0,|L2.68|
000030  f7fffffe          BL       GPIO_Init
;;;107    	GPIO_ResetBits(GPIOB, GPIO_Pin_0);
000034  2101              MOVS     r1,#1
000036  4803              LDR      r0,|L2.68|
000038  f7fffffe          BL       GPIO_ResetBits
;;;108    }
00003c  bd08              POP      {r3,pc}
;;;109    
                          ENDP

00003e  0000              DCW      0x0000
                  |L2.64|
                          DCD      0x40000400
                  |L2.68|
                          DCD      0x40010c00

                          AREA ||i.BeepTask||, CODE, READONLY, ALIGN=2

                  BeepTask PROC
;;;109    
;;;110    void BeepTask(void *pdata)
000000  b508              PUSH     {r3,lr}
;;;111    {
;;;112    	uint8_t err;
;;;113    	TIM1ConfigInit();
000002  f7fffffe          BL       TIM1ConfigInit
;;;114    	while(1)
000006  e012              B        |L3.46|
                  |L3.8|
;;;115    	{
;;;116    		OSSemPend(beepSem,0,&err);//想让蜂鸣器响，发送个信号量即可
000008  466a              MOV      r2,sp
00000a  2100              MOVS     r1,#0
00000c  4808              LDR      r0,|L3.48|
00000e  6800              LDR      r0,[r0,#0]  ; beepSem
000010  f7fffffe          BL       OSSemPend
;;;117    		BSP_BeeperTimerInit(1000);//打开蜂鸣器，频率可以设定
000014  f44f707a          MOV      r0,#0x3e8
000018  f7fffffe          BL       BSP_BeeperTimerInit
;;;118    		OSTimeDlyHMSM(0,0,0,300);
00001c  f44f7396          MOV      r3,#0x12c
000020  2200              MOVS     r2,#0
000022  4611              MOV      r1,r2
000024  4610              MOV      r0,r2
000026  f7fffffe          BL       OSTimeDlyHMSM
;;;119    		BSP_BeeperTimer_Off();    //关闭蜂鸣器
00002a  f7fffffe          BL       BSP_BeeperTimer_Off
                  |L3.46|
00002e  e7eb              B        |L3.8|
;;;120    	}
;;;121    }
;;;122    
                          ENDP

                  |L3.48|
                          DCD      beepSem

                          AREA ||i.CDMALEDTask||, CODE, READONLY, ALIGN=2

                  CDMALEDTask PROC
;;;10     uint16_t freCDMALed = LEDFAST;//黄灯  GPRS
;;;11     void CDMALEDTask(void *pdata)
000000  e026              B        |L4.80|
                  |L4.2|
;;;12     {
;;;13     	while(1)
;;;14     	{
;;;15     		if(freCDMALed < 50)
000002  4814              LDR      r0,|L4.84|
000004  8800              LDRH     r0,[r0,#0]  ; freCDMALed
000006  2832              CMP      r0,#0x32
000008  da03              BGE      |L4.18|
;;;16     			freCDMALed = 50;
00000a  2032              MOVS     r0,#0x32
00000c  4911              LDR      r1,|L4.84|
00000e  8008              STRH     r0,[r1,#0]
000010  e008              B        |L4.36|
                  |L4.18|
;;;17     		else if(freCDMALed >2000)
000012  4810              LDR      r0,|L4.84|
000014  8800              LDRH     r0,[r0,#0]  ; freCDMALed
000016  f5b06ffa          CMP      r0,#0x7d0
00001a  dd03              BLE      |L4.36|
;;;18     			freCDMALed = 2000;
00001c  f44f60fa          MOV      r0,#0x7d0
000020  490c              LDR      r1,|L4.84|
000022  8008              STRH     r0,[r1,#0]
                  |L4.36|
;;;19     		GPIO_ResetBits(GPIO_LED,LED_GPIO_MOD);
000024  2110              MOVS     r1,#0x10
000026  480c              LDR      r0,|L4.88|
000028  f7fffffe          BL       GPIO_ResetBits
;;;20     		OSTimeDlyHMSM(0,0,0,freCDMALed);
00002c  4809              LDR      r0,|L4.84|
00002e  8803              LDRH     r3,[r0,#0]  ; freCDMALed
000030  2200              MOVS     r2,#0
000032  4611              MOV      r1,r2
000034  4610              MOV      r0,r2
000036  f7fffffe          BL       OSTimeDlyHMSM
;;;21     		GPIO_SetBits(GPIO_LED,LED_GPIO_MOD);
00003a  2110              MOVS     r1,#0x10
00003c  4806              LDR      r0,|L4.88|
00003e  f7fffffe          BL       GPIO_SetBits
;;;22     		OSTimeDlyHMSM(0,0,0,freCDMALed);
000042  4804              LDR      r0,|L4.84|
000044  8803              LDRH     r3,[r0,#0]  ; freCDMALed
000046  2200              MOVS     r2,#0
000048  4611              MOV      r1,r2
00004a  4610              MOV      r0,r2
00004c  f7fffffe          BL       OSTimeDlyHMSM
                  |L4.80|
000050  e7d7              B        |L4.2|
;;;23     	}
;;;24     }
;;;25     uint16_t freGPSLed = LEDFAST;//绿灯  GPS
                          ENDP

000052  0000              DCW      0x0000
                  |L4.84|
                          DCD      freCDMALed
                  |L4.88|
                          DCD      0x40010c00

                          AREA ||i.GPSLEDTask||, CODE, READONLY, ALIGN=2

                  GPSLEDTask PROC
;;;25     uint16_t freGPSLed = LEDFAST;//绿灯  GPS
;;;26     void GPSLEDTask(void *pdata)
000000  e026              B        |L5.80|
                  |L5.2|
;;;27     {
;;;28     	while(1)
;;;29     	{
;;;30     		if(freGPSLed < 50)
000002  4814              LDR      r0,|L5.84|
000004  8800              LDRH     r0,[r0,#0]  ; freGPSLed
000006  2832              CMP      r0,#0x32
000008  da03              BGE      |L5.18|
;;;31     			freGPSLed = 50;
00000a  2032              MOVS     r0,#0x32
00000c  4911              LDR      r1,|L5.84|
00000e  8008              STRH     r0,[r1,#0]
000010  e008              B        |L5.36|
                  |L5.18|
;;;32     		else if(freGPSLed >2000)
000012  4810              LDR      r0,|L5.84|
000014  8800              LDRH     r0,[r0,#0]  ; freGPSLed
000016  f5b06ffa          CMP      r0,#0x7d0
00001a  dd03              BLE      |L5.36|
;;;33     			freGPSLed = 2000;
00001c  f44f60fa          MOV      r0,#0x7d0
000020  490c              LDR      r1,|L5.84|
000022  8008              STRH     r0,[r1,#0]
                  |L5.36|
;;;34     		GPIO_ResetBits(GPIO_LED,LED_GPIO_GPS);
000024  2108              MOVS     r1,#8
000026  480c              LDR      r0,|L5.88|
000028  f7fffffe          BL       GPIO_ResetBits
;;;35     		OSTimeDlyHMSM(0,0,0,freGPSLed);
00002c  4809              LDR      r0,|L5.84|
00002e  8803              LDRH     r3,[r0,#0]  ; freGPSLed
000030  2200              MOVS     r2,#0
000032  4611              MOV      r1,r2
000034  4610              MOV      r0,r2
000036  f7fffffe          BL       OSTimeDlyHMSM
;;;36     		GPIO_SetBits(GPIO_LED,LED_GPIO_GPS);
00003a  2108              MOVS     r1,#8
00003c  4806              LDR      r0,|L5.88|
00003e  f7fffffe          BL       GPIO_SetBits
;;;37     		OSTimeDlyHMSM(0,0,0,freGPSLed);
000042  4804              LDR      r0,|L5.84|
000044  8803              LDRH     r3,[r0,#0]  ; freGPSLed
000046  2200              MOVS     r2,#0
000048  4611              MOV      r1,r2
00004a  4610              MOV      r0,r2
00004c  f7fffffe          BL       OSTimeDlyHMSM
                  |L5.80|
000050  e7d7              B        |L5.2|
;;;38     	}
;;;39     }
;;;40     uint16_t freOBDLed = LEDFAST;//红灯  CAN
                          ENDP

000052  0000              DCW      0x0000
                  |L5.84|
                          DCD      freGPSLed
                  |L5.88|
                          DCD      0x40010c00

                          AREA ||i.OBDLEDTask||, CODE, READONLY, ALIGN=2

                  OBDLEDTask PROC
;;;40     uint16_t freOBDLed = LEDFAST;//红灯  CAN
;;;41     void OBDLEDTask(void *pdata)
000000  e026              B        |L6.80|
                  |L6.2|
;;;42     {
;;;43     	while(1)
;;;44     	{
;;;45     		if(freOBDLed < 50)
000002  4814              LDR      r0,|L6.84|
000004  8800              LDRH     r0,[r0,#0]  ; freOBDLed
000006  2832              CMP      r0,#0x32
000008  da03              BGE      |L6.18|
;;;46     			freOBDLed = 50;
00000a  2032              MOVS     r0,#0x32
00000c  4911              LDR      r1,|L6.84|
00000e  8008              STRH     r0,[r1,#0]
000010  e008              B        |L6.36|
                  |L6.18|
;;;47     		else if(freOBDLed >2000)
000012  4810              LDR      r0,|L6.84|
000014  8800              LDRH     r0,[r0,#0]  ; freOBDLed
000016  f5b06ffa          CMP      r0,#0x7d0
00001a  dd03              BLE      |L6.36|
;;;48     			freOBDLed = 2000;
00001c  f44f60fa          MOV      r0,#0x7d0
000020  490c              LDR      r1,|L6.84|
000022  8008              STRH     r0,[r1,#0]
                  |L6.36|
;;;49     		GPIO_ResetBits(GPIO_LED,LED_GPIO_OBD);
000024  2120              MOVS     r1,#0x20
000026  480c              LDR      r0,|L6.88|
000028  f7fffffe          BL       GPIO_ResetBits
;;;50     		OSTimeDlyHMSM(0,0,0,freOBDLed);
00002c  4809              LDR      r0,|L6.84|
00002e  8803              LDRH     r3,[r0,#0]  ; freOBDLed
000030  2200              MOVS     r2,#0
000032  4611              MOV      r1,r2
000034  4610              MOV      r0,r2
000036  f7fffffe          BL       OSTimeDlyHMSM
;;;51     		GPIO_SetBits(GPIO_LED,LED_GPIO_OBD);
00003a  2120              MOVS     r1,#0x20
00003c  4806              LDR      r0,|L6.88|
00003e  f7fffffe          BL       GPIO_SetBits
;;;52     		OSTimeDlyHMSM(0,0,0,freOBDLed);
000042  4804              LDR      r0,|L6.84|
000044  8803              LDRH     r3,[r0,#0]  ; freOBDLed
000046  2200              MOVS     r2,#0
000048  4611              MOV      r1,r2
00004a  4610              MOV      r0,r2
00004c  f7fffffe          BL       OSTimeDlyHMSM
                  |L6.80|
000050  e7d7              B        |L6.2|
;;;53     	}
;;;54     }
;;;55     
                          ENDP

000052  0000              DCW      0x0000
                  |L6.84|
                          DCD      freOBDLed
                  |L6.88|
                          DCD      0x40010c00

                          AREA ||i.TIM1ConfigInit||, CODE, READONLY, ALIGN=2

                  TIM1ConfigInit PROC
;;;122    
;;;123    void TIM1ConfigInit(void )
000000  b50e              PUSH     {r1-r3,lr}
;;;124    {
;;;125    	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;126    
;;;127    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE); //时钟使能
000002  2101              MOVS     r1,#1
000004  02c8              LSLS     r0,r1,#11
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;128    	
;;;129    	//定时器TIM2初始化
;;;130    	TIM_TimeBaseStructure.TIM_Period = 9999;          //设置在下一个更新事件装入活动的自动重装载寄存器周期的值	
00000a  f242700f          MOV      r0,#0x270f
00000e  f8ad0004          STRH     r0,[sp,#4]
;;;131    	TIM_TimeBaseStructure.TIM_Prescaler =7199;      //设置用来作为TIMx时钟频率除数的预分频值
000012  f641401f          MOV      r0,#0x1c1f
000016  f8ad0000          STRH     r0,[sp,#0]
;;;132    	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;      //设置时钟分割:TDTS = Tck_tim
00001a  2000              MOVS     r0,#0
00001c  f8ad0006          STRH     r0,[sp,#6]
;;;133    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  //TIM向上计数模式
000020  f8ad0002          STRH     r0,[sp,#2]
;;;134    	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
000024  f88d0008          STRB     r0,[sp,#8]
;;;135    	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure); //根据指定的参数初始化TIMx的时间基数单位
000028  4669              MOV      r1,sp
00002a  4806              LDR      r0,|L7.68|
00002c  f7fffffe          BL       TIM_TimeBaseInit
;;;136     
;;;137    	TIM_ITConfig(TIM1,TIM_IT_Update,ENABLE );       //使能指定的TIM2中断,允许更新中断
000030  2201              MOVS     r2,#1
000032  4611              MOV      r1,r2
000034  4803              LDR      r0,|L7.68|
000036  f7fffffe          BL       TIM_ITConfig
;;;138    	
;;;139    	TIM_Cmd(TIM1, ENABLE);  //使能TIMx		
00003a  2101              MOVS     r1,#1
00003c  4801              LDR      r0,|L7.68|
00003e  f7fffffe          BL       TIM_Cmd
;;;140    }
000042  bd0e              POP      {r1-r3,pc}
;;;141    u32 timeBase = 0;
                          ENDP

                  |L7.68|
                          DCD      0x40012c00

                          AREA ||i.TIM1_UP_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM1_UP_IRQHandler PROC
;;;141    u32 timeBase = 0;
;;;142    void TIM1_UP_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;143    {
;;;144    	
;;;145    	TIM_ClearITPendingBit(TIM1, TIM_IT_Update);
000002  2101              MOVS     r1,#1
000004  4806              LDR      r0,|L8.32|
000006  f7fffffe          BL       TIM_ClearITPendingBit
;;;146    	OSIntEnter();	
00000a  f7fffffe          BL       OSIntEnter
;;;147    	timeBase ++;
00000e  4805              LDR      r0,|L8.36|
000010  6800              LDR      r0,[r0,#0]  ; timeBase
000012  1c40              ADDS     r0,r0,#1
000014  4903              LDR      r1,|L8.36|
000016  6008              STR      r0,[r1,#0]  ; timeBase
;;;148    	OSIntExit();  //中断服务结束，系统进行任务调度
000018  f7fffffe          BL       OSIntExit
;;;149    	
;;;150    }
00001c  bd10              POP      {r4,pc}
                          ENDP

00001e  0000              DCW      0x0000
                  |L8.32|
                          DCD      0x40012c00
                  |L8.36|
                          DCD      timeBase

                          AREA ||.data||, DATA, ALIGN=2

                  freCDMALed
000000  00c8              DCW      0x00c8
                  freGPSLed
000002  00c8              DCW      0x00c8
                  freOBDLed
000004  00c8              DCW      0x00c8
000006  0000              DCB      0x00,0x00
                  timeBase
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "normalTask.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_normalTask_c_301993f4____REV16|
#line 465 "D:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.2.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___12_normalTask_c_301993f4____REV16| PROC
#line 466

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_normalTask_c_301993f4____REVSH|
#line 480
|__asm___12_normalTask_c_301993f4____REVSH| PROC
#line 481

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___12_normalTask_c_301993f4____RRX|
#line 667
|__asm___12_normalTask_c_301993f4____RRX| PROC
#line 668

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
