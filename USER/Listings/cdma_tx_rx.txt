; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\obj\cdma_tx_rx.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=..\obj\cdma_tx_rx.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\OBD -I..\SYSTEM -I..\USER -I..\LIB\inc -I..\UCOSII\CONFIG -I..\UCOSII\PORT -I..\UCOSII\CORE -I..\HAEDWARE -I..\GPS -I..\CDMA -I..\DEAL -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\cdma_tx_rx.crf ..\CDMA\CDMA_Tx_Rx.c]
                          THUMB

                          AREA ||i.CDMASendByte||, CODE, READONLY, ALIGN=2

                  CDMASendByte PROC
;;;7      
;;;8      void CDMASendByte(uint8_t dat)
000000  b570              PUSH     {r4-r6,lr}
;;;9      {
000002  4604              MOV      r4,r0
;;;10     #if OS_CRITICAL_METHOD == 3u           /* Allocate storage for CPU status register           */
;;;11     	OS_CPU_SR  cpu_sr = 0u;
000004  2500              MOVS     r5,#0
;;;12     #endif
;;;13     	if(CirQ_GetLength(sendCDMA_Q)>0)
000006  480b              LDR      r0,|L1.52|
000008  6800              LDR      r0,[r0,#0]  ; sendCDMA_Q
00000a  f7fffffe          BL       CirQ_GetLength
00000e  2800              CMP      r0,#0
000010  dd0b              BLE      |L1.42|
;;;14     	{
;;;15     		OS_ENTER_CRITICAL();
000012  f7fffffe          BL       OS_CPU_SR_Save
000016  4605              MOV      r5,r0
;;;16     		CirQ_OnePush(sendCDMA_Q,dat);
000018  4621              MOV      r1,r4
00001a  4806              LDR      r0,|L1.52|
00001c  6800              LDR      r0,[r0,#0]  ; sendCDMA_Q
00001e  f7fffffe          BL       CirQ_OnePush
;;;17     		OS_EXIT_CRITICAL();
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       OS_CPU_SR_Restore
000028  e003              B        |L1.50|
                  |L1.42|
;;;18     	}
;;;19     	else
;;;20     		USART_SendData(USART2, dat);
00002a  4621              MOV      r1,r4
00002c  4802              LDR      r0,|L1.56|
00002e  f7fffffe          BL       USART_SendData
                  |L1.50|
;;;21     }
000032  bd70              POP      {r4-r6,pc}
;;;22     uint8_t CDMASendDatas(const uint8_t* s,uint16_t length)
                          ENDP

                  |L1.52|
                          DCD      sendCDMA_Q
                  |L1.56|
                          DCD      0x40004400

                          AREA ||i.CDMASendDatas||, CODE, READONLY, ALIGN=2

                  CDMASendDatas PROC
;;;21     }
;;;22     uint8_t CDMASendDatas(const uint8_t* s,uint16_t length)
000000  b570              PUSH     {r4-r6,lr}
;;;23     {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;24     #if OS_CRITICAL_METHOD == 3u           /* Allocate storage for CPU status register           */
;;;25     	OS_CPU_SR  cpu_sr = 0u;
000006  2600              MOVS     r6,#0
;;;26     #endif
;;;27     //	uint8_t data;
;;;28     	if(length < 1 || length >1020)
000008  2c01              CMP      r4,#1
00000a  db02              BLT      |L2.18|
00000c  f5b47f7f          CMP      r4,#0x3fc
000010  dd01              BLE      |L2.22|
                  |L2.18|
;;;29     		return 1;
000012  2001              MOVS     r0,#1
                  |L2.20|
;;;30     	OS_ENTER_CRITICAL();
;;;31     	if(CirQ_Pushs(sendCDMA_Q,s,length) != OK)
;;;32     	{
;;;33     		OS_EXIT_CRITICAL();
;;;34     		return 2;
;;;35     	}
;;;36     	OS_EXIT_CRITICAL();
;;;37     	if(CirQ_GetLength(sendCDMA_Q) > 0)
;;;38     	{
;;;39     //		OS_ENTER_CRITICAL();
;;;40     //		CirQ_Pop(sendCDMA_Q,&data);
;;;41     //		OS_EXIT_CRITICAL();
;;;42     		
;;;43     		USART_ITConfig(USART2, USART_IT_TXE, ENABLE);
;;;44     //		USART_SendData(USART2, data);
;;;45     	}
;;;46     	return  0;
;;;47     	
;;;48     	
;;;49     }
000014  bd70              POP      {r4-r6,pc}
                  |L2.22|
000016  f7fffffe          BL       OS_CPU_SR_Save
00001a  4606              MOV      r6,r0                 ;30
00001c  4622              MOV      r2,r4                 ;31
00001e  4629              MOV      r1,r5                 ;31
000020  480d              LDR      r0,|L2.88|
000022  6800              LDR      r0,[r0,#0]            ;31  ; sendCDMA_Q
000024  f7fffffe          BL       CirQ_Pushs
000028  b120              CBZ      r0,|L2.52|
00002a  4630              MOV      r0,r6                 ;33
00002c  f7fffffe          BL       OS_CPU_SR_Restore
000030  2002              MOVS     r0,#2                 ;34
000032  e7ef              B        |L2.20|
                  |L2.52|
000034  4630              MOV      r0,r6                 ;36
000036  f7fffffe          BL       OS_CPU_SR_Restore
00003a  4807              LDR      r0,|L2.88|
00003c  6800              LDR      r0,[r0,#0]            ;37  ; sendCDMA_Q
00003e  f7fffffe          BL       CirQ_GetLength
000042  2800              CMP      r0,#0                 ;37
000044  dd05              BLE      |L2.82|
000046  2201              MOVS     r2,#1                 ;43
000048  f2407127          MOV      r1,#0x727             ;43
00004c  4803              LDR      r0,|L2.92|
00004e  f7fffffe          BL       USART_ITConfig
                  |L2.82|
000052  2000              MOVS     r0,#0                 ;46
000054  e7de              B        |L2.20|
;;;50     
                          ENDP

000056  0000              DCW      0x0000
                  |L2.88|
                          DCD      sendCDMA_Q
                  |L2.92|
                          DCD      0x40004400

                          AREA ||i.TIM3_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM3_IRQHandler PROC
;;;107    uint16_t receDatalen= 0;
;;;108    void TIM3_IRQHandler(void)   //TIM3中断
000000  b510              PUSH     {r4,lr}
;;;109    {
;;;110    	if (TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET)  //检查TIM3更新中断发生与否
000002  2101              MOVS     r1,#1
000004  481d              LDR      r0,|L3.124|
000006  f7fffffe          BL       TIM_GetITStatus
00000a  2800              CMP      r0,#0
00000c  d035              BEQ      |L3.122|
;;;111    	{
;;;112    		TIM_ClearITPendingBit(TIM3, TIM_IT_Update  );  //清除TIMx更新中断标志 
00000e  2101              MOVS     r1,#1
000010  481a              LDR      r0,|L3.124|
000012  f7fffffe          BL       TIM_ClearITPendingBit
;;;113    		rxTimeOut ++;
000016  481a              LDR      r0,|L3.128|
000018  8800              LDRH     r0,[r0,#0]  ; rxTimeOut
00001a  1c40              ADDS     r0,r0,#1
00001c  4918              LDR      r1,|L3.128|
00001e  8008              STRH     r0,[r1,#0]
;;;114    		if(rxTimeOut > 10)
000020  4608              MOV      r0,r1
000022  8800              LDRH     r0,[r0,#0]  ; rxTimeOut
000024  280a              CMP      r0,#0xa
000026  dd28              BLE      |L3.122|
;;;115    		{
;;;116    			rxTimeOut = 0;
000028  2000              MOVS     r0,#0
00002a  8008              STRH     r0,[r1,#0]
;;;117    			receDatalen = Store_Getlength(receCDMA_S);
00002c  4815              LDR      r0,|L3.132|
00002e  6800              LDR      r0,[r0,#0]  ; receCDMA_S
000030  f7fffffe          BL       Store_Getlength
000034  4914              LDR      r1,|L3.136|
000036  8008              STRH     r0,[r1,#0]
;;;118    			if(receDatalen>2 )
000038  4608              MOV      r0,r1
00003a  8800              LDRH     r0,[r0,#0]  ; receDatalen
00003c  2802              CMP      r0,#2
00003e  dd14              BLE      |L3.106|
;;;119    			{
;;;120    				ptrRece = Mem_malloc(receDatalen);
000040  4608              MOV      r0,r1
000042  8800              LDRH     r0,[r0,#0]  ; receDatalen
000044  f7fffffe          BL       Mem_malloc
000048  4910              LDR      r1,|L3.140|
00004a  6008              STR      r0,[r1,#0]  ; ptrRece
;;;121    				Store_Getdates(receCDMA_S,ptrRece,receDatalen);
00004c  480e              LDR      r0,|L3.136|
00004e  7802              LDRB     r2,[r0,#0]  ; receDatalen
000050  4608              MOV      r0,r1
000052  6801              LDR      r1,[r0,#0]  ; ptrRece
000054  480b              LDR      r0,|L3.132|
000056  6800              LDR      r0,[r0,#0]  ; receCDMA_S
000058  f7fffffe          BL       Store_Getdates
;;;122    				OSQPost(CDMARecieveQ,ptrRece);
00005c  480b              LDR      r0,|L3.140|
00005e  6801              LDR      r1,[r0,#0]  ; ptrRece
000060  480b              LDR      r0,|L3.144|
000062  6800              LDR      r0,[r0,#0]  ; CDMARecieveQ
000064  f7fffffe          BL       OSQPost
000068  e003              B        |L3.114|
                  |L3.106|
;;;123    			}
;;;124    			else
;;;125    				Store_Clear(receCDMA_S);
00006a  4806              LDR      r0,|L3.132|
00006c  6800              LDR      r0,[r0,#0]  ; receCDMA_S
00006e  f7fffffe          BL       Store_Clear
                  |L3.114|
;;;126    			
;;;127    			TIM_Cmd(TIM3, DISABLE);
000072  2100              MOVS     r1,#0
000074  4801              LDR      r0,|L3.124|
000076  f7fffffe          BL       TIM_Cmd
                  |L3.122|
;;;128    		}
;;;129    	
;;;130    	}
;;;131    }
00007a  bd10              POP      {r4,pc}
;;;132    
                          ENDP

                  |L3.124|
                          DCD      0x40000400
                  |L3.128|
                          DCD      rxTimeOut
                  |L3.132|
                          DCD      receCDMA_S
                  |L3.136|
                          DCD      receDatalen
                  |L3.140|
                          DCD      ptrRece
                  |L3.144|
                          DCD      CDMARecieveQ

                          AREA ||i.USART2_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART2_IRQHandler PROC
;;;57     NORMAL_STATE rxtxState;
;;;58     void USART2_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;59     {
;;;60     	OSIntEnter();//系统进入中断服务程序
000002  f7fffffe          BL       OSIntEnter
;;;61     	dkfs = receCDMA_S->base;
000006  4839              LDR      r0,|L4.236|
000008  6800              LDR      r0,[r0,#0]  ; receCDMA_S
00000a  6840              LDR      r0,[r0,#4]
00000c  4938              LDR      r1,|L4.240|
00000e  6008              STR      r0,[r1,#0]  ; dkfs
;;;62     	if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)//接收到数据
000010  f2405125          MOV      r1,#0x525
000014  4837              LDR      r0,|L4.244|
000016  f7fffffe          BL       USART_GetITStatus
00001a  b1e0              CBZ      r0,|L4.86|
;;;63       	{
;;;64         	byteRece = USART_ReceiveData(USART2);
00001c  4835              LDR      r0,|L4.244|
00001e  f7fffffe          BL       USART_ReceiveData
000022  4935              LDR      r1,|L4.248|
000024  7008              STRB     r0,[r1,#0]
;;;65     	
;;;66     		rxtxState = Store_Push(receCDMA_S,byteRece);   
000026  4608              MOV      r0,r1
000028  7801              LDRB     r1,[r0,#0]  ; byteRece
00002a  4830              LDR      r0,|L4.236|
00002c  6800              LDR      r0,[r0,#0]  ; receCDMA_S
00002e  f7fffffe          BL       Store_Push
000032  4932              LDR      r1,|L4.252|
000034  7008              STRB     r0,[r1,#0]
;;;67     		if(rxtxState == OK)
000036  4608              MOV      r0,r1
000038  7800              LDRB     r0,[r0,#0]  ; rxtxState
00003a  b930              CBNZ     r0,|L4.74|
;;;68     		{
;;;69     			rxTimeOut = 1;
00003c  2001              MOVS     r0,#1
00003e  4930              LDR      r1,|L4.256|
000040  8008              STRH     r0,[r1,#0]
;;;70     			TIM_Cmd(TIM3, ENABLE);  //使能TIMx
000042  2101              MOVS     r1,#1
000044  482f              LDR      r0,|L4.260|
000046  f7fffffe          BL       TIM_Cmd
                  |L4.74|
;;;71     		}
;;;72     		USART_ClearITPendingBit(USART2, USART_IT_RXNE) ;
00004a  f2405125          MOV      r1,#0x525
00004e  4829              LDR      r0,|L4.244|
000050  f7fffffe          BL       USART_ClearITPendingBit
000054  e046              B        |L4.228|
                  |L4.86|
;;;73     	}
;;;74     	else if(USART_GetITStatus(USART2, USART_IT_TC) != RESET)//发送完毕  移位寄存器空
000056  f2406126          MOV      r1,#0x626
00005a  4826              LDR      r0,|L4.244|
00005c  f7fffffe          BL       USART_GetITStatus
000060  b1d0              CBZ      r0,|L4.152|
;;;75     	{
;;;76     		if(CirQ_GetLength(sendCDMA_Q) > 0)
000062  4829              LDR      r0,|L4.264|
000064  6800              LDR      r0,[r0,#0]  ; sendCDMA_Q
000066  f7fffffe          BL       CirQ_GetLength
00006a  2800              CMP      r0,#0
00006c  dd0e              BLE      |L4.140|
;;;77     		{
;;;78     			rxtxState = CirQ_Pop(sendCDMA_Q,&byteSend);
00006e  4927              LDR      r1,|L4.268|
000070  4825              LDR      r0,|L4.264|
000072  6800              LDR      r0,[r0,#0]  ; sendCDMA_Q
000074  f7fffffe          BL       CirQ_Pop
000078  4920              LDR      r1,|L4.252|
00007a  7008              STRB     r0,[r1,#0]
;;;79     			if(rxtxState == OK)
00007c  4608              MOV      r0,r1
00007e  7800              LDRB     r0,[r0,#0]  ; rxtxState
000080  b920              CBNZ     r0,|L4.140|
;;;80     				USART_SendData(USART2, byteSend);
000082  4822              LDR      r0,|L4.268|
000084  7801              LDRB     r1,[r0,#0]  ; byteSend
000086  481b              LDR      r0,|L4.244|
000088  f7fffffe          BL       USART_SendData
                  |L4.140|
;;;81     		}
;;;82     		else
;;;83     		{
;;;84     			//todo:通知任务发送完成，可以发送下一包数据了
;;;85     		}
;;;86     		USART_ClearITPendingBit(USART2, USART_IT_TC) ;
00008c  f2406126          MOV      r1,#0x626
000090  4818              LDR      r0,|L4.244|
000092  f7fffffe          BL       USART_ClearITPendingBit
000096  e025              B        |L4.228|
                  |L4.152|
;;;87     	}
;;;88     	else if(USART_GetITStatus(USART2, USART_IT_TXE) != RESET)//空  发送寄存器空
000098  f2407127          MOV      r1,#0x727
00009c  4815              LDR      r0,|L4.244|
00009e  f7fffffe          BL       USART_GetITStatus
0000a2  b1f8              CBZ      r0,|L4.228|
;;;89     	{
;;;90     		if(CirQ_GetLength(sendCDMA_Q) > 0)
0000a4  4818              LDR      r0,|L4.264|
0000a6  6800              LDR      r0,[r0,#0]  ; sendCDMA_Q
0000a8  f7fffffe          BL       CirQ_GetLength
0000ac  2800              CMP      r0,#0
0000ae  dd0e              BLE      |L4.206|
;;;91     		{
;;;92     			rxtxState = CirQ_Pop(sendCDMA_Q,&byteSend);
0000b0  4916              LDR      r1,|L4.268|
0000b2  4815              LDR      r0,|L4.264|
0000b4  6800              LDR      r0,[r0,#0]  ; sendCDMA_Q
0000b6  f7fffffe          BL       CirQ_Pop
0000ba  4910              LDR      r1,|L4.252|
0000bc  7008              STRB     r0,[r1,#0]
;;;93     			if(rxtxState == OK)
0000be  4608              MOV      r0,r1
0000c0  7800              LDRB     r0,[r0,#0]  ; rxtxState
0000c2  b920              CBNZ     r0,|L4.206|
;;;94     				USART_SendData(USART2, byteSend);
0000c4  4811              LDR      r0,|L4.268|
0000c6  7801              LDRB     r1,[r0,#0]  ; byteSend
0000c8  480a              LDR      r0,|L4.244|
0000ca  f7fffffe          BL       USART_SendData
                  |L4.206|
;;;95     		}
;;;96     		else
;;;97     		{
;;;98     			 //todo:通知任务发送完成，可以发送下一包数据了
;;;99     		}
;;;100    		USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
0000ce  2200              MOVS     r2,#0
0000d0  f2407127          MOV      r1,#0x727
0000d4  4807              LDR      r0,|L4.244|
0000d6  f7fffffe          BL       USART_ITConfig
;;;101    		USART_ClearITPendingBit(USART2, USART_IT_TXE) ;
0000da  f2407127          MOV      r1,#0x727
0000de  4805              LDR      r0,|L4.244|
0000e0  f7fffffe          BL       USART_ClearITPendingBit
                  |L4.228|
;;;102    	}
;;;103    	OSIntExit();  //中断服务结束，系统进行任务调度
0000e4  f7fffffe          BL       OSIntExit
;;;104    }
0000e8  bd10              POP      {r4,pc}
;;;105    extern OS_EVENT *CDMARecieveQ;
                          ENDP

0000ea  0000              DCW      0x0000
                  |L4.236|
                          DCD      receCDMA_S
                  |L4.240|
                          DCD      dkfs
                  |L4.244|
                          DCD      0x40004400
                  |L4.248|
                          DCD      byteRece
                  |L4.252|
                          DCD      rxtxState
                  |L4.256|
                          DCD      rxTimeOut
                  |L4.260|
                          DCD      0x40000400
                  |L4.264|
                          DCD      sendCDMA_Q
                  |L4.268|
                          DCD      byteSend

                          AREA ||.data||, DATA, ALIGN=2

                  byteRece
000000  00                DCB      0x00
                  byteSend
000001  000000            DCB      0x00,0x00,0x00
                  dkfs
                          DCD      0x00000000
                  rxTimeOut
000008  0000              DCW      0x0000
                  rxtxState
00000a  0000              DCB      0x00,0x00
                  ptrRece
                          DCD      0x00000000
                  receDatalen
000010  0000              DCW      0x0000

;*** Start embedded assembler ***

#line 1 "..\\CDMA\\CDMA_Tx_Rx.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_CDMA_Tx_Rx_c_b8c990da____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___12_CDMA_Tx_Rx_c_b8c990da____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_CDMA_Tx_Rx_c_b8c990da____REVSH|
#line 144
|__asm___12_CDMA_Tx_Rx_c_b8c990da____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
