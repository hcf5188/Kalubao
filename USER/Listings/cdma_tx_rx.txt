; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\obj\cdma_tx_rx.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=..\obj\cdma_tx_rx.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\OBD -I..\SYSTEM -I..\USER -I..\LIB\inc -I..\UCOSII\CONFIG -I..\UCOSII\PORT -I..\UCOSII\CORE -I..\HAEDWARE -I..\GPS -I..\CDMA -I..\DEAL -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\cdma_tx_rx.crf ..\CDMA\CDMA_Tx_Rx.c]
                          THUMB

                          AREA ||i.CDMASendByte||, CODE, READONLY, ALIGN=2

                  CDMASendByte PROC
;;;7      
;;;8      void CDMASendByte(uint8_t dat)
000000  b570              PUSH     {r4-r6,lr}
;;;9      {
000002  4604              MOV      r4,r0
;;;10     #if OS_CRITICAL_METHOD == 3u           /* Allocate storage for CPU status register           */
;;;11     	OS_CPU_SR  cpu_sr = 0u;
000004  2500              MOVS     r5,#0
;;;12     #endif
;;;13     	if(CirQ_GetLength(sendCDMA_Q)>0)
000006  480b              LDR      r0,|L1.52|
000008  6800              LDR      r0,[r0,#0]  ; sendCDMA_Q
00000a  f7fffffe          BL       CirQ_GetLength
00000e  2800              CMP      r0,#0
000010  dd0b              BLE      |L1.42|
;;;14     	{
;;;15     		OS_ENTER_CRITICAL();
000012  f7fffffe          BL       OS_CPU_SR_Save
000016  4605              MOV      r5,r0
;;;16     		CirQ_OnePush(sendCDMA_Q,dat);
000018  4621              MOV      r1,r4
00001a  4806              LDR      r0,|L1.52|
00001c  6800              LDR      r0,[r0,#0]  ; sendCDMA_Q
00001e  f7fffffe          BL       CirQ_OnePush
;;;17     		OS_EXIT_CRITICAL();
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       OS_CPU_SR_Restore
000028  e003              B        |L1.50|
                  |L1.42|
;;;18     	}
;;;19     	else
;;;20     		USART_SendData(USART2, dat);
00002a  4621              MOV      r1,r4
00002c  4802              LDR      r0,|L1.56|
00002e  f7fffffe          BL       USART_SendData
                  |L1.50|
;;;21     }
000032  bd70              POP      {r4-r6,pc}
;;;22     uint8_t CDMASendDatas(const uint8_t* s,uint16_t length)
                          ENDP

                  |L1.52|
                          DCD      sendCDMA_Q
                  |L1.56|
                          DCD      0x40004400

                          AREA ||i.CDMASendDatas||, CODE, READONLY, ALIGN=2

                  CDMASendDatas PROC
;;;21     }
;;;22     uint8_t CDMASendDatas(const uint8_t* s,uint16_t length)
000000  b570              PUSH     {r4-r6,lr}
;;;23     {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;24     #if OS_CRITICAL_METHOD == 3u           /* Allocate storage for CPU status register           */
;;;25     	OS_CPU_SR  cpu_sr = 0u;
000006  2600              MOVS     r6,#0
;;;26     #endif
;;;27     //	uint8_t data;
;;;28     	if(length < 1 || length >1020)
000008  2c01              CMP      r4,#1
00000a  db02              BLT      |L2.18|
00000c  f5b47f7f          CMP      r4,#0x3fc
000010  dd01              BLE      |L2.22|
                  |L2.18|
;;;29     		return 1;
000012  2001              MOVS     r0,#1
                  |L2.20|
;;;30     	OS_ENTER_CRITICAL();
;;;31     	if(CirQ_Pushs(sendCDMA_Q,s,length) != OK)
;;;32     	{
;;;33     		OS_EXIT_CRITICAL();
;;;34     		return 2;
;;;35     	}
;;;36     	OS_EXIT_CRITICAL();
;;;37     	if(CirQ_GetLength(sendCDMA_Q) > 0)
;;;38     	{
;;;39     //		OS_ENTER_CRITICAL();
;;;40     //		CirQ_Pop(sendCDMA_Q,&data);
;;;41     //		OS_EXIT_CRITICAL();
;;;42     		
;;;43     		USART_ITConfig(USART2, USART_IT_TXE, ENABLE);
;;;44     //		USART_SendData(USART2, data);
;;;45     	}
;;;46     	return  0;
;;;47     	
;;;48     	
;;;49     }
000014  bd70              POP      {r4-r6,pc}
                  |L2.22|
000016  f7fffffe          BL       OS_CPU_SR_Save
00001a  4606              MOV      r6,r0                 ;30
00001c  4622              MOV      r2,r4                 ;31
00001e  4629              MOV      r1,r5                 ;31
000020  480d              LDR      r0,|L2.88|
000022  6800              LDR      r0,[r0,#0]            ;31  ; sendCDMA_Q
000024  f7fffffe          BL       CirQ_Pushs
000028  b120              CBZ      r0,|L2.52|
00002a  4630              MOV      r0,r6                 ;33
00002c  f7fffffe          BL       OS_CPU_SR_Restore
000030  2002              MOVS     r0,#2                 ;34
000032  e7ef              B        |L2.20|
                  |L2.52|
000034  4630              MOV      r0,r6                 ;36
000036  f7fffffe          BL       OS_CPU_SR_Restore
00003a  4807              LDR      r0,|L2.88|
00003c  6800              LDR      r0,[r0,#0]            ;37  ; sendCDMA_Q
00003e  f7fffffe          BL       CirQ_GetLength
000042  2800              CMP      r0,#0                 ;37
000044  dd05              BLE      |L2.82|
000046  2201              MOVS     r2,#1                 ;43
000048  f2407127          MOV      r1,#0x727             ;43
00004c  4803              LDR      r0,|L2.92|
00004e  f7fffffe          BL       USART_ITConfig
                  |L2.82|
000052  2000              MOVS     r0,#0                 ;46
000054  e7de              B        |L2.20|
;;;50     
                          ENDP

000056  0000              DCW      0x0000
                  |L2.88|
                          DCD      sendCDMA_Q
                  |L2.92|
                          DCD      0x40004400

                          AREA ||i.USART2_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART2_IRQHandler PROC
;;;55     
;;;56     void USART2_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;57     {
;;;58     	OSIntEnter();//系统进入中断服务程序
000002  f7fffffe          BL       OSIntEnter
;;;59     	
;;;60     	if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)//接收到数据
000006  f2405125          MOV      r1,#0x525
00000a  482a              LDR      r0,|L3.180|
00000c  f7fffffe          BL       USART_GetITStatus
000010  b180              CBZ      r0,|L3.52|
;;;61       	{
;;;62         	
;;;63         	byteRece = USART_ReceiveData(USART2);
000012  4828              LDR      r0,|L3.180|
000014  f7fffffe          BL       USART_ReceiveData
000018  4927              LDR      r1,|L3.184|
00001a  7008              STRB     r0,[r1,#0]
;;;64     		Store_Push(receCDMA_S,byteRece);//todo:定时器超时相关  以及
00001c  4608              MOV      r0,r1
00001e  7801              LDRB     r1,[r0,#0]  ; byteRece
000020  4826              LDR      r0,|L3.188|
000022  6800              LDR      r0,[r0,#0]  ; receCDMA_S
000024  f7fffffe          BL       Store_Push
;;;65     		                              //判断数据包结束 通知接收任务接收完成
;;;66     		
;;;67     		USART_ClearITPendingBit(USART2, USART_IT_RXNE) ;
000028  f2405125          MOV      r1,#0x525
00002c  4821              LDR      r0,|L3.180|
00002e  f7fffffe          BL       USART_ClearITPendingBit
000032  e03c              B        |L3.174|
                  |L3.52|
;;;68     	}
;;;69     	else if(USART_GetITStatus(USART2, USART_IT_TC) != RESET)//发送完毕  移位寄存器空
000034  f2406126          MOV      r1,#0x626
000038  481e              LDR      r0,|L3.180|
00003a  f7fffffe          BL       USART_GetITStatus
00003e  b1a8              CBZ      r0,|L3.108|
;;;70     	{
;;;71     		if(CirQ_GetLength(sendCDMA_Q) > 0)
000040  481f              LDR      r0,|L3.192|
000042  6800              LDR      r0,[r0,#0]  ; sendCDMA_Q
000044  f7fffffe          BL       CirQ_GetLength
000048  2800              CMP      r0,#0
00004a  dd09              BLE      |L3.96|
;;;72     		{
;;;73     			CirQ_Pop(sendCDMA_Q,&byteSend);
00004c  491d              LDR      r1,|L3.196|
00004e  481c              LDR      r0,|L3.192|
000050  6800              LDR      r0,[r0,#0]  ; sendCDMA_Q
000052  f7fffffe          BL       CirQ_Pop
;;;74     			USART_SendData(USART2, byteSend);
000056  481b              LDR      r0,|L3.196|
000058  7801              LDRB     r1,[r0,#0]  ; byteSend
00005a  4816              LDR      r0,|L3.180|
00005c  f7fffffe          BL       USART_SendData
                  |L3.96|
;;;75     		}
;;;76     		else
;;;77     		{
;;;78     			//todo:通知任务发送完成，可以发送下一包数据了
;;;79     		}
;;;80     		USART_ClearITPendingBit(USART2, USART_IT_TC) ;
000060  f2406126          MOV      r1,#0x626
000064  4813              LDR      r0,|L3.180|
000066  f7fffffe          BL       USART_ClearITPendingBit
00006a  e020              B        |L3.174|
                  |L3.108|
;;;81     	}
;;;82     	else if(USART_GetITStatus(USART2, USART_IT_TXE) != RESET)//空  发送寄存器空
00006c  f2407127          MOV      r1,#0x727
000070  4810              LDR      r0,|L3.180|
000072  f7fffffe          BL       USART_GetITStatus
000076  b1d0              CBZ      r0,|L3.174|
;;;83     	{
;;;84     		if(CirQ_GetLength(sendCDMA_Q) > 0)
000078  4811              LDR      r0,|L3.192|
00007a  6800              LDR      r0,[r0,#0]  ; sendCDMA_Q
00007c  f7fffffe          BL       CirQ_GetLength
000080  2800              CMP      r0,#0
000082  dd09              BLE      |L3.152|
;;;85     		{
;;;86     			CirQ_Pop(sendCDMA_Q,&byteSend);
000084  490f              LDR      r1,|L3.196|
000086  480e              LDR      r0,|L3.192|
000088  6800              LDR      r0,[r0,#0]  ; sendCDMA_Q
00008a  f7fffffe          BL       CirQ_Pop
;;;87     			USART_SendData(USART2, byteSend);
00008e  480d              LDR      r0,|L3.196|
000090  7801              LDRB     r1,[r0,#0]  ; byteSend
000092  4808              LDR      r0,|L3.180|
000094  f7fffffe          BL       USART_SendData
                  |L3.152|
;;;88     		}
;;;89     		else
;;;90     		{
;;;91     			 //todo:通知任务发送完成，可以发送下一包数据了
;;;92     		}
;;;93     		USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
000098  2200              MOVS     r2,#0
00009a  f2407127          MOV      r1,#0x727
00009e  4805              LDR      r0,|L3.180|
0000a0  f7fffffe          BL       USART_ITConfig
;;;94     		USART_ClearITPendingBit(USART2, USART_IT_TXE) ;
0000a4  f2407127          MOV      r1,#0x727
0000a8  4802              LDR      r0,|L3.180|
0000aa  f7fffffe          BL       USART_ClearITPendingBit
                  |L3.174|
;;;95     	}
;;;96     	
;;;97     	
;;;98     	OSIntExit();  //中断服务结束，系统进行任务调度
0000ae  f7fffffe          BL       OSIntExit
;;;99     }
0000b2  bd10              POP      {r4,pc}
;;;100    
                          ENDP

                  |L3.180|
                          DCD      0x40004400
                  |L3.184|
                          DCD      byteRece
                  |L3.188|
                          DCD      receCDMA_S
                  |L3.192|
                          DCD      sendCDMA_Q
                  |L3.196|
                          DCD      byteSend

                          AREA ||.data||, DATA, ALIGN=0

                  byteRece
000000  00                DCB      0x00
                  byteSend
000001  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\CDMA\\CDMA_Tx_Rx.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_CDMA_Tx_Rx_c_b8c990da____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___12_CDMA_Tx_Rx_c_b8c990da____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_CDMA_Tx_Rx_c_b8c990da____REVSH|
#line 144
|__asm___12_CDMA_Tx_Rx_c_b8c990da____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
