; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\obj\cdma_tx_rx.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=..\obj\cdma_tx_rx.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\OBD -I..\SYSTEM -I..\USER -I..\LIB\inc -I..\UCOSII\CONFIG -I..\UCOSII\PORT -I..\UCOSII\CORE -I..\HAEDWARE -I..\GPS -I..\CDMA -I..\DEAL -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\cdma_tx_rx.crf ..\CDMA\CDMA_Tx_Rx.c]
                          THUMB

                          AREA ||i.CDMASendByte||, CODE, READONLY, ALIGN=2

                  CDMASendByte PROC
;;;7      uint8_t aa [1000];
;;;8      void CDMASendByte(uint8_t dat)
000000  b570              PUSH     {r4-r6,lr}
;;;9      {
000002  4604              MOV      r4,r0
;;;10     #if OS_CRITICAL_METHOD == 3u           /* Allocate storage for CPU status register           */
;;;11     	OS_CPU_SR  cpu_sr = 0u;
000004  2500              MOVS     r5,#0
;;;12     #endif
;;;13     	if(CirQ_GetLength(sendCDMA_Q)>0)
000006  480b              LDR      r0,|L1.52|
000008  6800              LDR      r0,[r0,#0]  ; sendCDMA_Q
00000a  f7fffffe          BL       CirQ_GetLength
00000e  2800              CMP      r0,#0
000010  dd0b              BLE      |L1.42|
;;;14     	{
;;;15     		OS_ENTER_CRITICAL();
000012  f7fffffe          BL       OS_CPU_SR_Save
000016  4605              MOV      r5,r0
;;;16     		CirQ_OnePush(sendCDMA_Q,dat);
000018  4621              MOV      r1,r4
00001a  4806              LDR      r0,|L1.52|
00001c  6800              LDR      r0,[r0,#0]  ; sendCDMA_Q
00001e  f7fffffe          BL       CirQ_OnePush
;;;17     		OS_EXIT_CRITICAL();
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       OS_CPU_SR_Restore
000028  e003              B        |L1.50|
                  |L1.42|
;;;18     	}
;;;19     	else
;;;20     		USART_SendData(USART2, dat);
00002a  4621              MOV      r1,r4
00002c  4802              LDR      r0,|L1.56|
00002e  f7fffffe          BL       USART_SendData
                  |L1.50|
;;;21     }
000032  bd70              POP      {r4-r6,pc}
;;;22     uint8_t CDMASendDatas(const uint8_t* s,uint16_t length)
                          ENDP

                  |L1.52|
                          DCD      sendCDMA_Q
                  |L1.56|
                          DCD      0x40004400

                          AREA ||i.CDMASendDatas||, CODE, READONLY, ALIGN=2

                  CDMASendDatas PROC
;;;21     }
;;;22     uint8_t CDMASendDatas(const uint8_t* s,uint16_t length)
000000  b570              PUSH     {r4-r6,lr}
;;;23     {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;24     #if OS_CRITICAL_METHOD == 3u           /* Allocate storage for CPU status register           */
;;;25     	OS_CPU_SR  cpu_sr = 0u;
000006  2600              MOVS     r6,#0
;;;26     #endif
;;;27     //	uint8_t data;
;;;28     	if(length < 1 || length >1020)
000008  2c01              CMP      r4,#1
00000a  db02              BLT      |L2.18|
00000c  f5b47f7f          CMP      r4,#0x3fc
000010  dd01              BLE      |L2.22|
                  |L2.18|
;;;29     		return 1;
000012  2001              MOVS     r0,#1
                  |L2.20|
;;;30     	OS_ENTER_CRITICAL();
;;;31     	sendCDMA_Q->data = aa;
;;;32     	if(CirQ_Pushs(sendCDMA_Q,s,length) != OK)
;;;33     	{
;;;34     		OS_EXIT_CRITICAL();
;;;35     		return 2;
;;;36     	}
;;;37     	OS_EXIT_CRITICAL();
;;;38     	if(CirQ_GetLength(sendCDMA_Q) > 0)
;;;39     	{
;;;40     //		OS_ENTER_CRITICAL();
;;;41     //		CirQ_Pop(sendCDMA_Q,&data);
;;;42     //		OS_EXIT_CRITICAL();
;;;43     		
;;;44     		USART_ITConfig(USART2, USART_IT_TXE, ENABLE);
;;;45     //		USART_SendData(USART2, data);
;;;46     	}
;;;47     	return  0;
;;;48     	
;;;49     	
;;;50     }
000014  bd70              POP      {r4-r6,pc}
                  |L2.22|
000016  f7fffffe          BL       OS_CPU_SR_Save
00001a  4606              MOV      r6,r0                 ;30
00001c  4810              LDR      r0,|L2.96|
00001e  4911              LDR      r1,|L2.100|
000020  6809              LDR      r1,[r1,#0]            ;31  ; sendCDMA_Q
000022  6088              STR      r0,[r1,#8]            ;31
000024  4622              MOV      r2,r4                 ;32
000026  4629              MOV      r1,r5                 ;32
000028  480e              LDR      r0,|L2.100|
00002a  6800              LDR      r0,[r0,#0]            ;32  ; sendCDMA_Q
00002c  f7fffffe          BL       CirQ_Pushs
000030  b120              CBZ      r0,|L2.60|
000032  4630              MOV      r0,r6                 ;34
000034  f7fffffe          BL       OS_CPU_SR_Restore
000038  2002              MOVS     r0,#2                 ;35
00003a  e7eb              B        |L2.20|
                  |L2.60|
00003c  4630              MOV      r0,r6                 ;37
00003e  f7fffffe          BL       OS_CPU_SR_Restore
000042  4808              LDR      r0,|L2.100|
000044  6800              LDR      r0,[r0,#0]            ;38  ; sendCDMA_Q
000046  f7fffffe          BL       CirQ_GetLength
00004a  2800              CMP      r0,#0                 ;38
00004c  dd05              BLE      |L2.90|
00004e  2201              MOVS     r2,#1                 ;44
000050  f2407127          MOV      r1,#0x727             ;44
000054  4804              LDR      r0,|L2.104|
000056  f7fffffe          BL       USART_ITConfig
                  |L2.90|
00005a  2000              MOVS     r0,#0                 ;47
00005c  e7da              B        |L2.20|
;;;51     
                          ENDP

00005e  0000              DCW      0x0000
                  |L2.96|
                          DCD      ||aa||
                  |L2.100|
                          DCD      sendCDMA_Q
                  |L2.104|
                          DCD      0x40004400

                          AREA ||i.TIM3_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM3_IRQHandler PROC
;;;109    uint16_t receDatalen= 0;
;;;110    void TIM3_IRQHandler(void)   //CDMA接收超时处理定时器中断
000000  b510              PUSH     {r4,lr}
;;;111    {
;;;112    	OSIntEnter();//系统进入中断服务程序
000002  f7fffffe          BL       OSIntEnter
;;;113    	if (TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET)  //检查TIM3更新中断发生与否
000006  2101              MOVS     r1,#1
000008  4827              LDR      r0,|L3.168|
00000a  f7fffffe          BL       TIM_GetITStatus
00000e  2800              CMP      r0,#0
000010  d046              BEQ      |L3.160|
;;;114    	{
;;;115    		TIM_ClearITPendingBit(TIM3, TIM_IT_Update  );  //清除TIMx更新中断标志 
000012  2101              MOVS     r1,#1
000014  4824              LDR      r0,|L3.168|
000016  f7fffffe          BL       TIM_ClearITPendingBit
;;;116    		rxTimeOut ++;
00001a  4824              LDR      r0,|L3.172|
00001c  8800              LDRH     r0,[r0,#0]  ; rxTimeOut
00001e  1c40              ADDS     r0,r0,#1
000020  4922              LDR      r1,|L3.172|
000022  8008              STRH     r0,[r1,#0]
;;;117    		if(rxTimeOut > 10)
000024  4608              MOV      r0,r1
000026  8800              LDRH     r0,[r0,#0]  ; rxTimeOut
000028  280a              CMP      r0,#0xa
00002a  dd39              BLE      |L3.160|
;;;118    		{
;;;119    			rxTimeOut = 0;
00002c  2000              MOVS     r0,#0
00002e  8008              STRH     r0,[r1,#0]
;;;120    			receDatalen = Store_Getlength(receCDMA_S);
000030  481f              LDR      r0,|L3.176|
000032  6800              LDR      r0,[r0,#0]  ; receCDMA_S
000034  f7fffffe          BL       Store_Getlength
000038  491e              LDR      r1,|L3.180|
00003a  8008              STRH     r0,[r1,#0]
;;;121    			if(receDatalen>2 )
00003c  4608              MOV      r0,r1
00003e  8800              LDRH     r0,[r0,#0]  ; receDatalen
000040  2802              CMP      r0,#2
000042  dd25              BLE      |L3.144|
;;;122    			{
;;;123    				ptrRece = Mem_malloc(receDatalen);
000044  4608              MOV      r0,r1
000046  8800              LDRH     r0,[r0,#0]  ; receDatalen
000048  f7fffffe          BL       Mem_malloc
00004c  491a              LDR      r1,|L3.184|
00004e  6008              STR      r0,[r1,#0]  ; ptrRece
;;;124    				if(ptrRece != NULL)//内存块申请成功
000050  4608              MOV      r0,r1
000052  6800              LDR      r0,[r0,#0]  ; ptrRece
000054  b1b8              CBZ      r0,|L3.134|
;;;125    				{
;;;126    					Store_Getdates(receCDMA_S,ptrRece,receDatalen);
000056  4817              LDR      r0,|L3.180|
000058  7802              LDRB     r2,[r0,#0]  ; receDatalen
00005a  4608              MOV      r0,r1
00005c  6801              LDR      r1,[r0,#0]  ; ptrRece
00005e  4814              LDR      r0,|L3.176|
000060  6800              LDR      r0,[r0,#0]  ; receCDMA_S
000062  f7fffffe          BL       Store_Getdates
;;;127    					if(OSQPost(CDMARecieveQ,ptrRece) != OS_ERR_NONE)//推送不成功需要释放内存块
000066  4814              LDR      r0,|L3.184|
000068  6801              LDR      r1,[r0,#0]  ; ptrRece
00006a  4814              LDR      r0,|L3.188|
00006c  6800              LDR      r0,[r0,#0]  ; CDMARecieveQ
00006e  f7fffffe          BL       OSQPost
000072  b188              CBZ      r0,|L3.152|
;;;128    					{
;;;129    						Mem_free(ptrRece);
000074  4810              LDR      r0,|L3.184|
000076  6800              LDR      r0,[r0,#0]  ; ptrRece
000078  f7fffffe          BL       Mem_free
;;;130    						Store_Clear(receCDMA_S);//舍弃本次接收的数据
00007c  480c              LDR      r0,|L3.176|
00007e  6800              LDR      r0,[r0,#0]  ; receCDMA_S
000080  f7fffffe          BL       Store_Clear
000084  e008              B        |L3.152|
                  |L3.134|
;;;131    					}
;;;132    				}
;;;133    				else
;;;134    					Store_Clear(receCDMA_S);    //舍弃本次接收的数据
000086  480a              LDR      r0,|L3.176|
000088  6800              LDR      r0,[r0,#0]  ; receCDMA_S
00008a  f7fffffe          BL       Store_Clear
00008e  e003              B        |L3.152|
                  |L3.144|
;;;135    			}
;;;136    			else
;;;137    				Store_Clear(receCDMA_S);//接收的数据长度<=2 视为无效数据，没有这么短的回复
000090  4807              LDR      r0,|L3.176|
000092  6800              LDR      r0,[r0,#0]  ; receCDMA_S
000094  f7fffffe          BL       Store_Clear
                  |L3.152|
;;;138    			TIM_Cmd(TIM3, DISABLE);
000098  2100              MOVS     r1,#0
00009a  4803              LDR      r0,|L3.168|
00009c  f7fffffe          BL       TIM_Cmd
                  |L3.160|
;;;139    		}
;;;140    	}
;;;141    	OSIntExit();  //中断服务结束，系统进行任务调度
0000a0  f7fffffe          BL       OSIntExit
;;;142    }
0000a4  bd10              POP      {r4,pc}
;;;143    
                          ENDP

0000a6  0000              DCW      0x0000
                  |L3.168|
                          DCD      0x40000400
                  |L3.172|
                          DCD      rxTimeOut
                  |L3.176|
                          DCD      receCDMA_S
                  |L3.180|
                          DCD      receDatalen
                  |L3.184|
                          DCD      ptrRece
                  |L3.188|
                          DCD      CDMARecieveQ

                          AREA ||i.USART2_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART2_IRQHandler PROC
;;;58     NORMAL_STATE rxtxState;
;;;59     void USART2_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;60     {
;;;61     	OSIntEnter();//系统进入中断服务程序
000002  f7fffffe          BL       OSIntEnter
;;;62     	dkfs = receCDMA_S->base;
000006  483b              LDR      r0,|L4.244|
000008  6800              LDR      r0,[r0,#0]  ; receCDMA_S
00000a  6840              LDR      r0,[r0,#4]
00000c  493a              LDR      r1,|L4.248|
00000e  6008              STR      r0,[r1,#0]  ; dkfs
;;;63     	if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)//接收到数据
000010  f2405125          MOV      r1,#0x525
000014  4839              LDR      r0,|L4.252|
000016  f7fffffe          BL       USART_GetITStatus
00001a  b300              CBZ      r0,|L4.94|
;;;64       	{
;;;65         	byteRece = USART_ReceiveData(USART2);
00001c  4837              LDR      r0,|L4.252|
00001e  f7fffffe          BL       USART_ReceiveData
000022  4937              LDR      r1,|L4.256|
000024  7008              STRB     r0,[r1,#0]
;;;66     	
;;;67     		rxtxState = Store_Push(receCDMA_S,byteRece);   
000026  4608              MOV      r0,r1
000028  7801              LDRB     r1,[r0,#0]  ; byteRece
00002a  4832              LDR      r0,|L4.244|
00002c  6800              LDR      r0,[r0,#0]  ; receCDMA_S
00002e  f7fffffe          BL       Store_Push
000032  4934              LDR      r1,|L4.260|
000034  7008              STRB     r0,[r1,#0]
;;;68     		if(rxtxState == OK)
000036  4608              MOV      r0,r1
000038  7800              LDRB     r0,[r0,#0]  ; rxtxState
00003a  b950              CBNZ     r0,|L4.82|
;;;69     		{
;;;70     			rxTimeOut = 1;
00003c  2001              MOVS     r0,#1
00003e  4932              LDR      r1,|L4.264|
000040  8008              STRH     r0,[r1,#0]
;;;71     			TIM_SetCounter(TIM3,0); //清空计数器
000042  2100              MOVS     r1,#0
000044  4831              LDR      r0,|L4.268|
000046  f7fffffe          BL       TIM_SetCounter
;;;72     			TIM_Cmd(TIM3, ENABLE);  //使能TIMx
00004a  2101              MOVS     r1,#1
00004c  482f              LDR      r0,|L4.268|
00004e  f7fffffe          BL       TIM_Cmd
                  |L4.82|
;;;73     		}
;;;74     		USART_ClearITPendingBit(USART2, USART_IT_RXNE) ;
000052  f2405125          MOV      r1,#0x525
000056  4829              LDR      r0,|L4.252|
000058  f7fffffe          BL       USART_ClearITPendingBit
00005c  e046              B        |L4.236|
                  |L4.94|
;;;75     	}
;;;76     	else if(USART_GetITStatus(USART2, USART_IT_TC) != RESET)//发送完毕  移位寄存器空
00005e  f2406126          MOV      r1,#0x626
000062  4826              LDR      r0,|L4.252|
000064  f7fffffe          BL       USART_GetITStatus
000068  b1d0              CBZ      r0,|L4.160|
;;;77     	{
;;;78     		if(CirQ_GetLength(sendCDMA_Q) > 0)
00006a  4829              LDR      r0,|L4.272|
00006c  6800              LDR      r0,[r0,#0]  ; sendCDMA_Q
00006e  f7fffffe          BL       CirQ_GetLength
000072  2800              CMP      r0,#0
000074  dd0e              BLE      |L4.148|
;;;79     		{
;;;80     			rxtxState = CirQ_Pop(sendCDMA_Q,&byteSend);
000076  4927              LDR      r1,|L4.276|
000078  4825              LDR      r0,|L4.272|
00007a  6800              LDR      r0,[r0,#0]  ; sendCDMA_Q
00007c  f7fffffe          BL       CirQ_Pop
000080  4920              LDR      r1,|L4.260|
000082  7008              STRB     r0,[r1,#0]
;;;81     			if(rxtxState == OK)
000084  4608              MOV      r0,r1
000086  7800              LDRB     r0,[r0,#0]  ; rxtxState
000088  b920              CBNZ     r0,|L4.148|
;;;82     				USART_SendData(USART2, byteSend);
00008a  4822              LDR      r0,|L4.276|
00008c  7801              LDRB     r1,[r0,#0]  ; byteSend
00008e  481b              LDR      r0,|L4.252|
000090  f7fffffe          BL       USART_SendData
                  |L4.148|
;;;83     		}
;;;84     		else
;;;85     		{
;;;86     			//todo:通知任务发送完成，可以发送下一包数据了
;;;87     		}
;;;88     		USART_ClearITPendingBit(USART2, USART_IT_TC) ;
000094  f2406126          MOV      r1,#0x626
000098  4818              LDR      r0,|L4.252|
00009a  f7fffffe          BL       USART_ClearITPendingBit
00009e  e025              B        |L4.236|
                  |L4.160|
;;;89     	}
;;;90     	else if(USART_GetITStatus(USART2, USART_IT_TXE) != RESET)//空  发送寄存器空
0000a0  f2407127          MOV      r1,#0x727
0000a4  4815              LDR      r0,|L4.252|
0000a6  f7fffffe          BL       USART_GetITStatus
0000aa  b1f8              CBZ      r0,|L4.236|
;;;91     	{
;;;92     		if(CirQ_GetLength(sendCDMA_Q) > 0)
0000ac  4818              LDR      r0,|L4.272|
0000ae  6800              LDR      r0,[r0,#0]  ; sendCDMA_Q
0000b0  f7fffffe          BL       CirQ_GetLength
0000b4  2800              CMP      r0,#0
0000b6  dd0e              BLE      |L4.214|
;;;93     		{
;;;94     			rxtxState = CirQ_Pop(sendCDMA_Q,&byteSend);
0000b8  4916              LDR      r1,|L4.276|
0000ba  4815              LDR      r0,|L4.272|
0000bc  6800              LDR      r0,[r0,#0]  ; sendCDMA_Q
0000be  f7fffffe          BL       CirQ_Pop
0000c2  4910              LDR      r1,|L4.260|
0000c4  7008              STRB     r0,[r1,#0]
;;;95     			if(rxtxState == OK)
0000c6  4608              MOV      r0,r1
0000c8  7800              LDRB     r0,[r0,#0]  ; rxtxState
0000ca  b920              CBNZ     r0,|L4.214|
;;;96     				USART_SendData(USART2, byteSend);
0000cc  4811              LDR      r0,|L4.276|
0000ce  7801              LDRB     r1,[r0,#0]  ; byteSend
0000d0  480a              LDR      r0,|L4.252|
0000d2  f7fffffe          BL       USART_SendData
                  |L4.214|
;;;97     		}
;;;98     		else
;;;99     		{
;;;100    			 //todo:通知任务发送完成，可以发送下一包数据了
;;;101    		}
;;;102    		USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
0000d6  2200              MOVS     r2,#0
0000d8  f2407127          MOV      r1,#0x727
0000dc  4807              LDR      r0,|L4.252|
0000de  f7fffffe          BL       USART_ITConfig
;;;103    		USART_ClearITPendingBit(USART2, USART_IT_TXE) ;
0000e2  f2407127          MOV      r1,#0x727
0000e6  4805              LDR      r0,|L4.252|
0000e8  f7fffffe          BL       USART_ClearITPendingBit
                  |L4.236|
;;;104    	}
;;;105    	OSIntExit();  //中断服务结束，系统进行任务调度
0000ec  f7fffffe          BL       OSIntExit
;;;106    }
0000f0  bd10              POP      {r4,pc}
;;;107    extern OS_EVENT *CDMARecieveQ;
                          ENDP

0000f2  0000              DCW      0x0000
                  |L4.244|
                          DCD      receCDMA_S
                  |L4.248|
                          DCD      dkfs
                  |L4.252|
                          DCD      0x40004400
                  |L4.256|
                          DCD      byteRece
                  |L4.260|
                          DCD      rxtxState
                  |L4.264|
                          DCD      rxTimeOut
                  |L4.268|
                          DCD      0x40000400
                  |L4.272|
                          DCD      sendCDMA_Q
                  |L4.276|
                          DCD      byteSend

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  ||aa||
                          %        1000

                          AREA ||.data||, DATA, ALIGN=2

                  byteRece
000000  00                DCB      0x00
                  byteSend
000001  000000            DCB      0x00,0x00,0x00
                  dkfs
                          DCD      0x00000000
                  rxTimeOut
000008  0000              DCW      0x0000
                  rxtxState
00000a  0000              DCB      0x00,0x00
                  ptrRece
                          DCD      0x00000000
                  receDatalen
000010  0000              DCW      0x0000

;*** Start embedded assembler ***

#line 1 "..\\CDMA\\CDMA_Tx_Rx.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_CDMA_Tx_Rx_c_b8c990da____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___12_CDMA_Tx_Rx_c_b8c990da____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_CDMA_Tx_Rx_c_b8c990da____REVSH|
#line 144
|__asm___12_CDMA_Tx_Rx_c_b8c990da____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
